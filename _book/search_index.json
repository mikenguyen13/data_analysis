[["index.html", "A Guide on Data Analysis Preface", " A Guide on Data Analysis Mike Nguyen 2025-01-20 Preface This book is an effort to simplify and demystify the complex process of data analysis, making it accessible to a wide audience. While I do not claim to be a professional statistician, econometrician, or data scientist, I firmly believe in the value of learning through teaching and practical application. Writing this book has been as much a learning journey for me as I hope it will be for you. The intended audience includes those with little to no experience in statistics, econometrics, or data science, as well as individuals with a budding interest in these fields who are eager to deepen their knowledge. While my primary domain of interest is marketing, the principles and methods discussed in this book are universally applicable to any discipline that employs scientific methods or data analysis. I hope this book provides a valuable starting point for aspiring statisticians, econometricians, and data scientists, empowering you to navigate the fascinating world of causal inference and data analysis with confidence. "],["how-to-cite-this-book.html", "How to cite this book", " How to cite this book 1. APA (7th edition): Nguyen, M. (2020). A Guide on Data Analysis. Bookdown. https://bookdown.org/mike/data_analysis/ 2. MLA (8th edition): Nguyen, Mike. A Guide on Data Analysis. Bookdown, 2020. https://bookdown.org/mike/data_analysis/ 3. Chicago (17th edition): Nguyen, Mike. 2020. A Guide on Data Analysis. Bookdown. https://bookdown.org/mike/data_analysis/ 4. Harvard: Nguyen, M. (2020) A Guide on Data Analysis. Bookdown. Available at: https://bookdown.org/mike/data_analysis/ @book{nguyen2020guide, title={A Guide on Data Analysis}, author={Nguyen, Mike}, year={2020}, publisher={Bookdown}, url={https://bookdown.org/mike/data_analysis/} } "],["more-books.html", "More books", " More books More books by the author can be found here: Advanced Data Analysis: the second book in the data analysis series, which covers machine learning models (with a focus on prediction) Marketing Research Communication Theory "],["introduction.html", "Chapter 1 Introduction", " Chapter 1 Introduction Since the turn of the century, we have witnessed remarkable advancements and innovations, particularly in statistics, information technology, computer science, and the rapidly emerging field of data science. However, one challenge of these developments is the overuse of buzzwords like big data, machine learning, and deep learning. While these terms are powerful in context, they can sometimes obscure the foundational principles underlying their application. Every substantive field often has its own specialized metric subfield, such as: Econometrics in economics Psychometrics in psychology Chemometrics in chemistry Sabermetrics in sports analytics Biostatistics in public health and medicine To the layperson, these disciplines are often grouped under broader terms like: Data Science Applied Statistics Computational Social Science As exciting as it is to explore these new tools and techniques, I must admit that retaining these concepts can be challenging. For me, the most effective way to internalize and apply these ideas has been to document the data analysis process from start to finish. With that in mind, let’s dive in and explore the fascinating world of data analysis together. "],["general-recommendations.html", "1.1 General Recommendations", " 1.1 General Recommendations The journey of mastering data analysis is fueled by practice and repetition. The more lines of code you write, the more functions you familiarize yourself with, and the more you experiment, the more enjoyable and rewarding this process becomes. Readers can approach this book in several ways: Focused Learning: If you are interested in specific methods or tools, you can jump directly to the relevant section by navigating through the table of contents. Sequential Learning: To follow a traditional path of data analysis, start with the Linear Regression section. Experimental Approach: If you are interested in designing experiments and testing hypotheses, explore the Analysis of Variance (ANOVA) section. For those primarily interested in applications and less concerned with theoretical foundations, focus on the summary and application sections of each chapter. If a concept is unclear, consider researching the topic online. This book serves as a guide, and external resources like tutorials or articles can provide additional insights. To customize the code examples provided in this book, use R’s built-in help functions. For instance: To learn more about a specific function, type help(function_name) or ?function_name in the R console. For example, to find details about the hist function, type ?hist or help(hist) in the console. Additionally, searching online is a powerful resource (e.g., Google, ChatGPT, etc.). Different practitioners often use various R packages to achieve similar results. For instance, if you need to create a histogram in R, a simple search like “histogram in R” will provide multiple approaches and examples. By adopting these strategies, you can tailor your learning experience and maximize the value of this book. Tools of statistics Probability Theory Mathematical Analysis Computer Science Numerical Analysis Database Management Code Replication This book was built with R version 4.2.3 (2023-03-15 ucrt) and the following packages: package version source abind 1.4-5 CRAN (R 4.2.0) agridat 1.21 CRAN (R 4.2.3) ape 5.7-1 CRAN (R 4.2.3) assertthat 0.2.1 CRAN (R 4.2.3) backports 1.4.1 CRAN (R 4.2.0) bookdown 0.35 CRAN (R 4.2.3) boot 1.3-28.1 CRAN (R 4.2.3) broom 1.0.5 CRAN (R 4.2.3) bslib 0.6.1 CRAN (R 4.2.3) cachem 1.0.8 CRAN (R 4.2.3) callr 3.7.3 CRAN (R 4.2.3) car 3.1-2 CRAN (R 4.2.3) carData 3.0-5 CRAN (R 4.2.3) cellranger 1.1.0 CRAN (R 4.2.3) cli 3.6.1 CRAN (R 4.2.3) coda 0.19-4 CRAN (R 4.2.3) colorspace 2.1-0 CRAN (R 4.2.3) corpcor 1.6.10 CRAN (R 4.2.0) crayon 1.5.2 CRAN (R 4.2.3) cubature 2.1.0 CRAN (R 4.2.3) curl 5.1.0 CRAN (R 4.2.3) data.table 1.14.8 CRAN (R 4.2.3) DBI 1.2.0 CRAN (R 4.2.3) dbplyr 2.4.0 CRAN (R 4.2.3) desc 1.4.3 CRAN (R 4.2.3) devtools 2.4.5 CRAN (R 4.2.3) digest 0.6.31 CRAN (R 4.2.3) dplyr 1.1.2 CRAN (R 4.2.3) ellipsis 0.3.2 CRAN (R 4.2.3) evaluate 0.23 CRAN (R 4.2.3) extrafont 0.19 CRAN (R 4.2.2) extrafontdb 1.0 CRAN (R 4.2.0) fansi 1.0.4 CRAN (R 4.2.3) faraway 1.0.8 CRAN (R 4.2.3) fastmap 1.1.1 CRAN (R 4.2.3) forcats 1.0.0 CRAN (R 4.2.3) foreign 0.8-84 CRAN (R 4.2.3) fs 1.6.3 CRAN (R 4.2.3) generics 0.1.3 CRAN (R 4.2.3) ggplot2 3.4.4 CRAN (R 4.2.3) glue 1.6.2 CRAN (R 4.2.3) gtable 0.3.4 CRAN (R 4.2.3) haven 2.5.3 CRAN (R 4.2.3) Hmisc 5.1-0 CRAN (R 4.2.3) hms 1.1.3 CRAN (R 4.2.3) htmltools 0.5.7 CRAN (R 4.2.3) htmlwidgets 1.6.2 CRAN (R 4.2.3) httr 1.4.7 CRAN (R 4.2.3) investr 1.4.2 CRAN (R 4.2.3) jpeg 0.1-10 CRAN (R 4.2.2) jquerylib 0.1.4 CRAN (R 4.2.3) jsonlite 1.8.8 CRAN (R 4.2.3) kableExtra 1.3.4 CRAN (R 4.2.3) knitr 1.45 CRAN (R 4.2.3) lattice 0.21-8 CRAN (R 4.2.3) latticeExtra 0.6-30 CRAN (R 4.2.3) lifecycle 1.0.4 CRAN (R 4.2.3) lme4 1.1-35.1 CRAN (R 4.2.3) lmerTest 3.1-3 CRAN (R 4.2.3) lsr 0.5.2 CRAN (R 4.2.3) ltm 1.2-0 CRAN (R 4.2.3) lubridate 1.9.2 CRAN (R 4.2.3) magrittr 2.0.3 CRAN (R 4.2.3) MASS 7.3-60 CRAN (R 4.2.3) matlib 0.9.6 CRAN (R 4.2.3) Matrix 1.6-1 CRAN (R 4.2.3) MCMCglmm 2.35 CRAN (R 4.2.3) memoise 2.0.1 CRAN (R 4.2.3) mgcv 1.9-0 CRAN (R 4.2.3) minqa 1.2.6 CRAN (R 4.2.3) modelr 0.1.11 CRAN (R 4.2.3) munsell 0.5.0 CRAN (R 4.2.3) nlme 3.1-163 CRAN (R 4.2.3) nloptr 2.0.3 CRAN (R 4.2.3) nlstools 2.0-0 CRAN (R 4.2.3) nnet 7.3-19 CRAN (R 4.2.3) numDeriv 2016.8-1.1 CRAN (R 4.2.0) openxlsx 4.2.5.2 CRAN (R 4.2.3) pbkrtest 0.5.2 CRAN (R 4.2.3) pillar 1.9.0 CRAN (R 4.2.3) pkgbuild 1.4.3 CRAN (R 4.2.3) pkgconfig 2.0.3 CRAN (R 4.2.3) pkgload 1.3.3 CRAN (R 4.2.3) png 0.1-8 CRAN (R 4.2.2) ppsr 0.0.2 CRAN (R 4.2.3) prettyunits 1.2.0 CRAN (R 4.2.3) processx 3.8.2 CRAN (R 4.2.3) ps 1.7.5 CRAN (R 4.2.3) pscl 1.5.5.1 CRAN (R 4.2.3) purrr 1.0.2 CRAN (R 4.2.3) R6 2.5.1 CRAN (R 4.2.3) RColorBrewer 1.1-3 CRAN (R 4.2.0) Rcpp 1.0.11 CRAN (R 4.2.3) readr 2.1.4 CRAN (R 4.2.3) readxl 1.4.3 CRAN (R 4.2.3) remotes 2.4.2.1 CRAN (R 4.2.3) reprex 2.0.2 CRAN (R 4.2.3) rgl 1.2.1 CRAN (R 4.2.3) rio 1.0.1 CRAN (R 4.2.3) rlang 1.1.1 CRAN (R 4.2.3) RLRsim 3.1-8 CRAN (R 4.2.3) rmarkdown 2.25 CRAN (R 4.2.3) rprojroot 2.0.4 CRAN (R 4.2.3) rstudioapi 0.15.0 CRAN (R 4.2.3) Rttf2pt1 1.3.12 CRAN (R 4.2.2) rvest 1.0.3 CRAN (R 4.2.3) sass 0.4.8 CRAN (R 4.2.3) scales 1.3.0 CRAN (R 4.2.3) sessioninfo 1.2.2 CRAN (R 4.2.3) stringi 1.7.12 CRAN (R 4.2.2) stringr 1.5.1 CRAN (R 4.2.3) svglite 2.1.1 CRAN (R 4.2.3) systemfonts 1.0.5 CRAN (R 4.2.3) tensorA 0.36.2 CRAN (R 4.2.0) testthat 3.1.10 CRAN (R 4.2.3) tibble 3.2.1 CRAN (R 4.2.3) tidyr 1.3.0 CRAN (R 4.2.3) tidyselect 1.2.0 CRAN (R 4.2.3) tidyverse 2.0.0 CRAN (R 4.2.3) tzdb 0.4.0 CRAN (R 4.2.3) usethis 2.2.2 CRAN (R 4.2.3) utf8 1.2.3 CRAN (R 4.2.3) vctrs 0.6.3 CRAN (R 4.2.3) viridisLite 0.4.2 CRAN (R 4.2.3) webshot 0.5.5 CRAN (R 4.2.3) withr 2.5.2 CRAN (R 4.2.3) xfun 0.39 CRAN (R 4.2.3) xml2 1.3.6 CRAN (R 4.2.3) xtable 1.8-4 CRAN (R 4.2.3) yaml 2.3.7 CRAN (R 4.2.3) zip 2.3.0 CRAN (R 4.2.3) #&gt; ─ Session info ─────────────────────────────────────────────────────────────── #&gt; setting value #&gt; version R version 4.2.3 (2023-03-15 ucrt) #&gt; os Windows 10 x64 (build 22631) #&gt; system x86_64, mingw32 #&gt; ui RTerm #&gt; language (EN) #&gt; collate English_United States.utf8 #&gt; ctype English_United States.utf8 #&gt; tz America/Los_Angeles #&gt; date 2024-02-08 #&gt; pandoc 3.1.1 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown) #&gt; #&gt; ─ Packages ─────────────────────────────────────────────────────────────────── #&gt; package * version date (UTC) lib source #&gt; bookdown 0.35 2023-08-09 [1] CRAN (R 4.2.3) #&gt; bslib 0.6.1 2023-11-28 [1] CRAN (R 4.2.3) #&gt; cachem 1.0.8 2023-05-01 [1] CRAN (R 4.2.3) #&gt; cli 3.6.1 2023-03-23 [1] CRAN (R 4.2.3) #&gt; codetools 0.2-19 2023-02-01 [1] CRAN (R 4.2.3) #&gt; colorspace 2.1-0 2023-01-23 [1] CRAN (R 4.2.3) #&gt; desc 1.4.3 2023-12-10 [1] CRAN (R 4.2.3) #&gt; devtools 2.4.5 2022-10-11 [1] CRAN (R 4.2.3) #&gt; digest 0.6.31 2022-12-11 [1] CRAN (R 4.2.3) #&gt; dplyr * 1.1.2 2023-04-20 [1] CRAN (R 4.2.3) #&gt; ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.2.3) #&gt; evaluate 0.23 2023-11-01 [1] CRAN (R 4.2.3) #&gt; fansi 1.0.4 2023-01-22 [1] CRAN (R 4.2.3) #&gt; fastmap 1.1.1 2023-02-24 [1] CRAN (R 4.2.3) #&gt; forcats * 1.0.0 2023-01-29 [1] CRAN (R 4.2.3) #&gt; fs 1.6.3 2023-07-20 [1] CRAN (R 4.2.3) #&gt; generics 0.1.3 2022-07-05 [1] CRAN (R 4.2.3) #&gt; ggplot2 * 3.4.4 2023-10-12 [1] CRAN (R 4.2.3) #&gt; glue 1.6.2 2022-02-24 [1] CRAN (R 4.2.3) #&gt; gtable 0.3.4 2023-08-21 [1] CRAN (R 4.2.3) #&gt; highr 0.10 2022-12-22 [1] CRAN (R 4.2.3) #&gt; hms 1.1.3 2023-03-21 [1] CRAN (R 4.2.3) #&gt; htmltools 0.5.7 2023-11-03 [1] CRAN (R 4.2.3) #&gt; htmlwidgets 1.6.2 2023-03-17 [1] CRAN (R 4.2.3) #&gt; httpuv 1.6.11 2023-05-11 [1] CRAN (R 4.2.3) #&gt; jpeg * 0.1-10 2022-11-29 [1] CRAN (R 4.2.2) #&gt; jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.2.3) #&gt; jsonlite 1.8.8 2023-12-04 [1] CRAN (R 4.2.3) #&gt; knitr 1.45 2023-10-30 [1] CRAN (R 4.2.3) #&gt; later 1.3.1 2023-05-02 [1] CRAN (R 4.2.3) #&gt; lifecycle 1.0.4 2023-11-07 [1] CRAN (R 4.2.3) #&gt; lubridate * 1.9.2 2023-02-10 [1] CRAN (R 4.2.3) #&gt; magrittr 2.0.3 2022-03-30 [1] CRAN (R 4.2.3) #&gt; memoise 2.0.1 2021-11-26 [1] CRAN (R 4.2.3) #&gt; mime 0.12 2021-09-28 [1] CRAN (R 4.2.0) #&gt; miniUI 0.1.1.1 2018-05-18 [1] CRAN (R 4.2.3) #&gt; munsell 0.5.0 2018-06-12 [1] CRAN (R 4.2.3) #&gt; pillar 1.9.0 2023-03-22 [1] CRAN (R 4.2.3) #&gt; pkgbuild 1.4.3 2023-12-10 [1] CRAN (R 4.2.3) #&gt; pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.2.3) #&gt; pkgload 1.3.3 2023-09-22 [1] CRAN (R 4.2.3) #&gt; profvis 0.3.8 2023-05-02 [1] CRAN (R 4.2.3) #&gt; promises 1.2.1 2023-08-10 [1] CRAN (R 4.2.3) #&gt; purrr * 1.0.2 2023-08-10 [1] CRAN (R 4.2.3) #&gt; R6 2.5.1 2021-08-19 [1] CRAN (R 4.2.3) #&gt; Rcpp 1.0.11 2023-07-06 [1] CRAN (R 4.2.3) #&gt; readr * 2.1.4 2023-02-10 [1] CRAN (R 4.2.3) #&gt; remotes 2.4.2.1 2023-07-18 [1] CRAN (R 4.2.3) #&gt; rlang 1.1.1 2023-04-28 [1] CRAN (R 4.2.3) #&gt; rmarkdown 2.25 2023-09-18 [1] CRAN (R 4.2.3) #&gt; rstudioapi 0.15.0 2023-07-07 [1] CRAN (R 4.2.3) #&gt; sass 0.4.8 2023-12-06 [1] CRAN (R 4.2.3) #&gt; scales * 1.3.0 2023-11-28 [1] CRAN (R 4.2.3) #&gt; sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.2.3) #&gt; shiny 1.7.5 2023-08-12 [1] CRAN (R 4.2.3) #&gt; stringi 1.7.12 2023-01-11 [1] CRAN (R 4.2.2) #&gt; stringr * 1.5.1 2023-11-14 [1] CRAN (R 4.2.3) #&gt; tibble * 3.2.1 2023-03-20 [1] CRAN (R 4.2.3) #&gt; tidyr * 1.3.0 2023-01-24 [1] CRAN (R 4.2.3) #&gt; tidyselect 1.2.0 2022-10-10 [1] CRAN (R 4.2.3) #&gt; tidyverse * 2.0.0 2023-02-22 [1] CRAN (R 4.2.3) #&gt; timechange 0.2.0 2023-01-11 [1] CRAN (R 4.2.3) #&gt; tzdb 0.4.0 2023-05-12 [1] CRAN (R 4.2.3) #&gt; urlchecker 1.0.1 2021-11-30 [1] CRAN (R 4.2.3) #&gt; usethis 2.2.2 2023-07-06 [1] CRAN (R 4.2.3) #&gt; utf8 1.2.3 2023-01-31 [1] CRAN (R 4.2.3) #&gt; vctrs 0.6.3 2023-06-14 [1] CRAN (R 4.2.3) #&gt; withr 2.5.2 2023-10-30 [1] CRAN (R 4.2.3) #&gt; xfun 0.39 2023-04-20 [1] CRAN (R 4.2.3) #&gt; xtable 1.8-4 2019-04-21 [1] CRAN (R 4.2.3) #&gt; yaml 2.3.7 2023-01-23 [1] CRAN (R 4.2.3) #&gt; #&gt; [1] C:/Program Files/R/R-4.2.3/library #&gt; #&gt; ────────────────────────────────────────────────────────────────────────────── "],["prerequisites.html", "Chapter 2 Prerequisites", " Chapter 2 Prerequisites This chapter serves as a concise review of fundamental concepts in Matrix Theory and Probability Theory. If you are confident in your understanding of these topics, you can proceed directly to the Descriptive Statistics section to begin exploring applied data analysis. "],["matrix-theory.html", "2.1 Matrix Theory", " 2.1 Matrix Theory Matrix \\(A\\) represents the original matrix. It’s a 2x2 matrix with elements \\(a_{ij}\\), where \\(i\\) represents the row and \\(j\\) represents the column. \\[ A = \\begin{bmatrix} a_{11} &amp; a_{12} \\\\ a_{21} &amp; a_{22} \\end{bmatrix} \\] \\(A&#39;\\) is the transpose of \\(A\\). The transpose of a matrix flips its rows and columns. \\[ A&#39; = \\begin{bmatrix} a_{11} &amp; a_{21} \\\\ a_{12} &amp; a_{22} \\end{bmatrix} \\] Fundamental properties and rules of matrices, essential for understanding operations in linear algebra: \\[ \\begin{aligned} \\mathbf{(ABC)&#39;} &amp; = \\mathbf{C&#39;B&#39;A&#39;} \\quad &amp;\\text{(Transpose reverses order in a product)} \\\\ \\mathbf{A(B+C)} &amp; = \\mathbf{AB + AC} \\quad &amp;\\text{(Distributive property)} \\\\ \\mathbf{AB} &amp; \\neq \\mathbf{BA} \\quad &amp;\\text{(Multiplication is not commutative)} \\\\ \\mathbf{(A&#39;)&#39;} &amp; = \\mathbf{A} \\quad &amp;\\text{(Double transpose is the original matrix)} \\\\ \\mathbf{(A+B)&#39;} &amp; = \\mathbf{A&#39; + B&#39;} \\quad &amp;\\text{(Transpose of a sum is the sum of transposes)} \\\\ \\mathbf{(AB)&#39;} &amp; = \\mathbf{B&#39;A&#39;} \\quad &amp;\\text{(Transpose reverses order in a product)} \\\\ \\mathbf{(AB)^{-1}} &amp; = \\mathbf{B^{-1}A^{-1}} \\quad &amp;\\text{(Inverse reverses order in a product)} \\\\ \\mathbf{A+B} &amp; = \\mathbf{B + A} \\quad &amp;\\text{(Addition is commutative)} \\\\ \\mathbf{AA^{-1}} &amp; = \\mathbf{I} \\quad &amp;\\text{(Matrix times its inverse is identity)} \\end{aligned} \\] These properties are critical in solving systems of equations, optimizing models, and performing data transformations. If a matrix \\(\\mathbf{A}\\) has an inverse, it is called invertible. If \\(\\mathbf{A}\\) does not have an inverse, it is referred to as singular. The product of two matrices \\(\\mathbf{A}\\) and \\(\\mathbf{B}\\) is computed as: \\[ \\begin{aligned} \\mathbf{A} &amp;= \\begin{bmatrix} a_{11} &amp; a_{12} &amp; a_{13} \\\\ a_{21} &amp; a_{22} &amp; a_{23} \\end{bmatrix} \\begin{bmatrix} b_{11} &amp; b_{12} &amp; b_{13} \\\\ b_{21} &amp; b_{22} &amp; b_{23} \\\\ b_{31} &amp; b_{32} &amp; b_{33} \\end{bmatrix} \\\\ &amp;= \\begin{bmatrix} a_{11}b_{11}+a_{12}b_{21}+a_{13}b_{31} &amp; \\sum_{i=1}^{3}a_{1i}b_{i2} &amp; \\sum_{i=1}^{3}a_{1i}b_{i3} \\\\ \\sum_{i=1}^{3}a_{2i}b_{i1} &amp; \\sum_{i=1}^{3}a_{2i}b_{i2} &amp; \\sum_{i=1}^{3}a_{2i}b_{i3} \\end{bmatrix} \\end{aligned} \\] Quadratic Form Let \\(\\mathbf{a}\\) be a \\(3 \\times 1\\) vector. The quadratic form involving a matrix \\(\\mathbf{B}\\) is given by: \\[ \\mathbf{a&#39;Ba} = \\sum_{i=1}^{3}\\sum_{j=1}^{3}a_i b_{ij} a_{j} \\] Length of a Vector The length (or 2-norm) of a vector \\(\\mathbf{a}\\), denoted as \\(||\\mathbf{a}||\\), is defined as the square root of the inner product of the vector with itself: \\[ ||\\mathbf{a}|| = \\sqrt{\\mathbf{a&#39;a}} \\] 2.1.1 Rank of a Matrix The rank of a matrix refers to: The dimension of the space spanned by its columns (or rows). The number of linearly independent columns or rows. For an \\(n \\times k\\) matrix \\(\\mathbf{A}\\) and a \\(k \\times k\\) matrix \\(\\mathbf{B}\\), the following properties hold: \\(\\text{rank}(\\mathbf{A}) \\leq \\min(n, k)\\) \\(\\text{rank}(\\mathbf{A}) = \\text{rank}(\\mathbf{A&#39;}) = \\text{rank}(\\mathbf{A&#39;A}) = \\text{rank}(\\mathbf{AA&#39;})\\) \\(\\text{rank}(\\mathbf{AB}) = \\min(\\text{rank}(\\mathbf{A}), \\text{rank}(\\mathbf{B}))\\) \\(\\mathbf{B}\\) is invertible (non-singular) if and only if \\(\\text{rank}(\\mathbf{B}) = k\\). 2.1.2 Inverse of a Matrix In scalar algebra, if \\(a = 0\\), then \\(1/a\\) does not exist. In matrix algebra, a matrix is invertible if it is non-singular, meaning it has a non-zero determinant and its inverse exists. A square matrix \\(\\mathbf{A}\\) is invertible if there exists another square matrix \\(\\mathbf{B}\\) such that: \\[ \\mathbf{AB} = \\mathbf{I} \\quad \\text{(Identity Matrix)}. \\] In this case, \\(\\mathbf{A}^{-1} = \\mathbf{B}\\). For a \\(2 \\times 2\\) matrix: \\[ \\mathbf{A} = \\begin{bmatrix} a &amp; b \\\\ c &amp; d \\end{bmatrix} \\] The inverse is: \\[ \\mathbf{A}^{-1} = \\frac{1}{ad-bc} \\begin{bmatrix} d &amp; -b \\\\ -c &amp; a \\end{bmatrix} \\] This inverse exists only if \\(ad - bc \\neq 0\\), where \\(ad - bc\\) is the determinant of \\(\\mathbf{A}\\). For a partitioned block matrix: \\[ \\begin{bmatrix} A &amp; B \\\\ C &amp; D \\end{bmatrix}^{-1} = \\begin{bmatrix} \\mathbf{(A-BD^{-1}C)^{-1}} &amp; \\mathbf{-(A-BD^{-1}C)^{-1}BD^{-1}} \\\\ \\mathbf{-D^{-1}C(A-BD^{-1}C)^{-1}} &amp; \\mathbf{D^{-1}+D^{-1}C(A-BD^{-1}C)^{-1}BD^{-1}} \\end{bmatrix} \\] This formula assumes that \\(\\mathbf{D}\\) and \\(\\mathbf{A - BD^{-1}C}\\) are invertible. Properties of the Inverse for Non-Singular Matrices \\(\\mathbf{(A^{-1})^{-1}} = \\mathbf{A}\\) For a non-zero scalar \\(b\\), \\(\\mathbf{(bA)^{-1} = b^{-1}A^{-1}}\\) For a matrix \\(\\mathbf{B}\\), \\(\\mathbf{(BA)^{-1} = B^{-1}A^{-1}}\\) (only if \\(\\mathbf{B}\\) is non-singular). \\(\\mathbf{(A^{-1})&#39; = (A&#39;)^{-1}}\\) (the transpose of the inverse equals the inverse of the transpose). Never notate \\(\\mathbf{1/A}\\); use \\(\\mathbf{A^{-1}}\\) instead. Notes: - The determinant of a matrix determines whether it is invertible. For square matrices, a determinant of \\(0\\) means the matrix is singular and has no inverse. - Always verify the conditions for invertibility, particularly when dealing with partitioned or block matrices. 2.1.3 Definiteness of a Matrix A symmetric square \\(k \\times k\\) matrix \\(\\mathbf{A}\\) is classified based on the following conditions: Positive Semi-Definite (PSD): \\(\\mathbf{A}\\) is PSD if, for any non-zero \\(k \\times 1\\) vector \\(\\mathbf{x}\\): \\[ \\mathbf{x&#39;Ax \\geq 0}. \\] Negative Semi-Definite (NSD): \\(\\mathbf{A}\\) is NSD if, for any non-zero \\(k \\times 1\\) vector \\(\\mathbf{x}\\): \\[ \\mathbf{x&#39;Ax \\leq 0}. \\] Indefinite: \\(\\mathbf{A}\\) is indefinite if it is neither PSD nor NSD. The identity matrix is always positive definite (PD). Example Let \\(\\mathbf{x} = (x_1, x_2)&#39;\\), and consider a \\(2 \\times 2\\) identity matrix \\(\\mathbf{I}\\): \\[ \\begin{aligned} \\mathbf{x&#39;Ix} &amp;= (x_1, x_2) \\begin{bmatrix} 1 &amp; 0 \\\\ 0 &amp; 1 \\end{bmatrix} \\begin{bmatrix} x_1 \\\\ x_2 \\end{bmatrix} \\\\ &amp;= (x_1, x_2) \\begin{bmatrix} x_1 \\\\ x_2 \\end{bmatrix} \\\\ &amp;= x_1^2 + x_2^2 \\geq 0. \\end{aligned} \\] Thus, \\(\\mathbf{I}\\) is PD because \\(\\mathbf{x&#39;Ix} &gt; 0\\) for all non-zero \\(\\mathbf{x}\\). Properties of Definiteness Any variance-covariance matrix is PSD. A matrix \\(\\mathbf{A}\\) is PSD if and only if there exists a matrix \\(\\mathbf{B}\\) such that: \\[ \\mathbf{A = B&#39;B}. \\] If \\(\\mathbf{A}\\) is PSD, then \\(\\mathbf{B&#39;AB}\\) is also PSD for any conformable matrix \\(\\mathbf{B}\\). If \\(\\mathbf{A}\\) and \\(\\mathbf{C}\\) are non-singular, then \\(\\mathbf{A - C}\\) is PSD if and only if \\(\\mathbf{C^{-1} - A^{-1}}\\) is PSD. If \\(\\mathbf{A}\\) is PD (or ND), then \\(\\mathbf{A^{-1}}\\) is also PD (or ND). Notes An indefinite matrix \\(\\mathbf{A}\\) is neither PSD nor NSD. This concept does not have a direct counterpart in scalar algebra. If a square matrix is PSD and invertible, then it is PD. Examples of Definiteness Invertible / Indefinite: \\[ \\begin{bmatrix} -1 &amp; 0 \\\\ 0 &amp; 10 \\end{bmatrix} \\] Non-Invertible / Indefinite: \\[ \\begin{bmatrix} 0 &amp; 1 \\\\ 0 &amp; 0 \\end{bmatrix} \\] Invertible / PSD: \\[ \\begin{bmatrix} 1 &amp; 0 \\\\ 0 &amp; 1 \\end{bmatrix} \\] Non-Invertible / PSD: \\[ \\begin{bmatrix} 0 &amp; 0 \\\\ 0 &amp; 1 \\end{bmatrix} \\] 2.1.4 Matrix Calculus Consider a scalar function \\(y = f(x_1, x_2, \\dots, x_k) = f(x)\\), where \\(x\\) is a \\(1 \\times k\\) row vector. 2.1.4.1 Gradient (First-Order Derivative) The gradient, or the first-order derivative of \\(f(x)\\) with respect to the vector \\(x\\), is given by: \\[ \\frac{\\partial f(x)}{\\partial x} = \\begin{bmatrix} \\frac{\\partial f(x)}{\\partial x_1} \\\\ \\frac{\\partial f(x)}{\\partial x_2} \\\\ \\vdots \\\\ \\frac{\\partial f(x)}{\\partial x_k} \\end{bmatrix} \\] 2.1.4.2 Hessian (Second-Order Derivative) The Hessian, or the second-order derivative of \\(f(x)\\) with respect to \\(x\\), is a symmetric matrix defined as: \\[ \\frac{\\partial^2 f(x)}{\\partial x \\partial x&#39;} = \\begin{bmatrix} \\frac{\\partial^2 f(x)}{\\partial x_1^2} &amp; \\frac{\\partial^2 f(x)}{\\partial x_1 \\partial x_2} &amp; \\cdots &amp; \\frac{\\partial^2 f(x)}{\\partial x_1 \\partial x_k} \\\\ \\frac{\\partial^2 f(x)}{\\partial x_2 \\partial x_1} &amp; \\frac{\\partial^2 f(x)}{\\partial x_2^2} &amp; \\cdots &amp; \\frac{\\partial^2 f(x)}{\\partial x_2 \\partial x_k} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\frac{\\partial^2 f(x)}{\\partial x_k \\partial x_1} &amp; \\frac{\\partial^2 f(x)}{\\partial x_k \\partial x_2} &amp; \\cdots &amp; \\frac{\\partial^2 f(x)}{\\partial x_k^2} \\end{bmatrix} \\] 2.1.4.3 Derivative of a Scalar Function with Respect to a Matrix Let \\(f(\\mathbf{X})\\) be a scalar function, where \\(\\mathbf{X}\\) is an \\(n \\times p\\) matrix. The derivative is: \\[ \\frac{\\partial f(\\mathbf{X})}{\\partial \\mathbf{X}} = \\begin{bmatrix} \\frac{\\partial f(\\mathbf{X})}{\\partial x_{11}} &amp; \\cdots &amp; \\frac{\\partial f(\\mathbf{X})}{\\partial x_{1p}} \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\frac{\\partial f(\\mathbf{X})}{\\partial x_{n1}} &amp; \\cdots &amp; \\frac{\\partial f(\\mathbf{X})}{\\partial x_{np}} \\end{bmatrix} \\] 2.1.4.4 Common Matrix Derivatives If \\(\\mathbf{a}\\) is a vector and \\(\\mathbf{A}\\) is a matrix independent of \\(\\mathbf{y}\\): \\(\\frac{\\partial \\mathbf{a&#39;y}}{\\partial \\mathbf{y}} = \\mathbf{a}\\) \\(\\frac{\\partial \\mathbf{y&#39;y}}{\\partial \\mathbf{y}} = 2\\mathbf{y}\\) \\(\\frac{\\partial \\mathbf{y&#39;Ay}}{\\partial \\mathbf{y}} = (\\mathbf{A} + \\mathbf{A&#39;})\\mathbf{y}\\) If \\(\\mathbf{X}\\) is symmetric: \\(\\frac{\\partial |\\mathbf{X}|}{\\partial x_{ij}} = \\begin{cases} X_{ii}, &amp; i = j \\\\ X_{ij}, &amp; i \\neq j \\end{cases}\\) where \\(X_{ij}\\) is the \\((i,j)\\)-th cofactor of \\(\\mathbf{X}\\). If \\(\\mathbf{X}\\) is symmetric and \\(\\mathbf{A}\\) is a matrix independent of \\(\\mathbf{X}\\): \\(\\frac{\\partial \\text{tr}(\\mathbf{XA})}{\\partial \\mathbf{X}} = \\mathbf{A} + \\mathbf{A&#39;} - \\text{diag}(\\mathbf{A})\\). If \\(\\mathbf{X}\\) is symmetric, let \\(\\mathbf{J}_{ij}\\) be a matrix with 1 at the \\((i,j)\\)-th position and 0 elsewhere: \\(\\frac{\\partial \\mathbf{X}^{-1}}{\\partial x_{ij}} = \\begin{cases} -\\mathbf{X}^{-1}\\mathbf{J}_{ii}\\mathbf{X}^{-1}, &amp; i = j \\\\ -\\mathbf{X}^{-1}(\\mathbf{J}_{ij} + \\mathbf{J}_{ji})\\mathbf{X}^{-1}, &amp; i \\neq j \\end{cases}.\\) 2.1.5 Optimization in Scalar and Vector Spaces Optimization is the process of finding the minimum or maximum of a function. The conditions for optimization differ depending on whether the function involves a scalar or a vector. Below is a comparison of scalar and vector optimization: Condition Scalar Optimization Vector Optimization First-Order Condition \\[\\frac{\\partial f(x_0)}{\\partial x} = 0\\] \\[\\frac{\\partial f(x_0)}{\\partial x} = \\begin{bmatrix} 0 \\\\ \\vdots \\\\ 0 \\end{bmatrix}\\] Second-Order Condition For convex functions, this implies a minimum. \\[\\frac{\\partial^2 f(x_0)}{\\partial x^2} &gt; 0\\] \\[\\frac{\\partial^2 f(x_0)}{\\partial x \\partial x&#39;} &gt; 0\\] For concave functions, this implies a maximum. \\[\\frac{\\partial^2 f(x_0)}{\\partial x^2} &lt; 0\\] \\[\\frac{\\partial^2 f(x_0)}{\\partial x \\partial x&#39;} &lt; 0\\] Key Concepts First-Order Condition: The first-order derivative of the function must equal zero at a critical point. This holds for both scalar and vector functions: In the scalar case, \\(\\frac{\\partial f(x)}{\\partial x} = 0\\) identifies critical points. In the vector case, \\(\\frac{\\partial f(x)}{\\partial x}\\) is a gradient vector, and the condition is satisfied when all elements of the gradient are zero. Second-Order Condition: The second-order derivative determines whether the critical point is a minimum, maximum, or saddle point: For scalar functions, \\(\\frac{\\partial^2 f(x)}{\\partial x^2} &gt; 0\\) implies a local minimum, while \\(\\frac{\\partial^2 f(x)}{\\partial x^2} &lt; 0\\) implies a local maximum. For vector functions, the Hessian matrix \\(\\frac{\\partial^2 f(x)}{\\partial x \\partial x&#39;}\\) must be: Positive Definite: For a minimum (convex function). Negative Definite: For a maximum (concave function). Indefinite: For a saddle point (neither minimum nor maximum). Convex and Concave Functions: A function \\(f(x)\\) is: Convex if \\(\\frac{\\partial^2 f(x)}{\\partial x^2} &gt; 0\\) or the Hessian \\(\\frac{\\partial^2 f(x)}{\\partial x \\partial x&#39;}\\) is positive definite. Concave if \\(\\frac{\\partial^2 f(x)}{\\partial x^2} &lt; 0\\) or the Hessian is negative definite. Convexity ensures global optimization for minimization problems, while concavity ensures global optimization for maximization problems. Hessian Matrix: In vector optimization, the Hessian \\(\\frac{\\partial^2 f(x)}{\\partial x \\partial x&#39;}\\) plays a crucial role in determining the nature of critical points: Positive definite Hessian: All eigenvalues are positive. Negative definite Hessian: All eigenvalues are negative. Indefinite Hessian: Eigenvalues have mixed signs. 2.1.6 Cholesky Decomposition In statistical analysis and numerical linear algebra, decomposing matrices into more tractable forms is crucial for efficient computation. One such important factorization is the Cholesky Decomposition. It applies to Hermitian (in the complex case) or symmetric (in the real case), positive-definite matrices. Given an \\(n \\times n\\) positive-definite matrix \\(A\\), the Cholesky Decomposition states: \\[ A = L L^{*}, \\] where: \\(L\\) is a lower-triangular matrix with strictly positive diagonal entries. \\(L^{*}\\) denotes the conjugate transpose of \\(L\\) (simply the transpose \\(L^{T}\\) for real matrices). Cholesky Decomposition is both computationally efficient and numerically stable, making it a go-to technique for many applications—particularly in statistics where we deal extensively with covariance matrices, linear systems, and probability distributions. Before diving into how we compute a Cholesky Decomposition, we need to clarify what it means for a matrix to be positive-definite. For a real symmetric matrix \\(A\\): \\(A\\) is positive-definite if for every nonzero vector \\(x\\), we have \\[ x^T A \\, x &gt; 0. \\] Alternatively, you can characterize positive-definiteness by noting that all eigenvalues of \\(A\\) are strictly positive. Many important matrices in statistics—particularly covariance or precision matrices—are both symmetric and positive-definite. 2.1.6.1 Existence A real \\(n \\times n\\) matrix \\(A\\) that is symmetric and positive-definite always admits a Cholesky Decomposition \\(A = L L^T\\). This theorem guarantees that for any covariance matrix in statistics—assuming it is valid (i.e., positive-definite)—we can decompose it via Cholesky. 2.1.6.2 Uniqueness If we additionally require that the diagonal entries of \\(L\\) are strictly positive, then \\(L\\) is unique. That is, no other lower-triangular matrix with strictly positive diagonal entries will produce the same factorization. This uniqueness is helpful for ensuring consistent numerical outputs in software implementations. 2.1.6.3 Constructing the Cholesky Factor \\(L\\) Given a real, symmetric, positive-definite matrix \\(A \\in \\mathbb{R}^{n \\times n}\\), we want to find the lower-triangular matrix \\(L\\) such that \\(A = LL^T\\). One way to do this is by using a simple step-by-step procedure (often part of standard linear algebra libraries): Initialize \\(L\\) to be an \\(n \\times n\\) zero matrix. Iterate through the rows \\(i = 1, 2, \\dots, n\\): For each row \\(i\\), compute \\[ L_{ii} = \\sqrt{A_{ii} - \\sum_{k=1}^{i-1} L_{ik}^2}. \\] For each column \\(j = i+1, i+2, \\dots, n\\): \\[ L_{ji} = \\frac{1}{L_{ii}} \\Bigl(A_{ji} - \\sum_{k=1}^{i-1} L_{jk} L_{ik}\\Bigr). \\] All other entries of \\(L\\) remain zero or are computed in subsequent steps. Result: \\(L\\) is lower-triangular, and \\(L^T\\) is its transpose. Cholesky Decomposition is roughly half the computational cost of a more general LU Decomposition. Specifically, it requires on the order of \\(\\frac{1}{3} n^3\\) floating-point operations (flops), making it significantly more efficient in practice than other decompositions for positive-definite systems. 2.1.6.4 Illustrative Example Consider a small \\(3 \\times 3\\) positive-definite matrix: \\[ A = \\begin{pmatrix} 4 &amp; 2 &amp; 4 \\\\ 2 &amp; 5 &amp; 6 \\\\ 4 &amp; 6 &amp; 20 \\end{pmatrix}. \\] We claim \\(A\\) is positive-definite (one could check by calculating principal minors or verifying \\(x^T A x &gt; 0\\) for all \\(x \\neq 0\\)). We find \\(L\\) step-by-step: Compute \\(L_{11}\\): \\[ L_{11} = \\sqrt{A_{11}} = \\sqrt{4} = 2. \\] Compute \\(L_{21}\\) and \\(L_{31}\\): \\(L_{21} = \\frac{A_{21}}{L_{11}} = \\frac{2}{2} = 1.\\) \\(L_{31} = \\frac{A_{31}}{L_{11}} = \\frac{4}{2} = 2.\\) Compute \\(L_{22}\\): \\[ L_{22} = \\sqrt{A_{22} - L_{21}^2} = \\sqrt{5 - 1^2} = \\sqrt{4} = 2. \\] Compute \\(L_{32}\\): \\[ L_{32} = \\frac{A_{32} - L_{31} L_{21}}{L_{22}} = \\frac{6 - (2)(1)}{2} = \\frac{4}{2} = 2. \\] Compute \\(L_{33}\\): \\[ L_{33} = \\sqrt{A_{33} - (L_{31}^2 + L_{32}^2)} = \\sqrt{20 - (2^2 + 2^2)} = \\sqrt{20 - 8} = \\sqrt{12} = 2\\sqrt{3}. \\] Thus, \\[ L = \\begin{pmatrix} 2 &amp; 0 &amp; 0 \\\\ 1 &amp; 2 &amp; 0 \\\\ 2 &amp; 2 &amp; 2\\sqrt{3} \\end{pmatrix}. \\] One can verify \\(L L^T = A\\). 2.1.6.5 Applications in Statistics 2.1.6.5.1 Solving Linear Systems A common statistical problem is solving \\(A x = b\\) for \\(x\\). For instance, in regression or in computing Bayesian posterior modes, we often need to solve linear equations with covariance or precision matrices. With \\(A = LL^T\\): Forward Substitution: Solve \\(L \\, y = b\\). Backward Substitution: Solve \\(L^T x = y\\). This two-step process is more stable and efficient than directly inverting \\(A\\) (which is typically discouraged due to numerical issues). 2.1.6.5.2 Generating Correlated Random Vectors In simulation-based statistics (e.g., Monte Carlo methods), we often need to generate random draws from a multivariate normal distribution \\(\\mathcal{N}(\\mu, \\Sigma)\\), where \\(\\Sigma\\) is the covariance matrix. The steps are: Generate a vector \\(z \\sim \\mathcal{N}(0, I)\\) of independent standard normal variables. Compute \\(x = \\mu + Lz\\), where \\(\\Sigma = LL^T\\). Then \\(x\\) has the desired covariance structure \\(\\Sigma\\). This technique is widely used in Bayesian statistics (e.g., MCMC sampling) and financial modeling (e.g., portfolio simulations). 2.1.6.5.3 Gaussian Processes and Kriging In Gaussian Process modeling (common in spatial statistics, machine learning, and geostatistics), we frequently work with large covariance matrices that describe the correlations between observed data points: \\[ \\Sigma = \\begin{pmatrix} k(x_1, x_1) &amp; k(x_1, x_2) &amp; \\cdots &amp; k(x_1, x_n) \\\\ k(x_2, x_1) &amp; k(x_2, x_2) &amp; \\cdots &amp; k(x_2, x_n) \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ k(x_n, x_1) &amp; k(x_n, x_2) &amp; \\cdots &amp; k(x_n, x_n) \\end{pmatrix}, \\] where \\(k(\\cdot, \\cdot)\\) is a covariance (kernel) function. We may need to invert or factorize \\(\\Sigma\\) repeatedly to evaluate the log-likelihood: \\[ \\log \\mathcal{L}(\\theta) \\sim - \\tfrac{1}{2} \\bigl( y - m(\\theta) \\bigr)^T \\Sigma^{-1} \\bigl( y - m(\\theta) \\bigr) - \\tfrac{1}{2} \\log \\bigl| \\Sigma \\bigr|, \\] where \\(m(\\theta)\\) is the mean function and \\(\\theta\\) are parameters. Using the Cholesky factor \\(L\\) of \\(\\Sigma\\) helps: \\(\\Sigma^{-1}\\) can be implied by solving systems with \\(L\\) instead of explicitly computing the inverse. \\(\\log|\\Sigma|\\) can be computed as \\(2 \\sum_{i=1}^n \\log L_{ii}\\). Hence, Cholesky Decomposition becomes the backbone of Gaussian Process computations. 2.1.6.5.4 Bayesian Inference with Covariance Matrices Many Bayesian models—especially hierarchical models—assume a multivariate normal prior on parameters. Cholesky Decomposition is used to: Sample from these priors or from posterior distributions. Regularize large covariance matrices. Speed up Markov Chain Monte Carlo (MCMC) computations by factorizing covariance structures. 2.1.6.6 Other Notes Numerical Stability Considerations Cholesky Decomposition is considered more stable than a general LU Decomposition when applied to positive-definite matrices. Since no row or column pivots are required, rounding errors can be smaller. Of course, in practice, software implementations can vary, and extremely ill-conditioned matrices can still pose numerical challenges. Why We Don’t Usually Compute \\(\\mathbf{A}^{-1}\\) It is common in statistics (especially in older texts) to see formulas involving \\(\\Sigma^{-1}\\). However, computing an inverse explicitly is often discouraged because: It is numerically less stable. It requires more computations. Many tasks that appear to need \\(\\Sigma^{-1}\\) can be done more efficiently by solving systems via the Cholesky factor \\(L\\). Hence, “solve, don’t invert” is a common mantra. If you see an expression like \\(\\Sigma^{-1} b\\), you can use the Cholesky factors \\(L\\) and \\(L^T\\) to solve \\(\\Sigma x = b\\) by forward and backward substitution, bypassing the direct inverse calculation. Further Variants and Extensions Incomplete Cholesky: Sometimes used in iterative solvers where a full Cholesky factorization is too expensive, especially for large sparse systems. LDL^T Decomposition: A variant that avoids taking square roots; used for positive semi-definite or indefinite systems, but with caution about pivoting strategies. "],["probability-theory.html", "2.2 Probability Theory", " 2.2 Probability Theory 2.2.1 Axioms and Theorems of Probability Let \\(S\\) denote the sample space of an experiment. Then: \\[ P[S] = 1 \\] (The probability of the sample space is always 1.) For any event \\(A\\): \\[ P[A] \\geq 0 \\] (Probabilities are always non-negative.) Let \\(A_1, A_2, A_3, \\dots\\) be a finite or infinite collection of mutually exclusive events. Then: \\[ P[A_1 \\cup A_2 \\cup A_3 \\dots] = P[A_1] + P[A_2] + P[A_3] + \\dots \\] (The probability of the union of mutually exclusive events is the sum of their probabilities.) The probability of the empty set is: \\[ P[\\emptyset] = 0 \\] The complement rule: \\[ P[A&#39;] = 1 - P[A] \\] The probability of the union of two events: \\[ P[A_1 \\cup A_2] = P[A_1] + P[A_2] - P[A_1 \\cap A_2] \\] 2.2.1.1 Conditional Probability The conditional probability of \\(A\\) given \\(B\\) is defined as: \\[ P[A|B] = \\frac{P[A \\cap B]}{P[B]}, \\quad \\text{provided } P[B] \\neq 0. \\] 2.2.1.2 Independent Events Two events \\(A\\) and \\(B\\) are independent if and only if: \\(P[A \\cap B] = P[A]P[B]\\) \\(P[A|B] = P[A]\\) \\(P[B|A] = P[B]\\) A collection of events \\(A_1, A_2, \\dots, A_n\\) is independent if and only if every subcollection is independent. 2.2.1.3 Multiplication Rule The probability of the intersection of two events can be calculated as: \\[ P[A \\cap B] = P[A|B]P[B] = P[B|A]P[A]. \\] 2.2.1.4 Bayes’ Theorem Let \\(A_1, A_2, \\dots, A_n\\) be a collection of mutually exclusive events whose union is \\(S\\), and let \\(B\\) be an event with \\(P[B] \\neq 0\\). Then, for any event \\(A_j\\) (\\(j = 1, 2, \\dots, n\\)): \\[ P[A_j|B] = \\frac{P[B|A_j]P[A_j]}{\\sum_{i=1}^n P[B|A_i]P[A_i]}. \\] 2.2.1.5 Jensen’s Inequality If \\(g(x)\\) is convex, then: \\[ E[g(X)] \\geq g(E[X]) \\] If \\(g(x)\\) is concave, then: \\[ E[g(X)] \\leq g(E[X]). \\] Jensen’s inequality provides a useful way to demonstrate why the standard error calculated using the sample standard deviation (\\(s\\)) as a proxy for the population standard deviation (\\(\\sigma\\)) is a biased estimator. The population standard deviation \\(\\sigma\\) is defined as: \\[ \\sigma = \\sqrt{\\mathbb{E}[(X - \\mu)^2]}, \\] where \\(\\mu = \\mathbb{E}[X]\\) is the population mean. The sample standard deviation \\(s\\) is given by: \\[ s = \\sqrt{\\frac{1}{n-1} \\sum_{i=1}^n (X_i - \\bar{X})^2}, \\] where \\(\\bar{X}\\) is the sample mean. When \\(s\\) is used as an estimator for \\(\\sigma\\), the expectation involves the square root function, which is concave. Applying Jensen’s Inequality The standard error formula involves the square root: \\[ \\sqrt{\\mathbb{E}[s^2]}. \\] However, because the square root function is concave, Jensen’s inequality implies: \\[ \\sqrt{\\mathbb{E}[s^2]} \\leq \\mathbb{E}[\\sqrt{s^2}] = \\mathbb{E}[s]. \\] This inequality shows that the expected value of \\(s\\) (the sample standard deviation) systematically underestimates the population standard deviation \\(\\sigma\\). Quantifying the Bias The bias arises because: \\[ \\mathbb{E}[s] \\neq \\sigma. \\] To correct this bias, we note that the sample standard deviation is related to the population standard deviation by: \\[ \\mathbb{E}[s] = \\sigma \\cdot \\sqrt{\\frac{n-1}{n}}, \\] where \\(n\\) is the sample size. This bias decreases as \\(n\\) increases, and the estimator becomes asymptotically unbiased. By leveraging Jensen’s inequality, we observe that the concavity of the square root function ensures that \\(s\\) is a biased estimator of \\(\\sigma\\), systematically underestimating the population standard deviation. 2.2.1.6 Law of Iterated Expectation The Law of Iterated Expectation states that for random variables \\(X\\) and \\(Y\\): \\[ E(X) = E(E(X|Y)). \\] This means the expected value of \\(X\\) can be obtained by first calculating the conditional expectation \\(E(X|Y)\\) and then taking the expectation of this quantity over the distribution of \\(Y\\). 2.2.1.7 Correlation and Independence The strength of the relationship between random variables can be ranked from strongest to weakest as: Independence: \\(f(x, y) = f_X(x)f_Y(y)\\) \\(f_{Y|X}(y|x) = f_Y(y)\\) and \\(f_{X|Y}(x|y) = f_X(x)\\) \\(E[g_1(X)g_2(Y)] = E[g_1(X)]E[g_2(Y)]\\) Mean Independence (implied by independence): \\(Y\\) is mean independent of \\(X\\) if: \\[ E[Y|X] = E[Y]. \\] \\(E[Xg(Y)] = E[X]E[g(Y)]\\) Uncorrelatedness (implied by independence and mean independence): \\(\\text{Cov}(X, Y) = 0\\) \\(\\text{Var}(X + Y) = \\text{Var}(X) + \\text{Var}(Y)\\) \\(E[XY] = E[X]E[Y]\\) 2.2.2 Central Limit Theorem The Central Limit Theorem states that for a sufficiently large sample size (\\(n \\geq 25\\)), the sampling distribution of the sample mean or proportion approaches a normal distribution, regardless of the population’s original distribution. Let \\(X_1, X_2, \\dots, X_n\\) be a random sample of size \\(n\\) from a distribution \\(X\\) with mean \\(\\mu\\) and variance \\(\\sigma^2\\). Then, for large \\(n\\): The sample mean \\(\\bar{X}\\) is approximately normal: \\[ \\mu_{\\bar{X}} = \\mu, \\quad \\sigma^2_{\\bar{X}} = \\frac{\\sigma^2}{n}. \\] The sample proportion \\(\\hat{p}\\) is approximately normal: \\[ \\mu_{\\hat{p}} = p, \\quad \\sigma^2_{\\hat{p}} = \\frac{p(1-p)}{n}. \\] The difference in sample proportions \\(\\hat{p}_1 - \\hat{p}_2\\) is approximately normal: \\[ \\mu_{\\hat{p}_1 - \\hat{p}_2} = p_1 - p_2, \\quad \\sigma^2_{\\hat{p}_1 - \\hat{p}_2} = \\frac{p_1(1-p_1)}{n_1} + \\frac{p_2(1-p_2)}{n_2}. \\] The difference in sample means \\(\\bar{X}_1 - \\bar{X}_2\\) is approximately normal: \\[ \\mu_{\\bar{X}_1 - \\bar{X}_2} = \\mu_1 - \\mu_2, \\quad \\sigma^2_{\\bar{X}_1 - \\bar{X}_2} = \\frac{\\sigma_1^2}{n_1} + \\frac{\\sigma_2^2}{n_2}. \\] The following random variables are approximately standard normal: \\(\\frac{\\bar{X} - \\mu}{\\sigma / \\sqrt{n}}\\) \\(\\frac{\\hat{p} - p}{\\sqrt{\\frac{p(1-p)}{n}}}\\) \\(\\frac{(\\hat{p}_1 - \\hat{p}_2) - (p_1 - p_2)}{\\sqrt{\\frac{p_1(1-p_1)}{n_1} + \\frac{p_2(1-p_2)}{n_2}}}\\) \\(\\frac{(\\bar{X}_1 - \\bar{X}_2) - (\\mu_1 - \\mu_2)}{\\sqrt{\\frac{\\sigma_1^2}{n_1} + \\frac{\\sigma_2^2}{n_2}}}\\) 2.2.2.1 Limiting Distribution of the Sample Mean If \\(\\{X_i\\}_{i=1}^{n}\\) is an iid random sample from a distribution with finite mean \\(\\mu\\) and finite variance \\(\\sigma^2\\), the sample mean \\(\\bar{X}\\) scaled by \\(\\sqrt{n}\\) has the following limiting distribution: \\[ \\sqrt{n}(\\bar{X} - \\mu) \\xrightarrow{d} N(0, \\sigma^2). \\] Standardizing the sample mean gives: \\[ \\frac{\\sqrt{n}(\\bar{X} - \\mu)}{\\sigma} \\xrightarrow{d} N(0, 1). \\] Notes: The CLT holds for most random samples from any distribution (continuous, discrete, or unknown). It extends to the multivariate case: A random sample of a random vector converges to a multivariate normal distribution. 2.2.2.2 Asymptotic Variance and Limiting Variance Asymptotic Variance (Avar): \\[ Avar(\\sqrt{n}(\\bar{X} - \\mu)) = \\sigma^2. \\] Refers to the variance of the limiting distribution of an estimator as the sample size (\\(n\\)) approaches infinity. It characterizes the variability of the scaled estimator \\(\\sqrt{n}(\\bar{x} - \\mu)\\) in its asymptotic distribution (e.g., normal distribution). Limiting Variance (\\(\\lim_{n \\to \\infty} Var\\)) \\[ \\lim_{n \\to \\infty} Var(\\sqrt{n}(\\bar{x}-\\mu)) = \\sigma^2 \\] Represents the value that the actual variance of \\(\\sqrt{n}(\\bar{x} - \\mu)\\) converges to as \\(n \\to \\infty\\). For a well-behaved estimator, \\[ Avar(\\sqrt{n}(\\bar{X} - \\mu)) = \\lim_{n \\to \\infty} Var(\\sqrt{n}(\\bar{x}-\\mu)) = \\sigma^2. \\] However, asymptotic variance is not necessarily equal to the limiting value of the variance because asymptotic variance is derived from the limiting distribution, while limiting variance is a convergence result of the sequence of variances. \\[ Avar(.) \\neq lim_{n \\to \\infty} Var(.) \\] Both the asymptotic variance \\(Avar\\) and the limiting variance \\(\\lim_{n \\to \\infty} Var\\) are numerically equal to \\(\\sigma^2\\), but their conceptual definitions differ. \\(Avar(\\cdot) \\neq \\lim_{n \\to \\infty} Var(\\cdot)\\). This emphasizes that while the numerical result may match, their derivation and meaning differ: \\(Avar\\) depends on the asymptotic (large-sample) distribution of the estimator. \\(\\lim_{n \\to \\infty} Var(\\cdot)\\) involves the sequence of variances as \\(n\\) grows. Cases where the two do not match: Sample Quantiles: Consider the sample quantile of order \\(p\\), for some \\(0 &lt; p &lt; 1\\). Under regularity conditions, the asymptotic distribution of the sample quantile is normal, with a variance that depends on \\(p\\) and the density of the distribution at the \\(p\\)-th quantile. However, the variance of the sample quantile itself does not necessarily converge to this limit as the sample size grows. Bootstrap Methods: When using bootstrapping techniques to estimate the distribution of a statistic, the bootstrap distribution might converge to a different limiting distribution than the original statistic. In these cases, the variance of the bootstrap distribution (or the bootstrap variance) might differ from the limiting variance of the original statistic. Statistics with Randomly Varying Asymptotic Behavior: In some cases, the asymptotic behavior of a statistic can vary randomly depending on the sample path. For such statistics, the asymptotic variance might not provide a consistent estimate of the limiting variance. M-estimators with Varying Asymptotic Behavior: M-estimators can sometimes have different asymptotic behaviors depending on the tail behavior of the underlying distribution. For heavy-tailed distributions, the variance of the estimator might not stabilize even as the sample size grows large, making the asymptotic variance different from the variance of any limiting distribution. 2.2.3 Random Variable Random variables can be categorized as either discrete or continuous, with distinct properties and functions defining each type. Discrete Variable Continuous Variable Definition A random variable is discrete if it can assume at most a finite or countably infinite number of values. A random variable is continuous if it can assume any value in some interval or intervals of real numbers, with \\(P(X=x) = 0\\). Density Function A function \\(f\\) is called a density for \\(X\\) if: A function \\(f\\) is called a density for \\(X\\) if: 1. \\(f(x) \\geq 0\\) 1. \\(f(x) \\geq 0\\) for \\(x\\) real 2. \\(\\sum_{x} f(x) = 1\\) 2. \\(\\int_{-\\infty}^{\\infty} f(x) \\, dx = 1\\) 3. \\(f(x) = P(X = x)\\) for \\(x\\) real 3. \\(P[a \\leq X \\leq b] = \\int_{a}^{b} f(x) \\, dx\\) for \\(a, b\\) real Cumulative Distribution Function \\(F(x) = P(X \\leq x)\\) \\(F(x) = P(X \\leq x) = \\int_{-\\infty}^{x} f(t) \\, dt\\) \\(E[H(X)]\\) \\(\\sum_{x} H(x) f(x)\\) \\(\\int_{-\\infty}^{\\infty} H(x) f(x) \\, dx\\) \\(\\mu = E[X]\\) \\(\\sum_{x} x f(x)\\) \\(\\int_{-\\infty}^{\\infty} x f(x) \\, dx\\) Ordinary Moments \\(\\sum_{x} x^k f(x)\\) \\(\\int_{-\\infty}^{\\infty} x^k f(x) \\, dx\\) Moment Generating Function \\(m_X(t) = E[e^{tX}] = \\sum_{x} e^{tx} f(x)\\) \\(m_X(t) = E[e^{tX}] = \\int_{-\\infty}^{\\infty} e^{tx} f(x) \\, dx\\) Expected Value Properties \\(E[c] = c\\) for any constant \\(c\\). \\(E[cX] = cE[X]\\) for any constant \\(c\\). \\(E[X + Y] = E[X] + E[Y]\\). \\(E[XY] = E[X]E[Y]\\) (if \\(X\\) and \\(Y\\) are independent). Variance Properties \\(\\text{Var}(c) = 0\\) for any constant \\(c\\). \\(\\text{Var}(cX) = c^2 \\text{Var}(X)\\) for any constant \\(c\\). \\(\\text{Var}(X) \\geq 0\\). \\(\\text{Var}(X) = E[X^2] - (E[X])^2\\). \\(\\text{Var}(X + c) = \\text{Var}(X)\\). \\(\\text{Var}(X + Y) = \\text{Var}(X) + \\text{Var}(Y)\\) (if \\(X\\) and \\(Y\\) are independent). The standard deviation \\(\\sigma\\) is given by: \\[ \\sigma = \\sqrt{\\sigma^2} = \\sqrt{\\text{Var}(X)}. \\] 2.2.3.1 Multivariate Random Variables Suppose \\(y_1, \\dots, y_p\\) are random variables with means \\(\\mu_1, \\dots, \\mu_p\\). Then: \\[ \\mathbf{y} = \\begin{bmatrix} y_1 \\\\ \\vdots \\\\ y_p \\end{bmatrix}, \\quad E[\\mathbf{y}] = \\begin{bmatrix} \\mu_1 \\\\ \\vdots \\\\ \\mu_p \\end{bmatrix} = \\boldsymbol{\\mu}. \\] The covariance between \\(y_i\\) and \\(y_j\\) is \\(\\sigma_{ij} = \\text{Cov}(y_i, y_j)\\). The variance-covariance (or dispersion) matrix is: \\[ \\mathbf{\\Sigma} = (\\sigma_{ij})= \\begin{bmatrix} \\sigma_{11} &amp; \\sigma_{12} &amp; \\dots &amp; \\sigma_{1p} \\\\ \\sigma_{21} &amp; \\sigma_{22} &amp; \\dots &amp; \\sigma_{2p} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\sigma_{p1} &amp; \\sigma_{p2} &amp; \\dots &amp; \\sigma_{pp} \\end{bmatrix}. \\] And \\(\\mathbf{\\Sigma}\\) is symmetric with \\((p+1)p/2\\) unique parameters. Alternatively, let \\(u_{p \\times 1}\\) and \\(v_{v \\times 1}\\) be random vectors with means \\(\\mathbf{\\mu_u}\\) and \\(\\mathbf{\\mu_v}\\). then \\[ \\mathbf{\\Sigma_{uv}} = cov(\\mathbf{u,v}) = E[\\mathbf{(u-\\mu_u)(v-\\mu_v)&#39;}] \\] \\(\\Sigma_{uv} \\neq \\Sigma_{vu}\\) (but \\(\\Sigma_{uv} = \\Sigma_{vu}&#39;\\)) Properties of Covariance Matrices Symmetry: \\(\\mathbf{\\Sigma}&#39; = \\mathbf{\\Sigma}\\). Eigen-Decomposition (spectral decomposition,symmetric decomposition): \\(\\mathbf{\\Sigma = \\Phi \\Lambda \\Phi}\\), where \\(\\mathbf{\\Phi}\\) is a matrix of eigenvectors such that \\(\\mathbf{\\Phi \\Phi&#39; = I}\\) (orthonormal), and \\(\\mathbf{\\Lambda}\\) is a diagonal matrix with eigenvalues \\((\\lambda_1,...,\\lambda_p)\\) on the diagonal. Non-Negative Definiteness: \\(\\mathbf{a \\Sigma a} \\ge 0\\) for any \\(\\mathbf{a} \\in R^p\\). Equivalently, the eigenvalues of \\(\\mathbf{\\Sigma}\\), \\(\\lambda_1 \\ge ... \\ge \\lambda_p \\ge 0\\) Generalized Variance: \\(|\\mathbf{\\Sigma}| = \\lambda_1 \\dots \\lambda_p \\geq 0\\). Trace: \\(\\text{tr}(\\mathbf{\\Sigma}) = \\lambda_1 + \\dots + \\lambda_p = \\sigma_{11} + \\dots+ \\sigma_{pp} = \\sum \\sigma_{ii}\\) = sum of variances (total variance). Note: \\(\\mathbf{\\Sigma}\\) is required to be positive definite. This implies that all eigenvalues are positive, and \\(\\mathbf{\\Sigma}\\) has an inverse \\(\\mathbf{\\Sigma}^{-1}\\), such that \\(\\mathbf{\\Sigma}^{-1}\\mathbf{\\Sigma}= \\mathbf{I}_{p \\times p} = \\mathbf{\\Sigma}\\mathbf{\\Sigma}^{-1}\\) 2.2.3.2 Correlation Matrices The correlation coefficient \\(\\rho_{ij}\\) and correlation matrix \\(\\mathbf{R}\\) are defined as: \\[ \\rho_{ij} = \\frac{\\sigma_{ij}}{\\sqrt{\\sigma_{ii}\\sigma_{jj}}}, \\quad \\mathbf{R} = \\begin{bmatrix} 1 &amp; \\rho_{12} &amp; \\dots &amp; \\rho_{1p} \\\\ \\rho_{21} &amp; 1 &amp; \\dots &amp; \\rho_{2p} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\rho_{p1} &amp; \\rho_{p2} &amp; \\dots &amp; 1 \\end{bmatrix}. \\] where \\(\\rho_{ii} = 1 \\forall i\\) 2.2.3.3 Linear Transformations Let \\(\\mathbf{A}\\) and \\(\\mathbf{B}\\) be matrices of constants, and \\(\\mathbf{c}\\) and \\(\\mathbf{d}\\) be vectors of constants. Then: \\(E[\\mathbf{Ay + c}] = \\mathbf{A \\mu_y + c}\\). \\(\\text{Var}(\\mathbf{Ay + c}) = \\mathbf{A \\Sigma_y A&#39;}\\). \\(\\text{Cov}(\\mathbf{Ay + c, By + d}) = \\mathbf{A \\Sigma_y B&#39;}\\). 2.2.4 Moment Generating Function 2.2.4.1 Properties of the Moment Generating Function \\(\\frac{d^k(m_X(t))}{dt^k} \\bigg|_{t=0} = E[X^k]\\) (The \\(k\\)-th derivative at \\(t=0\\) gives the \\(k\\)-th moment of \\(X\\)). \\(\\mu = E[X] = m_X&#39;(0)\\) (The first derivative at \\(t=0\\) gives the mean). \\(E[X^2] = m_X&#39;&#39;(0)\\) (The second derivative at \\(t=0\\) gives the second moment). 2.2.4.2 Theorems Involving MGFs Let \\(X_1, X_2, \\dots, X_n, Y\\) be random variables with MGFs \\(m_{X_1}(t), m_{X_2}(t), \\dots, m_{X_n}(t), m_Y(t)\\): If \\(m_{X_1}(t) = m_{X_2}(t)\\) for all \\(t\\) in some open interval about 0, then \\(X_1\\) and \\(X_2\\) have the same distribution. If \\(Y = \\alpha + \\beta X_1\\), then: \\[ m_Y(t) = e^{\\alpha t}m_{X_1}(\\beta t). \\] If \\(X_1, X_2, \\dots, X_n\\) are independent and \\(Y = \\alpha_0 + \\alpha_1 X_1 + \\alpha_2 X_2 + \\dots + \\alpha_n X_n\\), where \\(\\alpha_0, \\alpha_1, \\dots, \\alpha_n\\) are constants, then: \\[ m_Y(t) = e^{\\alpha_0 t} m_{X_1}(\\alpha_1 t) m_{X_2}(\\alpha_2 t) \\dots m_{X_n}(\\alpha_n t). \\] Suppose \\(X_1, X_2, \\dots, X_n\\) are independent normal random variables with means \\(\\mu_1, \\mu_2, \\dots, \\mu_n\\) and variances \\(\\sigma_1^2, \\sigma_2^2, \\dots, \\sigma_n^2\\). If \\(Y = \\alpha_0 + \\alpha_1 X_1 + \\alpha_2 X_2 + \\dots + \\alpha_n X_n\\), then: \\(Y\\) is normally distributed. Mean: \\(\\mu_Y = \\alpha_0 + \\alpha_1 \\mu_1 + \\alpha_2 \\mu_2 + \\dots + \\alpha_n \\mu_n\\). Variance: \\(\\sigma_Y^2 = \\alpha_1^2 \\sigma_1^2 + \\alpha_2^2 \\sigma_2^2 + \\dots + \\alpha_n^2 \\sigma_n^2\\). 2.2.5 Moments Moment Uncentered Centered 1st \\(E[X] = \\mu = \\text{Mean}(X)\\) 2nd \\(E[X^2]\\) \\(E[(X-\\mu)^2] = \\text{Var}(X) = \\sigma^2\\) 3rd \\(E[X^3]\\) \\(E[(X-\\mu)^3]\\) 4th \\(E[X^4]\\) \\(E[(X-\\mu)^4]\\) Skewness: \\(\\text{Skewness}(X) = \\frac{E[(X-\\mu)^3]}{\\sigma^3}\\) Definition: Skewness measures the asymmetry of a probability distribution around its mean. Interpretation: Positive skewness: The right tail (higher values) is longer or heavier than the left tail. Negative skewness: The left tail (lower values) is longer or heavier than the right tail. Zero skewness: The data is symmetric. Kurtosis: \\(\\text{Kurtosis}(X) = \\frac{E[(X-\\mu)^4]}{\\sigma^4}\\) Definition: Kurtosis measures the “tailedness” or the heaviness of the tails of a probability distribution. Excess kurtosis (often reported) is the kurtosis minus 3 (to compare against the normal distribution’s kurtosis of 3). Interpretation: High kurtosis (&gt;3): Heavy tails, more extreme outliers. Low kurtosis (&lt;3): Light tails, fewer outliers. Normal distribution kurtosis = 3: Benchmark for comparison. 2.2.6 Skewness Skewness measures the asymmetry of the distribution: Positive skew: The right side (high values) is stretched out. Positive skew occurs when the right tail (higher values) of the distribution is longer or heavier. Examples: Income Distribution: In many countries, most people earn a moderate income, but a small fraction of ultra-high earners stretches the distribution’s right tail. Housing Prices: Most homes may be around an affordable price, but a few extravagant mansions create a very long (and expensive) upper tail. # Load required libraries library(ggplot2) # Simulate data for positive skew set.seed(123) positive_skew_income &lt;- rbeta(1000, 5, 2) * 100 # Income distribution example positive_skew_housing &lt;- rbeta(1000, 5, 2) * 1000 # Housing prices example # Combine data data_positive_skew &lt;- data.frame( value = c(positive_skew_income, positive_skew_housing), example = c(rep(&quot;Income Distribution&quot;, 1000), rep(&quot;Housing Prices&quot;, 1000)) ) # Plot positive skew ggplot(data_positive_skew, aes(x = value, fill = example)) + geom_histogram(bins = 30, alpha = 0.7, position = &quot;identity&quot;) + facet_wrap( ~ example, scales = &quot;free&quot;) + labs(title = &quot;Visualization of Positive Skew&quot;, x = &quot;Value&quot;, y = &quot;Frequency&quot;) + theme_minimal() In the Income Distribution example, most people earn moderate incomes, but a few high earners stretch the right tail. In the Housing Prices example, most homes are reasonably priced, but a few mansions create a long, expensive right tail. Negative Skew (Left Skew) Negative skew occurs when the left tail (lower values) of the distribution is longer or heavier. Examples: Scores on an Easy Test: If an exam is very easy, most students score quite high, and only a few students score low, creating a left tail. Age of Retirement: Most people might retire around a common age (say 65+), with fewer retiring very early (stretching the left tail). # Simulate data for negative skew set.seed(123) negative_skew_test &lt;- 10 - rbeta(1000, 5, 2) * 10 # Easy test scores example negative_skew_retirement &lt;- 80 - rbeta(1000, 5, 2) * 20 # Retirement age example # Combine data data_negative_skew &lt;- data.frame( value = c(negative_skew_test, negative_skew_retirement), example = c(rep(&quot;Easy Test Scores&quot;, 1000), rep(&quot;Retirement Age&quot;, 1000)) ) # Plot negative skew ggplot(data_negative_skew, aes(x = value, fill = example)) + geom_histogram(bins = 30, alpha = 0.7, position = &quot;identity&quot;) + facet_wrap( ~ example, scales = &quot;free&quot;) + labs(title = &quot;Visualization of Negative Skew&quot;, x = &quot;Value&quot;, y = &quot;Frequency&quot;) + theme_minimal() In the Easy Test Scores example, most students perform well, but a few low scores stretch the left tail. In the Retirement Age example, most people retire around the same age, but a small number of individuals retire very early, stretching the left tail. 2.2.7 Kurtosis Kurtosis measures the “peakedness” or heaviness of the tails: High kurtosis: Tall, sharp peak with heavy tails. Example: Financial market returns during a crisis (extreme losses or gains). Low kurtosis: Flatter peak with thinner tails. Example: Human height distribution (fewer extreme deviations from the mean). # Simulate data for kurtosis low_kurtosis &lt;- runif(1000, 0, 10) # Low kurtosis high_kurtosis &lt;- c(rnorm(900, 5, 1), rnorm(100, 5, 5)) # High kurtosis # Combine data data_kurtosis &lt;- data.frame( value = c(low_kurtosis, high_kurtosis), kurtosis_type = c(rep(&quot;Low Kurtosis (Height Distribution)&quot;, 1000), rep(&quot;High Kurtosis (Market Returns)&quot;, 1000)) ) # Plot kurtosis ggplot(data_kurtosis, aes(x = value, fill = kurtosis_type)) + geom_histogram(bins = 30, alpha = 0.7, position = &quot;identity&quot;) + facet_wrap(~kurtosis_type) + labs( title = &quot;Visualization of Kurtosis&quot;, x = &quot;Value&quot;, y = &quot;Frequency&quot; ) + theme_minimal() The left panel shows low kurtosis, similar to the distribution of human height, which has a flatter peak and thinner tails. The right panel shows high kurtosis, reflecting financial market returns, where there are more extreme outliers in gains or losses. 2.2.7.1 Conditional Moments For a random variable \\(Y\\) given \\(X=x\\): Expected Value: \\[ E[Y|X=x] = \\begin{cases} \\sum_y y f_Y(y|x) &amp; \\text{for discrete RV}, \\\\ \\int_y y f_Y(y|x) \\, dy &amp; \\text{for continuous RV}. \\end{cases} \\] Variance: \\[ \\text{Var}(Y|X=x) = \\begin{cases} \\sum_y (y - E[Y|X=x])^2 f_Y(y|x) &amp; \\text{for discrete RV}, \\\\ \\int_y (y - E[Y|X=x])^2 f_Y(y|x) \\, dy &amp; \\text{for continuous RV}. \\end{cases} \\] 2.2.7.2 Multivariate Moments Expected Value: \\[ E \\begin{bmatrix} X \\\\ Y \\end{bmatrix} = \\begin{bmatrix} E[X] \\\\ E[Y] \\end{bmatrix} = \\begin{bmatrix} \\mu_X \\\\ \\mu_Y \\end{bmatrix} \\] Variance-Covariance Matrix: \\[ \\begin{aligned} \\text{Var} \\begin{bmatrix} X \\\\ Y \\end{bmatrix} &amp;= \\begin{bmatrix} \\text{Var}(X) &amp; \\text{Cov}(X, Y) \\\\ \\text{Cov}(X, Y) &amp; \\text{Var}(Y) \\end{bmatrix} \\\\ &amp;= \\begin{bmatrix} E[(X-\\mu_X)^2] &amp; E[(X-\\mu_X)(Y-\\mu_Y)] \\\\ E[(X-\\mu_X)(Y-\\mu_Y)] &amp; E[(Y-\\mu_Y)^2] \\end{bmatrix} \\end{aligned} \\] 2.2.7.3 Properties of Moments \\(E[aX + bY + c] = aE[X] + bE[Y] + c\\) \\(\\text{Var}(aX + bY + c) = a^2 \\text{Var}(X) + b^2 \\text{Var}(Y) + 2ab \\text{Cov}(X, Y)\\) \\(\\text{Cov}(aX + bY, cX + dY) = ac \\text{Var}(X) + bd \\text{Var}(Y) + (ad + bc) \\text{Cov}(X, Y)\\) Correlation: \\(\\rho_{XY} = \\frac{\\text{Cov}(X, Y)}{\\sigma_X \\sigma_Y}\\) 2.2.8 Distributions 2.2.8.1 Conditional Distributions \\[ f_{X|Y}(x|y) = \\frac{f(x, y)}{f_Y(y)} \\] If \\(X\\) and \\(Y\\) are independent: \\[ f_{X|Y}(x|y) = f_X(x). \\] 2.2.8.2 Discrete Distributions 2.2.8.2.1 Bernoulli Distribution A random variable \\(X\\) follows a Bernoulli distribution, denoted as \\(X \\sim \\text{Bernoulli}(p)\\), if it represents a single trial with: Success probability \\(p\\) Failure probability \\(q = 1-p\\). Density Function\\[ f(x) = p^x (1-p)^{1-x}, \\quad x \\in \\{0, 1\\} \\] CDF: Use table or manual computation. PDF hist( mc2d::rbern(1000, prob = 0.5), main = &quot;Histogram of Bernoulli Distribution&quot;, xlab = &quot;Value&quot;, ylab = &quot;Frequency&quot; ) Mean \\[ \\mu = E[X] = p \\] Variance \\[ \\sigma^2 = \\text{Var}(X) = p(1-p) \\] 2.2.8.2.2 Binomial Distribution \\(X \\sim B(n, p)\\) is the number of successes in \\(n\\) independent Bernoulli trials, where: \\(n\\) is the number of trials \\(p\\) is the success probability. The trials are identical and independent, and probability of success (\\(p\\)) and probability of failure (\\(q = 1 - p\\)) remains the same for all trials. Density Function \\[ f(x) = \\binom{n}{x} p^x (1-p)^{n-x}, \\quad x = 0, 1, \\dots, n \\] PDF hist( rbinom(1000, size = 100, prob = 0.5), main = &quot;Histogram of Binomial Distribution&quot;, xlab = &quot;Value&quot;, ylab = &quot;Frequency&quot; ) MGF \\[ m_X(t) = (1 - p + p e^t)^n \\] Mean \\[ \\mu = np \\] Variance \\[ \\sigma^2 = np(1-p) \\] 2.2.8.2.3 Poisson Distribution \\(X \\sim \\text{Poisson}(\\lambda)\\) models the number of occurrences of an event in a fixed interval, with average rate \\(\\lambda\\). Arises with Poisson process, which involves observing discrete events in a continuous “interval” of time, length, or space. The random variable \\(X\\) is the number of occurrences of the event within an interval of \\(s\\) units. The parameter \\(\\lambda\\) is the average number of occurrences of the event in question per measurement unit. For the distribution, we use the parameter \\(k = \\lambda s\\). Density Function \\[ f(x) = \\frac{e^{-k} k^x}{x!}, \\quad x = 0, 1, 2, \\dots \\] CDF PDF hist(rpois(1000, lambda = 5), main = &quot;Histogram of Poisson Distribution&quot;, xlab = &quot;Value&quot;, ylab = &quot;Frequency&quot;) MGF \\[ m_X(t) = e^{k (e^t - 1)} \\] Mean \\[ \\mu = E(X) = k \\] Variance \\[ \\sigma^2 = Var(X) = k \\] 2.2.8.2.4 Geometric Distribution \\(X \\sim \\text{G}(p)\\) models the number of trials needed to obtain the first success, with: \\(p\\): probability of success \\(q = 1-p\\): probability of failure. The experiment consists of a series of trails. The outcome of each trial can be classed as being either a “success” (s) or “failure” (f). (i.e., Bernoulli trial). The trials are identical and independent in the sense that the outcome of one trial has no effect on the outcome of any other (i..e, lack of memory - momerylessness). The probability of success (\\(p\\)) and probability of failure (\\(q = 1- p\\)) remains the same from trial to trial. Density Function \\[ f(x) = p(1-p)^{x-1}, \\quad x = 1, 2, \\dots \\] CDF\\[ F(x) = 1 - (1-p)^x \\] PDF hist(rgeom(1000, prob = 0.5), main = &quot;Histogram of Geometric Distribution&quot;, xlab = &quot;Value&quot;, ylab = &quot;Frequency&quot;) MGF \\[ m_X(t) = \\frac{p e^t}{1 - (1-p)e^t}, \\quad t &lt; -\\ln(1-p) \\] Mean \\[ \\mu = \\frac{1}{p} \\] Variance \\[ \\sigma^2 = \\frac{1-p}{p^2} \\] 2.2.8.2.5 Hypergeometric Distribution \\(X \\sim \\text{H}(N, r, n)\\) models the number of successes in a sample of size \\(n\\) drawn without replacement from a population of size \\(N\\), where: \\(r\\) objects have the trait of interest \\(N-r\\) do not have the trait. Density Function \\[ f(x) = \\frac{\\binom{r}{x} \\binom{N-r}{n-x}}{\\binom{N}{n}}, \\quad \\max(0, n-(N-r)) \\leq x \\leq \\min(n, r) \\] PDF hist( rhyper(1000, m = 50, n = 20, k = 30), main = &quot;Histogram of Hypergeometric Distribution&quot;, xlab = &quot;Value&quot;, ylab = &quot;Frequency&quot; ) Mean\\[ \\mu = E[X] = \\frac{n r}{N} \\] Variance\\[ \\sigma^2 = \\text{Var}(X) = n \\frac{r}{N} \\frac{N-r}{N} \\frac{N-n}{N-1} \\] Note: For large \\(N\\) (when \\(\\frac{n}{N} \\leq 0.05\\)), the hypergeometric distribution can be approximated by a binomial distribution with \\(p = \\frac{r}{N}\\). 2.2.8.3 Continuous Distributions 2.2.8.3.1 Uniform Distribution Defined over an interval \\((a, b)\\), where the probabilities are “equally likely” for subintervals of equal length. Density Function: \\[ f(x) = \\frac{1}{b-a}, \\quad a &lt; x &lt; b \\] CDF\\[ F(x) = \\begin{cases} 0 &amp; \\text{if } x &lt; a \\\\ \\frac{x-a}{b-a} &amp; a \\le x \\le b \\\\ 1 &amp; \\text{if } x &gt; b \\end{cases} \\] PDF hist( runif(1000, min = 0, max = 1), main = &quot;Histogram of Uniform Distribution&quot;, xlab = &quot;Value&quot;, ylab = &quot;Frequency&quot; ) MGF\\[ m_X(t) = \\begin{cases} \\frac{e^{tb} - e^{ta}}{t(b-a)} &amp; \\text{if } t \\neq 0 \\\\ 1 &amp; \\text{if } t = 0 \\end{cases} \\] Mean\\[ \\mu = E[X] = \\frac{a + b}{2} \\] Variance \\[ \\sigma^2 = \\text{Var}(X) = \\frac{(b-a)^2}{12} \\] 2.2.8.3.2 Gamma Distribution The gamma distribution is used to define the exponential and \\(\\chi^2\\) distributions. The gamma function is defined as: \\[ \\Gamma(\\alpha) = \\int_0^{\\infty} z^{\\alpha-1}e^{-z}dz, \\quad \\alpha &gt; 0 \\] Properties of the Gamma Function: \\(\\Gamma(1) = 1\\) For \\(\\alpha &gt; 1\\), \\(\\Gamma(\\alpha) = (\\alpha-1)\\Gamma(\\alpha-1)\\) If \\(n\\) is an integer and \\(n &gt; 1\\), then \\(\\Gamma(n) = (n-1)!\\) Density Function: \\[ f(x) = \\frac{1}{\\Gamma(\\alpha)\\beta^{\\alpha}} x^{\\alpha-1} e^{-x/\\beta}, \\quad x &gt; 0 \\] CDF (for \\(\\alpha = n\\), and \\(x&gt;0\\) a positive integer): \\[ F(x, n, \\beta) = 1 - \\sum_{k=0}^{n-1} \\frac{(\\frac{x}{\\beta})^k e^{-x/\\beta}}{k!} \\] PDF: hist( rgamma(n = 1000, shape = 5, rate = 1), main = &quot;Histogram of Gamma Distribution&quot;, xlab = &quot;Value&quot;, ylab = &quot;Frequency&quot; ) MGF \\[ m_X(t) = (1 - \\beta t)^{-\\alpha}, \\quad t &lt; \\frac{1}{\\beta} \\] Mean \\[ \\mu = E[X] = \\alpha \\beta \\] Variance \\[ \\sigma^2 = \\text{Var}(X) = \\alpha \\beta^2 \\] 2.2.8.3.3 Normal Distribution The normal distribution, denoted as \\(N(\\mu, \\sigma^2)\\), is symmetric and bell-shaped with parameters \\(\\mu\\) (mean) and \\(\\sigma^2\\) (variance). It is also known as the Gaussian distribution. Density Function: \\[ f(x) = \\frac{1}{\\sigma \\sqrt{2\\pi}} e^{-\\frac{1}{2} \\left(\\frac{x-\\mu}{\\sigma}\\right)^2}, \\quad -\\infty &lt; x &lt; \\infty, \\; \\sigma &gt; 0 \\] CDF: Use table or numerical methods. PDF hist( rnorm(1000, mean = 0, sd = 1), main = &quot;Histogram of Normal Distribution&quot;, xlab = &quot;Value&quot;, ylab = &quot;Frequency&quot; ) MGF \\[ m_X(t) = e^{\\mu t + \\frac{\\sigma^2 t^2}{2}} \\] Mean \\[ \\mu = E[X] \\] Variance \\[ \\sigma^2 = \\text{Var}(X) \\] Standard Normal Random Variable: The normal random variable \\(Z\\) with mean \\(\\mu = 0\\) and standard deviation \\(\\sigma = 1\\) is called a standard normal random variable. Any normal random variable \\(X\\) with mean \\(\\mu\\) and standard deviation \\(\\sigma\\) can be converted to the standard normal random variable \\(Z\\): \\[ Z = \\frac{X - \\mu}{\\sigma} \\] Normal Approximation to the Binomial Distribution: Let \\(X\\) be binomial with parameters \\(n\\) and \\(p\\). For large \\(n\\): If \\(p \\le 0.5\\) and \\(np &gt; 5\\), or If \\(p &gt; 0.5\\) and \\(n(1-p) &gt; 5\\), \\(X\\) is approximately normally distributed with mean \\(\\mu = np\\) and standard deviation \\(\\sigma = \\sqrt{np(1-p)}\\). When using the normal approximation, add or subtract 0.5 as needed for the continuity correction. Discrete Approximate Normal (Corrected): Normal Probability Rule Discrete Approximate Normal (corrected) \\(P(X = c)\\) \\(P(c -0.5 &lt; Y &lt; c + 0.5)\\) \\(P(X &lt; c)\\) \\(P(Y &lt; c - 0.5)\\) \\(P(X \\le c)\\) \\(P(Y &lt; c + 0.5)\\) \\(P(X &gt; c)\\) \\(P(Y &gt; c + 0.5)\\) \\(P(X \\ge c)\\) \\(P(Y &gt; c - 0.5)\\) If X is normally distributed with parameters \\(\\mu\\) and \\(\\sigma\\), then \\(P(-\\sigma &lt; X - \\mu &lt; \\sigma) \\approx .68\\) \\(P(-2\\sigma &lt; X - \\mu &lt; 2\\sigma) \\approx .95\\) \\(P(-3\\sigma &lt; X - \\mu &lt; 3\\sigma) \\approx .997\\) 2.2.8.3.4 Logistic Distribution The logistic distribution is a continuous probability distribution commonly used in logistic regression and other types of statistical modeling. It resembles the normal distribution but has heavier tails, allowing for more extreme values. - The logistic distribution is symmetric around \\(\\mu\\). - Its heavier tails make it useful for modeling outcomes with occasional extreme values. Density Function \\[ f(x; \\mu, s) = \\frac{e^{-(x-\\mu)/s}}{s \\left(1 + e^{-(x-\\mu)/s}\\right)^2}, \\quad -\\infty &lt; x &lt; \\infty \\] where \\(\\mu\\) is the location parameter (mean) and \\(s &gt; 0\\) is the scale parameter. CDF \\[ F(x; \\mu, s) = \\frac{1}{1 + e^{-(x-\\mu)/s}}, \\quad -\\infty &lt; x &lt; \\infty \\] PDF hist( rlogis(1000, location = 0, scale = 1), main = &quot;Histogram of Logistic Distribution&quot;, xlab = &quot;Value&quot;, ylab = &quot;Frequency&quot; ) MGF The MGF of the logistic distribution does not exist because its expected value diverges for most \\(t\\). Mean \\[ \\mu = E[X] = \\mu \\] Variance \\[ \\sigma^2 = \\text{Var}(X) = \\frac{\\pi^2 s^2}{3} \\] 2.2.8.3.5 Laplace Distribution The Laplace distribution, also known as the double exponential distribution, is a continuous probability distribution often used in economics, finance, and engineering. It is characterized by a peak at its mean and heavier tails compared to the normal distribution. The Laplace distribution is symmetric around \\(\\mu\\). It has heavier tails than the normal distribution, making it suitable for modeling data with more extreme outliers. Density Function \\[ f(x; \\mu, b) = \\frac{1}{2b} e^{-|x-\\mu|/b}, \\quad -\\infty &lt; x &lt; \\infty \\] where \\(\\mu\\) is the location parameter (mean) and \\(b &gt; 0\\) is the scale parameter. CDF \\[ F(x; \\mu, b) = \\begin{cases} \\frac{1}{2} e^{(x-\\mu)/b} &amp; \\text{if } x &lt; \\mu \\\\ 1 - \\frac{1}{2} e^{-(x-\\mu)/b} &amp; \\text{if } x \\ge \\mu \\end{cases} \\] PDF hist( VGAM::rlaplace(1000, location = 0, scale = 1), main = &quot;Histogram of Laplace Distribution&quot;, xlab = &quot;Value&quot;, ylab = &quot;Frequency&quot; ) MGF \\[ m_X(t) = \\frac{e^{\\mu t}}{1 - b^2 t^2}, \\quad |t| &lt; \\frac{1}{b} \\] Mean \\[ \\mu = E[X] = \\mu \\] Variance \\[ \\sigma^2 = \\text{Var}(X) = 2b^2 \\] 2.2.8.3.6 Log-normal Distribution The log-normal distribution is denoted as \\(\\text{Lognormal}(\\mu, \\sigma^2)\\). PDF hist(rlnorm(n = 1000, meanlog = 0, sdlog = 1), main=&quot;Histogram of Log-normal Distribution&quot;, xlab=&quot;Value&quot;, ylab=&quot;Frequency&quot;) 2.2.8.3.7 Lognormal Distribution The lognormal distribution is a continuous probability distribution of a random variable whose logarithm is normally distributed. It is often used to model variables that are positively skewed, such as income or biological measurements. The lognormal distribution is positively skewed. It is useful for modeling data that cannot take negative values and is often used in finance and environmental studies. Density Function \\[ f(x; \\mu, \\sigma) = \\frac{1}{x \\sigma \\sqrt{2\\pi}} e^{-(\\ln(x) - \\mu)^2 / (2\\sigma^2)}, \\quad x &gt; 0 \\] where \\(\\mu\\) is the mean of the underlying normal distribution and \\(\\sigma &gt; 0\\) is the standard deviation. CDF The cumulative distribution function of the lognormal distribution is given by: \\[ F(x; \\mu, \\sigma) = \\frac{1}{2} \\left[ 1 + \\text{erf}\\left( \\frac{\\ln(x) - \\mu}{\\sigma \\sqrt{2}} \\right) \\right], \\quad x &gt; 0 \\] PDF hist( rlnorm(1000, meanlog = 0, sdlog = 1), main = &quot;Histogram of Lognormal Distribution&quot;, xlab = &quot;Value&quot;, ylab = &quot;Frequency&quot; ) MGF The moment generating function (MGF) of the lognormal distribution does not exist in a simple closed form. Mean \\[ E[X] = e^{\\mu + \\sigma^2 / 2} \\] Variance \\[ \\sigma^2 = \\text{Var}(X) = \\left( e^{\\sigma^2} - 1 \\right) e^{2\\mu + \\sigma^2} \\] 2.2.8.3.8 Exponential Distribution The exponential distribution, denoted as \\(\\text{Exp}(\\lambda)\\), is a special case of the gamma distribution with \\(\\alpha = 1\\). It is commonly used to model the time between independent events that occur at a constant rate. It is often applied in reliability analysis and queuing theory. The exponential distribution is memoryless, meaning the probability of an event occurring in the future is independent of the past. It is commonly used to model waiting times, such as the time until the next customer arrives or the time until a radioactive particle decays. Density Function \\[ f(x) = \\frac{1}{\\beta} e^{-x/\\beta}, \\quad x, \\beta &gt; 0 \\] CDF\\[ F(x) = \\begin{cases} 0 &amp; \\text{if } x \\le 0 \\\\ 1 - e^{-x/\\beta} &amp; \\text{if } x &gt; 0 \\end{cases} \\] PDF hist(rexp(n = 1000, rate = 1), main = &quot;Histogram of Exponential Distribution&quot;, xlab = &quot;Value&quot;, ylab = &quot;Frequency&quot;) MGF\\[ m_X(t) = (1-\\beta t)^{-1}, \\quad t &lt; 1/\\beta \\] Mean\\[ \\mu = E[X] = \\beta \\] Variance\\[ \\sigma^2 = \\text{Var}(X) = \\beta^2 \\] 2.2.8.3.9 Chi-Squared Distribution The chi-squared distribution is a continuous probability distribution commonly used in statistical inference, particularly in hypothesis testing and construction of confidence intervals for variance. It is also used in goodness-of-fit tests. The chi-squared distribution is defined only for positive values. It is often used to model the distribution of the sum of the squares of \\(k\\) independent standard normal random variables. Density Function \\[ f(x; k) = \\frac{1}{2^{k/2} \\Gamma(k/2)} x^{k/2 - 1} e^{-x/2}, \\quad x \\ge 0 \\] where \\(k\\) is the degrees of freedom and \\(\\Gamma\\) is the gamma function. CDF The cumulative distribution function of the chi-squared distribution is given by: \\[ F(x; k) = \\frac{\\gamma(k/2, x/2)}{\\Gamma(k/2)}, \\quad x \\ge 0 \\] where \\(\\gamma\\) is the lower incomplete gamma function. PDF hist( rchisq(1000, df = 5), main = &quot;Histogram of Chi-Squared Distribution&quot;, xlab = &quot;Value&quot;, ylab = &quot;Frequency&quot; ) MGF \\[ m_X(t) = (1 - 2t)^{-k/2}, \\quad t &lt; \\frac{1}{2} \\] Mean \\[ E[X] = k \\] Variance \\[ \\sigma^2 = \\text{Var}(X) = 2k \\] 2.2.8.3.10 Student’s T Distribution The Student’s t-distribution is named after William Sealy Gosset, a statistician at Guinness Brewery in the early 20th century. Gosset developed the t-distribution to address small-sample problems in quality control. Since Guinness prohibited employees from publishing under their names, Gosset used the pseudonym “Student” when he published his work in 1908 (Student 1908). The name has stuck ever since, honoring his contribution to statistics. The Student’s t-distribution, denoted as \\(T(v)\\), is defined by: \\[ T = \\frac{Z}{\\sqrt{\\chi^2_v / v}}, \\] where \\(Z\\) is a standard normal random variable and \\(\\chi^2_v\\) follows a chi-squared distribution with \\(v\\) degrees of freedom. The Student’s T distribution is a continuous probability distribution used in statistical inference, particularly for estimating population parameters when the sample size is small and/or the population variance is unknown. It is similar to the normal distribution but has heavier tails, which makes it more robust for small sample sizes. The Student’s T distribution is symmetric around 0. It has heavier tails than the normal distribution, making it useful for dealing with outliers or small sample sizes. Density Function \\[ f(x;v) = \\frac{\\Gamma((v + 1)/2)}{\\sqrt{v \\pi} \\Gamma(v/2)} \\left( 1 + \\frac{x^2}{v} \\right)^{-(v + 1)/2} \\] where \\(v\\) is the degrees of freedom and \\(\\Gamma(x)\\) is the Gamma function. CDF The cumulative distribution function of the Student’s T distribution is more complex and typically evaluated using numerical methods. PDF hist( rt(1000, df = 5), main = &quot;Histogram of Student&#39;s T Distribution&quot;, xlab = &quot;Value&quot;, ylab = &quot;Frequency&quot; ) MGF The moment generating function (MGF) of the Student’s T distribution does not exist in a simple closed form. Mean For \\(v &gt; 1\\): \\[ E[X] = 0 \\] Variance For \\(v &gt; 2\\): \\[ \\sigma^2 = \\text{Var}(X) = \\frac{v}{v - 2} \\] 2.2.8.3.11 Non-central T Distribution The non-central t-distribution, denoted as \\(T(v, \\lambda)\\), is a generalization of the Student’s t-distribution. It is defined as: \\[ T = \\frac{Z + \\lambda}{\\sqrt{\\chi^2_v / v}}, \\] where \\(Z\\) is a standard normal random variable, \\(\\chi^2_v\\) follows a chi-squared distribution with \\(v\\) degrees of freedom, and \\(\\lambda\\) is the non-centrality parameter. This additional parameter introduces asymmetry to the distribution. The non-central t-distribution arises in scenarios where the null hypothesis does not hold, such as under the alternative hypothesis in hypothesis testing. The non-centrality parameter \\(\\lambda\\) represents the degree to which the mean deviates from zero. For \\(\\lambda = 0\\), the non-central t-distribution reduces to the Student’s t-distribution. The distribution is skewed for \\(\\lambda \\neq 0\\), with the skewness increasing as \\(\\lambda\\) grows. Density Function The density function of the non-central t-distribution is more complex and depends on \\(v\\) and \\(\\lambda\\). It can be expressed in terms of an infinite sum: \\[ f(x; v, \\lambda) = \\sum_{k=0}^\\infty \\frac{e^{-\\lambda^2/2}(\\lambda^2/2)^k}{k!} \\cdot \\frac{\\Gamma((v + k + 1)/2)}{\\sqrt{v \\pi} \\Gamma((v + k)/2)} \\left( 1 + \\frac{x^2}{v} \\right)^{-(v + k + 1)/2}. \\] PDF n &lt;- 100 # Number of samples df &lt;- 5 # Degrees of freedom lambda &lt;- 2 # Non-centrality parameter hist( rt(n, df = df, ncp = lambda), main = &quot;Histogram of Non-central T Distribution&quot;, xlab = &quot;Value&quot;, ylab = &quot;Frequency&quot; ) CDF The cumulative distribution function of the non-central t-distribution is typically computed using numerical methods due to its complexity. Mean For \\(v &gt; 1\\): \\[ E[T] = \\lambda \\sqrt{\\frac{v}{2}} \\cdot \\frac{\\Gamma((v - 1)/2)}{\\Gamma(v/2)}. \\] Variance For \\(v &gt; 2\\): \\[ \\text{Var}(T) = \\frac{v}{v - 2} + \\lambda^2. \\] Comparison: Student’s T vs. Non-central T Feature Student’s t-distribution Non-central t-distribution Definition \\(T = \\frac{Z}{\\sqrt{\\chi^2_v / v}}\\) \\(T = \\frac{Z + \\lambda}{\\sqrt{\\chi^2_v / v}}\\) Centered at 0 \\(\\lambda\\) Symmetry Symmetric Skewed for \\(\\lambda \\neq 0\\) Parameters Degrees of freedom (\\(v\\)) \\(v\\) and \\(\\lambda\\) Shape as \\(v \\to \\infty\\) (df \\(\\to \\infty\\)) Normal(0, 1) Normal(\\(\\lambda\\), 1) Applications Hypothesis testing under null Power analysis, alternative testing While the Student’s t-distribution is used for standard hypothesis testing and confidence intervals, the non-central t-distribution finds its applications in scenarios involving non-null hypotheses, such as power and sample size calculations. 2.2.8.3.12 F Distribution The F-distribution, denoted as \\(F(d_1, d_2)\\), is strictly positive and used to compare variances. Definition: \\[ F = \\frac{\\chi^2_{d_1} / d_1}{\\chi^2_{d_2} / d_2}, \\] where \\(\\chi^2_{d_1}\\) and \\(\\chi^2_{d_2}\\) are independent chi-squared random variables with degrees of freedom \\(d_1\\) and \\(d_2\\), respectively. The distribution is asymmetric and never negative. The F distribution arises frequently as the null distribution of a test statistic, especially in the context of comparing variances, such as in analysis of variance (ANOVA). Density Function \\[ f(x; d_1, d_2) = \\frac{\\sqrt{\\frac{(d_1 x)^{d_1} d_2^{d_2}}{(d_1 x + d_2)^{d_1 + d_2}}}}{x B\\left( \\frac{d_1}{2}, \\frac{d_2}{2} \\right)}, \\quad x &gt; 0 \\] where \\(d_1\\) and \\(d_2\\) are the degrees of freedom and \\(B\\) is the beta function. CDF The cumulative distribution function of the F distribution is typically evaluated using numerical methods. PDF hist( rf(1000, df1 = 5, df2 = 2), main = &quot;Histogram of F Distribution&quot;, xlab = &quot;Value&quot;, ylab = &quot;Frequency&quot; ) MGF The moment generating function (MGF) of the F distribution does not exist in a simple closed form. Mean For \\(d_2 &gt; 2\\): \\[ E[X] = \\frac{d_2}{d_2 - 2} \\] Variance For \\(d_2 &gt; 4\\): \\[ \\sigma^2 = \\text{Var}(X) = \\frac{2 d_2^2 (d_1 + d_2 - 2)}{d_1 (d_2 - 2)^2 (d_2 - 4)} \\] 2.2.8.3.13 Cauchy Distribution The Cauchy distribution is a continuous probability distribution that is often used in physics and has heavier tails than the normal distribution. It is notable because it does not have a finite mean or variance. The Cauchy distribution does not have a finite mean or variance. The Central Limit Theorem and Weak Law of Large Numbers do not apply to the Cauchy distribution. Density Function \\[ f(x; x_0, \\gamma) = \\frac{1}{\\pi \\gamma \\left[ 1 + \\left( \\frac{x - x_0}{\\gamma} \\right)^2 \\right]} \\] where \\(x_0\\) is the location parameter and \\(\\gamma &gt; 0\\) is the scale parameter. CDF The cumulative distribution function of the Cauchy distribution is given by: \\[ F(x; x_0, \\gamma) = \\frac{1}{\\pi} \\arctan \\left( \\frac{x - x_0}{\\gamma} \\right) + \\frac{1}{2} \\] PDF hist( rcauchy(1000, location = 0, scale = 1), main = &quot;Histogram of Cauchy Distribution&quot;, xlab = &quot;Value&quot;, ylab = &quot;Frequency&quot; ) MGF The MGF of the Cauchy distribution does not exist. Mean The mean of the Cauchy distribution is undefined. Variance The variance of the Cauchy distribution is undefined. 2.2.8.3.14 Multivariate Normal Distribution Let \\(y\\) be a \\(p\\)-dimensional multivariate normal (MVN) random variable with mean \\(\\mu\\) and variance-covariance matrix \\(\\Sigma\\). The density function of \\(y\\) is given by: \\[ f(\\mathbf{y}) = \\frac{1}{(2\\pi)^{p/2}|\\mathbf{\\Sigma}|^{1/2}} \\exp\\left(-\\frac{1}{2} (\\mathbf{y}-\\mu)&#39; \\Sigma^{-1} (\\mathbf{y}-\\mu)\\right) \\] where \\(|\\mathbf{\\Sigma}|\\) represents the determinant of the variance-covariance matrix \\(\\Sigma\\), and \\(\\mathbf{y} \\sim N_p(\\mathbf{\\mu}, \\mathbf{\\Sigma})\\). Properties: Let \\(\\mathbf{A}_{r \\times p}\\) be a fixed matrix. Then \\(\\mathbf{A y} \\sim N_r(\\mathbf{A \\mu}, \\mathbf{A \\Sigma A&#39;})\\). Note that \\(r \\le p\\), and all rows of \\(\\mathbf{A}\\) must be linearly independent to guarantee that \\(\\mathbf{A \\Sigma A&#39;}\\) is non-singular. Let \\(\\mathbf{G}\\) be a matrix such that \\(\\mathbf{\\Sigma^{-1} = G G&#39;}\\). Then \\(\\mathbf{G&#39;y} \\sim N_p(\\mathbf{G&#39;\\mu}, \\mathbf{I})\\) and \\(\\mathbf{G&#39;(y - \\mu)} \\sim N_p(\\mathbf{0}, \\mathbf{I})\\). Any fixed linear combination of \\(y_1, \\dots, y_p\\), say \\(\\mathbf{c&#39;y}\\), follows \\(\\mathbf{c&#39;y} \\sim N_1(\\mathbf{c&#39;\\mu}, \\mathbf{c&#39;\\Sigma c})\\). Large Sample Properties Suppose that \\(y_1, \\dots, y_n\\) are a random sample from some population with mean \\(\\mu\\) and variance-covariance matrix \\(\\Sigma\\): \\[ \\mathbf{Y} \\sim MVN(\\mathbf{\\mu}, \\mathbf{\\Sigma}) \\] Then: \\(\\bar{\\mathbf{y}} = \\frac{1}{n} \\sum_{i=1}^n \\mathbf{y}_i\\) is a consistent estimator for \\(\\mathbf{\\mu}\\). \\(\\mathbf{S} = \\frac{1}{n-1} \\sum_{i=1}^n (\\mathbf{y}_i - \\bar{\\mathbf{y}})(\\mathbf{y}_i - \\bar{\\mathbf{y}})&#39;\\) is a consistent estimator for \\(\\mathbf{\\Sigma}\\). Multivariate Central Limit Theorem: Similar to the univariate case, \\(\\sqrt{n}(\\bar{\\mathbf{y}} - \\mu) \\sim N_p(\\mathbf{0}, \\mathbf{\\Sigma})\\) when \\(n\\) is large relative to \\(p\\) (e.g., \\(n \\ge 25p\\)), which is equivalent to \\(\\bar{\\mathbf{y}} \\sim N_p(\\mathbf{\\mu}, \\mathbf{\\Sigma/n})\\). Wald’s Theorem: \\(n(\\bar{\\mathbf{y}} - \\mu)&#39; \\mathbf{S^{-1}} (\\bar{\\mathbf{y}} - \\mu) \\sim \\chi^2_{(p)}\\) when \\(n\\) is large relative to \\(p\\). Density Function \\[ f(\\mathbf{x}; \\boldsymbol{\\mu}, \\boldsymbol{\\Sigma}) = \\frac{1}{(2\\pi)^{k/2} | \\boldsymbol{\\Sigma}|^{1/2}} \\exp\\left( -\\frac{1}{2} (\\mathbf{x} - \\boldsymbol{\\mu})^T \\boldsymbol{\\Sigma}^{-1} (\\mathbf{x} - \\boldsymbol{\\mu}) \\right) \\] where \\(\\boldsymbol{\\mu}\\) is the mean vector, \\(\\boldsymbol{\\Sigma}\\) is the covariance matrix, \\(\\mathbf{x} \\in \\mathbb{R}^k\\) and \\(k\\) is the number of variables. CDF The cumulative distribution function of the multivariate normal distribution does not have a simple closed form and is typically evaluated using numerical methods. PDF k &lt;- 2 n &lt;- 1000 mu &lt;- c(0, 0) sigma &lt;- matrix(c(1, 0.5, 0.5, 1), nrow = k) library(MASS) hist( mvrnorm(n, mu = mu, Sigma = sigma)[,1], main = &quot;Histogram of MVN Distribution (1st Var)&quot;, xlab = &quot;Value&quot;, ylab = &quot;Frequency&quot; ) MGF \\[ m_{\\mathbf{X}}(\\mathbf{t}) = \\exp\\left(\\boldsymbol{\\mu}^T \\mathbf{t} + \\frac{1}{2} \\mathbf{t}^T \\boldsymbol{\\Sigma} \\mathbf{t} \\right) \\] Mean \\[ E[\\mathbf{X}] = \\boldsymbol{\\mu} \\] Variance \\[ \\text{Var}(\\mathbf{X}) = \\boldsymbol{\\Sigma} \\] References "],["general-math.html", "2.3 General Math", " 2.3 General Math 2.3.1 Number Sets Notation Denotes Examples \\(\\emptyset\\) Empty set No members \\(\\mathbb{N}\\) Natural numbers \\(\\{1, 2, \\ldots\\}\\) \\(\\mathbb{Z}\\) Integers \\(\\{\\ldots, -1, 0, 1, \\ldots\\}\\) \\(\\mathbb{Q}\\) Rational numbers Including fractions \\(\\mathbb{R}\\) Real numbers Including all finite decimals, irrational numbers \\(\\mathbb{C}\\) Complex numbers Including numbers of the form \\(a + bi\\) where \\(i^2 = -1\\) 2.3.2 Summation Notation and Series 2.3.2.1 Chebyshev’s Inequality Let \\(X\\) be a random variable with mean \\(\\mu\\) and standard deviation \\(\\sigma\\). For any positive number \\(k\\), Chebyshev’s Inequality states: \\[ P(|X-\\mu| \\geq k\\sigma) \\leq \\frac{1}{k^2} \\] This provides a probabilistic bound on the deviation of \\(X\\) from its mean and does not require \\(X\\) to follow a normal distribution. 2.3.2.2 Geometric Sum For a geometric series of the form \\(\\sum_{k=0}^{n-1} ar^k\\), the sum is given by: \\[ \\sum_{k=0}^{n-1} ar^k = a\\frac{1-r^n}{1-r} \\quad \\text{where } r \\neq 1 \\] 2.3.2.3 Infinite Geometric Series When \\(|r| &lt; 1\\), the geometric series converges to: \\[ \\sum_{k=0}^\\infty ar^k = \\frac{a}{1-r} \\] 2.3.2.4 Binomial Theorem The binomial expansion for \\((x + y)^n\\) is: \\[ (x + y)^n = \\sum_{k=0}^n \\binom{n}{k} x^{n-k} y^k \\quad \\text{where } n \\geq 0 \\] 2.3.2.5 Binomial Series For non-integer exponents \\(\\alpha\\): \\[ \\sum_{k=0}^\\infty \\binom{\\alpha}{k} x^k = (1 + x)^\\alpha \\quad \\text{where } |x| &lt; 1 \\] 2.3.2.6 Telescoping Sum A telescoping sum simplifies as intermediate terms cancel, leaving: \\[ \\sum_{a \\leq k &lt; b} \\Delta F(k) = F(b) - F(a) \\quad \\text{where } a, b \\in \\mathbb{Z}, a \\leq b \\] 2.3.2.7 Vandermonde Convolution The Vandermonde convolution identity is: \\[ \\sum_{k=0}^n \\binom{r}{k} \\binom{s}{n-k} = \\binom{r+s}{n} \\quad \\text{where } n \\in \\mathbb{Z} \\] 2.3.2.8 Exponential Series The exponential function \\(e^x\\) can be represented as: \\[ \\sum_{k=0}^\\infty \\frac{x^k}{k!} = e^x \\quad \\text{where } x \\in \\mathbb{C} \\] 2.3.2.9 Taylor Series The Taylor series expansion for a function \\(f(x)\\) about \\(x=a\\) is: \\[ \\sum_{k=0}^\\infty \\frac{f^{(k)}(a)}{k!} (x-a)^k = f(x) \\] For \\(a = 0\\), this becomes the Maclaurin series. 2.3.2.10 Maclaurin Series for \\(e^z\\) A special case of the Taylor series, the Maclaurin expansion for \\(e^z\\) is: \\[ e^z = 1 + z + \\frac{z^2}{2!} + \\frac{z^3}{3!} + \\cdots \\] 2.3.2.11 Euler’s Summation Formula Euler’s summation formula connects sums and integrals: \\[ \\sum_{a \\leq k &lt; b} f(k) = \\int_a^b f(x) \\, dx + \\sum_{k=1}^m \\frac{B_k}{k!} \\left[f^{(k-1)}(x)\\right]_a^b + (-1)^{m+1} \\int_a^b \\frac{B_m(x-\\lfloor x \\rfloor)}{m!} f^{(m)}(x) \\, dx \\] Here, \\(B_k\\) are Bernoulli numbers. For \\(m=1\\) (Trapezoidal Rule): \\[ \\sum_{a \\leq k &lt; b} f(k) \\approx \\int_a^b f(x) \\, dx - \\frac{1}{2}(f(b) - f(a)) \\] 2.3.3 Taylor Expansion A differentiable function, \\(G(x)\\), can be written as an infinite sum of its derivatives. More specifically, if \\(G(x)\\) is infinitely differentiable and evaluated at \\(a\\), its Taylor expansion is: \\[ G(x) = G(a) + \\frac{G&#39;(a)}{1!} (x-a) + \\frac{G&#39;&#39;(a)}{2!}(x-a)^2 + \\frac{G&#39;&#39;&#39;(a)}{3!}(x-a)^3 + \\dots \\] This expansion is valid within the radius of convergence. 2.3.4 Law of Large Numbers Let \\(X_1, X_2, \\ldots\\) be an infinite sequence of independent and identically distributed (i.i.d.) random variables with finite mean \\(\\mu\\) and variance \\(\\sigma^2\\). The Law of Large Numbers (LLN) states that the sample average: \\[ \\bar{X}_n = \\frac{1}{n} \\sum_{i=1}^n X_i \\] converges to the expected value \\(\\mu\\) as \\(n \\rightarrow \\infty\\). This can be expressed as: \\[ \\bar{X}_n \\rightarrow \\mu \\quad \\text{(as $n \\rightarrow \\infty$)}. \\] 2.3.4.1 Variance of the Sample Mean The variance of the sample mean decreases as the sample size increases: \\[ Var(\\bar{X}_n) = Var\\left(\\frac{1}{n} \\sum_{i=1}^n X_i\\right) = \\frac{\\sigma^2}{n}. \\] \\[ \\begin{aligned} Var(\\bar{X}_n) &amp;= Var(\\frac{1}{n}(X_1 + ... + X_n)) =Var\\left(\\frac{1}{n} \\sum_{i=1}^n X_i\\right) \\\\ &amp;= \\frac{1}{n^2}Var(X_1 + ... + X_n) \\\\ &amp;=\\frac{n\\sigma^2}{n^2}=\\frac{\\sigma^2}{n} \\end{aligned} \\] Note: The connection between the Law of Large Numbers and the Normal Distribution lies in the Central Limit Theorem. The CLT states that, regardless of the original distribution of a dataset, the distribution of the sample means will tend to follow a normal distribution as the sample size becomes larger. The difference between [Weak Law] and [Strong Law] regards the mode of convergence. 2.3.4.2 Weak Law of Large Numbers The Weak Law of Large Numbers states that the sample average converges in probability to the expected value: \\[ \\bar{X}_n \\xrightarrow{p} \\mu \\quad \\text{as } n \\rightarrow \\infty. \\] Formally, for any \\(\\epsilon &gt; 0\\): \\[ \\lim_{n \\to \\infty} P(|\\bar{X}_n - \\mu| &gt; \\epsilon) = 0. \\] Additionally, the sample mean of an i.i.d. random sample (\\(\\{ X_i \\}_{i=1}^n\\)) from any population with a finite mean and variance is a consistent estimator of the population mean \\(\\mu\\): \\[ plim(\\bar{X}_n) = plim\\left(\\frac{1}{n}\\sum_{i=1}^{n} X_i\\right) = \\mu. \\] 2.3.4.3 Strong Law of Large Numbers The Strong Law of Large Numbers states that the sample average converges almost surely to the expected value: \\[ \\bar{X}_n \\xrightarrow{a.s.} \\mu \\quad \\text{as } n \\rightarrow \\infty. \\] Equivalently, this can be expressed as: \\[ P\\left(\\lim_{n \\to \\infty} \\bar{X}_n = \\mu\\right) = 1. \\] 2.3.5 Convergence 2.3.5.1 Convergence in Probability As \\(n \\rightarrow \\infty\\), an estimator (random variable) \\(\\theta_n\\) is said to converge in probability to a constant \\(c\\) if: \\[ \\lim_{n \\to \\infty} P(|\\theta_n - c| \\geq \\epsilon) = 0 \\quad \\text{for any } \\epsilon &gt; 0. \\] This is denoted as: \\[ plim(\\theta_n) = c \\quad \\text{or equivalently, } \\theta_n \\xrightarrow{p} c. \\] Properties of Convergence in Probability: Slutsky’s Theorem: For a continuous function \\(g(\\cdot)\\), if \\(plim(\\theta_n) = \\theta\\), then: \\[ plim(g(\\theta_n)) = g(\\theta) \\] If \\(\\gamma_n \\xrightarrow{p} \\gamma\\), then: \\(plim(\\theta_n + \\gamma_n) = \\theta + \\gamma\\), \\(plim(\\theta_n \\gamma_n) = \\theta \\gamma\\), \\(plim(\\theta_n / \\gamma_n) = \\theta / \\gamma\\) (if \\(\\gamma \\neq 0\\)). These properties extend to random vectors and matrices. 2.3.5.2 Convergence in Distribution As \\(n \\rightarrow \\infty\\), the distribution of a random variable \\(X_n\\) may converge to another (“fixed”) distribution. Formally, \\(X_n\\) with CDF \\(F_n(x)\\) converges in distribution to \\(X\\) with CDF \\(F(x)\\) if: \\[ \\lim_{n \\to \\infty} |F_n(x) - F(x)| = 0 \\] at all points of continuity of \\(F(x)\\). This is denoted as: \\[ X_n \\xrightarrow{d} X \\quad \\text{or equivalently, } F(x) \\text{ is the limiting distribution of } X_n. \\] Asymptotic Properties: \\(E(X)\\): Limiting mean (asymptotic mean). \\(Var(X)\\): Limiting variance (asymptotic variance). Note: Limiting expectations and variances do not necessarily match the expectations and variances of \\(X_n\\): \\[ \\begin{aligned} E(X) &amp;\\neq \\lim_{n \\to \\infty} E(X_n), \\\\ Avar(X_n) &amp;\\neq \\lim_{n \\to \\infty} Var(X_n). \\end{aligned} \\] Properties of Convergence in Distribution: Continuous Mapping Theorem: For a continuous function \\(g(\\cdot)\\), if \\(X_n \\xrightarrow{d} X\\), then: \\[ g(X_n) \\xrightarrow{d} g(X). \\] If \\(Y_n \\xrightarrow{d} c\\) (a constant), then: \\(X_n + Y_n \\xrightarrow{d} X + c\\), \\(Y_n X_n \\xrightarrow{d} c X\\), \\(X_n / Y_n \\xrightarrow{d} X / c\\) (if \\(c \\neq 0\\)). These properties also extend to random vectors and matrices. 2.3.5.3 Summary: Properties of Convergence Convergence in Probability Convergence in Distribution Slutsky’s Theorem: For a continuous \\(g(\\cdot)\\), if \\(plim(\\theta_n) = \\theta\\), then \\(plim(g(\\theta_n)) = g(\\theta)\\) Continuous Mapping Theorem: For a continuous \\(g(\\cdot)\\), if \\(X_n \\xrightarrow{d} X\\), then \\(g(X_n) \\xrightarrow{d} g(X)\\) If \\(\\gamma_n \\xrightarrow{p} \\gamma\\), then: If \\(Y_n \\xrightarrow{d} c\\), then: \\(plim(\\theta_n + \\gamma_n) = \\theta + \\gamma\\) \\(X_n + Y_n \\xrightarrow{d} X + c\\) \\(plim(\\theta_n \\gamma_n) = \\theta \\gamma\\) \\(Y_n X_n \\xrightarrow{d} c X\\) \\(plim(\\theta_n / \\gamma_n) = \\theta / \\gamma\\) (if \\(\\gamma \\neq 0\\)) \\(X_n / Y_n \\xrightarrow{d} X / c\\) (if \\(c \\neq 0\\)) Relationship between Convergence Types: Convergence in Probability is stronger than Convergence in Distribution. Therefore: Convergence in Distribution does not guarantee Convergence in Probability. 2.3.6 Sufficient Statistics and Likelihood 2.3.6.1 Likelihood The likelihood describes the degree to which the observed data supports a particular value of a parameter \\(\\theta\\). The exact value of the likelihood is not meaningful; only relative comparisons matter. Likelihood is informative when comparing parameter values, helping identify which values of \\(\\theta\\) are more plausible given the data. For a single observation \\(Y = y\\), the likelihood function is defined as: \\[ L(\\theta_0; y) = P(Y = y \\mid \\theta = \\theta_0) = f_Y(y; \\theta_0), \\] where \\(f_Y(y; \\theta_0)\\) is the probability density (or mass) function of \\(Y\\) for the parameter \\(\\theta_0\\). Key Insight: The likelihood tells us how plausible \\(\\theta\\) is, given the data we observed. It is not a probability, but it is proportional to the probability of observing the data under a given parameter value. Example: Suppose \\(Y\\) follows a binomial distribution with \\(n=10\\) trials and probability of success \\(p\\): \\[ P(Y = y \\mid p) = \\binom{10}{y} p^y (1-p)^{10-y}. \\] For \\(y=7\\) observed successes, the likelihood function becomes: \\[ L(p; y=7) = \\binom{10}{7} p^7 (1-p)^3. \\] We can use this to compare how well different values of \\(p\\) explain the observed data. 2.3.6.2 Likelihood Ratio The likelihood ratio compares the relative likelihood of two parameter values \\(\\theta_0\\) and \\(\\theta_1\\) given the observed data: \\[ \\text{Likelihood Ratio} = \\frac{L(\\theta_0; y)}{L(\\theta_1; y)}. \\] A likelihood ratio greater than 1 implies that \\(\\theta_0\\) is more likely than \\(\\theta_1\\), given the observed data. Likelihood ratios are widely used in hypothesis testing and model comparison to evaluate the evidence against a null hypothesis. Example: For the binomial example above, consider \\(p_0 = 0.7\\) and \\(p_1 = 0.5\\). The likelihood ratio is: \\[ \\frac{L(p_0; y=7)}{L(p_1; y=7)} = \\frac{\\binom{10}{7} (0.7)^7 (0.3)^3}{\\binom{10}{7} (0.5)^7 (0.5)^3}. \\] This simplifies to: \\[ \\frac{(0.7)^7 (0.3)^3}{(0.5)^7 (0.5)^3}. \\] The likelihood ratio quantifies how much more likely \\(p_0\\) is compared to \\(p_1\\) given the observed data. 2.3.6.3 Likelihood Function For a given sample, the likelihood for all possible values of \\(\\theta\\) forms the likelihood function: \\[ L(\\theta) = L(\\theta; y) = f_Y(y; \\theta). \\] For a sample of size \\(n\\), assuming independence among observations: \\[ L(\\theta) = \\prod_{i=1}^{n} f_Y(y_i; \\theta). \\] Taking the natural logarithm of the likelihood gives the log-likelihood function: \\[ l(\\theta) = \\sum_{i=1}^{n} \\log f_Y(y_i; \\theta). \\] Why Log-Likelihood? The log-likelihood simplifies computation by turning products into sums. It is particularly useful for optimization, as many numerical methods (e.g., gradient-based algorithms) perform better with sums than products. Example: For \\(Y_1, Y_2, \\dots, Y_n\\) i.i.d. observations from a normal distribution \\(N(\\mu, \\sigma^2)\\), the likelihood is: \\[ L(\\mu, \\sigma^2) = \\prod_{i=1}^n \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\exp\\left(-\\frac{(y_i - \\mu)^2}{2\\sigma^2}\\right). \\] The log-likelihood is: \\[ l(\\mu, \\sigma^2) = -\\frac{n}{2} \\log(2\\pi\\sigma^2) - \\frac{1}{2\\sigma^2} \\sum_{i=1}^n (y_i - \\mu)^2. \\] 2.3.6.4 Sufficient Statistics A sufficient statistic \\(T(y)\\) is a summary of the data that retains all information about a parameter \\(\\theta\\). It allows us to focus on this condensed statistic without losing any inferential power regarding \\(\\theta\\). Formal Definition: A statistic \\(T(y)\\) is sufficient for a parameter \\(\\theta\\) if the conditional probability distribution of the data \\(y\\), given \\(T(y)\\) and \\(\\theta\\), does not depend on \\(\\theta\\). Mathematically: \\[ P(Y = y \\mid T(y), \\theta) = P(Y = y \\mid T(y)). \\] Alternatively, by the Factorization Theorem, \\(T(y)\\) is sufficient if the likelihood can be written as: \\[ L(\\theta; y) = c(y) L^*(\\theta; T(y)), \\] where: \\(c(y)\\) is a function of the data independent of \\(\\theta\\). \\(L^*(\\theta; T(y))\\) is a function that depends on \\(\\theta\\) and \\(T(y)\\). In other words, the likelihood function can be rewritten in terms of \\(T(y)\\) alone, without loss of information about \\(\\theta\\). Why Sufficient Statistics Matter: They allow us to simplify the analysis by reducing the data without losing inferential power. Many inferential procedures (e.g., Maximum Likelihood Estimation, Bayesian methods) are simplified by working with sufficient statistics. Example: Consider a sample of i.i.d. observations \\(Y_1, Y_2, \\dots, Y_n\\) from a normal distribution \\(N(\\mu, \\sigma^2)\\). Here: The sample mean \\(\\bar{Y} = \\frac{1}{n} \\sum_{i=1}^n Y_i\\) is sufficient for \\(\\mu\\). The sample variance \\(S^2 = \\frac{1}{n-1} \\sum_{i=1}^n (Y_i - \\bar{Y})^2\\) is sufficient for \\(\\sigma^2\\). Verification: The joint density of \\(y_1, y_2, \\dots, y_n\\) can be factored as: \\[ f(y_1, \\dots, y_n; \\mu, \\sigma^2) = \\underbrace{\\frac{1}{(2\\pi\\sigma^2)^{n/2}} \\exp\\left(-\\frac{1}{2\\sigma^2} \\sum_{i=1}^n (y_i - \\bar{y})^2\\right)}_{L^*(\\mu, \\sigma^2; \\bar{y}, s^2)} \\cdot \\underbrace{\\text{[independent of $\\mu$, $\\sigma^2$]}}_{c(y)}. \\] This shows \\(\\bar{Y}\\) and \\(S^2\\) are sufficient. Usage of Sufficient Statistics Maximum Likelihood Estimation (MLE): In MLE, sufficient statistics simplify the optimization problem by reducing the data without losing information. Example: In the normal distribution case, \\(\\mu\\) can be estimated using the sufficient statistic \\(\\bar{Y}\\): \\[ \\hat{\\mu}_{MLE} = \\bar{Y}. \\] Bayesian Inference: In Bayesian analysis, the posterior distribution depends on the sufficient statistic rather than the entire data set. For the normal case: \\[ P(\\mu \\mid \\bar{Y}) \\propto P(\\mu) L(\\mu; \\bar{Y}). \\] Data Compression: In practice, sufficient statistics reduce the complexity of data storage and analysis by condensing all relevant information into a smaller representation. 2.3.6.5 Nuisance Parameters Parameters that are not of direct interest in the analysis but are necessary to model the data are called nuisance parameters. Profile Likelihood: To handle nuisance parameters, replace them with their maximum likelihood estimates (MLEs) in the likelihood function, creating a profile likelihood for the parameter of interest. Example of Profile Likelihood: In a regression model with parameters \\(\\beta\\) (coefficients) and \\(\\sigma^2\\) (error variance), \\(\\sigma^2\\) is often a nuisance parameter. The profile likelihood for \\(\\beta\\) is obtained by substituting the MLE of \\(\\sigma^2\\) into the likelihood: \\[ L_p(\\beta) = L(\\beta, \\hat{\\sigma}^2), \\] where \\(\\hat{\\sigma}^2\\) is the MLE of \\(\\sigma^2\\) given \\(\\beta\\). This simplifies the problem to focus only on the parameter of interest, \\(\\beta\\). 2.3.7 Parameter Transformations Transformations of parameters are often used to improve interpretability or statistical properties of models. 2.3.7.1 Log-Odds Transformation The log-odds transformation is commonly used in logistic regression and binary classification problems. It transforms probabilities (which are bounded between 0 and 1) to the real line: \\[ \\text{Log odds} = g(\\theta) = \\ln\\left(\\frac{\\theta}{1-\\theta}\\right), \\] where \\(\\theta\\) represents a probability (e.g., the success probability in a Bernoulli trial). 2.3.7.2 General Parameter Transformations For a parameter \\(\\theta\\) and a transformation \\(g(\\cdot)\\): If \\(\\theta \\in (a, b)\\), \\(g(\\theta)\\) may map \\(\\theta\\) to a different range (e.g., \\(\\mathbb{R}\\)). Useful transformations include: Logarithmic: \\(g(\\theta) = \\ln(\\theta)\\) for \\(\\theta &gt; 0\\). Exponential: \\(g(\\theta) = e^{\\theta}\\) for unconstrained \\(\\theta\\). Square root: \\(g(\\theta) = \\sqrt{\\theta}\\) for \\(\\theta \\geq 0\\). Jacobian Adjustment for Transformations: If transforming a parameter in Bayesian inference, the Jacobian of the transformation must be included to ensure proper posterior scaling. 2.3.7.3 Applications of Parameter Transformations Improving Interpretability: Probabilities can be transformed to odds or log-odds for logistic models. Rates can be transformed logarithmically for multiplicative effects. Statistical Modeling: Variance-stabilizing transformations (e.g., log for Poisson data or arcsine for proportions). Regularization or simplification of complex relationships. Optimization: Transforming constrained parameters (e.g., probabilities or positive scales) to unconstrained scales simplifies optimization algorithms. "],["data-importexport.html", "2.4 Data Import/Export", " 2.4 Data Import/Export Extended Manual by R Table by Rio Vignette Format Typical Extension Import Package Export Package Installed by Default Comma-separated data .csv data.table data.table Yes Pipe-separated data .psv data.table data.table Yes Tab-separated data .tsv data.table data.table Yes CSVY (CSV + YAML metadata header) .csvy data.table data.table Yes SAS .sas7bdat haven haven Yes SPSS .sav haven haven Yes SPSS (compressed) .zsav haven haven Yes Stata .dta haven haven Yes SAS XPORT .xpt haven haven Yes SPSS Portable .por haven Yes Excel .xls readxl Yes Excel .xlsx readxl openxlsx Yes R syntax .R base base Yes Saved R objects .RData, .rda base base Yes Serialized R objects .rds base base Yes Epiinfo .rec foreign Yes Minitab .mtp foreign Yes Systat .syd foreign Yes “XBASE” database files .dbf foreign foreign Yes Weka Attribute-Relation File Format .arff foreign foreign Yes Data Interchange Format .dif utils Yes Fortran data no recognized extension utils Yes Fixed-width format data .fwf utils utils Yes gzip comma-separated data .csv.gz utils utils Yes Apache Arrow (Parquet) .parquet arrow arrow No EViews .wf1 hexView No Feather R/Python interchange format .feather feather feather No Fast Storage .fst fst fst No JSON .json jsonlite jsonlite No Matlab .mat rmatio rmatio No OpenDocument Spreadsheet .ods readODS readODS No HTML Tables .html xml2 xml2 No Shallow XML documents .xml xml2 xml2 No YAML .yml yaml yaml No Clipboard default is tsv clipr clipr No Google Sheets as Comma-separated data R limitations: By default, R use 1 core in CPU R puts data into memory (limit around 2-4 GB), while SAS uses data from files on demand Categorization Medium-size file: within RAM limit, around 1-2 GB Large file: 2-10 GB, there might be some workaround solution Very large file &gt; 10 GB, you have to use distributed or parallel computing Solutions: buy more RAM HPC packages Explicit Parallelism Implicit Parallelism Large Memory Map/Reduce specify number of rows and columns, typically including command nrow = Use packages that store data differently bigmemory, biganalytics, bigtabulate , synchronicity, bigalgebra, bigvideo use C++ to store matrices, but also support one class type For multiple class types, use ff package Very Large datasets use RHaddop package HadoopStreaming Rhipe 2.4.1 Medium size library(&quot;rio&quot;) To import multiple files in a directory str(import_list(dir()), which = 1) To export a single data file export(data, &quot;data.csv&quot;) export(data,&quot;data.dta&quot;) export(data,&quot;data.txt&quot;) export(data,&quot;data_cyl.rds&quot;) export(data,&quot;data.rdata&quot;) export(data,&quot;data.R&quot;) export(data,&quot;data.csv.zip&quot;) export(data,&quot;list.json&quot;) To export multiple data files export(list(mtcars = mtcars, iris = iris), &quot;data_file_type&quot;) # where data_file_type should substituted with the extension listed above To convert between data file types # convert Stata to SPSS convert(&quot;data.dta&quot;, &quot;data.sav&quot;) 2.4.2 Large size 2.4.2.1 Cloud Computing: Using AWS for Big Data Amazon Web Service (AWS): Compute resources can be rented at approximately $1/hr. Use AWS to process large datasets without overwhelming your local machine. 2.4.2.2 Importing Large Files as Chunks 2.4.2.2.1 Using Base R file_in &lt;- file(&quot;in.csv&quot;, &quot;r&quot;) # Open a connection to the file chunk_size &lt;- 100000 # Define chunk size x &lt;- readLines(file_in, n = chunk_size) # Read data in chunks close(file_in) # Close the file connection 2.4.2.2.2 Using the data.table Package library(data.table) mydata &lt;- fread(&quot;in.csv&quot;, header = TRUE) # Fast and memory-efficient 2.4.2.2.3 Using the ff Package library(ff) x &lt;- read.csv.ffdf( file = &quot;file.csv&quot;, nrow = 10, # Total rows header = TRUE, # Include headers VERBOSE = TRUE, # Display progress first.rows = 10000, # Initial chunk next.rows = 50000, # Subsequent chunks colClasses = NA ) 2.4.2.2.4 Using the bigmemory Package library(bigmemory) my_data &lt;- read.big.matrix(&#39;in.csv&#39;, header = TRUE) 2.4.2.2.5 Using the sqldf Package library(sqldf) my_data &lt;- read.csv.sql(&#39;in.csv&#39;) # Example: Filtering during import iris2 &lt;- read.csv.sql(&quot;iris.csv&quot;, sql = &quot;SELECT * FROM file WHERE Species = &#39;setosa&#39;&quot;) 2.4.2.2.6 Using the RMySQL Package library(RMySQL) RQLite package Download SQLite, pick “A bundle of command-line tools for managing SQLite database files” for Window 10 Unzip file, and open sqlite3.exe. Type in the prompt sqlite&gt; .cd 'C:\\Users\\data' specify path to your desired directory sqlite&gt; .open database_name.db to open a database To import the CSV file into the database sqlite&gt; .mode csv specify to SQLite that the next file is .csv file sqlite&gt; .import file_name.csv datbase_name to import the csv file to the database sqlite&gt; .exit After you’re done, exit the sqlite program library(DBI) library(dplyr) library(&quot;RSQLite&quot;) setwd(&quot;&quot;) con &lt;- dbConnect(RSQLite::SQLite(), &quot;data_base.db&quot;) tbl &lt;- tbl(con, &quot;data_table&quot;) tbl %&gt;% filter() %&gt;% select() %&gt;% collect() # to actually pull the data into the workspace dbDisconnect(con) 2.4.2.2.7 Using the arrow Package library(arrow) data &lt;- read_csv_arrow(&quot;file.csv&quot;) 2.4.2.2.8 Using the vroom Package library(vroom) # Import a compressed CSV file compressed &lt;- vroom_example(&quot;mtcars.csv.zip&quot;) data &lt;- vroom(compressed) 2.4.2.2.9 Using the data.table Package s = fread(&quot;sample.csv&quot;) 2.4.2.2.10 Comparisons Regarding Storage Space test = ff::read.csv.ffdf(file = &quot;&quot;) object.size(test) # Highest memory usage test1 = data.table::fread(file = &quot;&quot;) object.size(test1) # Lowest memory usage test2 = readr::read_csv(file = &quot;&quot;) object.size(test2) # Second lowest memory usage test3 = vroom::vroom(file = &quot;&quot;) object.size(test3) # Similar to read_csv To work with large datasets, you can compress them into csv.gz format. However, typically, R requires loading the entire dataset before exporting it, which can be impractical for data over 10 GB. In such cases, processing the data sequentially becomes necessary. Although read.csv is slower compared to readr::read_csv, it can handle connections and allows for sequential looping, making it useful for large files. Currently, readr::read_csv does not support the skip argument efficiently for large data. Even if you specify skip, the function reads all preceding lines again. For instance, if you run read_csv(file, n_max = 100, skip = 0) followed by read_csv(file, n_max = 200, skip = 100), the first 100 rows are re-read. In contrast, read.csv can continue from where it left off without re-reading previous rows. If you encounter an error such as: “Error in (function (con, what, n = 1L, size = NA_integer_, signed = TRUE): can only read from a binary connection”, you can modify the connection mode from \"r\" to \"rb\" (read binary). Although the file function is designed to detect the appropriate format automatically, this workaround can help resolve the issue when it does not behave as expected. 2.4.2.3 Sequential Processing for Large Data # Open file for sequential reading file_conn &lt;- file(&quot;file.csv&quot;, open = &quot;r&quot;) while (TRUE) { # Read a chunk of data data_chunk &lt;- read.csv(file_conn, nrows = 1000) if (nrow(data_chunk) == 0) break # Stop if no more rows # Process the chunk here } close(file_conn) # Close connection "],["data-manipulation.html", "2.5 Data Manipulation", " 2.5 Data Manipulation # Load required packages library(tidyverse) library(lubridate) # ----------------------------- # Data Structures in R # ----------------------------- # Create vectors x &lt;- c(1, 4, 23, 4, 45) n &lt;- c(1, 3, 5) g &lt;- c(&quot;M&quot;, &quot;M&quot;, &quot;F&quot;) # Create a data frame df &lt;- data.frame(n, g) df # View the data frame #&gt; n g #&gt; 1 1 M #&gt; 2 3 M #&gt; 3 5 F str(df) # Check its structure #&gt; &#39;data.frame&#39;: 3 obs. of 2 variables: #&gt; $ n: num 1 3 5 #&gt; $ g: chr &quot;M&quot; &quot;M&quot; &quot;F&quot; # Using tibble for cleaner outputs df &lt;- tibble(n, g) df # View the tibble #&gt; # A tibble: 3 × 2 #&gt; n g #&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 1 M #&gt; 2 3 M #&gt; 3 5 F str(df) #&gt; tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #&gt; $ n: num [1:3] 1 3 5 #&gt; $ g: chr [1:3] &quot;M&quot; &quot;M&quot; &quot;F&quot; # Create a list lst &lt;- list(x, n, g, df) lst # Display the list #&gt; [[1]] #&gt; [1] 1 4 23 4 45 #&gt; #&gt; [[2]] #&gt; [1] 1 3 5 #&gt; #&gt; [[3]] #&gt; [1] &quot;M&quot; &quot;M&quot; &quot;F&quot; #&gt; #&gt; [[4]] #&gt; # A tibble: 3 × 2 #&gt; n g #&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 1 M #&gt; 2 3 M #&gt; 3 5 F # Name list elements lst2 &lt;- list(num = x, size = n, sex = g, data = df) lst2 # Named list elements are easier to reference #&gt; $num #&gt; [1] 1 4 23 4 45 #&gt; #&gt; $size #&gt; [1] 1 3 5 #&gt; #&gt; $sex #&gt; [1] &quot;M&quot; &quot;M&quot; &quot;F&quot; #&gt; #&gt; $data #&gt; # A tibble: 3 × 2 #&gt; n g #&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 1 M #&gt; 2 3 M #&gt; 3 5 F # Another list example with numeric vectors lst3 &lt;- list( x = c(1, 3, 5, 7), y = c(2, 2, 2, 4, 5, 5, 5, 6), z = c(22, 3, 3, 3, 5, 10) ) lst3 #&gt; $x #&gt; [1] 1 3 5 7 #&gt; #&gt; $y #&gt; [1] 2 2 2 4 5 5 5 6 #&gt; #&gt; $z #&gt; [1] 22 3 3 3 5 10 # Find means of list elements # One at a time mean(lst3$x) #&gt; [1] 4 mean(lst3$y) #&gt; [1] 3.875 mean(lst3$z) #&gt; [1] 7.666667 # Using lapply to calculate means lapply(lst3, mean) #&gt; $x #&gt; [1] 4 #&gt; #&gt; $y #&gt; [1] 3.875 #&gt; #&gt; $z #&gt; [1] 7.666667 # Simplified output with sapply sapply(lst3, mean) #&gt; x y z #&gt; 4.000000 3.875000 7.666667 # Tidyverse alternative: map() function map(lst3, mean) #&gt; $x #&gt; [1] 4 #&gt; #&gt; $y #&gt; [1] 3.875 #&gt; #&gt; $z #&gt; [1] 7.666667 # Tidyverse with numeric output: map_dbl() map_dbl(lst3, mean) #&gt; x y z #&gt; 4.000000 3.875000 7.666667 # ----------------------------- # Binding Data Frames # ----------------------------- # Create tibbles for demonstration dat01 &lt;- tibble(x = 1:5, y = 5:1) dat02 &lt;- tibble(x = 10:16, y = x / 2) dat03 &lt;- tibble(z = runif(5)) # 5 random numbers from (0, 1) # Row binding bind_rows(dat01, dat02, dat01) #&gt; # A tibble: 17 × 2 #&gt; x y #&gt; &lt;int&gt; &lt;dbl&gt; #&gt; 1 1 5 #&gt; 2 2 4 #&gt; 3 3 3 #&gt; 4 4 2 #&gt; 5 5 1 #&gt; 6 10 5 #&gt; 7 11 5.5 #&gt; 8 12 6 #&gt; 9 13 6.5 #&gt; 10 14 7 #&gt; 11 15 7.5 #&gt; 12 16 8 #&gt; 13 1 5 #&gt; 14 2 4 #&gt; 15 3 3 #&gt; 16 4 2 #&gt; 17 5 1 # Add a new identifier column with .id bind_rows(dat01, dat02, .id = &quot;id&quot;) #&gt; # A tibble: 12 × 3 #&gt; id x y #&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; #&gt; 1 1 1 5 #&gt; 2 1 2 4 #&gt; 3 1 3 3 #&gt; 4 1 4 2 #&gt; 5 1 5 1 #&gt; 6 2 10 5 #&gt; 7 2 11 5.5 #&gt; 8 2 12 6 #&gt; 9 2 13 6.5 #&gt; 10 2 14 7 #&gt; 11 2 15 7.5 #&gt; 12 2 16 8 # Use named inputs for better identification bind_rows(&quot;dat01&quot; = dat01, &quot;dat02&quot; = dat02, .id = &quot;id&quot;) #&gt; # A tibble: 12 × 3 #&gt; id x y #&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; #&gt; 1 dat01 1 5 #&gt; 2 dat01 2 4 #&gt; 3 dat01 3 3 #&gt; 4 dat01 4 2 #&gt; 5 dat01 5 1 #&gt; 6 dat02 10 5 #&gt; 7 dat02 11 5.5 #&gt; 8 dat02 12 6 #&gt; 9 dat02 13 6.5 #&gt; 10 dat02 14 7 #&gt; 11 dat02 15 7.5 #&gt; 12 dat02 16 8 # Bind a list of data frames list01 &lt;- list(&quot;dat01&quot; = dat01, &quot;dat02&quot; = dat02) bind_rows(list01, .id = &quot;source&quot;) #&gt; # A tibble: 12 × 3 #&gt; source x y #&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; #&gt; 1 dat01 1 5 #&gt; 2 dat01 2 4 #&gt; 3 dat01 3 3 #&gt; 4 dat01 4 2 #&gt; 5 dat01 5 1 #&gt; 6 dat02 10 5 #&gt; 7 dat02 11 5.5 #&gt; 8 dat02 12 6 #&gt; 9 dat02 13 6.5 #&gt; 10 dat02 14 7 #&gt; 11 dat02 15 7.5 #&gt; 12 dat02 16 8 # Column binding bind_cols(dat01, dat03) #&gt; # A tibble: 5 × 3 #&gt; x y z #&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; #&gt; 1 1 5 0.265 #&gt; 2 2 4 0.410 #&gt; 3 3 3 0.780 #&gt; 4 4 2 0.926 #&gt; 5 5 1 0.501 # ----------------------------- # String Manipulation # ----------------------------- names &lt;- c(&quot;Ford, MS&quot;, &quot;Jones, PhD&quot;, &quot;Martin, Phd&quot;, &quot;Huck, MA, MLS&quot;) # Remove everything after the first comma str_remove(names, pattern = &quot;, [[:print:]]+&quot;) #&gt; [1] &quot;Ford&quot; &quot;Jones&quot; &quot;Martin&quot; &quot;Huck&quot; # Explanation: [[:print:]]+ matches one or more printable characters # ----------------------------- # Reshaping Data # ----------------------------- # Wide format data wide &lt;- data.frame( name = c(&quot;Clay&quot;, &quot;Garrett&quot;, &quot;Addison&quot;), test1 = c(78, 93, 90), test2 = c(87, 91, 97), test3 = c(88, 99, 91) ) # Long format data long &lt;- data.frame( name = rep(c(&quot;Clay&quot;, &quot;Garrett&quot;, &quot;Addison&quot;), each = 3), test = rep(1:3, 3), score = c(78, 87, 88, 93, 91, 99, 90, 97, 91) ) # Summary statistics aggregate(score ~ name, data = long, mean) # Mean score per student #&gt; name score #&gt; 1 Addison 92.66667 #&gt; 2 Clay 84.33333 #&gt; 3 Garrett 94.33333 aggregate(score ~ test, data = long, mean) # Mean score per test #&gt; test score #&gt; 1 1 87.00000 #&gt; 2 2 91.66667 #&gt; 3 3 92.66667 # Line plot of scores over tests ggplot(long, aes( x = factor(test), y = score, color = name, group = name )) + geom_point() + geom_line() + xlab(&quot;Test&quot;) + ggtitle(&quot;Test Scores by Student&quot;) # Reshape wide to long pivot_longer(wide, test1:test3, names_to = &quot;test&quot;, values_to = &quot;score&quot;) #&gt; # A tibble: 9 × 3 #&gt; name test score #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 Clay test1 78 #&gt; 2 Clay test2 87 #&gt; 3 Clay test3 88 #&gt; 4 Garrett test1 93 #&gt; 5 Garrett test2 91 #&gt; 6 Garrett test3 99 #&gt; 7 Addison test1 90 #&gt; 8 Addison test2 97 #&gt; 9 Addison test3 91 # Use names_prefix to clean column names pivot_longer( wide, -name, names_to = &quot;test&quot;, values_to = &quot;score&quot;, names_prefix = &quot;test&quot; ) #&gt; # A tibble: 9 × 3 #&gt; name test score #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 Clay 1 78 #&gt; 2 Clay 2 87 #&gt; 3 Clay 3 88 #&gt; 4 Garrett 1 93 #&gt; 5 Garrett 2 91 #&gt; 6 Garrett 3 99 #&gt; 7 Addison 1 90 #&gt; 8 Addison 2 97 #&gt; 9 Addison 3 91 # Reshape long to wide with explicit id_cols argument pivot_wider( long, id_cols = name, names_from = test, values_from = score ) #&gt; # A tibble: 3 × 4 #&gt; name `1` `2` `3` #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Clay 78 87 88 #&gt; 2 Garrett 93 91 99 #&gt; 3 Addison 90 97 91 # Add a prefix to the resulting columns pivot_wider( long, id_cols = name, names_from = test, values_from = score, names_prefix = &quot;test&quot; ) #&gt; # A tibble: 3 × 4 #&gt; name test1 test2 test3 #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Clay 78 87 88 #&gt; 2 Garrett 93 91 99 #&gt; 3 Addison 90 97 91 The verbs of data manipulation select: selecting (or not selecting) columns based on their names (eg: select columns Q1 through Q25) slice: selecting (or not selecting) rows based on their position (eg: select rows 1:10) mutate: add or derive new columns (or variables) based on existing columns (eg: create a new column that expresses measurement in cm based on existing measure in inches) rename: rename variables or change column names (eg: change “GraduationRate100” to “grad100”) filter: selecting rows based on a condition (eg: all rows where gender = Male) arrange: ordering rows based on variable(s) numeric or alphabetical order (eg: sort in descending order of Income) sample: take random samples of data (eg: sample 80% of data to create a “training” set) summarize: condense or aggregate multiple values into single summary values (eg: calculate median income by age group) group_by: convert a tbl into a grouped tbl so that operations are performed “by group”; allows us to summarize data or apply verbs to data by groups (eg, by gender or treatment) the pipe: %&gt;% Use Ctrl + Shift + M (Win) or Cmd + Shift + M (Mac) to enter in RStudio The pipe takes the output of a function and “pipes” into the first argument of the next function. new pipe is |&gt; It should be identical to the old one, except for certain special cases. := (Walrus operator): similar to = , but for cases where you want to use the glue package (i.e., dynamic changes in the variable name in the left-hand side) Writing function in R Tunneling {{ (called curly-curly) allows you to tunnel data-variables through arg-variables (i.e., function arguments) library(tidyverse) # ----------------------------- # Writing Functions with {{ }} # ----------------------------- # Define a custom function using {{ }} get_mean &lt;- function(data, group_var, var_to_mean) { data %&gt;% group_by({{group_var}}) %&gt;% summarize(mean = mean({{var_to_mean}}, na.rm = TRUE)) } # Apply the function data(&quot;mtcars&quot;) mtcars %&gt;% get_mean(group_var = cyl, var_to_mean = mpg) #&gt; # A tibble: 3 × 2 #&gt; cyl mean #&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 4 26.7 #&gt; 2 6 19.7 #&gt; 3 8 15.1 # Dynamically name the resulting variable get_mean &lt;- function(data, group_var, var_to_mean, prefix = &quot;mean_of&quot;) { data %&gt;% group_by({{group_var}}) %&gt;% summarize(&quot;{prefix}_{{var_to_mean}}&quot; := mean({{var_to_mean}}, na.rm = TRUE)) } # Apply the modified function mtcars %&gt;% get_mean(group_var = cyl, var_to_mean = mpg) #&gt; # A tibble: 3 × 2 #&gt; cyl mean_of_mpg #&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 4 26.7 #&gt; 2 6 19.7 #&gt; 3 8 15.1 "],["descriptive-statistics.html", "Chapter 3 Descriptive Statistics", " Chapter 3 Descriptive Statistics When you have an area of interest to research, a problem to solve, or a relationship to investigate, theoretical and empirical processes will help you. Estimand: Defined as “a quantity of scientific interest that can be calculated in the population and does not change its value depending on the data collection design used to measure it (i.e., it does not vary with sample size, survey design, the number of non-respondents, or follow-up efforts).” (Rubin 1996) Examples of estimands include: Population means Population variances Correlations Factor loadings Regression coefficients References "],["numerical-measures.html", "3.1 Numerical Measures", " 3.1 Numerical Measures There are differences between a population and a sample: Measures of Category Population Sample What is it? Reality A small fraction of reality (inference) Characteristics described by Parameters Statistics Central Tendency Mean \\(\\mu = E(Y)\\) \\(\\hat{\\mu} = \\overline{y}\\) Central Tendency Median 50th percentile \\(y_{(\\frac{n+1}{2})}\\) Dispersion Variance \\[\\sigma^2 = var(Y) = E[(Y-\\mu)^2]\\] \\(s^2 = \\frac{1}{n-1} \\sum_{i=1}^{n} (y_i - \\overline{y})^2\\) Dispersion Coefficient of Variation \\(\\frac{\\sigma}{\\mu}\\) \\(\\frac{s}{\\overline{y}}\\) Dispersion Interquartile Range Difference between 25th and 75th percentiles; robust to outliers Shape Skewness Standardized 3rd central moment (unitless) \\(g_1 = \\frac{\\mu_3}{\\sigma^3}\\) \\(\\hat{g_1} = \\frac{m_3}{m_2^{3/2}}\\) Shape Central moments \\(\\mu=E(Y)\\), \\(\\mu_2 = \\sigma^2 = E[(Y-\\mu)^2]\\), \\(\\mu_3 = E[(Y-\\mu)^3]\\), \\(\\mu_4 = E[(Y-\\mu)^4]\\) \\(m_2 = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\overline{y})^2\\) \\(m_3 = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\overline{y})^3\\) Shape Kurtosis (peakedness and tail thickness) Standardized 4th central moment \\(g_2^* = \\frac{E[(Y-\\mu)^4]}{\\sigma^4}\\) \\(\\hat{g_2} = \\frac{m_4}{m_2^2} - 3\\) Notes: Order Statistics: \\(y_{(1)}, y_{(2)}, \\ldots, y_{(n)}\\), where \\(y_{(1)} &lt; y_{(2)} &lt; \\ldots &lt; y_{(n)}\\). Coefficient of Variation: Defined as the standard deviation divided by the mean. A stable, unitless statistic useful for comparison. Symmetry: Symmetric distributions: Mean = Median; Skewness = 0. Skewed Right: Mean &gt; Median; Skewness &gt; 0. Skewed Left: Mean &lt; Median; Skewness &lt; 0. Central Moments: \\(\\mu = E(Y)\\) \\(\\mu_2 = \\sigma^2 = E[(Y-\\mu)^2]\\) \\(\\mu_3 = E[(Y-\\mu)^3]\\) \\(\\mu_4 = E[(Y-\\mu)^4]\\) Skewness (\\(\\hat{g_1}\\)) Sampling Distribution: For samples drawn from a normal population: \\(\\hat{g_1}\\) is approximately distributed as \\(N(0, \\frac{6}{n})\\) when \\(n &gt; 150\\). Inference: Large Samples: Inference on skewness can be based on the standard normal distribution. The 95% confidence interval for \\(g_1\\) is given by: \\[ \\hat{g_1} \\pm 1.96 \\sqrt{\\frac{6}{n}} \\] Small Samples: For small samples, consult special tables such as: Snedecor and Cochran (1989), Table A 19(i) Monte Carlo test results Kurtosis (\\(\\hat{g_2}\\)) Definitions and Relationships: A normal distribution has kurtosis \\(g_2^* = 3\\). Kurtosis is often redefined as: \\[ g_2 = \\frac{E[(Y - \\mu)^4]}{\\sigma^4} - 3 \\] where the 4th central moment is estimated by: \\[ m_4 = \\frac{\\sum_{i=1}^n (y_i - \\overline{y})^4}{n} \\] Sampling Distribution: For large samples (\\(n &gt; 1000\\)): \\(\\hat{g_2}\\) is approximately distributed as \\(N(0, \\frac{24}{n})\\). Inference: Large Samples: Inference for kurtosis can use standard normal tables. Small Samples: Refer to specialized tables such as: Snedecor and Cochran (1989), Table A 19(ii) Geary (1936) Kurtosis Value Tail Behavior Comparison to Normal Distribution \\(g_2 &gt; 0\\) (Leptokurtic) Heavier Tails Examples: \\(t\\)-distributions \\(g_2 &lt; 0\\) (Platykurtic) Lighter Tails Examples: Uniform or certain bounded distributions \\(g_2 = 0\\) (Mesokurtic) Normal Tails Exactly matches the normal distribution # Generate random data from a normal distribution data &lt;- rnorm(100) # Load the e1071 package for skewness and kurtosis functions library(e1071) # Calculate skewness skewness_value &lt;- skewness(data) cat(&quot;Skewness:&quot;, skewness_value, &quot;\\n&quot;) #&gt; Skewness: 0.362615 # Calculate kurtosis kurtosis_value &lt;- kurtosis(data) cat(&quot;Kurtosis:&quot;, kurtosis_value, &quot;\\n&quot;) #&gt; Kurtosis: -0.3066409 References "],["graphical-measures.html", "3.2 Graphical Measures", " 3.2 Graphical Measures The following table summarizes key graphical measures along with guidance on when and why to use each. More detailed explanations, visual examples, and sample code will be discussed after this table. Graph Type When to Use Why It's Useful Histogram - Exploring the distribution (shape, center, spread) of a single continuous variable - Quickly identifies frequency, modes, skewness, and potential outliers - Provides an overview of data \"shape\" Box-and-Whisker Plot - Comparing the same continuous variable across multiple categories - Identifying median, IQR, and outliers - Shows distribution at a glance (median, quartiles) - Highlights outliers and potential group differences Stem-and-Leaf Plot - Small, single-variable datasets where you want a textual yet visual distribution view - Reveals the distribution while preserving actual data values - Easy to spot clusters and gaps for small datasets Notched Boxplot - Similar to a standard boxplot but with confidence intervals around the median - If notches don't overlap, it suggests the medians differ significantly - Helps clarify whether differences in medians are likely meaningful Bagplot (2D Boxplot) - Bivariate data where you want a 2D \"boxplot\"-style overview - Identifying outliers in two-dimensional space - Depicts both central region (\"bag\") and potential outliers - Ideal for discovering clusters or unusual points in two continuous variables Boxplot Matrix - Multiple continuous variables that you want to compare side-by-side - Quickly compares distributions of many variables simultaneously - Helpful for spotting differences in median, spread, and outliers Violin Plot - Same use case as boxplot but you want more detail on the distribution's shape - Combines boxplot features with a density plot - Shows where data are concentrated or sparse within each category Scatterplot - Two continuous variables to check for relationships, trends, or outliers - Visualizes correlation or non-linear patterns - Aids in identifying clusters or extreme values Pairwise Scatterplots - Initial exploration of several variables at once - Enables a quick scan of relationships between all variable pairs - Useful for identifying multivariate patterns or potential correlation structures Tips for Selecting the Right Plot: Focus on Your Question: Are you comparing groups, investigating correlations, or just exploring the overall shape of the data? Match the Plot to Your Data Type: Continuous vs. categorical data often dictates your choice of chart. Mind the Data Size: Some plots become cluttered or lose clarity with very large datasets (e.g., stem-and-leaf), while others may be less informative with very few data points. 3.2.1 Shape Properly labeling your graphs is essential to ensure that viewers can easily understand the data presented. Below are several examples of graphical measures used to assess the shape of a dataset. # Generate random data for demonstration purposes data &lt;- rnorm(100) # Histogram: A graphical representation of the distribution of a dataset. hist( data, labels = TRUE, col = &quot;grey&quot;, breaks = 12, main = &quot;Histogram of Random Data&quot;, xlab = &quot;Value&quot;, ylab = &quot;Frequency&quot; ) # Interactive Histogram: Using &#39;highcharter&#39; for a more interactive visualization. # pacman::p_load(&quot;highcharter&quot;) # hchart(data, type = &quot;column&quot;, name = &quot;Random Data Distribution&quot;) # Box-and-Whisker Plot: Useful for visualizing the distribution and identifying outliers. boxplot( count ~ spray, data = InsectSprays, col = &quot;lightgray&quot;, main = &quot;Boxplot of Insect Sprays&quot;, xlab = &quot;Spray Type&quot;, ylab = &quot;Count&quot; ) # Notched Boxplot: The notches indicate a confidence interval around the median. boxplot( len ~ supp * dose, data = ToothGrowth, notch = TRUE, col = c(&quot;gold&quot;, &quot;darkgreen&quot;), main = &quot;Tooth Growth by Supplement and Dose&quot;, xlab = &quot;Supplement and Dose&quot;, ylab = &quot;Length&quot; ) # If the notches of two boxes do not overlap, this suggests that the medians differ significantly. # Stem-and-Leaf Plot: Provides a quick way to visualize the distribution of data. stem(data) #&gt; #&gt; The decimal point is at the | #&gt; #&gt; -2 | 4321000 #&gt; -1 | 87665 #&gt; -1 | 44433222111000 #&gt; -0 | 998888886666665555 #&gt; -0 | 433322221100 #&gt; 0 | 0112233333344 #&gt; 0 | 5666677888999999 #&gt; 1 | 0111122344 #&gt; 1 | 699 #&gt; 2 | 34 # Bagplot - A 2D Boxplot Extension: Visualizes the spread and identifies outliers in two-dimensional data. pacman::p_load(aplpack) attach(mtcars) bagplot(wt, mpg, xlab = &quot;Car Weight&quot;, ylab = &quot;Miles Per Gallon&quot;, main = &quot;Bagplot of Car Weight vs. Miles Per Gallon&quot;) detach(mtcars) Below are some advanced plot types that can provide deeper insights into data: # boxplot.matrix(): Creates boxplots for each column in a matrix. Useful for comparing multiple variables. graphics::boxplot.matrix( cbind( Uni05 = (1:100) / 21, Norm = rnorm(100), T5 = rt(100, df = 5), Gam2 = rgamma(100, shape = 2) ), main = &quot;Boxplot Marix&quot;, notch = TRUE, col = 1:4 ) # Violin Plot (vioplot()): Combines a boxplot with a density plot, providing more information about the distribution. library(&quot;vioplot&quot;) vioplot(data, col = &quot;lightblue&quot;, main = &quot;Violin Plot Example&quot;) 3.2.2 Scatterplot Scatterplots are useful for visualizing relationships between two continuous variables. They help identify patterns, correlations, and outliers. Pairwise Scatterplots: Visualizes relationships between all pairs of variables in a dataset. This is especially useful for exploring potential correlations. pairs(mtcars, main = &quot;Pairwise Scatterplots&quot;, pch = 19, col = &quot;blue&quot;) "],["normality-assessment.html", "3.3 Normality Assessment", " 3.3 Normality Assessment The Normal (Gaussian) distribution plays a critical role in statistical analyses due to its theoretical and practical applications. Many statistical methods assume normality in the data, making it essential to assess whether our variable of interest follows a normal distribution. To achieve this, we utilize both Numerical Measures and Graphical Assessment. 3.3.1 Graphical Assessment Graphical methods provide an intuitive way to visually inspect the normality of a dataset. One of the most common methods is the Q-Q plot (quantile-quantile plot). The Q-Q plot compares the quantiles of the sample data to the quantiles of a theoretical normal distribution. Deviations from the line indicate departures from normality. Below is an example of using the qqnorm and qqline functions in R to assess the normality of the precip dataset, which contains precipitation data (in inches per year) for 70 U.S. cities: # Load the required package pacman::p_load(&quot;car&quot;) # Generate a Q-Q plot qqnorm(precip, ylab = &quot;Precipitation [in/yr] for 70 US cities&quot;, main = &quot;Q-Q Plot of Precipitation Data&quot;) qqline(precip, col = &quot;red&quot;) Interpretation Theoretical Line: The red line represents the expected relationship if the data were perfectly normally distributed. Data Points: The dots represent the actual empirical data. If the points closely align with the theoretical line, we can conclude that the data likely follow a normal distribution. However, noticeable deviations from the line, particularly systematic patterns (e.g., curves or s-shaped patterns), indicate potential departures from normality. Tips Small Deviations: Minor deviations from the line in small datasets are not uncommon and may not significantly impact analyses that assume normality. Systematic Patterns: Look for clear trends, such as clusters or s-shaped curves, which suggest skewness or heavy tails. Complementary Tests: Always pair graphical methods with numerical measures (e.g., Shapiro-Wilk test) to make a robust conclusion. When interpreting a Q-Q plot, it is helpful to see both ideal and non-ideal scenarios. Below is an illustrative example: Normal Data: Points fall closely along the line. Skewed Data: Points systematically deviate from the line, curving upward or downward. Heavy Tails: Points deviate at the extremes (ends) of the distribution. By combining visual inspection and numerical measures, we can better understand the nature of our data and its alignment with the assumption of normality. 3.3.2 Summary Statistics While graphical assessments, such as Q-Q plots, provide a visual indication of normality, they may not always offer a definitive conclusion. To supplement graphical methods, statistical tests are often employed. These tests provide quantitative evidence to support or refute the assumption of normality. The most common methods can be classified into two categories: Methods Based on Normal Probability Plot Correlation Coefficient with Normal Probability Plots Shapiro-Wilk Test Methods based on empirical cumulative distribution function Anderson-Darling Test Kolmogorov-Smirnov Test Cramer-von Mises Test Jarque–Bera Test 3.3.2.1 Methods Based on Normal Probability Plot 3.3.2.1.1 Correlation Coefficient with Normal Probability Plots As described by Looney and Gulledge Jr (1985) and Samuel S. Shapiro and Francia (1972), this method evaluates the linearity of a normal probability plot by calculating the correlation coefficient between the ordered sample values \\(y_{(i)}\\) and their theoretical normal quantiles \\(m_i^*\\). A perfectly linear relationship suggests that the data follow a normal distribution. The correlation coefficient, denoted \\(W^*\\), is given by: \\[ W^* = \\frac{\\sum_{i=1}^{n}(y_{(i)}-\\bar{y})(m_i^* - 0)}{\\sqrt{\\sum_{i=1}^{n}(y_{(i)}-\\bar{y})^2 \\cdot \\sum_{i=1}^{n}(m_i^* - 0)^2}} \\] where: \\(\\bar{y}\\) is the sample mean, \\(\\bar{m^*} = 0\\) under the null hypothesis of normality. The Pearson product-moment correlation formula can also be used to evaluate this relationship: \\[ \\hat{\\rho} = \\frac{\\sum_{i=1}^{n}(y_i - \\bar{y})(x_i - \\bar{x})}{\\sqrt{\\sum_{i=1}^{n}(y_i - \\bar{y})^2 \\cdot \\sum_{i=1}^{n}(x_i - \\bar{x})^2}} \\] Interpretation: When the correlation is 1, the plot is exactly linear, and normality is assumed. The closer the correlation is to 0, the stronger the evidence to reject normality. Inference on \\(W^*\\) requires reference to special tables (Looney and Gulledge Jr 1985). library(&quot;EnvStats&quot;) # Perform Probability Plot Correlation Coefficient (PPCC) Test gofTest(data, test = &quot;ppcc&quot;)$p.value # Probability Plot Correlation Coefficient #&gt; [1] 0.3701575 3.3.2.1.2 Shapiro-Wilk Test The Shapiro-Wilk test (Samuel Sanford Shapiro and Wilk 1965) is one of the most widely used tests for assessing normality, especially for sample sizes \\(n &lt; 2000\\). This test evaluates how well the data’s order statistics match a theoretical normal distribution. The test statistic, \\(W\\), is computed as: \\[ W=\\frac{\\sum_{i=1}^{n}a_i x_{(i)}}{\\sum_{i=1}^{n}(x_{(i)}-\\bar{x})^2} \\] where \\(n\\): The sample size. \\(x_{(i)}\\): The \\(i\\)-th smallest value in the sample (the ordered data). \\(\\bar{x}\\): The sample mean. \\(a_i\\): Weights derived from the expected values and variances of the order statistics of a normal distribution, precomputed based on the sample size \\(n\\). Sensitive to: Symmetry The Shapiro-Wilk test assesses whether a sample is drawn from a normal distribution, which assumes symmetry around the mean. If the data exhibit skewness (a lack of symmetry), the test is likely to reject the null hypothesis of normality. Heavy Tails Heavy tails refer to distributions where extreme values (outliers) are more likely compared to a normal distribution. The Shapiro-Wilk test is also sensitive to such departures from normality because heavy tails affect the spread and variance, which are central to the calculation of the test statistic \\(W\\). Hence, the Shapiro-Wilk test’s sensitivity to these deviations makes it a powerful tool for detecting non-normality only in small to moderate-sized samples. However: It is generally more sensitive to symmetry (skewness) than to tail behavior (kurtosis). In very large samples, even small deviations in symmetry or tail behavior may cause the test to reject the null hypothesis, even if the data is practically “normal” for the intended analysis. Small sample sizes may lack power to detect deviations from normality. Large sample sizes may detect minor deviations that are not practically significant. Key Steps: Sort the Data: Arrange the sample data in ascending order, yielding \\(x_{(1)}, x_{(2)}, \\dots, x_{(n)}\\). Compute Weights: The weights \\(a_i\\) are determined using a covariance matrix of the normal order statistics. These are optimized to maximize the power of the test. Calculate \\(W\\): Use the formula to determine \\(W\\), which ranges from 0 to 1. Decision Rule: Null Hypothesis (\\(H_0\\)): The data follows a normal distribution. Alternative Hypothesis (\\(H_1\\)): The data does not follow a normal distribution. A small \\(W\\) value, along with a \\(p\\)-value below a chosen significance level (e.g., 0.05), leads to rejection of \\(H_0\\). Under normality, \\(W\\) approaches 1. Smaller values of \\(W\\) indicate deviations from normality. # Perform Shapiro-Wilk Test (Default for gofTest) EnvStats::gofTest(mtcars$mpg, test = &quot;sw&quot;) #&gt; #&gt; Results of Goodness-of-Fit Test #&gt; ------------------------------- #&gt; #&gt; Test Method: Shapiro-Wilk GOF #&gt; #&gt; Hypothesized Distribution: Normal #&gt; #&gt; Estimated Parameter(s): mean = 20.090625 #&gt; sd = 6.026948 #&gt; #&gt; Estimation Method: mvue #&gt; #&gt; Data: mtcars$mpg #&gt; #&gt; Sample Size: 32 #&gt; #&gt; Test Statistic: W = 0.9475647 #&gt; #&gt; Test Statistic Parameter: n = 32 #&gt; #&gt; P-value: 0.1228814 #&gt; #&gt; Alternative Hypothesis: True cdf does not equal the #&gt; Normal Distribution. 3.3.2.2 Methods Based on Empirical Cumulative Distribution Function The Empirical Cumulative Distribution Function (ECDF) is a way to represent the distribution of a sample dataset in cumulative terms. It answers the question: “What fraction of the observations in my dataset are less than or equal to a given value \\(x\\)?” The ECDF is defined as: \\[ F_n(x) = \\frac{1}{n} \\sum_{i=1}^{n} \\mathbb{I}(X_i \\leq x) \\] where: \\(F_(x)\\): ECDF at value \\(x\\). \\(n\\): Total number of data points. \\(\\mathbb{I}(X_i \\leq x)\\): Indicator function, equal to 1 if \\(X_i \\leq x\\), otherwise 0. This method is especially useful for large sample sizes and can be applied to distributions beyond the normal (Gaussian) distribution. Properties of the ECDF Step Function: The ECDF is a step function that increases by \\(1/n\\) at each data point. Non-decreasing: As \\(x\\) increases, \\(F_n(x)\\) never decreases. Range: The ECDF starts at 0 and ends at 1: \\(F_n(x) = 0\\) for \\(x &lt; \\min(X)\\). \\(F_n(x) = 1\\) for \\(x \\geq \\max(X)\\). Convergence: As \\(n \\to \\infty\\), the ECDF approaches the true cumulative distribution function (CDF) of the population. Let’s consider a sample dataset \\(\\{3, 7, 7, 10, 15\\}\\). The ECDF at different values of \\(x\\) is calculated as: \\(x\\) \\(\\mathbb{I}(X_i \\leq x)\\) for each \\(X_i\\) Count \\(\\leq x\\) ECDF \\(F_n(x)\\) \\(x = 5\\) \\(\\{1, 0, 0, 0, 0\\}\\) 1 \\(1/5 = 0.2\\) \\(x = 7\\) \\(\\{1, 1, 1, 0, 0\\}\\) 3 \\(3/5 = 0.6\\) \\(x = 12\\) \\(\\{1, 1, 1, 1, 0\\}\\) 4 \\(4/5 = 0.8\\) \\(x = 15\\) \\(\\{1, 1, 1, 1, 1\\}\\) 5 \\(5/5 = 1.0\\) Applications of the ECDF Goodness-of-fit Tests: Compare the ECDF to a theoretical CDF (e.g., using the Kolmogorov-Smirnov test). Outlier Detection: Analyze cumulative trends to spot unusual data points. Visual Data Exploration: Use the ECDF to understand the spread, skewness, and distribution of the data. Comparing Distributions: Compare the ECDFs of two datasets to assess differences in their distributions. # Load required libraries library(ggplot2) # Sample dataset data &lt;- c(3, 7, 7, 10, 15) # ECDF calculation ecdf_function &lt;- ecdf(data) # Generate a data frame for plotting ecdf_data &lt;- data.frame(x = sort(unique(data)), ecdf = sapply(sort(unique(data)), function(x) mean(data &lt;= x))) # Display ECDF values print(ecdf_data) #&gt; x ecdf #&gt; 1 3 0.2 #&gt; 2 7 0.6 #&gt; 3 10 0.8 #&gt; 4 15 1.0 # Plot the ECDF ggplot(ecdf_data, aes(x = x, y = ecdf)) + geom_step() + labs( title = &quot;Empirical Cumulative Distribution Function&quot;, x = &quot;Data Values&quot;, y = &quot;Cumulative Proportion&quot; ) + theme_minimal() # Alternatively plot.ecdf(as.numeric(mtcars[1, ]), verticals = TRUE, do.points = FALSE) 3.3.2.2.1 Anderson-Darling Test The Anderson-Darling test statistic (T. W. Anderson and Darling 1952) is given by: \\[ A^2 = \\int_{-\\infty}^{\\infty} \\frac{\\left(F_n(t) - F(t)\\right)^2}{F(t)(1 - F(t))} dF(t) \\] This test calculates a weighted average of squared deviations between the empirical cumulative distribution function (CDF), \\(F_n(t)\\), and the theoretical CDF, \\(F(t)\\). More weight is given to deviations in the tails of the distribution, which makes the test particularly sensitive to these regions. For a sample of size \\(n\\), with ordered observations \\(y_{(1)}, y_{(2)}, \\dots, y_{(n)}\\), the Anderson-Darling test statistic can also be written as: \\[ A^2 = -n - \\frac{1}{n} \\sum_{i=1}^n \\left[ (2i - 1) \\ln(F(y_{(i)})) + (2n + 1 - 2i) \\ln(1 - F(y_{(i)})) \\right] \\] For the normal distribution, the test statistic is further simplified. Using the transformation: \\[ p_i = \\Phi\\left(\\frac{y_{(i)} - \\bar{y}}{s}\\right), \\] where: \\(p_i\\) is the cumulative probability under the standard normal distribution, \\(y_{(i)}\\) are the ordered sample values, \\(\\bar{y}\\) is the sample mean, \\(s\\) is the sample standard deviation, the formula becomes: \\[ A^2 = -n - \\frac{1}{n} \\sum_{i=1}^n \\left[ (2i - 1) \\ln(p_i) + (2n + 1 - 2i) \\ln(1 - p_i) \\right]. \\] Key Features of the Test CDF-Based Weighting: The Anderson-Darling test gives more weight to deviations in the tails, which makes it particularly sensitive to detecting non-normality in these regions. Sensitivity: Compared to other goodness-of-fit tests, such as the Kolmogorov-Smirnov Test, the Anderson-Darling test is better at identifying differences in the tails of the distribution. Integral Form: The test statistic can also be expressed as an integral over the theoretical CDF: \\[ A^2 = n \\int_{-\\infty}^\\infty \\frac{\\left[F_n(t) - F(t)\\right]^2}{F(t)(1 - F(t))} dF(t), \\] where \\(F_n(t)\\) is the empirical CDF, and \\(F(t)\\) is the specified theoretical CDF. Applications: Testing for normality or other distributions (e.g., exponential, Weibull). Validating assumptions in statistical models. Comparing data to theoretical distributions. Hypothesis Testing Null Hypothesis (\\(H_0\\)): The data follows the specified distribution (e.g., normal distribution). Alternative Hypothesis (\\(H_1\\)): The data does not follow the specified distribution. The null hypothesis is rejected if \\(A^2\\) is too large, indicating a poor fit to the specified distribution. Critical values for the test statistic are provided by (Marsaglia and Marsaglia 2004) and (Stephens 1974). Applications to Other Distributions The Anderson-Darling test can be applied to various distributions by using specific transformation methods. Examples include: Exponential Logistic Gumbel Extreme-value Weibull (after logarithmic transformation: \\(\\log(\\text{Weibull}) = \\text{Gumbel}\\)) Gamma Cauchy von Mises Log-normal (two-parameter) For more details on transformations and critical values, consult (Stephens 1974). # Perform Anderson-Darling Test library(nortest) ad_test_result &lt;- ad.test(mtcars$mpg) # Output the test statistic and p-value ad_test_result #&gt; #&gt; Anderson-Darling normality test #&gt; #&gt; data: mtcars$mpg #&gt; A = 0.57968, p-value = 0.1207 Alternatively, for a broader range of distributions, use the gofTest function from the gof package: # General goodness-of-fit test with Anderson-Darling library(EnvStats) gof_test_result &lt;- EnvStats::gofTest(mtcars$mpg, test = &quot;ad&quot;) # Extract the p-value gof_test_result$p.value #&gt; [1] 0.1207371 3.3.2.2.2 Kolmogorov-Smirnov Test The Kolmogorov-Smirnov (K-S) test is a nonparametric test that compares the empirical cumulative distribution function (ECDF) of a sample to a theoretical cumulative distribution function (CDF), or compares the ECDFs of two samples. It is used to assess whether a sample comes from a specific distribution (one-sample test) or to compare two samples (two-sample test). The test statistic \\(D_n\\) for the one-sample test is defined as: \\[ D_n = \\sup_x \\left| F_n(x) - F(x) \\right|, \\] where: \\(F_n(x)\\) is the empirical CDF of the sample, \\(F(x)\\) is the theoretical CDF under the null hypothesis, \\(\\sup_x\\) denotes the supremum (largest value) over all possible values of \\(x\\). For the two-sample K-S test, the statistic is: \\[ D_{n,m} = \\sup_x \\left| F_{n,1}(x) - F_{m,2}(x) \\right|, \\] where \\(F_{n,1}(x)\\) and \\(F_{m,2}(x)\\) are the empirical CDFs of the two samples, with sizes \\(n\\) and \\(m\\), respectively. Hypotheses Null hypothesis (\\(H_0\\)): The sample comes from the specified distribution (one-sample) or the two samples are drawn from the same distribution (two-sample). Alternative hypothesis (\\(H_1\\)): The sample does not come from the specified distribution (one-sample) or the two samples are drawn from different distributions (two-sample). Properties Based on the Largest Deviation: The K-S test is sensitive to the largest absolute difference between the empirical and expected CDFs, making it effective for detecting shifts in location or scale. Distribution-Free: The test does not assume a specific distribution for the data under the null hypothesis. Its significance level is determined from the distribution of the test statistic under the null hypothesis. Limitations: The test is more sensitive near the center of the distribution than in the tails. It may not perform well with discrete data or small sample sizes. Related Tests: Kuiper’s Test: A variation of the K-S test that is sensitive to deviations in both the center and tails of the distribution. The Kuiper test statistic is: \\[ V_n = D^+ + D^-, \\] where \\(D^+\\) and \\(D^-\\) are the maximum positive and negative deviations of the empirical CDF from the theoretical CDF. Applications Testing for normality or other specified distributions. Comparing two datasets to determine if they are drawn from the same distribution. To perform a one-sample K-S test in R, use the ks.test() function. To check the goodness of fit for a specific distribution, the gofTest() function from a package like DescTools can also be used. # One-sample Kolmogorov-Smirnov test for normality data &lt;- rnorm(50) # Generate random normal data ks.test(data, &quot;pnorm&quot;, mean(data), sd(data)) #&gt; #&gt; Exact one-sample Kolmogorov-Smirnov test #&gt; #&gt; data: data #&gt; D = 0.098643, p-value = 0.6785 #&gt; alternative hypothesis: two-sided # Goodness-of-fit test using gofTest library(DescTools) gofTest(data, test = &quot;ks&quot;)$p.value # Kolmogorov-Smirnov test p-value #&gt; [1] 0.6785444 Advantages: Simple and widely applicable. Distribution-free under the null hypothesis. Limitations: Sensitive to sample size: small deviations may lead to significance in large samples. Reduced sensitivity to differences in the tails compared to the Anderson-Darling test. The Kolmogorov-Smirnov test provides a general-purpose method for goodness-of-fit testing and sample comparison, with particular utility in detecting central deviations. 3.3.2.2.3 Cramer-von Mises Test The Cramer-von Mises (CVM) test is a nonparametric goodness-of-fit test that evaluates the agreement between the empirical cumulative distribution function (ECDF) of a sample and a specified theoretical cumulative distribution function (CDF). Unlike the Kolmogorov-Smirnov test, which focuses on the largest discrepancy, the Cramer-von Mises test considers the average squared discrepancy across the entire distribution. Unlike the Anderson-Darling test, it weights all parts of the distribution equally. The test statistic \\(W^2\\) for the one-sample Cramer-von Mises test is defined as: \\[ W^2 = n \\int_{-\\infty}^\\infty \\left[ F_n(t) - F(t) \\right]^2 dF(t), \\] where: \\(F_n(t)\\) is the empirical CDF, \\(F(t)\\) is the specified theoretical CDF under the null hypothesis, \\(n\\) is the sample size. In practice, \\(W^2\\) is computed using the ordered sample values \\(y_{(1)}, y_{(2)}, \\dots, y_{(n)}\\) as: \\[ W^2 = \\sum_{i=1}^n \\left( F(y_{(i)}) - \\frac{2i - 1}{2n} \\right)^2 + \\frac{1}{12n}, \\] where: \\(F(y_{(i)})\\) is the theoretical CDF evaluated at the ordered sample values \\(y_{(i)}\\). Hypotheses Null hypothesis (H0): The sample data follow the specified distribution. Alternative hypothesis (H1): The sample data do not follow the specified distribution. Properties Focus on Average Discrepancy: The Cramer-von Mises test measures the overall goodness-of-fit by considering the squared deviations across all points in the distribution, ensuring equal weighting of discrepancies. Comparison to Anderson-Darling: Unlike the Anderson-Darling test, which gives more weight to deviations in the tails, the CVM test weights all parts of the distribution equally. Integral Representation: The statistic is expressed as an integral over the squared differences between the empirical and theoretical CDFs. Two-Sample Test: The Cramer-von Mises framework can also be extended to compare two empirical CDFs. The two-sample statistic is based on the pooled empirical CDF. Applications Assessing goodness-of-fit for a theoretical distribution (e.g., normal, exponential, Weibull). Comparing two datasets to determine if they are drawn from similar distributions. Validating model assumptions. To perform a Cramer-von Mises test in R, the gofTest() function from the DescTools package can be used. Below is an example: # Generate random normal data data &lt;- rnorm(50) # Perform the Cramer-von Mises test library(DescTools) gofTest(data, test = &quot;cvm&quot;)$p.value # Cramer-von Mises test p-value #&gt; [1] 0.04846959 Advantages: Considers discrepancies across the entire distribution. Robust to outliers due to equal weighting. Simple to compute and interpret. Limitations: Less sensitive to deviations in the tails compared to the Anderson-Darling test. May be less powerful than the Kolmogorov-Smirnov test in detecting central shifts. 3.3.2.2.4 Jarque-Bera Test The Jarque-Bera (JB) test (Bera and Jarque 1981) is a goodness-of-fit test used to check whether a dataset follows a normal distribution. It is based on the skewness and kurtosis of the data, which measure the asymmetry and the “tailedness” of the distribution, respectively. The Jarque-Bera test statistic is defined as: \\[ JB = \\frac{n}{6}\\left(S^2 + \\frac{(K - 3)^2}{4}\\right), \\] where: \\(n\\) is the sample size, \\(S\\) is the sample skewness, \\(K\\) is the sample kurtosis. Skewness (\\(S\\)) is calculated as: \\[ S = \\frac{\\hat{\\mu}_3}{\\hat{\\sigma}^3} = \\frac{\\frac{1}{n} \\sum_{i=1}^n (x_i - \\bar{x})^3}{\\left(\\frac{1}{n} \\sum_{i=1}^n (x_i - \\bar{x})^2\\right)^{3/2}}, \\] where: \\(\\hat{\\mu}_3\\) is the third central moment, \\(\\hat{\\sigma}\\) is the standard deviation, \\(\\bar{x}\\) is the sample mean. Kurtosis (\\(K\\)) is calculated as: \\[ K = \\frac{\\hat{\\mu}_4}{\\hat{\\sigma}^4} = \\frac{\\frac{1}{n} \\sum_{i=1}^n (x_i - \\bar{x})^4}{\\left(\\frac{1}{n} \\sum_{i=1}^n (x_i - \\bar{x})^2\\right)^2}, \\] where: \\(\\hat{\\mu}_4\\) is the fourth central moment. Hypothesis Null hypothesis (\\(H_0\\)): The data follow a normal distribution, implying: Skewness \\(S = 0\\), Excess kurtosis \\(K - 3 = 0\\). Alternative hypothesis (\\(H_1\\)): The data do not follow a normal distribution. Distribution of the JB Statistic Under the null hypothesis, the Jarque-Bera statistic asymptotically follows a chi-squared distribution with 2 degrees of freedom: \\[ JB \\sim \\chi^2_2. \\] Properties Sensitivity: Skewness (\\(S\\)) captures asymmetry in the data. Kurtosis (\\(K\\)) measures how heavy-tailed or light-tailed the distribution is compared to a normal distribution. Limitations: The test is sensitive to large sample sizes; even small deviations from normality may result in rejection of \\(H_0\\). Assumes that the data are independently and identically distributed. Applications Testing normality in regression residuals. Validating distributional assumptions in econometrics and time series analysis. The Jarque-Bera test can be performed in R using the tseries package: library(tseries) # Generate a sample dataset data &lt;- rnorm(100) # Normally distributed data # Perform the Jarque-Bera test jarque.bera.test(data) #&gt; #&gt; Jarque Bera Test #&gt; #&gt; data: data #&gt; X-squared = 0.89476, df = 2, p-value = 0.6393 References "],["bivariate-statistics.html", "3.4 Bivariate Statistics", " 3.4 Bivariate Statistics Bivariate statistics involve the analysis of relationships between two variables. Understanding these relationships can provide insights into patterns, associations, or (suggestive of) causal connections. Below, we explore the correlation between different types of variables: Two Continuous Variables Two Discrete Variables Categorical and Continuous Variables Before delving into the analysis, it is critical to consider the following: Is the relationship linear or non-linear? Linear relationships can be modeled with simpler statistical methods such as Pearson’s correlation, while non-linear relationships may require alternative approaches, such as Spearman’s rank correlation or regression with transformations. If the variable is continuous, is it normal and homoskedastic? For parametric methods like Pearson’s correlation, assumptions such as normality and homoskedasticity (equal variance) must be met. When these assumptions fail, non-parametric methods like Spearman’s correlation or robust alternatives are preferred. How big is your dataset? Large datasets can reveal subtle patterns but may lead to statistically significant results that are not practically meaningful. For smaller datasets, careful selection of statistical methods is essential to ensure reliability and validity. Categorical Continuous Categorical Chi-squared Test Phi Coefficient Cramer’s V Tschuprow’s T Spearman’s Rank Correlation Kendall’s Tau Gamma Statistic Freeman’s Theta Epsilon-squared Goodman Kruskal’s Gamma Somers’ D Kendall’s Tau-b Yule’s Q and Y Tetrachoric Correlation Polychoric Correlation Continuous Point-Biserial Correlation Logistic Regression Pearson Correlation Spearman Correlation 3.4.1 Two Continuous set.seed(1) n = 100 # (sample size) data = data.frame(A = sample(1:20, replace = TRUE, size = n), B = sample(1:30, replace = TRUE, size = n)) 3.4.1.1 Pearson Correlation Pearson correlation quantifies the strength and direction of a linear relationship between two continuous variables. Formula: \\[ r = \\frac{\\sum (x_i - \\bar{x})(y_i - \\bar{y})}{\\sqrt{\\sum (x_i - \\bar{x})^2 \\cdot \\sum (y_i - \\bar{y})^2}} \\] where \\(x_i, y_i\\): Individual data points of variables \\(X\\) and \\(Y\\). \\(\\bar{x}, \\bar{y}\\): Means of \\(X\\) and \\(Y\\). Assumptions: The relationship between variables is linear. Variables are normally distributed. Data exhibits homoscedasticity (equal variance of \\(Y\\) for all values of \\(X\\)). Use Case: Use when the relationship is expected to be linear, and assumptions of normality and homoscedasticity are met. Interpretation: \\(r = +1\\): Perfect positive linear relationship. \\(r = -1\\): Perfect negative linear relationship. \\(r = 0\\): No linear relationship. # Pearson correlation pearson_corr &lt;- stats::cor(data$A, data$B, method = &quot;pearson&quot;) cat(&quot;Pearson Correlation (r):&quot;, pearson_corr, &quot;\\n&quot;) #&gt; Pearson Correlation (r): 0.02394939 3.4.1.2 Spearman Correlation Spearman correlation measures the strength of a monotonic relationship between two variables. It ranks the data and calculates correlation based on ranks. Formula: \\[ \\rho = 1 - \\frac{6 \\sum d_i^2}{n(n^2 -1)} \\] where \\(d_i\\): Difference between the ranks of \\(x_i\\) and \\(y_i\\). \\(n\\): Number of paired observations. Assumptions: Relationship must be monotonic, not necessarily linear. No assumptions about the distribution of variables. Use Case: Use when data is ordinal or when normality and linearity assumptions are violated. Interpretation: \\(\\rho = +1\\): Perfect positive monotonic relationship. \\(\\rho = -1\\): Perfect negative monotonic relationship. \\(\\rho = 0\\): No monotonic relationship. # Spearman correlation spearman_corr &lt;- stats::cor(data$A, data$B, method = &quot;spearman&quot;) cat(&quot;Spearman Correlation (rho):&quot;, spearman_corr, &quot;\\n&quot;) #&gt; Spearman Correlation (rho): 0.02304636 3.4.1.3 Kendall’s Tau Correlation Kendall’s Tau measures the strength of a monotonic relationship by comparing concordant and discordant pairs. Formula: \\[ \\tau = \\frac{(C- D)}{\\binom{n}{2}} \\] where​ \\(C\\): Number of concordant pairs (where ranks of \\(X\\) and \\(Y\\) increase or decrease together). \\(D\\): Number of discordant pairs (where one rank increases while the other decreases). \\(\\binom{n}{2}\\): Total number of possible pairs. Assumptions: No specific assumptions about the data distribution. Measures monotonic relationships. Use Case: Preferred for small datasets or when data contains outliers. Interpretation: \\(\\tau = +1\\): Perfect positive monotonic relationship. \\(\\tau = -1\\): Perfect negative monotonic relationship. \\(\\tau = 0\\): No monotonic relationship. # Kendall&#39;s Tau correlation kendall_corr &lt;- stats::cor(data$A, data$B, method = &quot;kendall&quot;) cat(&quot;Kendall&#39;s Tau Correlation (tau):&quot;, kendall_corr, &quot;\\n&quot;) #&gt; Kendall&#39;s Tau Correlation (tau): 0.02171284 3.4.1.4 Distance Correlation Distance Correlation measures both linear and non-linear relationships between variables. It does not require monotonicity or linearity. Formula: \\[ d Cor = \\frac{d Cov(X,Y)}{\\sqrt{d Var (X) \\cdot d Var (Y)}} \\] where​ \\(dCov\\): Distance covariance between \\(X\\) and \\(Y\\). \\(dVar\\): Distance variances of \\(X\\) and \\(Y\\). Assumptions: No specific assumptions about the relationship (linear, monotonic, or otherwise). Use Case: Use for complex relationships, including non-linear patterns. Interpretation: \\(dCor = 0\\): No association. \\(dCor = 1\\): Perfect association. # Distance correlation distance_corr &lt;- energy::dcor(data$A, data$B) cat(&quot;Distance Correlation (dCor):&quot;, distance_corr, &quot;\\n&quot;) #&gt; Distance Correlation (dCor): 0.1008934 3.4.1.5 Summary Table of Correlation Methods Method Formula/Approach Detects Relationship Type Assumptions Sensitivity to Outliers Use Case Pearson Linear covariance Linear Normality, homoscedasticity High Linear relationships. Spearman Ranks and monotonicity formula Monotonic None Moderate Monotonic, non-linear data. Kendall’s Tau Concordance/discordance ratio Monotonic None Low Small datasets, robust to outliers. Distance Correlation Distance-based variance Linear and non-linear None Low Complex, non-linear relationships. 3.4.2 Categorical and Continuous Analyzing the relationship between a categorical variable (binary or multi-class) and a continuous variable requires specialized techniques. These methods assess whether the categorical variable significantly influences the continuous variable or vice versa. We focus on the following methods: Point-Biserial Correlation Logistic Regression Analysis of Variance (ANOVA) T-test 3.4.2.1 Point-Biserial Correlation The Point-Biserial Correlation is a special case of the Pearson correlation used to assess the relationship between a binary categorical variable (coded as 0 and 1) and a continuous variable. It measures the strength and direction of the linear relationship. Formula: \\[ r_{pb} = \\frac{\\bar{Y_1} - \\bar{Y_0}}{s_Y} \\sqrt{\\frac{n_1 n_0}{n^2}} \\] where \\(\\bar{Y_1}\\), \\(\\bar{Y_0}\\): Mean of the continuous variable for the groups coded as 1 and 0, respectively. \\(s_Y\\): Standard deviation of the continuous variable. \\(n_1, n_0\\): Number of observations in each group (1 and 0). \\(n\\): Total number of observations. Key Properties: Range: \\(-1\\) to \\(1\\). \\(r_{pb} = +1\\): Perfect positive correlation. \\(r_{pb} = -1\\): Perfect negative correlation. \\(r_{pb} = 0\\): No linear relationship. A positive \\(r_{pb}\\) indicates higher values of the continuous variable are associated with the 1 group, while a negative \\(r_{pb}\\) indicates the opposite. Assumptions: The binary variable is truly dichotomous (e.g., male/female, success/failure). The continuous variable is approximately normally distributed. Homogeneity of variance across the two groups (not strictly required but recommended). Use Case: To evaluate the linear relationship between a binary categorical variable and a continuous variable. library(ltm) # Point-Biserial Correlation biserial_corr &lt;- ltm::biserial.cor( c(12.5, 15.3, 10.7, 18.1, 11.2, 16.8, 13.4, 14.9), c(0, 1, 0, 1, 0, 1, 0, 1), use = &quot;all.obs&quot;, level = 2 ) cat(&quot;Point-Biserial Correlation:&quot;, biserial_corr, &quot;\\n&quot;) #&gt; Point-Biserial Correlation: 0.8792835 3.4.2.2 Logistic Regression Logistic Regression models the relationship between a binary categorical variable (dependent variable) and one or more independent variables (which may include continuous variables). It predicts the probability of the binary outcome (e.g., success/failure, yes/no). Refer to 3.4.2.2 for more detail. Formula: The logistic regression model is represented as: \\[ \\text{logit}(p) = \\ln \\left( \\frac{p}{1 - p} \\right) = \\beta_0 + \\beta_1 X \\] where \\(p\\): Probability of the outcome being 1. \\(\\beta_0\\): Intercept. \\(\\beta_1\\): Coefficient for the continuous variable \\(X\\). \\(\\text{logit}(p)\\): Log-odds of the probability. Key Features: Output: Odds ratio or probability of the binary outcome. Can include multiple predictors (continuous and categorical). Non-linear transformation ensures predictions are probabilities between 0 and 1. Assumptions: The dependent variable is binary. Observations are independent. There is a linear relationship between the logit of the dependent variable and the independent variable. No multicollinearity between predictors. Use Case: To predict the likelihood of a binary outcome based on a continuous predictor (e.g., probability of success given test scores). # Simulated data set.seed(123) x &lt;- rnorm(100, mean = 50, sd = 10) # Continuous predictor y &lt;- ifelse(x &gt; 55, 1, 0) # Binary outcome based on threshold # Logistic Regression logistic_model &lt;- glm(y ~ x, family = binomial) summary(logistic_model) #&gt; #&gt; Call: #&gt; glm(formula = y ~ x, family = binomial) #&gt; #&gt; Deviance Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -2.770e-04 -2.100e-08 -2.100e-08 2.100e-08 2.548e-04 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; (Intercept) -3749.9 495083.0 -0.008 0.994 #&gt; x 67.9 8966.6 0.008 0.994 #&gt; #&gt; (Dispersion parameter for binomial family taken to be 1) #&gt; #&gt; Null deviance: 1.2217e+02 on 99 degrees of freedom #&gt; Residual deviance: 1.4317e-07 on 98 degrees of freedom #&gt; AIC: 4 #&gt; #&gt; Number of Fisher Scoring iterations: 25 # Predicted probabilities predicted_probs &lt;- predict(logistic_model, type = &quot;response&quot;) print(head(predicted_probs)) #&gt; 1 2 3 4 5 6 #&gt; -735.6466 -511.3844 703.2134 -307.2281 -267.3187 809.3747 # Visualize logistic regression curve library(ggplot2) data &lt;- data.frame(x = x, y = y, predicted = predicted_probs) ggplot(data, aes(x = x, y = predicted)) + geom_point(aes(y = y), color = &quot;red&quot;, alpha = 0.5) + geom_line(color = &quot;blue&quot;) + labs(title = &quot;Logistic Regression: Continuous vs Binary&quot;, x = &quot;Continuous Predictor&quot;, y = &quot;Predicted Probability&quot;) 3.4.2.3 Summary Table of Methods (Between Categorical and Continuous) Method Type of Variable Relationship Key Assumptions Use Case Point-Biserial Correlation Binary Categorical vs Continuous Linear, normality (continuous) Assess linear association. Logistic Regression Continuous → Binary Categorical Logit-linear relationship Predict probability of binary outcome. ANOVA Multi-level Categorical vs Continuous Normality, homogeneity of variance Compare means across groups. T-Test Binary Categorical vs Continuous Normality, equal variance Compare means between two groups. 3.4.3 Two Discrete When analyzing the relationship between two discrete variables (categorical or ordinal), various methods are available to quantify the degree of association or similarity. These methods can broadly be classified into: Distance Metrics Statistical Metrics 3.4.3.1 Distance Metrics Distance metrics measure the dissimilarity between two discrete variables and are often used as a proxy for correlation in specific applications like clustering or machine learning. 3.4.3.1.1 Euclidean Distance \\[ d(x, y) = \\sqrt{\\sum_{i=1}^n (x_i - y_i)^2} \\] Measures the straight-line distance between two variables in Euclidean space. Sensitive to scaling; variables should be normalized for meaningful comparisons. 3.4.3.1.2 Manhattan Distance \\[ d(x, y) = \\sum_{i=1}^n |x_i - y_i| \\] Measures distance by summing the absolute differences along each dimension. Also called L1 norm; often used in grid-based problems. 3.4.3.1.3 Chebyshev Distance \\[ d(x, y) = \\max_{i=1}^n |x_i - y_i| \\] Measures the maximum single-step distance along any dimension. Useful in discrete, grid-based problems (e.g., chess moves). 3.4.3.1.4 Minkowski Distance \\[ d(x, y) = \\left( \\sum_{i=1}^n |x_i - y_i|^p \\right)^{1/p} \\] Generalized distance metric. Special cases include: \\(p = 1\\): Manhattan Distance. \\(p = 2\\): Euclidean Distance. \\(p \\to \\infty\\): Chebyshev Distance. 3.4.3.1.5 Canberra Distance \\[ d(x, y) = \\sum_{i=1}^n \\frac{|x_i - y_i|}{|x_i| + |y_i|} \\] Emphasizes proportional differences, making it sensitive to smaller values. 3.4.3.1.6 Hamming Distance \\[ d(x, y) = \\sum_{i=1}^n I(x_i \\neq y_i) \\] Counts the number of differing positions between two sequences. Widely used in text similarity and binary data. 3.4.3.1.7 Cosine Similarity and Distance \\[ \\text{Cosine Similarity} = \\frac{\\sum_{i=1}^n x_i y_i}{\\sqrt{\\sum_{i=1}^n x_i^2} \\cdot \\sqrt{\\sum_{i=1}^n y_i^2}} \\] \\[ \\text{Cosine Distance} = 1 - \\text{Cosine Similarity} \\] Measures the angle between two vectors in a high-dimensional space. Often used in text and document similarity. 3.4.3.1.8 Sum of Absolute Differences \\[ d(x, y) = \\sum_{i=1}^n |x_i - y_i| \\] Equivalent to Manhattan Distance but without coordinate context. 3.4.3.1.9 Sum of Squared Differences \\[ d(x, y) = \\sum_{i=1}^n (x_i - y_i)^2 \\] Equivalent to squared Euclidean Distance. 3.4.3.1.10 Mean Absolute Error \\[ \\text{MAE} = \\frac{1}{n} \\sum_{i=1}^n |x_i - y_i| \\] Measures average absolute differences. # Example data x &lt;- c(1, 2, 3, 4, 5) y &lt;- c(2, 3, 4, 5, 6) # Compute distances euclidean &lt;- sqrt(sum((x - y)^2)) manhattan &lt;- sum(abs(x - y)) chebyshev &lt;- max(abs(x - y)) hamming &lt;- sum(x != y) cosine_similarity &lt;- sum(x * y) / (sqrt(sum(x^2)) * sqrt(sum(y^2))) cosine_distance &lt;- 1 - cosine_similarity # Display results cat(&quot;Euclidean Distance:&quot;, euclidean, &quot;\\n&quot;) #&gt; Euclidean Distance: 2.236068 cat(&quot;Manhattan Distance:&quot;, manhattan, &quot;\\n&quot;) #&gt; Manhattan Distance: 5 cat(&quot;Chebyshev Distance:&quot;, chebyshev, &quot;\\n&quot;) #&gt; Chebyshev Distance: 1 cat(&quot;Hamming Distance:&quot;, hamming, &quot;\\n&quot;) #&gt; Hamming Distance: 5 cat(&quot;Cosine Distance:&quot;, cosine_distance, &quot;\\n&quot;) #&gt; Cosine Distance: 0.005063324 3.4.3.2 Statistical Metrics 3.4.3.2.1 Chi-squared Test The Chi-Squared Test evaluates whether two categorical variables are independent by comparing observed and expected frequencies in a contingency table. Formula: \\[ \\chi^2 = \\sum \\frac{(O_i - E_i)^2}{E_i} \\] where \\(O_i\\): Observed frequency in each cell of the table. \\(E_i\\): Expected frequency under the assumption of independence. Steps: Construct a contingency table with observed counts. Compute expected frequencies: \\(E_{ij} = \\frac{\\text{Row Total}_i \\cdot \\text{Column Total}_j}{\\text{Grand Total}}\\) Apply the Chi-squared formula. Compare \\(\\chi^2\\) with a critical value from the Chi-squared distribution. Assumptions: Observations are independent. Expected frequencies should be \\(\\geq 5\\) in at least 80% of the cells. Use Case: Tests for independence between two nominal variables. # Example data dt &lt;- matrix(c(15, 25, 20, 40), nrow = 2) rownames(dt) &lt;- c(&quot;Group A&quot;, &quot;Group B&quot;) colnames(dt) &lt;- c(&quot;Category 1&quot;, &quot;Category 2&quot;) # Perform Chi-Squared Test chi_sq_test &lt;- chisq.test(dt) print(chi_sq_test) #&gt; #&gt; Pearson&#39;s Chi-squared test with Yates&#39; continuity correction #&gt; #&gt; data: dt #&gt; X-squared = 0.045788, df = 1, p-value = 0.8306 3.4.3.2.2 Phi Coefficient The Phi Coefficient is a measure of association between two binary variables, derived from the Chi-squared statistic. Formula: \\[ \\phi = \\frac{\\chi^2}{n} \\] where \\(n\\): Total sample size. Interpretation: \\(\\phi = 0\\): No association. \\(\\phi = +1\\): Perfect positive association. \\(\\phi = -1\\): Perfect negative association. Use Case: Suitable for 2x2 contingency tables. 2 binary library(psych) # Compute Phi Coefficient phi_coeff &lt;- phi(dt) cat(&quot;Phi Coefficient:&quot;, phi_coeff, &quot;\\n&quot;) #&gt; Phi Coefficient: 0.04 3.4.3.2.3 Cramer’s V Cramer’s V generalizes the Phi coefficient to handle contingency tables with more than two rows or columns. Formula: \\[ V = \\sqrt{\\frac{\\chi^2 / n}{\\min(r-1, c-1)}} \\] where​​ \\(r\\): Number of rows. \\(c\\): Number of columns. Assumptions: Variables are nominal. Suitable for larger contingency tables. Use Case: Measures the strength of association between nominal variables with no natural order. library(lsr) # Simulate data set.seed(1) data &lt;- data.frame( A = sample(1:5, replace = TRUE, size = 100), # Nominal variable B = sample(1:6, replace = TRUE, size = 100) # Nominal variable ) # Compute Cramer&#39;s V cramers_v &lt;- cramersV(data$A, data$B) cat(&quot;Cramer&#39;s V:&quot;, cramers_v, &quot;\\n&quot;) #&gt; Cramer&#39;s V: 0.1944616 Alternatively, ncchisq noncentral Chi-square nchisqadj Adjusted noncentral Chi-square fisher Fisher Z transformation fisheradj bias correction Fisher z transformation DescTools::CramerV(data, conf.level = 0.95,method = &quot;ncchisqadj&quot;) #&gt; Cramer V lwr.ci upr.ci #&gt; 0.3472325 0.3929964 0.4033053 3.4.3.2.4 Adjusted Cramer’s V Adjusted versions of Cramer’s V correct for bias, especially in small samples. Adjusted formulas account for non-central Chi-squared or bias correction. Examples include: Non-central Chi-squared: \\(V_{adj} = \\sqrt{\\frac{\\chi^2_{nc} / n}{\\min(r-1, c-1)}}\\)​ Bias Correction: \\(V_{adj} = V - \\text{Bias Term}\\) library(DescTools) # Compute Adjusted Cramer&#39;s V cramers_v_adj &lt;- CramerV(data, conf.level = 0.95, method = &quot;ncchisqadj&quot;) cramers_v_adj #&gt; Cramer V lwr.ci upr.ci #&gt; 0.3472325 0.3929964 0.4033053 3.4.3.2.5 Tschuprow’s T Tschuprow’s T is a symmetric measure of association for nominal variables. It differs from Cramer’s V by considering the product of rows and columns, making it less sensitive to asymmetrical tables. Formula: \\[ T = \\sqrt{\\frac{\\chi^2/n}{\\sqrt{(r-1)(c-1)}}} \\] Assumptions: Applicable to nominal variables. Suitable for contingency tables with unequal dimensions. Use Case: Preferred when table dimensions are highly unequal. # Compute Tschuprow&#39;s T tschuprow_t &lt;- DescTools::TschuprowT(data$A, data$B) cat(&quot;Tschuprow&#39;s T:&quot;, tschuprow_t, &quot;\\n&quot;) #&gt; Tschuprow&#39;s T: 0.1839104 3.4.3.2.6 Ordinal Association (Rank correlation) When at least one variable is ordinal, rank-based methods are the most appropriate as they respect the order of the categories. These methods are often used when relationships are monotonic (increasing or decreasing consistently) but not necessarily linear. 3.4.3.2.6.1 Spearman’s Rank Correlation Spearman’s Rank Correlation (\\(\\rho\\)) measures the strength and direction of a monotonic relationship between two variables. It transforms the data into ranks and calculates Pearson correlation on the ranks. Formula: \\[ \\rho = 1 - \\frac{6 \\sum d_i^2}{n (n^2 -1)} \\] where​​ \\(d_i\\): Difference between the ranks of the paired observations. \\(n\\): Number of paired observations. Assumptions: Data must be ordinal or continuous but convertible to ranks. Relationship is monotonic. Use Case: Suitable for ordinal-ordinal or ordinal-continuous associations. # Simulating ordinal data set.seed(123) ordinal_x &lt;- sample(1:5, 100, replace = TRUE) ordinal_y &lt;- sample(1:5, 100, replace = TRUE) # Spearman&#39;s Correlation spearman_corr &lt;- cor(ordinal_x, ordinal_y, method = &quot;spearman&quot;) cat(&quot;Spearman&#39;s Correlation (rho):&quot;, spearman_corr, &quot;\\n&quot;) #&gt; Spearman&#39;s Correlation (rho): 0.08731195 3.4.3.2.6.2 Kendall’s Tau Kendall’s Tau (\\(\\tau\\)) measures the strength of a monotonic relationship by comparing concordant and discordant pairs. Formula: \\[ \\tau = \\frac{C - D}{C + D} \\]​where \\(C\\): Number of concordant pairs (ranks increase together). \\(D\\): Number of discordant pairs (one rank increases while the other decreases). Variants: Kendall’s Tau-a: For data with no ties. Kendall’s Tau-b: Adjusted for ties in ranks. Kendall’s Tau-c: Adjusted for ties in large tables. Use Case: Ideal for small datasets or when ties are present. # Kendall&#39;s Tau kendall_corr &lt;- cor(ordinal_x, ordinal_y, method = &quot;kendall&quot;) cat(&quot;Kendall&#39;s Tau (tau):&quot;, kendall_corr, &quot;\\n&quot;) #&gt; Kendall&#39;s Tau (tau): 0.06795076 3.4.3.2.6.3 Gamma Statistic The Gamma Statistic measures the strength of association between two ordinal variables by focusing on concordant and discordant pairs, ignoring ties. Formula: \\[ \\gamma = \\frac{C- D}{C + D} \\] Use Case: Works well when there are many ties in the data. library(vcd) # Simulating ordinal data cont_table &lt;- table(ordinal_x, ordinal_y) # Gamma Statistic gamma_stat &lt;- assocstats(cont_table)$gamma cat(&quot;Gamma Statistic:&quot;, gamma_stat, &quot;\\n&quot;) #&gt; Gamma Statistic: 3.4.3.2.6.4 Freeman’s Theta Freeman’s Theta measures the association between an ordinal variable and a nominal variable. It quantifies how well the grouping in the nominal variable explains the ordering in the ordinal variable. Use Case: Useful when analyzing relationships between ordinal predictors and nominal responses (or vice versa). rcompanion::freemanTheta(ordinal_x, ordinal_y) #&gt; Freeman.theta #&gt; 0.094 3.4.3.2.6.5 Epsilon-squared Epsilon-Squared (\\(\\epsilon^2\\)) measures the proportion of variance in the ordinal variable explained by a nominal variable. It is conceptually similar to the coefficient of determination (\\(R^2\\)) in linear regression but adapted for ordinal-nominal relationships. Formula: \\[ \\epsilon^2 = \\frac{\\text{variance explained by group differences}}{\\text{total variance}} \\] where The numerator represents the variance between ordinal categories due to differences in nominal groups. The denominator is the total variance in the ordinal variable. Use Case: Quantifies the effect size when analyzing how well a nominal variable explains an ordinal variable. set.seed(123) ordinal_x &lt;- sample(1:5, 100, replace = TRUE) # Ordinal variable nominal_y &lt;- sample(1:3, 100, replace = TRUE) # Nominal variable # Compute Epsilon-Squared library(rcompanion) epsilon_squared &lt;- rcompanion::epsilonSquared(ordinal_x, nominal_y) print(epsilon_squared) #&gt; epsilon.squared #&gt; 0.00446 3.4.3.2.6.6 Goodman-Kruskal’s Gamma Goodman-Kruskal’s Gamma measures the strength of association between two ordinal variables. It is a rank-based measure, focusing only on concordant and discordant pairs while ignoring ties. Formula: \\[ \\gamma = \\frac{C - D}{C + D} \\] where \\(C\\): Number of concordant pairs (where ranks move in the same direction). \\(D\\): Number of discordant pairs (where ranks move in opposite directions). Use Case: Suitable for ordinal variables with many ties. n = 100 # (sample size) set.seed(1) dt = table(data.frame( A = sample(1:4, replace = TRUE, size = n), # ordinal B = sample(1:3, replace = TRUE, size = n) # ordinal )) dt #&gt; B #&gt; A 1 2 3 #&gt; 1 7 11 9 #&gt; 2 11 6 14 #&gt; 3 7 11 4 #&gt; 4 6 4 10 # Compute Goodman-Kruskal&#39;s Gamma library(DescTools) goodman_kruskal_gamma &lt;- GoodmanKruskalGamma(dt, conf.level = 0.95) cat(&quot;Goodman-Kruskal&#39;s Gamma:&quot;, goodman_kruskal_gamma, &quot;\\n&quot;) #&gt; Goodman-Kruskal&#39;s Gamma: 0.006781013 -0.2290321 0.2425941 3.4.3.2.6.7 Somers’ D Somers’ D (also called Somers’ Delta) extends Kendall’s Tau by focusing on asymmetric relationships, where one variable is a predictor and the other is a response. Formula: \\[ D_{XY} = \\frac{C - D}{C + D + T_Y} \\] where \\(T_Y\\): Tied pairs in the dependent variable. Use Case: Appropriate when there is a clear predictor-response relationship between two ordinal variables. # Compute Somers&#39; D somers_d &lt;- SomersDelta(dt, conf.level = 0.95) somers_d #&gt; somers lwr.ci upr.ci #&gt; 0.005115859 -0.172800185 0.183031903 3.4.3.2.6.8 Kendall’s Tau-b Kendall’s Tau-b is an extension of Kendall’s Tau that accounts for ties in the data. Formula: \\[ \\tau_b = \\frac{C - D}{\\sqrt{(C + D+ T_X) (C + D + T_Y)}} \\] where \\(T_X, T_Y\\): Tied pairs in each variable. Use Case: Use when ordinal data contains ties. # Compute Kendall&#39;s Tau-b kendalls_tau_b &lt;- KendallTauB(dt, conf.level = 0.95) kendalls_tau_b #&gt; tau_b lwr.ci upr.ci #&gt; 0.004839732 -0.163472443 0.173151906 3.4.3.2.6.9 Yule’s Q and Y Yule’s Q and Yule’s Y are specialized measures for 2x2 contingency tables. They are simplified versions of Goodman-Kruskal’s Gamma, designed for binary ordinal variables.​​ Use Case: Ideal for binary ordinal variables in a 2x2 table. Special version \\((2 \\times 2)\\) of the Goodman Kruskal’s Gamma coefficient. Variable 1 Variable 2 a b c d \\[ \\text{Yule&#39;s Q} = \\frac{ad - bc}{ad + bc} \\] We typically use Yule’s \\(Q\\) in practice while Yule’s Y has the following relationship with \\(Q\\). \\[ \\text{Yule&#39;s Y} = \\frac{\\sqrt{ad} - \\sqrt{bc}}{\\sqrt{ad} + \\sqrt{bc}} \\] \\[ Q = \\frac{2Y}{1 + Y^2} \\] \\[ Y = \\frac{1 = \\sqrt{1-Q^2}}{Q} \\] # Create 2x2 table dt_binary &lt;- table(data.frame( A = sample(c(0, 1), replace = TRUE, size = n), B = sample(c(0, 1), replace = TRUE, size = n) )) # Compute Yule&#39;s Q yules_q &lt;- YuleQ(dt_binary) yules_q #&gt; [1] -0.07667474 3.4.3.2.6.10 Tetrachoric Correlation Tetrachoric Correlation measures the association between two binary variables by assuming they represent thresholds of underlying continuous normal distributions. It is a special case of Polychoric Correlation when both variables are binary # Simulate binary data library(psych) data_binary &lt;- data.frame( A = sample(c(0, 1), replace = TRUE, size = n), B = sample(c(0, 1), replace = TRUE, size = n) ) # Compute Tetrachoric Correlation tetrachoric_corr &lt;- tetrachoric(data_binary) print(tetrachoric_corr) #&gt; Call: tetrachoric(x = data_binary) #&gt; tetrachoric correlation #&gt; A B #&gt; A 1.00 #&gt; B 0.31 1.00 #&gt; #&gt; with tau of #&gt; A B #&gt; 0.126 -0.025 3.4.3.2.6.11 Polychoric Correlation Polychoric Correlation measures the association between ordinal variables by assuming they are discretized versions of latent, normally distributed continuous variables. Assumptions: The ordinal variables represent categories of an underlying normal distribution. Use Case: Suitable for ordinal variables with a natural order. # Simulate ordinal data library(polycor) data_ordinal &lt;- data.frame( A = sample(1:4, replace = TRUE, size = n), B = sample(1:6, replace = TRUE, size = n) ) # Compute Polychoric Correlation polychoric_corr &lt;- polychor(data_ordinal$A, data_ordinal$B) cat(&quot;Polychoric Correlation:&quot;, polychoric_corr, &quot;\\n&quot;) #&gt; Polychoric Correlation: 0.1908334 Metric Variable Types Use Case Spearman’s Correlation Ordinal vs. Ordinal Non-linear, monotonic relationships. Kendall’s Tau Ordinal vs. Ordinal Non-linear, monotonic relationships with ties. Gamma Statistic Ordinal vs. Ordinal Handles data with many ties effectively. Freeman’s Theta Ordinal vs. Nominal Mixed data types (ordinal and nominal). Epsilon-Squared Ordinal vs. Nominal Variance explained by nominal groups. Goodman-Kruskal’s Gamma Ordinal vs. Ordinal Strong association; ignores ties. Somers’ D Ordinal Predictor and Response Asymmetric association. Kendall’s Tau-b Ordinal vs. Ordinal Adjusts for ties in data. Yule’s Q Binary Ordinal vs. Binary Ordinal Special case for 2x2 tables. Tetrachoric Correlation Binary vs. Binary Binary ordinal variables. Polychoric Correlation Ordinal vs. Ordinal Continuous latent structure. 3.4.4 General Approach to Bivariate Statistics library(tidyverse) data(&quot;mtcars&quot;) df = mtcars %&gt;% dplyr::select(cyl, vs, carb) df_factor = df %&gt;% dplyr::mutate( cyl = factor(cyl), vs = factor(vs), carb = factor(carb) ) # summary(df) str(df) #&gt; &#39;data.frame&#39;: 32 obs. of 3 variables: #&gt; $ cyl : num 6 6 4 6 8 6 8 4 4 6 ... #&gt; $ vs : num 0 0 1 1 0 1 0 1 1 1 ... #&gt; $ carb: num 4 4 1 1 2 1 4 2 2 4 ... str(df_factor) #&gt; &#39;data.frame&#39;: 32 obs. of 3 variables: #&gt; $ cyl : Factor w/ 3 levels &quot;4&quot;,&quot;6&quot;,&quot;8&quot;: 2 2 1 2 3 2 3 1 1 2 ... #&gt; $ vs : Factor w/ 2 levels &quot;0&quot;,&quot;1&quot;: 1 1 2 2 1 2 1 2 2 2 ... #&gt; $ carb: Factor w/ 6 levels &quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,..: 4 4 1 1 2 1 4 2 2 4 ... Get the correlation table for continuous variables only cor(df) #&gt; cyl vs carb #&gt; cyl 1.0000000 -0.8108118 0.5269883 #&gt; vs -0.8108118 1.0000000 -0.5696071 #&gt; carb 0.5269883 -0.5696071 1.0000000 # only complete obs # cor(df, use = &quot;complete.obs&quot;) Alternatively, you can also have the Hmisc::rcorr(as.matrix(df), type = &quot;pearson&quot;) #&gt; cyl vs carb #&gt; cyl 1.00 -0.81 0.53 #&gt; vs -0.81 1.00 -0.57 #&gt; carb 0.53 -0.57 1.00 #&gt; #&gt; n= 32 #&gt; #&gt; #&gt; P #&gt; cyl vs carb #&gt; cyl 0.0000 0.0019 #&gt; vs 0.0000 0.0007 #&gt; carb 0.0019 0.0007 modelsummary::datasummary_correlation(df) cyl vs carb cyl 1 . . vs −.81 1 . carb .53 −.57 1 ggcorrplot::ggcorrplot(cor(df)) Comparing correlations between different types of variables (e.g., continuous vs. categorical) poses unique challenges. One key issue is ensuring that methods are appropriate for the nature of the variables being analyzed. Another challenge lies in detecting non-linear relationships, as traditional correlation measures, such as Pearson’s correlation coefficient, are designed to assess linear associations. To address these challenges, a potential solution is to utilize mutual information from information theory. Mutual information quantifies how much knowing one variable reduces the uncertainty of another, providing a more general measure of association that accommodates both linear and non-linear relationships. 3.4.4.1 Approximating Mutual Information We can approximate mutual information using the following relationship: \\[ \\downarrow \\text{Prediction Error} \\approx \\downarrow \\text{Uncertainty} \\approx \\uparrow \\text{Association Strength} \\] This principle underpins the X2Y metric, which is implemented through the following steps: Predict \\(y\\) without \\(x\\) (baseline model): If \\(y\\) is continuous, predict the mean of \\(y\\). If \\(y\\) is categorical, predict the mode of \\(y\\). Predict \\(y\\) with \\(x\\) using a model (e.g., linear regression, random forest, etc.). Calculate the difference in prediction error between steps 1 and 2. This difference reflects the reduction in uncertainty about \\(y\\) when \\(x\\) is included, serving as a measure of association strength. 3.4.4.2 Generalizing Across Variable Types To construct a comprehensive framework that handles different variable combinations, such as: Continuous vs. continuous Categorical vs. continuous Continuous vs. categorical Categorical vs. categorical a flexible modeling approach is required. Classification and Regression Trees (CART) are particularly well-suited for this purpose, as they can accommodate both continuous and categorical predictors and outcomes. However, other models, such as random forests or generalized additive models (GAMs), may also be employed. 3.4.4.3 Limitations of the Approach Despite its strengths, this approach has some limitations: Asymmetry: The measure is not symmetric, meaning \\((x, y) \\neq (y, x)\\). Comparability: Different variable pairs may yield metrics that are not directly comparable. For instance, continuous outcomes often use metrics like Mean Absolute Error (MAE), while categorical outcomes use measures like misclassification error. These limitations should be considered when interpreting results, especially in multi-variable or mixed-data contexts. library(ppsr) library(tidyverse) iris &lt;- iris %&gt;% dplyr::select(1:3) # ppsr::score_df(iris) # if you want a dataframe ppsr::score_matrix(iris, do_parallel = TRUE, n_cores = parallel::detectCores() / 2) #&gt; Sepal.Length Sepal.Width Petal.Length #&gt; Sepal.Length 1.00000000 0.04632352 0.5491398 #&gt; Sepal.Width 0.06790301 1.00000000 0.2376991 #&gt; Petal.Length 0.61608360 0.24263851 1.0000000 # if you want a similar correlation matrix ppsr::score_matrix(df, do_parallel = TRUE, n_cores = parallel::detectCores() / 2) #&gt; cyl vs carb #&gt; cyl 1.00000000 0.3982789 0.2092533 #&gt; vs 0.02514286 1.0000000 0.2000000 #&gt; carb 0.30798148 0.2537309 1.0000000 corrplot::corrplot(cor(df)) Alternatively, PerformanceAnalytics::chart.Correlation(df, histogram = T, pch = 19) heatmap(as.matrix(df)) More general form, ppsr::visualize_pps( df = iris, do_parallel = TRUE, n_cores = parallel::detectCores() / 2 ) ppsr::visualize_correlations( df = iris ) Both heat map and correlation at the same time ppsr::visualize_both( df = iris, do_parallel = TRUE, n_cores = parallel::detectCores() / 2 ) More elaboration with ggplot2 ppsr::visualize_pps( df = iris, color_value_high = &#39;red&#39;, color_value_low = &#39;yellow&#39;, color_text = &#39;black&#39; ) + ggplot2::theme_classic() + ggplot2::theme(plot.background = ggplot2::element_rect(fill = &quot;lightgrey&quot;)) + ggplot2::theme(title = ggplot2::element_text(size = 15)) + ggplot2::labs( title = &#39;Correlation aand Heatmap&#39;, subtitle = &#39;Subtitle&#39;, caption = &#39;Caption&#39;, x = &#39;More info&#39; ) "],["basic-statistical-inference.html", "Chapter 4 Basic Statistical Inference", " Chapter 4 Basic Statistical Inference Statistical inference involves drawing conclusions about population parameters based on sample data. The two primary goals of inference are: Making inferences about the true parameter value (\\(\\beta\\)) based on our estimator or estimate: This involves interpreting the sample-derived estimate to understand the population parameter. Examples include estimating population means, variances, or proportions. Testing whether underlying assumptions hold true, including: Assumptions about the true population parameters (e.g., \\(\\mu\\), \\(\\sigma^2\\)). Assumptions about random variables (e.g., independence, normality). Assumptions about the model specification (e.g., linearity in regression). Note: Statistical testing does not: Confirm with absolute certainty that a hypothesis is true or false. Interpret the magnitude of the estimated value in economic, practical, or business contexts without additional analysis. Statistical significance: Refers to whether an observed effect is unlikely due to chance. Practical significance: Focuses on the real-world importance of the effect. Example: A marketing campaign increases sales by \\(0.5\\%\\), which is statistically significant (\\(p &lt; 0.05\\)). However, in a small market, this may lack practical significance. Instead, inference provides a framework for making probabilistic statements about population parameters, given sample data. "],["hypothesis-testing-framework.html", "4.1 Hypothesis Testing Framework", " 4.1 Hypothesis Testing Framework Hypothesis testing is one of the fundamental tools in statistics. It provides a formal procedure to test claims or assumptions (hypotheses) about population parameters using sample data. This process is essential in various fields, including business, medicine, and social sciences, as it helps answer questions like “Does a new marketing strategy improve sales?” or “Is there a significant difference in test scores between two teaching methods?” The goal of hypothesis testing is to make decisions or draw conclusions about a population based on sample data. This is necessary because we rarely have access to the entire population. For example, if a company wants to determine whether a new advertising campaign increases sales, it might analyze data from a sample of stores rather than every store globally. Key Steps in Hypothesis Testing Formulate Hypotheses: Define the null and alternative hypotheses. Choose a Significance Level (\\(\\alpha\\)): Determine the acceptable probability of making a Type I error. Select a Test Statistic: Identify the appropriate statistical test based on the data and hypotheses. Define the Rejection Region: Specify the range of values for which the null hypothesis will be rejected. Compute the Test Statistic: Use sample data to calculate the test statistic. Make a Decision: Compare the test statistic to the critical value or use the p-value to decide whether to reject or fail to reject the null hypothesis. 4.1.1 Null and Alternative Hypotheses At the heart of hypothesis testing lies the formulation of two competing hypotheses: Null Hypothesis (\\(H_0\\)): Represents the current state of knowledge, status quo, or no effect. It is assumed true unless there is strong evidence against it. Examples: \\(H_0: \\mu_1 = \\mu_2\\) (no difference in means between two groups). \\(H_0: \\beta = 0\\) (a predictor variable has no effect in a regression model). Think of \\(H_0\\) as the “default assumption.” Alternative Hypothesis (\\(H_a\\) or \\(H_1\\)): Represents a claim that contradicts the null hypothesis. It is what you are trying to prove or find evidence for. Examples: \\(H_a: \\mu_1 \\neq \\mu_2\\) (means of two groups are different). \\(H_a: \\beta \\neq 0\\) (a predictor variable has an effect). 4.1.2 Errors in Hypothesis Testing Hypothesis testing involves decision-making under uncertainty, meaning there is always a risk of making errors. These errors are classified into two types: Type I Error (\\(\\alpha\\)): Occurs when the null hypothesis is rejected, even though it is true. Example: Concluding that a medication is effective when it actually has no effect. The probability of making a Type I error is denoted by \\(\\alpha\\), called the significance level (commonly set at 0.05 or 5%). Type II Error (\\(\\beta\\)): Occurs when the null hypothesis is not rejected, but the alternative hypothesis is true. Example: Failing to detect that a medication is effective when it actually works. The complement of \\(\\beta\\) is called the power of the test (\\(1 - \\beta\\)), representing the probability of correctly rejecting the null hypothesis. Analogy: The Legal System To make this concept more intuitive, consider the analogy of a courtroom: Null Hypothesis (\\(H_0\\)): The defendant is innocent. Alternative Hypothesis (\\(H_a\\)): The defendant is guilty. Type I Error: Convicting an innocent person (false positive). Type II Error: Letting a guilty person go free (false negative). Balancing \\(\\alpha\\) and \\(\\beta\\) is critical in hypothesis testing, as reducing one often increases the other. For example, if you make it harder to reject \\(H_0\\) (reducing \\(\\alpha\\)), you increase the chance of failing to detect a true effect (increasing \\(\\beta\\)). 4.1.3 The Role of Distributions in Hypothesis Testing Distributions play a fundamental role in hypothesis testing because they provide a mathematical model for understanding how a test statistic behaves under the null hypothesis (\\(H_0\\)). Without distributions, it would be impossible to determine whether the observed results are due to random chance or provide evidence to reject the null hypothesis. 4.1.3.1 Expected Outcomes One of the key reasons distributions are so crucial is that they describe the range of values a test statistic is likely to take when \\(H_0\\) is true. This helps us understand what is considered “normal” variation in the data due to random chance. For example: Imagine you are conducting a study to test whether a new marketing strategy increases the average monthly sales. Under the null hypothesis, you assume the new strategy has no effect, and the average sales remain unchanged. When you collect a sample and calculate the test statistic, you compare it to the expected distribution (e.g., the normal distribution for a \\(z\\)-test). This distribution shows the range of test statistic values that are likely to occur purely due to random fluctuations in the data, assuming \\(H_0\\) is true. By providing this baseline of what is “normal,” distributions allow us to identify unusual results that may indicate the null hypothesis is false. 4.1.3.2 Critical Values and Rejection Regions Distributions also help define critical values and rejection regions in hypothesis testing. Critical values are specific points on the distribution that mark the boundaries of the rejection region. The rejection region is the range of values for the test statistic that lead us to reject \\(H_0\\). The location of these critical values depends on: The level of significance (\\(\\alpha\\)), which is the probability of rejecting \\(H_0\\) when it is true (a Type I error). The shape of the test statistic’s distribution under \\(H_0\\). For example: In a one-tailed \\(z\\)-test with \\(\\alpha = 0.05\\), the critical value is approximately \\(1.645\\) for a standard normal distribution. If the calculated test statistic exceeds this value, we reject \\(H_0\\) because such a result would be very unlikely under \\(H_0\\). Distributions help us visually and mathematically determine these critical points. By examining the distribution, we can see where the rejection region lies and what the probability is of observing a value in that region by random chance alone. 4.1.3.3 P-values The p-value, a central concept in hypothesis testing, is directly derived from the distribution of the test statistic under \\(H_0\\). The p-value represents the probability of observing a test statistic as extreme as (or more extreme than) the one calculated, assuming \\(H_0\\) is true. The p-value quantifies the strength of evidence against \\(H_0\\). It represents the probability of observing a test statistic as extreme as (or more extreme than) the one calculated, assuming \\(H_0\\) is true. Small p-value (&lt; \\(\\alpha\\)): Strong evidence against \\(H_0\\); reject \\(H_0\\). Large p-value (&gt; \\(\\alpha\\)): Weak evidence against \\(H_0\\); fail to reject \\(H_0\\). For example: Suppose you calculate a \\(z\\)-test statistic of \\(2.1\\) in a one-tailed test. Using the standard normal distribution, the p-value is the area under the curve to the right of \\(z = 2.1\\). This area represents the likelihood of observing a result as extreme as \\(z = 2.1\\) if \\(H_0\\) is true. In this case, the p-value is approximately \\(0.0179\\). A small p-value (typically less than \\(\\alpha = 0.05\\)) suggests that the observed result is unlikely under \\(H_0\\) and provides evidence to reject the null hypothesis. 4.1.3.4 Why Does All This Matter? To summarize, distributions are the backbone of hypothesis testing because they allow us to: Define what is expected under \\(H_0\\) by modeling the behavior of the test statistic. Identify results that are unlikely to occur by random chance, which leads to the rejection of \\(H_0\\). Calculate p-values to quantify the strength of evidence against \\(H_0\\). Distributions provide the framework for understanding the role of chance in statistical analysis. They are essential for determining expected outcomes, setting thresholds for decision-making (critical values and rejection regions), and calculating p-values. A solid grasp of distributions will greatly enhance your ability to interpret and conduct hypothesis tests, making it easier to draw meaningful conclusions from data. 4.1.4 The Test Statistic The test statistic is a crucial component in hypothesis testing, as it quantifies how far the observed data deviates from what we would expect if the null hypothesis (\\(H_0\\)) were true. Essentially, it provides a standardized way to compare the observed outcomes against the expectations set by \\(H_0\\), enabling us to assess whether the observed results are likely due to random chance or indicative of a significant effect. The general formula for a test statistic is: \\[ \\text{Test Statistic} = \\frac{\\text{Observed Value} - \\text{Expected Value under } H_0}{\\text{Standard Error}} \\] Each component of this formula has an important role: Numerator: The numerator represents the difference between the actual data (observed value) and the hypothetical value (expected value) that is assumed under \\(H_0\\). This difference quantifies the extent of the deviation. A larger deviation suggests stronger evidence against \\(H_0\\). Denominator: The denominator is the standard error, which measures the variability or spread of the data. It accounts for factors such as sample size and the inherent randomness of the data. By dividing the numerator by the standard error, the test statistic is standardized, allowing comparisons across different studies, sample sizes, and distributions. The test statistic plays a central role in determining whether to reject \\(H_0\\). Once calculated, it is compared to a known distribution (e.g., standard normal distribution for \\(z\\)-tests or \\(t\\)-distribution for \\(t\\)-tests). This comparison allows us to evaluate the likelihood of observing such a test statistic under \\(H_0\\): If the test statistic is close to 0: This indicates that the observed data is very close to what is expected under \\(H_0\\). There is little evidence to suggest rejecting \\(H_0\\). If the test statistic is far from 0 (in the tails of the distribution): This suggests that the observed data deviates significantly from the expectations under \\(H_0\\). Such deviations may provide strong evidence against \\(H_0\\). 4.1.4.1 Why Standardizing Matters Standardizing the difference between the observed and expected values ensures that the test statistic is not biased by factors such as the scale of measurement or the size of the sample. For instance: A raw difference of 5 might be highly significant in one context but negligible in another, depending on the variability (standard error). Standardizing ensures that the magnitude of the test statistic reflects both the size of the difference and the reliability of the sample data. 4.1.4.2 Interpreting the Test Statistic After calculating the test statistic, it is used to: Compare with a critical value: For example, in a \\(z\\)-test with \\(\\alpha = 0.05\\), the critical values are \\(-1.96\\) and \\(1.96\\) for a two-tailed test. If the test statistic falls beyond these values, \\(H_0\\) is rejected. Calculate the p-value: The p-value is derived from the distribution and reflects the probability of observing a test statistic as extreme as the one calculated if \\(H_0\\) is true. 4.1.5 Critical Values and Rejection Regions The critical value is a point on the distribution that separates the rejection region from the non-rejection region: Rejection Region: If the test statistic falls in this region, we reject \\(H_0\\). Non-Rejection Region: If the test statistic falls here, we fail to reject \\(H_0\\). The rejection region depends on the significance level (\\(\\alpha\\)). For a two-tailed test with \\(\\alpha = 0.05\\), the critical values correspond to the top 2.5% and bottom 2.5% of the distribution. 4.1.6 Visualizing Hypothesis Testing Let’s create a visualization to tie these concepts together: # Parameters alpha &lt;- 0.05 # Significance level df &lt;- 29 # Degrees of freedom (for t-distribution) t_critical &lt;- qt(1 - alpha / 2, df) # Critical value for two-tailed test # Generate t-distribution values t_values &lt;- seq(-4, 4, length.out = 1000) density &lt;- dt(t_values, df) # Observed test statistic t_obs &lt;- 2.5 # Example observed test statistic # Plot the t-distribution plot( t_values, density, type = &quot;l&quot;, lwd = 2, col = &quot;blue&quot;, main = &quot;Hypothesis Testing with Distribution&quot;, xlab = &quot;Test Statistic (t-value)&quot;, ylab = &quot;Density&quot;, ylim = c(0, 0.4) ) # Shade the rejection regions polygon(c(t_values[t_values &lt;= -t_critical], -t_critical), c(density[t_values &lt;= -t_critical], 0), col = &quot;red&quot;, border = NA) polygon(c(t_values[t_values &gt;= t_critical], t_critical), c(density[t_values &gt;= t_critical], 0), col = &quot;red&quot;, border = NA) # Add observed test statistic points( t_obs, dt(t_obs, df), col = &quot;green&quot;, pch = 19, cex = 1.5 ) text( t_obs, dt(t_obs, df) + 0.02, paste(&quot;Observed t:&quot;, round(t_obs, 2)), col = &quot;green&quot;, pos = 3 ) # Highlight the critical values abline( v = c(-t_critical, t_critical), col = &quot;black&quot;, lty = 2 ) text( -t_critical, 0.05, paste(&quot;Critical Value:&quot;, round(-t_critical, 2)), pos = 4, col = &quot;black&quot; ) text( t_critical, 0.05, paste(&quot;Critical Value:&quot;, round(t_critical, 2)), pos = 4, col = &quot;black&quot; ) # Calculate p-value p_value &lt;- 2 * (1 - pt(abs(t_obs), df)) # Two-tailed p-value text(0, 0.35, paste(&quot;P-value:&quot;, round(p_value, 4)), col = &quot;blue&quot;, pos = 3) # Annotate regions text(-3, 0.15, &quot;Rejection Region&quot;, col = &quot;red&quot;, pos = 3) text(3, 0.15, &quot;Rejection Region&quot;, col = &quot;red&quot;, pos = 3) text(0, 0.05, &quot;Non-Rejection Region&quot;, col = &quot;blue&quot;, pos = 3) # Add legend legend( &quot;topright&quot;, legend = c(&quot;Rejection Region&quot;, &quot;Critical Value&quot;, &quot;Observed Test Statistic&quot;), col = c(&quot;red&quot;, &quot;black&quot;, &quot;green&quot;), lty = c(NA, 2, NA), pch = c(15, NA, 19), bty = &quot;n&quot; ) "],["key-concepts-and-definitions.html", "4.2 Key Concepts and Definitions", " 4.2 Key Concepts and Definitions 4.2.1 Random Sample A random sample of size \\(n\\) consists of \\(n\\) independent observations, each drawn from the same underlying population distribution. Independence ensures that no observation influences another, and identical distribution guarantees that all observations are governed by the same probability rules. 4.2.2 Sample Statistics 4.2.2.1 Sample Mean The sample mean is a measure of central tendency: \\[ \\bar{X} = \\frac{\\sum_{i=1}^{n} X_i}{n} \\] Example: Suppose we measure the heights of 5 individuals (in cm): \\(170, 165, 180, 175, 172\\). The sample mean is: \\[ \\bar{X} = \\frac{170 + 165 + 180 + 175 + 172}{5} = 172.4 \\, \\text{cm}. \\] 4.2.2.2 Sample Median The sample median is the middle value of ordered data: \\[ \\tilde{x} = \\begin{cases} \\text{Middle observation,} &amp; \\text{if } n \\text{ is odd}, \\\\ \\text{Average of two middle observations,} &amp; \\text{if } n \\text{ is even}. \\end{cases} \\] 4.2.2.3 Sample Variance The sample variance measures data spread: \\[ S^2 = \\frac{\\sum_{i=1}^{n}(X_i - \\bar{X})^2}{n-1} \\] 4.2.2.4 Sample Standard Deviation The sample standard deviation is the square root of the variance: \\[ S = \\sqrt{S^2} \\] 4.2.2.5 Sample Proportions Used for categorical data: \\[ \\hat{p} = \\frac{X}{n} = \\frac{\\text{Number of successes}}{\\text{Sample size}} \\] 4.2.2.6 Estimators Point Estimator: A statistic (\\(\\hat{\\theta}\\)) used to estimate a population parameter (\\(\\theta\\)). Point Estimate:The numerical value assumed by \\(\\hat{\\theta}\\) when evaluated for a given sample. Unbiased Estimator: A point estimator \\(\\hat{\\theta}\\) is unbiased if \\(E(\\hat{\\theta}) = \\theta\\). Examples of unbiased estimators: \\(\\bar{X}\\) for \\(\\mu\\) (population mean). \\(S^2\\) for \\(\\sigma^2\\) (population variance). \\(\\hat{p}\\) for \\(p\\) (population proportion). \\(\\widehat{p_1-p_2}\\) for \\(p_1- p_2\\) (population proportion difference) \\(\\bar{X_1} - \\bar{X_2}\\) for \\(\\mu_1 - \\mu_2\\) (population mean difference) Note: While \\(S^2\\) is unbiased for \\(\\sigma^2\\), \\(S\\) is a biased estimator of \\(\\sigma\\). 4.2.3 Distribution of the Sample Mean The sampling distribution of the mean \\(\\bar{X}\\) depends on: Population Distribution: If \\(X \\sim N(\\mu, \\sigma^2)\\), then \\(\\bar{X} \\sim N\\left(\\mu, \\frac{\\sigma^2}{n}\\right)\\). Central Limit Theorem: For large \\(n\\), \\(\\bar{X}\\) approximately follows a normal distribution, regardless of the population’s shape. 4.2.3.1 Standard Error of the Mean The standard error quantifies variability in \\(\\bar{X}\\): \\[ \\sigma_{\\bar{X}} = \\frac{\\sigma}{\\sqrt{n}} \\] Example: - Suppose \\(\\sigma = 10\\) and \\(n = 25\\). Then: \\[ \\sigma_{\\bar{X}} = \\frac{10}{\\sqrt{25}} = 2. \\] The smaller the standard error, the more precise our estimate of the population mean. "],["one-sample-inference.html", "4.3 One-Sample Inference", " 4.3 One-Sample Inference 4.3.1 For Single Mean Consider a scenario where \\[ Y_i \\sim \\text{i.i.d. } N(\\mu, \\sigma^2), \\] where i.i.d. stands for “independent and identically distributed.” This model can be expressed as: \\[ Y_i = \\mu + \\epsilon_i, \\] where: \\(\\epsilon_i \\sim^{\\text{i.i.d.}} N(0, \\sigma^2)\\), \\(E(Y_i) = \\mu\\), \\(\\text{Var}(Y_i) = \\sigma^2\\), \\(\\bar{y} \\sim N(\\mu, \\sigma^2 / n)\\). When \\(\\sigma^2\\) is estimated by \\(s^2\\), the standardized test statistic follows a \\(t\\)-distribution: \\[ \\frac{\\bar{y} - \\mu}{s / \\sqrt{n}} \\sim t_{n-1}. \\] A \\(100(1-\\alpha)\\%\\) confidence interval for \\(\\mu\\) is obtained as: \\[ 1 - \\alpha = P\\left(-t_{\\alpha/2;n-1} \\leq \\frac{\\bar{y} - \\mu}{s / \\sqrt{n}} \\leq t_{\\alpha/2;n-1}\\right), \\] or equivalently, \\[ P\\left(\\bar{y} - t_{\\alpha/2;n-1}\\frac{s}{\\sqrt{n}} \\leq \\mu \\leq \\bar{y} + t_{\\alpha/2;n-1}\\frac{s}{\\sqrt{n}}\\right). \\] The confidence interval is expressed as: \\[ \\bar{y} \\pm t_{\\alpha/2;n-1}\\frac{s}{\\sqrt{n}}, \\] where \\(s / \\sqrt{n}\\) is the standard error of \\(\\bar{y}\\). If the experiment were repeated many times, \\(100(1-\\alpha)\\%\\) of these intervals would contain \\(\\mu\\). Case Confidence Interval \\(100(1-\\alpha)\\%\\) Sample Size (Confidence \\(\\alpha\\), Error \\(d\\)) Hypothesis Test Statistic \\(\\sigma^2\\) known, \\(X\\) normal (or \\(n \\geq 25\\)) \\(\\bar{X} \\pm z_{\\alpha/2}\\frac{\\sigma}{\\sqrt{n}}\\) \\(n \\approx \\frac{z_{\\alpha/2}^2 \\sigma^2}{d^2}\\) \\(z = \\frac{\\bar{X} - \\mu_0}{\\sigma / \\sqrt{n}}\\) \\(\\sigma^2\\) unknown, \\(X\\) normal (or \\(n \\geq 25\\)) \\(\\bar{X} \\pm t_{\\alpha/2}\\frac{s}{\\sqrt{n}}\\) \\(n \\approx \\frac{z_{\\alpha/2}^2 s^2}{d^2}\\) \\(t = \\frac{\\bar{X} - \\mu_0}{s / \\sqrt{n}}\\) 4.3.1.1 Power in Hypothesis Testing Power (\\(\\pi(\\mu)\\)) of a hypothesis test represents the probability of correctly rejecting the null hypothesis (\\(H_0\\)) when it is false (i.e., when alternative hypothesis \\(H_A\\) is true). Formally, it is expressed as: \\[ \\begin{aligned} \\text{Power} &amp;= \\pi(\\mu) = 1 - \\beta \\\\ &amp;= P(\\text{test rejects } H_0|\\mu) \\\\ &amp;= P(\\text{test rejects } H_0| H_A \\text{ is true}), \\end{aligned} \\] where \\(\\beta\\) is the probability of a Type II error (failing to reject \\(H_0\\) when it is false). To calculate this probability: Under \\(H_0\\): The distribution of the test statistic is centered around the null parameter (e.g., \\(\\mu_0\\)). Under \\(H_A\\): The test statistic is distributed differently, shifted according to the true value under \\(H_A\\) (e.g., \\(\\mu_1\\)). Hence, to evaluate the power, it is crucial to determine the distribution of the test statistic under the alternative hypothesis, \\(H_A\\). Below, we derive the power for both one-sided and two-sided z-tests. 4.3.1.1.1 One-Sided z-Test Consider the hypotheses: \\[ H_0: \\mu \\leq \\mu_0 \\quad \\text{vs.} \\quad H_A: \\mu &gt; \\mu_0 \\] The power for a one-sided z-test is derived as follows: The test rejects \\(H_0\\) if \\(\\bar{y} &gt; \\mu_0 + z_{\\alpha} \\frac{\\sigma}{\\sqrt{n}}\\), where \\(z_{\\alpha}\\) is the critical value for the test at the significance level \\(\\alpha\\). Under the alternative hypothesis, the distribution of \\(\\bar{y}\\) is centered at \\(\\mu\\), with standard deviation \\(\\frac{\\sigma}{\\sqrt{n}}\\). The power is then: \\[ \\begin{aligned} \\pi(\\mu) &amp;= P\\left(\\bar{y} &gt; \\mu_0 + z_{\\alpha} \\frac{\\sigma}{\\sqrt{n}} \\middle| \\mu \\right) \\\\ &amp;= P\\left(Z &gt; z_{\\alpha} + \\frac{\\mu_0 - \\mu}{\\sigma / \\sqrt{n}} \\middle| \\mu \\right), \\quad \\text{where } Z = \\frac{\\bar{y} - \\mu}{\\sigma / \\sqrt{n}} \\\\ &amp;= 1 - \\Phi\\left(z_{\\alpha} + \\frac{(\\mu_0 - \\mu)\\sqrt{n}}{\\sigma}\\right) \\\\ &amp;= \\Phi\\left(-z_{\\alpha} + \\frac{(\\mu - \\mu_0)\\sqrt{n}}{\\sigma}\\right). \\end{aligned} \\] Here, we use the symmetry of the standard normal distribution: \\(1 - \\Phi(x) = \\Phi(-x)\\). Suppose we wish to show that the mean response \\(\\mu\\) under the treatment is higher than the mean response \\(\\mu_0\\) without treatment (i.e., the treatment effect \\(\\delta = \\mu - \\mu_0\\) is large). Since power is an increasing function of \\(\\mu - \\mu_0\\), it suffices to find the sample size \\(n\\) that achieves the desired power \\(1 - \\beta\\) at \\(\\mu = \\mu_0 + \\delta\\). The power at \\(\\mu = \\mu_0 + \\delta\\) is: \\[ \\pi(\\mu_0 + \\delta) = \\Phi\\left(-z_{\\alpha} + \\frac{\\delta \\sqrt{n}}{\\sigma}\\right) = 1 - \\beta \\] Given \\(\\Phi(z_{\\beta}) = 1 - \\beta\\), we have: \\[ -z_{\\alpha} + \\frac{\\delta \\sqrt{n}}{\\sigma} = z_{\\beta} \\] Solving for \\(n\\), we obtain: \\[ n = \\left(\\frac{(z_{\\alpha} + z_{\\beta})\\sigma}{\\delta}\\right)^2 \\] Larger sample sizes are required when: The sample variability is large (\\(\\sigma\\) is large). The significance level \\(\\alpha\\) is small (\\(z_{\\alpha}\\) is large). The desired power \\(1 - \\beta\\) is large (\\(z_{\\beta}\\) is large). The magnitude of the effect is small (\\(\\delta\\) is small). In practice, \\(\\delta\\) and \\(\\sigma\\) are often unknown. To estimate \\(\\sigma\\), you can: Use prior studies or pilot studies. Approximate \\(\\sigma\\) based on the anticipated range of the observations (excluding outliers). For normally distributed data, dividing the range by 4 provides a reasonable estimate of \\(\\sigma\\). These considerations ensure the test is adequately powered to detect meaningful effects while balancing practical constraints such as sample size. 4.3.1.1.2 Two-Sided z-Test For a two-sided test, the hypotheses are: \\[ H_0: \\mu = \\mu_0 \\quad \\text{vs.} \\quad H_A: \\mu \\neq \\mu_0 \\] The test rejects \\(H_0\\) if \\(\\bar{y}\\) lies outside the interval \\(\\mu_0 \\pm z_{\\alpha/2} \\frac{\\sigma}{\\sqrt{n}}\\). The power of the test is: \\[ \\begin{aligned} \\pi(\\mu) &amp;= P\\left(\\bar{y} &lt; \\mu_0 - z_{\\alpha/2} \\frac{\\sigma}{\\sqrt{n}} \\middle| \\mu \\right) + P\\left(\\bar{y} &gt; \\mu_0 + z_{\\alpha/2} \\frac{\\sigma}{\\sqrt{n}} \\middle| \\mu \\right) \\\\ &amp;= \\Phi\\left(-z_{\\alpha/2} + \\frac{(\\mu - \\mu_0)\\sqrt{n}}{\\sigma}\\right) + \\Phi\\left(-z_{\\alpha/2} - \\frac{(\\mu - \\mu_0)\\sqrt{n}}{\\sigma}\\right). \\end{aligned} \\] To ensure a power of \\(1-\\beta\\) when the treatment effect \\(\\delta = |\\mu - \\mu_0|\\) is at least a certain value, we solve for \\(n\\). Since the power function for a two-sided test is increasing and symmetric in \\(|\\mu - \\mu_0|\\), it suffices to find \\(n\\) such that the power equals \\(1-\\beta\\) when \\(\\mu = \\mu_0 + \\delta\\). This gives: \\[ n = \\left(\\frac{(z_{\\alpha/2} + z_{\\beta}) \\sigma}{\\delta}\\right)^2 \\] Alternatively, the required sample size can be determined using a confidence interval approach. For a two-sided \\(\\alpha\\)-level confidence interval of the form: \\[ \\bar{y} \\pm D \\] where \\(D = z_{\\alpha/2} \\frac{\\sigma}{\\sqrt{n}}\\), solving for \\(n\\) gives: \\[ n = \\left(\\frac{z_{\\alpha/2} \\sigma}{D}\\right)^2 \\] This value should be rounded up to the nearest integer to ensure the required precision. # Generate random data and compute a 95% confidence interval data &lt;- rnorm(100) # Generate 100 random values t.test(data, conf.level = 0.95) # Perform t-test with 95% confidence interval #&gt; #&gt; One Sample t-test #&gt; #&gt; data: data #&gt; t = -1.3809, df = 99, p-value = 0.1704 #&gt; alternative hypothesis: true mean is not equal to 0 #&gt; 95 percent confidence interval: #&gt; -0.33722662 0.06046365 #&gt; sample estimates: #&gt; mean of x #&gt; -0.1383815 For a one-sided hypothesis test, such as testing \\(H_0: \\mu \\geq 30\\) versus \\(H_a: \\mu &lt; 30\\): # Perform one-sided t-test t.test(data, mu = 30, alternative = &quot;less&quot;) #&gt; #&gt; One Sample t-test #&gt; #&gt; data: data #&gt; t = -300.74, df = 99, p-value &lt; 2.2e-16 #&gt; alternative hypothesis: true mean is less than 30 #&gt; 95 percent confidence interval: #&gt; -Inf 0.02801196 #&gt; sample estimates: #&gt; mean of x #&gt; -0.1383815 When \\(\\sigma\\) is unknown, you can estimate it using: Prior studies or pilot studies. The range of observations (excluding outliers) divided by 4, which provides a reasonable approximation for normally distributed data. 4.3.1.1.3 z-Test Summary For one-sided tests: \\[ \\pi(\\mu) = \\Phi\\left(-z_{\\alpha} + \\frac{(\\mu - \\mu_0)\\sqrt{n}}{\\sigma}\\right) \\] For two-sided tests: \\[ \\pi(\\mu) = \\Phi\\left(-z_{\\alpha/2} + \\frac{(\\mu - \\mu_0)\\sqrt{n}}{\\sigma}\\right) + \\Phi\\left(-z_{\\alpha/2} - \\frac{(\\mu - \\mu_0)\\sqrt{n}}{\\sigma}\\right) \\] Factors Affecting Power Effect Size (\\(\\mu - \\mu_0\\)): Larger differences between \\(\\mu\\) and \\(\\mu_0\\) increase power. Sample Size (\\(n\\)): Larger \\(n\\) reduces the standard error, increasing power. Variance (\\(\\sigma^2\\)): Smaller variance increases power. Significance Level (\\(\\alpha\\)): Increasing \\(\\alpha\\) (making the test more liberal) increases power through \\(z_{\\alpha}\\). 4.3.1.1.4 One-Sample t-test In hypothesis testing, calculating the power and determining the required sample size for t-tests are more complex than for z-tests. This complexity arises from the involvement of the Student’s t-distribution and its generalized form, the non-central t-distribution. The power function for a one-sample t-test can be expressed as: \\[ \\pi(\\mu) = P\\left(\\frac{\\bar{y} - \\mu_0}{s / \\sqrt{n}} &gt; t_{n-1; \\alpha} \\mid \\mu \\right) \\] Here: \\(\\mu_0\\) is the hypothesized population mean under the null hypothesis, \\(\\bar{y}\\) is the sample mean, \\(s\\) is the sample standard deviation, \\(n\\) is the sample size, \\(t_{n-1; \\alpha}\\) is the critical t-value from the Student’s t-distribution with \\(n-1\\) degrees of freedom at significance level \\(\\alpha\\). When \\(\\mu &gt; \\mu_0\\) (i.e., \\(\\mu - \\mu_0 = \\delta\\)), the random variable \\[ T = \\frac{\\bar{y} - \\mu_0}{s / \\sqrt{n}} \\] does not follow the Student’s t-distribution. Instead, it follows a non-central t-distribution with: a non-centrality parameter \\(\\lambda = \\delta \\sqrt{n} / \\sigma\\), where \\(\\sigma\\) is the population standard deviation, degrees of freedom \\(n-1\\). Key Properties of the Power Function The power \\(\\pi(\\mu)\\) is an increasing function of the non-centrality parameter \\(\\lambda\\). For \\(\\delta = 0\\) (i.e., when the null hypothesis is true), the non-central t-distribution simplifies to the regular Student’s t-distribution. To calculate the power in practice, numerical procedures (see below) or precomputed charts are typically required. Approximate Sample Size Adjustment for t-tests When planning a study, researchers often start with an approximation based on z-tests and then adjust for the specifics of the t-test. Here’s the process: 1. Start with the Sample Size for a z-test For a two-sided test: \\[ n_z = \\frac{\\left(z_{\\alpha/2} + z_\\beta\\right)^2 \\sigma^2}{\\delta^2} \\] where: \\(z_{\\alpha/2}\\) is the critical value from the standard normal distribution for a two-tailed test, \\(z_\\beta\\) corresponds to the desired power \\(1 - \\beta\\), \\(\\delta\\) is the effect size \\(\\mu - \\mu_0\\), \\(\\sigma\\) is the population standard deviation. 2. Adjust for the t-distribution Let \\(v = n - 1\\), where \\(n\\) is the sample size derived from the z-test. For a two-sided t-test, the approximate sample size is: \\[ n^* = \\frac{\\left(t_{v; \\alpha/2} + t_{v; \\beta}\\right)^2 \\sigma^2}{\\delta^2} \\] Here: \\(t_{v; \\alpha/2}\\) and \\(t_{v; \\beta}\\) are the critical values from the Student’s t-distribution for the significance level \\(\\alpha\\) and desired power, respectively. Since \\(v\\) depends on \\(n^*\\), this process may require iterative refinement. Notes: Approximations: The above formulas provide an intuitive starting point but may require adjustments based on exact numerical solutions. Insights: Power is an increasing function of: the effect size \\(\\delta\\), the sample size \\(n\\), and a decreasing function of the population variability \\(\\sigma\\). # Example: Power calculation for a one-sample t-test library(pwr) # Parameters effect_size &lt;- 0.5 # Cohen&#39;s d alpha &lt;- 0.05 # Significance level power &lt;- 0.8 # Desired power # Compute sample size sample_size &lt;- pwr.t.test( d = effect_size, sig.level = alpha, power = power, type = &quot;one.sample&quot; )$n # Print result cat(&quot;Required sample size for one-sample t-test:&quot;, ceiling(sample_size), &quot;\\n&quot;) #&gt; Required sample size for one-sample t-test: 34 # Power calculation for a given sample size calculated_power &lt;- pwr.t.test( n = ceiling(sample_size), d = effect_size, sig.level = alpha, type = &quot;one.sample&quot; )$power cat(&quot;Achieved power with computed sample size:&quot;, calculated_power, &quot;\\n&quot;) #&gt; Achieved power with computed sample size: 0.8077775 4.3.2 For Difference of Means, Independent Samples \\(100(1-\\alpha)%\\) Confidence Interval Hypothesis Testing Test Statistic When \\(\\sigma^2\\) is known \\(\\bar{X}_1 - \\bar{X}_2 \\pm z_{\\alpha/2}\\sqrt{\\frac{\\sigma^2_1}{n_1}+\\frac{\\sigma^2_2}{n_2}}\\) \\(z= \\frac{(\\bar{X}_1-\\bar{X}_2)-(\\mu_1-\\mu_2)_0}{\\sqrt{\\frac{\\sigma^2_1}{n_1}+\\frac{\\sigma^2_2}{n_2}}}\\) When \\(\\sigma^2\\) is unknown, Variances Assumed EQUAL \\(\\bar{X}_1 - \\bar{X}_2 \\pm t_{\\alpha/2}\\sqrt{s^2_p(\\frac{1}{n_1}+\\frac{1}{n_2})}\\) \\(t = \\frac{(\\bar{X}_1-\\bar{X}_2)-(\\mu_1-\\mu_2)_0}{\\sqrt{s^2_p(\\frac{1}{n_1}+\\frac{1}{n_2})}}\\) Pooled Variance: \\(s_p^2 = \\frac{(n_1 -1)s^2_1 - (n_2-1)s^2_2}{n_1 + n_2 -2}\\) Degrees of Freedom: \\(\\gamma = n_1 + n_2 -2\\) When \\(\\sigma^2\\) is unknown, Variances Assumed UNEQUAL \\(\\bar{X}_1 - \\bar{X}_2 \\pm t_{\\alpha/2}\\sqrt{(\\frac{s^2_1}{n_1}+\\frac{s^2_2}{n_2})}\\) \\(t = \\frac{(\\bar{X}_1-\\bar{X}_2)-(\\mu_1-\\mu_2)_0}{\\sqrt{(\\frac{s^2_1}{n_1}+\\frac{s^2_2}{n_2})}}\\) Degrees of Freedom: \\(\\gamma = \\frac{(\\frac{s_1^2}{n_1}+\\frac{s^2_2}{n_2})^2}{\\frac{(\\frac{s_1^2}{n_1})^2}{n_1-1}+\\frac{(\\frac{s_2^2}{n_2})^2}{n_2-1}}\\) 4.3.3 For Difference of Means, Paired Samples Metric Formula Confidence Interval \\(\\bar{D} \\pm t_{\\alpha/2}\\frac{s_d}{\\sqrt{n}}\\) Hypothesis Test Statistic \\(t = \\frac{\\bar{D} - D_0}{s_d / \\sqrt{n}}\\) 4.3.4 For Difference of Two Proportions The mean of the difference between two sample proportions is given by: \\[ \\hat{p_1} - \\hat{p_2} \\] The variance of the difference in proportions is: \\[ \\frac{p_1(1-p_1)}{n_1} + \\frac{p_2(1-p_2)}{n_2} \\] A \\(100(1-\\alpha)\\%\\) confidence interval for the difference in proportions is calculated as: \\[ \\hat{p_1} - \\hat{p_2} \\pm z_{\\alpha/2} \\sqrt{\\frac{p_1(1-p_1)}{n_1} + \\frac{p_2(1-p_2)}{n_2}} \\] where \\(z_{\\alpha/2}\\): The critical value from the standard normal distribution. \\(\\hat{p_1}\\), \\(\\hat{p_2}\\): Sample proportions. \\(n_1\\), \\(n_2\\): Sample sizes. Sample Size for a Desired Confidence Level and Margin of Error To achieve a margin of error \\(d\\) for a given confidence level, the required sample size can be estimated as follows: With Prior Estimates of \\(\\hat{p_1}\\) and \\(\\hat{p_2}\\): \\[ n \\approx \\frac{z_{\\alpha/2}^2 \\left[p_1(1-p_1) + p_2(1-p_2)\\right]}{d^2} \\] Without Prior Estimates (assuming maximum variability, \\(\\hat{p} = 0.5\\)): \\[ n \\approx \\frac{z_{\\alpha/2}^2}{2d^2} \\] Hypothesis Testing for Difference in Proportions The test statistic for hypothesis testing depends on the null hypothesis: When \\((p_1 - p_2) \\neq 0\\): \\[ z = \\frac{(\\hat{p_1} - \\hat{p_2}) - (p_1 - p_2)_0}{\\sqrt{\\frac{p_1(1-p_1)}{n_1} + \\frac{p_2(1-p_2)}{n_2}}} \\] When \\((p_1 - p_2)_0 = 0\\) (testing equality of proportions): \\[ z = \\frac{\\hat{p_1} - \\hat{p_2}}{\\sqrt{\\hat{p}(1-\\hat{p}) \\left(\\frac{1}{n_1} + \\frac{1}{n_2}\\right)}} \\] where \\(\\hat{p}\\) is the pooled sample proportion: \\[ \\hat{p} = \\frac{x_1 + x_2}{n_1 + n_2} = \\frac{n_1\\hat{p_1} + n_2\\hat{p_2}}{n_1 + n_2} \\] 4.3.5 For Single Proportion The \\(100(1-\\alpha)\\%\\) confidence interval for a population proportion \\(p\\) is: \\[ \\hat{p} \\pm z_{\\alpha/2} \\sqrt{\\frac{\\hat{p}(1-\\hat{p})}{n}} \\] Sample Size Determination With Prior Estimate (\\(\\hat{p}\\)): \\[ n \\approx \\frac{z_{\\alpha/2}^2 \\hat{p}(1-\\hat{p})}{d^2} \\] Without Prior Estimate: \\[ n \\approx \\frac{z_{\\alpha/2}^2}{4d^2} \\] The test statistic for \\(H_0: p = p_0\\) is: \\[ z = \\frac{\\hat{p} - p_0}{\\sqrt{\\frac{p_0(1-p_0)}{n}}} \\] 4.3.6 For Single Variance For a sample variance \\(s^2\\) with \\(n\\) observations, the \\(100(1-\\alpha)\\%\\) confidence interval for the population variance \\(\\sigma^2\\) is: \\[ \\begin{aligned} 1 - \\alpha &amp;= P( \\chi_{1-\\alpha/2;n-1}^2) \\le (n-1)s^2/\\sigma^2 \\le \\chi_{\\alpha/2;n-1}^2)\\\\ &amp;=P\\left(\\frac{(n-1)s^2}{\\chi^2_{\\alpha/2; n-1}} \\leq \\sigma^2 \\leq \\frac{(n-1)s^2}{\\chi^2_{1-\\alpha/2; n-1}}\\right) \\end{aligned} \\] Equivalently, the confidence interval can be written as: \\[ \\left(\\frac{(n-1)s^2}{\\chi^2_{\\alpha/2}}, \\frac{(n-1)s^2}{\\chi^2_{1-\\alpha/2}}\\right) \\] To find confidence limits for \\(\\sigma\\), compute the square root of the interval bounds: \\[ \\text{Confidence Interval for } \\sigma: \\quad \\left(\\sqrt{\\frac{(n-1)s^2}{\\chi^2_{\\alpha/2}}}, \\sqrt{\\frac{(n-1)s^2}{\\chi^2_{1-\\alpha/2}}}\\right) \\] Hypothesis Testing for Variance The test statistic for testing a null hypothesis about a population variance (\\(\\sigma^2_0\\)) is: \\[ \\chi^2 = \\frac{(n-1)s^2}{\\sigma^2_0} \\] This test statistic follows a chi-squared distribution with \\(n-1\\) degrees of freedom under the null hypothesis. 4.3.7 Non-parametric Tests Method Purpose Assumptions Sign Test Test median None (ordinal data sufficient) Wilcoxon Signed Rank Test Test symmetry around a value Symmetry of distribution Wald-Wolfowitz Runs Test Test for randomness Independent observations Quantile (or Percentile) Test Test specific quantile None (ordinal data sufficient) 4.3.7.1 Sign Test The Sign Test is used to test hypotheses about the median of a population, \\(\\mu_{(0.5)}\\), without assuming a specific distribution for the data. This test is ideal for small sample sizes or when normality assumptions are not met. To test the population median, consider the hypotheses: Null Hypothesis: \\(H_0: \\mu_{(0.5)} = 0\\) Alternative Hypothesis: \\(H_a: \\mu_{(0.5)} &gt; 0\\) (one-sided test) Steps: Count Positive and Negative Deviations: Count observations (\\(y_i\\)) greater than 0: \\(s_+\\) (number of positive signs). Count observations less than 0: \\(s_-\\) (number of negative signs). \\(s_- = n - s_+\\). Decision Rule: Reject \\(H_0\\) if \\(s_+\\) is large (or equivalently, \\(s_-\\) is small). To determine how large \\(s_+\\) must be, use the distribution of \\(S_+\\) under \\(H_0\\), which is Binomial with \\(p = 0.5\\). Null Distribution: Under \\(H_0\\), \\(S_+\\) follows: \\[ S_+ \\sim Binomial(n, p = 0.5) \\] Critical Value: Reject \\(H_0\\) if: \\[ s_+ \\ge b_{n,\\alpha} \\] where \\(b_{n,\\alpha}\\) is the upper \\(\\alpha\\) critical value of the binomial distribution. p-value Calculation: Compute the p-value for the observed (one-tailed) \\(s_+\\) as: \\[ \\text{p-value} = P(S \\ge s_+) = \\sum_{i=s_+}^{n} \\binom{n}{i} \\left(\\frac{1}{2}\\right)^n \\] Alternatively: \\[ P(S \\le s_-) = \\sum_{i=0}^{s_-} \\binom{n}{i} \\left(\\frac{1}{2}\\right)^n \\] Large Sample Normal Approximation For large \\(n\\), use a normal approximation for the binomial test. Reject \\(H_0\\) if: \\[ s_+ \\ge \\frac{n}{2} + \\frac{1}{2} + z_{\\alpha} \\sqrt{\\frac{n}{4}} \\] where \\(z_\\alpha\\) is the critical value for a one-sided test. For two-sided tests, use the maximum or minimum of \\(s_+\\) and \\(s_-\\): Test statistic: \\(s_{\\text{max}} = \\max(s_+, s_-)\\) or \\(s_{\\text{min}} = \\min(s_+, s_-)\\) Reject \\(H_0\\) if \\(p\\)-value is less than \\(\\alpha\\), where: \\[ p\\text{-value} = 2 \\sum_{i=s_{\\text{max}}}^{n} \\binom{n}{i} \\left(\\frac{1}{2}\\right)^n = 2 \\sum_{i = 0}^{s_{min}} \\binom{n}{i} \\left( \\frac{1}{2} \\right)^n \\] Equivalently, rejecting \\(H_0\\) if \\(s_{max} \\ge b_{n,\\alpha/2}\\). For large \\(n\\), the normal approximation uses: \\[ z = \\frac{s_{\\text{max}} - \\frac{n}{2} - \\frac{1}{2}}{\\sqrt{\\frac{n}{4}}} \\] Reject \\(H_0\\) at \\(\\alpha\\) if \\(z \\ge z_{\\alpha/2}\\). Handling zeros in the data is a common issue with the Sign Test: Random Assignment: Assign zeros randomly to either \\(s_+\\) or \\(s_-\\) (2 researchers might get different results). Fractional Assignment: Count each zero as \\(0.5\\) toward both \\(s_+\\) and \\(s_-\\) (but then we could not apply the Binomial Distribution afterward). Ignore Zeros: Ignore zeros, but note this reduces the sample size and power. # Example Data data &lt;- c(0.76, 0.82, 0.80, 0.79, 1.06, 0.83, -0.43, -0.34, 3.34, 2.33) # Count positive signs s_plus &lt;- sum(data &gt; 0) # Sample size excluding zeros n &lt;- length(data) # Perform a one-sided binomial test binom.test(s_plus, n, p = 0.5, alternative = &quot;greater&quot;) #&gt; #&gt; Exact binomial test #&gt; #&gt; data: s_plus and n #&gt; number of successes = 8, number of trials = 10, p-value = 0.05469 #&gt; alternative hypothesis: true probability of success is greater than 0.5 #&gt; 95 percent confidence interval: #&gt; 0.4930987 1.0000000 #&gt; sample estimates: #&gt; probability of success #&gt; 0.8 4.3.7.2 Wilcoxon Signed Rank Test The Wilcoxon Signed Rank Test is an improvement over the Sign Test as it considers both the magnitude and direction of deviations from the null hypothesis value (e.g., 0). However, this test assumes that the data are symmetrically distributed around the median, unlike the Sign Test. We test the following hypotheses: \\[ H_0: \\mu_{(0.5)} = 0 \\\\ H_a: \\mu_{(0.5)} &gt; 0 \\] This example assumes no ties or duplicate observations in the data. Procedure for the Signed Rank Test Rank the Absolute Values: Rank the observations \\(y_i\\) based on their absolute values. Let \\(r_i\\) denote the rank of \\(y_i\\). Since there are no ties, ranks \\(r_i\\) are uniquely determined and form a permutation of integers \\(1, 2, \\dots, n\\). Calculate \\(w_+\\) and \\(w_-\\): \\(w_+\\) is the sum of the ranks corresponding to positive values of \\(y_i\\). \\(w_-\\) is the sum of the ranks corresponding to negative values of \\(y_i\\). By definition: \\[ w_+ + w_- = \\sum_{i=1}^n r_i = \\frac{n(n+1)}{2} \\] Decision Rule: Reject \\(H_0\\) if \\(w_+\\) is large (or equivalently, if \\(w_-\\) is small). Null Distribution of \\(W_+\\) Under the null hypothesis, the distributions of \\(W_+\\) and \\(W_-\\) are identical and symmetric. The p-value for a one-sided test is: \\[ \\text{p-value} = P(W \\ge w_+) = P(W \\le w_-) \\] An \\(\\alpha\\)-level test rejects \\(H_0\\) if \\(w_+ \\ge w_{n,\\alpha}\\), where \\(w_{n,\\alpha}\\) is the critical value from a table of the null distribution of \\(W_+\\). For two-sided tests, use: \\[ p\\text{-value} = 2P(W \\ge w_{max}) = 2P(W \\le w_{min}) \\] Normal Approximation for Large Samples For large \\(n\\), the null distribution of \\(W_+\\) can be approximated by a normal distribution: \\[ z = \\frac{w_+ - \\frac{n(n+1)}{4} - \\frac{1}{2}}{\\sqrt{\\frac{n(n+1)(2n+1)}{24}}} \\] The test rejects \\(H_0\\) at level \\(\\alpha\\) if: \\[ w_+ \\ge \\frac{n(n+1)}{4} + \\frac{1}{2} + z_{\\alpha} \\sqrt{\\frac{n(n+1)(2n+1)}{24}} \\approx w_{n,\\alpha} \\] For a two-sided test, the decision rule uses the maximum or minimum of \\(w_+\\) and \\(w_-\\): \\(w_{max} = \\max(w_+, w_-)\\) \\(w_{min} = \\min(w_+, w_-)\\) The p-value is computed as: \\[ p\\text{-value} = 2P(W \\ge w_{max}) = 2P(W \\le w_{min}) \\] Handling Tied Ranks If some observations \\(|y_i|\\) have tied absolute values, assign the average rank (or “midrank”) to all tied values. For example: Suppose \\(y_1 = -1\\), \\(y_2 = 3\\), \\(y_3 = -3\\), and \\(y_4 = 5\\). The ranks for \\(|y_i|\\) are: \\(|y_1| = 1\\): \\(r_1 = 1\\) \\(|y_2| = |y_3| = 3\\): \\(r_2 = r_3 = \\frac{2+3}{2} = 2.5\\) \\(|y_4| = 5\\): \\(r_4 = 4\\) # Example Data data &lt;- c(0.76, 0.82, 0.80, 0.79, 1.06, 0.83, -0.43, -0.34, 3.34, 2.33) # Perform Wilcoxon Signed Rank Test (exact test) wilcox_exact &lt;- wilcox.test(data, exact = TRUE) # Display results wilcox_exact #&gt; #&gt; Wilcoxon signed rank exact test #&gt; #&gt; data: data #&gt; V = 52, p-value = 0.009766 #&gt; alternative hypothesis: true location is not equal to 0 For large samples, you can use the normal approximation by setting exact = FALSE: # Perform Wilcoxon Signed Rank Test (normal approximation) wilcox_normal &lt;- wilcox.test(data, exact = FALSE) # Display results wilcox_normal #&gt; #&gt; Wilcoxon signed rank test with continuity correction #&gt; #&gt; data: data #&gt; V = 52, p-value = 0.01443 #&gt; alternative hypothesis: true location is not equal to 0 4.3.7.3 Wald-Wolfowitz Runs Test The Runs Test is a non-parametric test used to examine the randomness of a sequence. Specifically, it tests whether the order of observations in a sequence is random. This test is useful in detecting non-random patterns, such as trends, clustering, or periodicity. The hypotheses for the Runs Test are: Null Hypothesis: \\(H_0\\): The sequence is random. Alternative Hypothesis: \\(H_a\\): The sequence is not random. A run is a sequence of consecutive observations of the same type. For example: - In the binary sequence + + - - + - + +, there are 5 runs: ++, --, +, -, ++. Runs can be formed based on any classification criteria, such as: Positive vs. Negative values Above vs. Below the median Success vs. Failure in binary outcomes Test Statistic Number of Runs (\\(R\\)): The observed number of runs in the sequence. Expected Number of Runs (\\(E[R]\\)): Under the null hypothesis of randomness, the expected number of runs is: \\[ E[R] = \\frac{2 n_1 n_2}{n_1 + n_2} + 1 \\] where: \\(n_1\\): Number of observations in the first category (e.g., positives). \\(n_2\\): Number of observations in the second category (e.g., negatives). \\(n = n_1 + n_2\\): Total number of observations. Variance of Runs (\\(\\text{Var}[R]\\)): The variance of the number of runs is given by: \\[ \\text{Var}[R] = \\frac{2 n_1 n_2 (2 n_1 n_2 - n)}{n^2 (n - 1)} \\] Standardized Test Statistic (\\(z\\)): For large samples (\\(n \\geq 20\\)), the test statistic is approximately normally distributed: \\[ z = \\frac{R - E[R]}{\\sqrt{\\text{Var}[R]}} \\] Decision Rule Compute the \\(z\\)-value and compare it to the critical value of the standard normal distribution. For a significance level \\(\\alpha\\): Reject \\(H_0\\) if \\(|z| \\ge z_{\\alpha/2}\\) (two-sided test). Reject \\(H_0\\) if \\(z \\ge z_\\alpha\\) or \\(z \\le -z_\\alpha\\) for one-sided tests. Steps for Conducting a Runs Test: Classify the data into two groups (e.g., above/below median, positive/negative). Count the total number of runs (\\(R\\)). Compute \\(E[R]\\) and \\(\\text{Var}[R]\\) based on \\(n_1\\) and \\(n_2\\). Compute the \\(z\\)-value for the observed number of runs. Compare the \\(z\\)-value to the critical value to decide whether to reject \\(H_0\\). For a numerical dataset where the test is based on values above and below the median: # Example dataset data &lt;- c(1.2, -0.5, 3.4, -1.1, 2.8, -0.8, 4.5, 0.7) library(randtests) # Perform Runs Test (above/below median) runs.test(data) #&gt; #&gt; Runs Test #&gt; #&gt; data: data #&gt; statistic = 2.2913, runs = 8, n1 = 4, n2 = 4, n = 8, p-value = 0.02195 #&gt; alternative hypothesis: nonrandomness The output of the runs.test function includes: Observed Runs: The actual number of runs in the sequence. Expected Runs: The expected number of runs under \\(H_0\\). p-value: The probability of observing a number of runs as extreme as the observed one under \\(H_0\\). If the p-value is less than \\(\\alpha\\), reject \\(H_0\\) and conclude that the sequence is not random. Limitations of the Runs Test The test assumes that observations are independent. For small sample sizes, the test may have limited power. Ties in the data must be resolved by a predefined rule (e.g., treating ties as belonging to one group or excluding them). 4.3.7.4 Quantile (or Percentile) Test The Quantile Test (also called the Percentile Test) is a non-parametric test used to evaluate whether the proportion of observations falling within a specific quantile matches the expected proportion under the null hypothesis. This test is useful for assessing the distribution of data when specific quantiles (e.g., medians or percentiles) are of interest. Suppose we want to test whether the true proportion of data below a specified quantile \\(q\\) matches a given probability \\(p\\). The hypotheses are: Null Hypothesis: \\(H_0\\): The true proportion is equal to \\(p\\). Alternative Hypothesis: \\(H_a\\): The true proportion is not equal to \\(p\\) (two-sided), greater than \\(p\\) (right-tailed), or less than \\(p\\) (left-tailed). Test Statistic The test statistic is based on the observed count of data points below the specified quantile. Observed Count (\\(k\\)): The number of data points \\(y_i\\) such that \\(y_i \\leq q\\). Expected Count (\\(E[k]\\)): The expected number of observations below the quantile \\(q\\) under \\(H_0\\) is: \\[ E[k] = n \\cdot p \\] Variance: Under the binomial distribution, the variance is: \\[ \\text{Var}[k] = n \\cdot p \\cdot (1 - p) \\] Standardized Test Statistic (\\(z\\)): For large \\(n\\), the test statistic is approximately normally distributed: \\[ z = \\frac{k - E[k]}{\\sqrt{\\text{Var}[k]}} = \\frac{k - n \\cdot p}{\\sqrt{n \\cdot p \\cdot (1 - p)}} \\] Decision Rule Compute the \\(z\\)-value for the observed count. Compare the \\(z\\)-value to the critical value of the standard normal distribution: For a two-sided test, reject \\(H_0\\) if \\(|z| \\geq z_{\\alpha/2}\\). For a one-sided test, reject \\(H_0\\) if \\(z \\geq z_\\alpha\\) (right-tailed) or \\(z \\leq -z_\\alpha\\) (left-tailed). Alternatively, calculate the p-value and reject \\(H_0\\) if the p-value \\(\\leq \\alpha\\). Suppose we have a dataset and want to test whether the proportion of observations below the 50th percentile (median) matches the expected value of \\(p = 0.5\\). # Example data data &lt;- c(12, 15, 14, 10, 13, 11, 14, 16, 15, 13) # Define the quantile to test quantile_value &lt;- quantile(data, 0.5) # Median p &lt;- 0.5 # Proportion under H0 # Count observed values below or equal to the quantile k &lt;- sum(data &lt;= quantile_value) # Sample size n &lt;- length(data) # Expected count under H0 expected_count &lt;- n * p # Variance variance &lt;- n * p * (1 - p) # Test statistic (z-value) z &lt;- (k - expected_count) / sqrt(variance) # Calculate p-value for two-sided test p_value &lt;- 2 * (1 - pnorm(abs(z))) # Output results list( quantile_value = quantile_value, observed_count = k, expected_count = expected_count, z_value = z, p_value = p_value ) #&gt; $quantile_value #&gt; 50% #&gt; 13.5 #&gt; #&gt; $observed_count #&gt; [1] 5 #&gt; #&gt; $expected_count #&gt; [1] 5 #&gt; #&gt; $z_value #&gt; [1] 0 #&gt; #&gt; $p_value #&gt; [1] 1 For a one-sided test (e.g., testing whether the proportion is greater than \\(p\\)): # Calculate one-sided p-value p_value_one_sided &lt;- 1 - pnorm(z) # Output one-sided p-value p_value_one_sided #&gt; [1] 0.5 Interpretation of Results p-value: If the p-value is less than \\(\\alpha\\), reject \\(H_0\\) and conclude that the proportion of observations below the quantile deviates significantly from \\(p\\). Quantile Test Statistic (\\(z\\)): The \\(z\\)-value indicates how many standard deviations the observed count is from the expected count under the null hypothesis. Large positive or negative \\(z\\) values suggest non-random deviations. Assumptions of the Test Observations are independent. The sample size is large enough for the normal approximation to the binomial distribution to be valid (\\(n \\cdot p \\geq 5\\) and \\(n \\cdot (1 - p) \\geq 5\\)). Limitations of the Test For small sample sizes, the normal approximation may not hold. In such cases, exact binomial tests are more appropriate. The test assumes that the quantile used (e.g., the median) is well-defined and correctly calculated from the data. "],["two-sample-inference.html", "4.4 Two-Sample Inference", " 4.4 Two-Sample Inference 4.4.1 For Means Suppose we have two sets of observations: \\(y_1, \\dots, y_{n_y}\\) \\(x_1, \\dots, x_{n_x}\\) These are random samples from two independent populations with means \\(\\mu_y\\) and \\(\\mu_x\\) and variances \\(\\sigma_y^2\\) and \\(\\sigma_x^2\\). Our goal is to compare \\(\\mu_y\\) and \\(\\mu_x\\) or test whether \\(\\sigma_y^2 = \\sigma_x^2\\). 4.4.1.1 Large Sample Tests If \\(n_y\\) and \\(n_x\\) are large (\\(\\geq 30\\)), the Central Limit Theorem allows us to make the following assumptions: Expectation: \\[ E(\\bar{y} - \\bar{x}) = \\mu_y - \\mu_x \\] Variance: \\[ \\text{Var}(\\bar{y} - \\bar{x}) = \\frac{\\sigma_y^2}{n_y} + \\frac{\\sigma_x^2}{n_x} \\] The test statistic is: \\[ Z = \\frac{\\bar{y} - \\bar{x} - (\\mu_y - \\mu_x)}{\\sqrt{\\frac{\\sigma_y^2}{n_y} + \\frac{\\sigma_x^2}{n_x}}} \\sim N(0,1) \\] For large samples, replace variances with their unbiased estimators \\(s_y^2\\) and \\(s_x^2\\), yielding the same large sample distribution. Confidence Interval An approximate \\(100(1-\\alpha)\\%\\) confidence interval for \\(\\mu_y - \\mu_x\\) is: \\[ \\bar{y} - \\bar{x} \\pm z_{\\alpha/2} \\sqrt{\\frac{s_y^2}{n_y} + \\frac{s_x^2}{n_x}} \\] Hypothesis Test Testing: \\[ H_0: \\mu_y - \\mu_x = \\delta_0 \\quad \\text{vs.} \\quad H_a: \\mu_y - \\mu_x \\neq \\delta_0 \\] The test statistic: \\[ z = \\frac{\\bar{y} - \\bar{x} - \\delta_0}{\\sqrt{\\frac{s_y^2}{n_y} + \\frac{s_x^2}{n_x}}} \\] Reject \\(H_0\\) at the \\(\\alpha\\)-level if: \\[ |z| &gt; z_{\\alpha/2} \\] If \\(\\delta_0 = 0\\), this tests whether the two means are equal. # Large sample test y &lt;- c(10, 12, 14, 16, 18) x &lt;- c(9, 11, 13, 15, 17) # Mean and variance mean_y &lt;- mean(y) mean_x &lt;- mean(x) var_y &lt;- var(y) var_x &lt;- var(x) n_y &lt;- length(y) n_x &lt;- length(x) # Test statistic z &lt;- (mean_y - mean_x) / sqrt(var_y / n_y + var_x / n_x) p_value &lt;- 2 * (1 - pnorm(abs(z))) list(z = z, p_value = p_value) #&gt; $z #&gt; [1] 0.5 #&gt; #&gt; $p_value #&gt; [1] 0.6170751 4.4.1.2 Small Sample Tests If the samples are small, assume the data come from independent normal distributions: \\(y_i \\sim N(\\mu_y, \\sigma_y^2)\\) \\(x_i \\sim N(\\mu_x, \\sigma_x^2)\\) We can do inference based on the Student’s T Distribution, where we have 2 cases: Equal Variances Unequal Variances Assumption Tests Plots Independence and Identically Distributed (i.i.d.) Observations Test for serial correlation Independence Between Samples Correlation Coefficient Scatterplot Normality See Normality Assessment See Normality Assessment Equality of Variances F-Test Levene’s Test Modified Levene Test (Brown-Forsythe Test) Bartlett’s Test Boxplots with overlayed means Residuals spread plots 4.4.1.2.1 Equal Variances Assumptions Independence and Identically Distributed (i.i.d.) Observations Assume that observations in each sample are i.i.d., which implies: \\[ var(\\bar{y}) = \\frac{\\sigma^2_y}{n_y}, \\quad var(\\bar{x}) = \\frac{\\sigma^2_x}{n_x} \\] Independence Between Samples The samples are assumed to be independent, meaning no observation from one sample influences observations from the other. This independence allows us to write: \\[ \\begin{aligned} var(\\bar{y} - \\bar{x}) &amp;= var(\\bar{y}) + var(\\bar{x}) - 2cov(\\bar{y}, \\bar{x}) \\\\ &amp;= var(\\bar{y}) + var(\\bar{x}) \\\\ &amp;= \\frac{\\sigma^2_y}{n_y} + \\frac{\\sigma^2_x}{n_x} \\end{aligned} \\] This calculation assumes \\(cov(\\bar{y}, \\bar{x}) = 0\\) due to the independence between the samples. Normality Assumption We assume that the underlying populations are normally distributed. This assumption justifies the use of the Student’s T Distribution, which is critical for hypothesis testing and constructing confidence intervals. Equality of Variances If the population variances are equal, i.e., \\(\\sigma^2_y = \\sigma^2_x = \\sigma^2\\), then \\(s^2_y\\) and \\(s^2_x\\) are both unbiased estimators of \\(\\sigma^2\\). This allows us to pool the variances. The pooled variance estimator is calculated as: \\[ s^2 = \\frac{(n_y - 1)s^2_y + (n_x - 1)s^2_x}{(n_y - 1) + (n_x - 1)} \\] The pooled variance estimate has degrees of freedom equal to: \\[ df = (n_y + n_x - 2) \\] Test Statistic The test statistic is: \\[ T = \\frac{\\bar{y} - \\bar{x} - (\\mu_y - \\mu_x)}{s \\sqrt{\\frac{1}{n_y} + \\frac{1}{n_x}}} \\sim t_{n_y + n_x - 2} \\] Confidence Interval A \\(100(1 - \\alpha)\\%\\) confidence interval for \\(\\mu_y - \\mu_x\\) is: \\[ \\bar{y} - \\bar{x} \\pm t_{n_y + n_x - 2, \\alpha/2} \\cdot s \\sqrt{\\frac{1}{n_y} + \\frac{1}{n_x}} \\] Hypothesis Test Testing: \\[ H_0: \\mu_y - \\mu_x = \\delta_0 \\quad \\text{vs.} \\quad H_a: \\mu_y - \\mu_x \\neq \\delta_0 \\] Reject \\(H_0\\) if: \\[ |T| &gt; t_{n_y + n_x - 2, \\alpha/2} \\] # Small sample test with equal variance t_test_equal &lt;- t.test(y, x, var.equal = TRUE) t_test_equal #&gt; #&gt; Two Sample t-test #&gt; #&gt; data: y and x #&gt; t = 0.5, df = 8, p-value = 0.6305 #&gt; alternative hypothesis: true difference in means is not equal to 0 #&gt; 95 percent confidence interval: #&gt; -3.612008 5.612008 #&gt; sample estimates: #&gt; mean of x mean of y #&gt; 14 13 4.4.1.2.2 Unequal Variances Assumptions Independence and Identically Distributed (i.i.d.) Observations Assume that observations in each sample are i.i.d., which implies: \\[ var(\\bar{y}) = \\frac{\\sigma^2_y}{n_y}, \\quad var(\\bar{x}) = \\frac{\\sigma^2_x}{n_x} \\] Independence Between Samples The samples are assumed to be independent, meaning no observation from one sample influences observations from the other. This independence allows us to write: \\[ \\begin{aligned} var(\\bar{y} - \\bar{x}) &amp;= var(\\bar{y}) + var(\\bar{x}) - 2cov(\\bar{y}, \\bar{x}) \\\\ &amp;= var(\\bar{y}) + var(\\bar{x}) \\\\ &amp;= \\frac{\\sigma^2_y}{n_y} + \\frac{\\sigma^2_x}{n_x} \\end{aligned} \\] This calculation assumes \\(cov(\\bar{y}, \\bar{x}) = 0\\) due to the independence between the samples. Normality Assumption We assume that the underlying populations are normally distributed. This assumption justifies the use of the Student’s T Distribution, which is critical for hypothesis testing and constructing confidence intervals. Unequal Variances \\(\\sigma_y^2 \\neq \\sigma_x^2\\) Test Statistic The test statistic is: \\[ T = \\frac{\\bar{y} - \\bar{x} - (\\mu_y - \\mu_x)}{\\sqrt{\\frac{s_y^2}{n_y} + \\frac{s_x^2}{n_x}}} \\] Degrees of Freedom (Welch-Satterthwaite Approximation) (Satterthwaite 1946) The degrees of freedom are approximated by: \\[ v = \\frac{\\left(\\frac{s_y^2}{n_y} + \\frac{s_x^2}{n_x}\\right)^2}{\\frac{\\left(\\frac{s_y^2}{n_y}\\right)^2}{n_y - 1} + \\frac{\\left(\\frac{s_x^2}{n_x}\\right)^2}{n_x - 1}} \\] Since \\(v\\) is fractional, truncate to the nearest integer. Confidence Interval A \\(100(1 - \\alpha)\\%\\) confidence interval for \\(\\mu_y - \\mu_x\\) is: \\[ \\bar{y} - \\bar{x} \\pm t_{v, \\alpha/2} \\sqrt{\\frac{s_y^2}{n_y} + \\frac{s_x^2}{n_x}} \\] Hypothesis Test Testing: \\[ H_0: \\mu_y - \\mu_x = \\delta_0 \\quad \\text{vs.} \\quad H_a: \\mu_y - \\mu_x \\neq \\delta_0 \\] Reject \\(H_0\\) if: \\[ |T| &gt; t_{v, \\alpha/2} \\] where \\[ t = \\frac{\\bar{y} - \\bar{x}-\\delta_0}{\\sqrt{s^2_y/n_y + s^2_x /n_x}} \\] # Small sample test with unequal variance t_test_unequal &lt;- t.test(y, x, var.equal = FALSE) t_test_unequal #&gt; #&gt; Welch Two Sample t-test #&gt; #&gt; data: y and x #&gt; t = 0.5, df = 8, p-value = 0.6305 #&gt; alternative hypothesis: true difference in means is not equal to 0 #&gt; 95 percent confidence interval: #&gt; -3.612008 5.612008 #&gt; sample estimates: #&gt; mean of x mean of y #&gt; 14 13 4.4.2 For Variances To compare the variances of two independent samples, we can use the F-test. The test statistic is defined as: \\[ F_{ndf,ddf} = \\frac{s_1^2}{s_2^2} \\] where \\(s_1^2 &gt; s_2^2\\), \\(ndf = n_1 - 1\\), and \\(ddf = n_2 - 1\\) are the numerator and denominator degrees of freedom, respectively. 4.4.2.1 F-Test The hypotheses for the F-test are: \\[ H_0: \\sigma_y^2 = \\sigma_x^2 \\quad \\text{(equal variances)} \\\\ H_a: \\sigma_y^2 \\neq \\sigma_x^2 \\quad \\text{(unequal variances)} \\] The test statistic is: \\[ F = \\frac{s_y^2}{s_x^2} \\] where \\(s_y^2\\) and \\(s_x^2\\) are the sample variances of the two groups. Decision Rule Reject \\(H_0\\) if: \\(F &gt; F_{n_y-1, n_x-1, \\alpha/2}\\) (upper critical value), or \\(F &lt; F_{n_y-1, n_x-1, 1-\\alpha/2}\\) (lower critical value). Here: \\(F_{n_y-1, n_x-1, \\alpha/2}\\) and \\(F_{n_y-1, n_x-1, 1-\\alpha/2}\\) are the critical points of the F-distribution, with \\(n_y - 1\\) and \\(n_x - 1\\) degrees of freedom. Assumptions The F-test requires that the data in both groups follow a normal distribution. The F-test is sensitive to deviations from normality (e.g., heavy-tailed distributions). If the normality assumption is violated, it may lead to an inflated Type I error rate (false positives). Limitations and Alternatives Sensitivity to Non-Normality: When data have long-tailed distributions (positive kurtosis), the F-test may produce misleading results. To assess normality, see Normality Assessment. Nonparametric Alternatives: If the normality assumption is not met, use robust tests such as the Modified Levene Test (Brown-Forsythe Test), which compares group variances based on medians instead of means. # Load iris dataset data(iris) # Subset data for two species irisVe &lt;- iris$Petal.Width[iris$Species == &quot;versicolor&quot;] irisVi &lt;- iris$Petal.Width[iris$Species == &quot;virginica&quot;] # Perform F-test f_test &lt;- var.test(irisVe, irisVi) # Display results f_test #&gt; #&gt; F test to compare two variances #&gt; #&gt; data: irisVe and irisVi #&gt; F = 0.51842, num df = 49, denom df = 49, p-value = 0.02335 #&gt; alternative hypothesis: true ratio of variances is not equal to 1 #&gt; 95 percent confidence interval: #&gt; 0.2941935 0.9135614 #&gt; sample estimates: #&gt; ratio of variances #&gt; 0.5184243 4.4.2.2 Levene’s Test Levene’s Test is a robust method for testing the equality of variances across multiple groups. Unlike the F-test, it is less sensitive to departures from normality and is particularly useful for handling non-normal distributions and datasets with outliers. The test works by analyzing the deviations of individual observations from their group mean or median. Test Procedure Compute the absolute deviations of each observation from its group mean or median: For group \\(y\\): \\[ d_{y,i} = |y_i - \\text{Central Value}_y| \\] For group \\(x\\): \\[ d_{x,j} = |x_j - \\text{Central Value}_x| \\] The “central value” can be either the mean (classic Levene’s test) or the median (Modified Levene Test (Brown-Forsythe Test) variation, more robust for non-normal data). Perform a one-way ANOVA on the absolute deviations to test for differences in group variances. Hypotheses Null Hypothesis (\\(H_0\\)): All groups have equal variances. Alternative Hypothesis (\\(H_a\\)): At least one group has a variance different from the others. Test Statistic The Levene test statistic is calculated as an ANOVA on the absolute deviations. Let: \\(k\\): Number of groups, \\(n_i\\): Number of observations in group \\(i\\), \\(n\\): Total number of observations. The test statistic is: \\[ W = \\frac{(n - k) \\sum_{i=1}^k n_i (\\bar{d}_i - \\bar{d})^2}{(k - 1) \\sum_{i=1}^k \\sum_{j=1}^{n_i} (d_{i,j} - \\bar{d}_i)^2} \\] where: \\(d_{i,j}\\): Absolute deviations within group \\(i\\), \\(\\bar{d}_i\\): Mean of the absolute deviations for group \\(i\\), \\(\\bar{d}\\): Overall mean of the absolute deviations. Under the null hypothesis, \\(W \\sim F_{k-1, n - k}\\). Decision Rule Compute the test statistic \\(W\\). Reject \\(H_0\\) at significance level \\(\\alpha\\) if: \\[ W &gt; F_{k-1, n-k, \\alpha} \\] # Load required package library(car) # Perform Levene&#39;s Test (absolute deviations from the mean) levene_test_mean &lt;- leveneTest(Petal.Width ~ Species, data = iris) # Perform Levene&#39;s Test (absolute deviations from the median) levene_test_median &lt;- leveneTest(Petal.Width ~ Species, data = iris, center = median) # Display results levene_test_mean #&gt; Levene&#39;s Test for Homogeneity of Variance (center = median) #&gt; Df F value Pr(&gt;F) #&gt; group 2 19.892 2.261e-08 *** #&gt; 147 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 levene_test_median #&gt; Levene&#39;s Test for Homogeneity of Variance (center = median) #&gt; Df F value Pr(&gt;F) #&gt; group 2 19.892 2.261e-08 *** #&gt; 147 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 The output includes: Df: Degrees of freedom for the numerator and denominator. F-value: The computed value of the test statistic \\(W\\). p-value: The probability of observing such a value under the null hypothesis. If the p-value is less than \\(\\alpha\\), reject \\(H_0\\) and conclude that the group variances are significantly different. Otherwise, fail to reject \\(H_0\\) and conclude there is no evidence of a difference in variances. Advantages of Levene’s Test Robustness: Handles non-normal data and outliers better than the F-test. Flexibility: By choosing the center value (mean or median), it can adapt to different data characteristics: Use the mean for symmetric distributions. Use the median for non-normal or skewed data. Versatility: Applicable to comparing variances across more than two groups, unlike the Modified Levene Test (Brown-Forsythe Test), which is limited to two groups. 4.4.2.3 Modified Levene Test (Brown-Forsythe Test) The Modified Levene Test is a robust alternative to the F-test for comparing variances between two groups. Instead of using squared deviations (as in the F-test), this test considers the absolute deviations from the median, making it less sensitive to non-normal data and long-tailed distributions. It is, however, still appropriate for normally distributed data. For each sample, compute the absolute deviations from the median: \\[ d_{y,i} = |y_i - y_{.5}| \\quad \\text{and} \\quad d_{x,i} = |x_i - x_{.5}| \\] Let: \\(\\bar{d}_y\\) and \\(\\bar{d}_x\\) be the means of the absolute deviations for groups \\(y\\) and \\(x\\), respectively. The test statistic is: \\[ t_L^* = \\frac{\\bar{d}_y - \\bar{d}_x}{s \\sqrt{\\frac{1}{n_y} + \\frac{1}{n_x}}} \\] where the pooled variance \\(s^2\\) is: \\[ s^2 = \\frac{\\sum_{i=1}^{n_y} (d_{y,i} - \\bar{d}_y)^2 + \\sum_{j=1}^{n_x} (d_{x,j} - \\bar{d}_x)^2}{n_y + n_x - 2} \\] Assumptions Constant Variance of Error Terms: The test assumes equal error variances in each group under the null hypothesis. Moderate Sample Size: The approximation \\(t_L^* \\sim t_{n_y + n_x - 2}\\) holds well for moderate or large sample sizes. Decision Rule Compute \\(t_L^*\\) using the formula above. Reject the null hypothesis of equal variances if: \\[ |t_L^*| &gt; t_{n_y + n_x - 2; \\alpha/2} \\] This is equivalent to applying a two-sample t-test to the absolute deviations. # Absolute deviations from the median dVe &lt;- abs(irisVe - median(irisVe)) dVi &lt;- abs(irisVi - median(irisVi)) # Perform t-test on absolute deviations levene_test &lt;- t.test(dVe, dVi, var.equal = TRUE) # Display results levene_test #&gt; #&gt; Two Sample t-test #&gt; #&gt; data: dVe and dVi #&gt; t = -2.5584, df = 98, p-value = 0.01205 #&gt; alternative hypothesis: true difference in means is not equal to 0 #&gt; 95 percent confidence interval: #&gt; -0.12784786 -0.01615214 #&gt; sample estimates: #&gt; mean of x mean of y #&gt; 0.154 0.226 For small sample sizes, use the unequal variance t-test directly on the original data as a robust alternative: # Small sample t-test with unequal variances small_sample_test &lt;- t.test(irisVe, irisVi, var.equal = FALSE) # Display results small_sample_test #&gt; #&gt; Welch Two Sample t-test #&gt; #&gt; data: irisVe and irisVi #&gt; t = -14.625, df = 89.043, p-value &lt; 2.2e-16 #&gt; alternative hypothesis: true difference in means is not equal to 0 #&gt; 95 percent confidence interval: #&gt; -0.7951002 -0.6048998 #&gt; sample estimates: #&gt; mean of x mean of y #&gt; 1.326 2.026 4.4.2.4 Bartlett’s Test The Bartlett’s Test is a statistical procedure for testing the equality of variances across multiple groups. It assumes that the data in each group are normally distributed and is sensitive to deviations from normality. When the assumption of normality holds, Bartlett’s Test is more powerful than Levene’s Test. Hypotheses for Bartlett’s Test Null Hypothesis (\\(H_0\\)): All groups have equal variances. Alternative Hypothesis (\\(H_a\\)): At least one group has a variance different from the others. The test statistic for Bartlett’s Test is: \\[ B = \\frac{(n - k) \\log(S_p^2) - \\sum_{i=1}^k (n_i - 1) \\log(S_i^2)}{1 + \\frac{1}{3(k - 1)} \\left( \\sum_{i=1}^k \\frac{1}{n_i - 1} - \\frac{1}{n - k} \\right)} \\] Where: \\(k\\): Number of groups, \\(n_i\\): Number of observations in group \\(i\\), \\(n = \\sum_{i=1}^k n_i\\): Total number of observations, \\(S_i^2\\): Sample variance of group \\(i\\), \\(S_p^2\\): Pooled variance, given by: \\[ S_p^2 = \\frac{\\sum_{i=1}^k (n_i - 1) S_i^2}{n - k} \\] Under the null hypothesis, the test statistic \\(B \\sim \\chi^2_{k - 1}\\). Assumptions Normality: The data in each group must follow a normal distribution. Independence: Observations within and between groups must be independent. Equal Sample Sizes (Optional): Bartlett’s Test is more robust if sample sizes are approximately equal. Decision Rule Compute the test statistic \\(B\\). Compare \\(B\\) to the critical value of the Chi-Square distribution at \\(\\alpha\\) and \\(k - 1\\) degrees of freedom. Reject \\(H_0\\) if: \\[ B &gt; \\chi^2_{k-1, \\alpha} \\] Alternatively, use the p-value: Reject \\(H_0\\) if the p-value \\(\\leq \\alpha\\). # Perform Bartlett&#39;s Test bartlett_test &lt;- bartlett.test(Petal.Width ~ Species, data = iris) # Display results bartlett_test #&gt; #&gt; Bartlett test of homogeneity of variances #&gt; #&gt; data: Petal.Width by Species #&gt; Bartlett&#39;s K-squared = 39.213, df = 2, p-value = 3.055e-09 The output includes: Bartlett’s K-squared: The value of the test statistic \\(B\\). df: Degrees of freedom (\\(k - 1\\)), where \\(k\\) is the number of groups. p-value: The probability of observing such a value of \\(B\\) under \\(H_0\\). If the p-value is less than \\(\\alpha\\), reject \\(H_0\\) and conclude that the variances are significantly different across groups. If the p-value is greater than \\(\\alpha\\), fail to reject \\(H_0\\) and conclude that there is no significant evidence of variance differences. Limitations of Bartlett’s Test Sensitivity to Non-Normality: Bartlett’s Test is highly sensitive to departures from normality. Even slight deviations can lead to misleading results. Not Robust to Outliers: Outliers can disproportionately affect the test result. Alternatives: If the normality assumption is violated, use robust alternatives like: Levene’s Test (absolute deviations) Modified Levene Test (Brown-Forsythe Test) (median-based absolute deviations) Advantages of Bartlett’s Test High Power: Bartlett’s Test is more powerful than robust alternatives when the normality assumption holds. Simple Implementation: The test is easy to perform and interpret. 4.4.3 Power To evaluate the power of a test, we consider the situation where the variances are equal across groups: \\[ \\sigma_y^2 = \\sigma_x^2 = \\sigma^2 \\] Under the assumption of equal variances, we take equal sample sizes from both groups, i.e., \\(n_y = n_x = n\\). Hypotheses for One-Sided Testing We are testing: \\[ H_0: \\mu_y - \\mu_x \\leq 0 \\quad \\text{vs.} \\quad H_a: \\mu_y - \\mu_x &gt; 0 \\] Test Statistic The \\(\\alpha\\)-level z-test rejects \\(H_0\\) if the test statistic: \\[ z = \\frac{\\bar{y} - \\bar{x}}{\\sigma \\sqrt{\\frac{2}{n}}} &gt; z_\\alpha \\] where: \\(\\bar{y}\\) and \\(\\bar{x}\\) are the sample means, \\(\\sigma\\) is the common standard deviation, \\(z_\\alpha\\) is the critical value from the standard normal distribution. Power Function The power of the test, denoted as \\(\\pi(\\mu_y - \\mu_x)\\), is the probability of correctly rejecting \\(H_0\\) when \\(\\mu_y - \\mu_x\\) is some specified value. Under the alternative hypothesis, the power function is: \\[ \\pi(\\mu_y - \\mu_x) = \\Phi\\left(-z_\\alpha + \\frac{\\mu_y - \\mu_x}{\\sigma} \\sqrt{\\frac{n}{2}}\\right) \\] where: \\(\\Phi\\) is the cumulative distribution function (CDF) of the standard normal distribution, \\(\\frac{\\mu_y - \\mu_x}{\\sigma} \\sqrt{\\frac{n}{2}}\\) represents the standardized effect size. Determining the Required Sample Size To achieve a desired power of \\(1 - \\beta\\) when the true difference is \\(\\delta\\) (the smallest difference of interest), we solve for the required sample size \\(n\\). The power equation is: \\[ \\Phi\\left(-z_\\alpha + \\frac{\\delta}{\\sigma} \\sqrt{\\frac{n}{2}}\\right) = 1 - \\beta \\] Rearranging for \\(n\\), the required sample size is: \\[ n = \\frac{2 \\sigma^2}{\\delta^2} \\left(z_\\alpha + z_\\beta\\right)^2 \\] where: \\(\\sigma\\): The common standard deviation, \\(z_{\\alpha}\\): The critical value for the Type I error rate \\(\\alpha\\) (one-sided test), \\(z_{\\beta}\\): The critical value for the Type II error rate \\(\\beta\\) (related to power \\(1 - \\beta\\)), \\(\\delta\\): The minimum detectable difference between the means. # Parameters alpha &lt;- 0.05 # Significance level beta &lt;- 0.2 # Type II error rate (1 - Power = 0.2) sigma &lt;- 1 # Common standard deviation delta &lt;- 0.5 # Minimum detectable difference # Critical values z_alpha &lt;- qnorm(1 - alpha) z_beta &lt;- qnorm(1 - beta) # Sample size calculation n &lt;- (2 * sigma ^ 2 * (z_alpha + z_beta) ^ 2) / delta ^ 2 # Output the required sample size (per group) ceiling(n) #&gt; [1] 50 Sample Size for Two-Sided Tests For a two-sided test, replace \\(z_{\\alpha}\\) with \\(z_{\\alpha/2}\\) to account for the two-tailed critical region: \\[ n = 2 \\left( \\frac{\\sigma (z_{\\alpha/2} + z_{\\beta})}{\\delta} \\right)^2 \\] This ensures that the test has the required power \\(1 - \\beta\\) to detect a difference of size \\(\\delta\\) between the means at significance level \\(\\alpha\\). Adjustment for the Exact t-Test When conducting an exact two-sample t-test for small sample sizes, the sample size calculation involves the non-central t-distribution. An approximate correction can be applied using the critical values from the t-distribution instead of the z-distribution. The adjusted sample size is: \\[ n^* = 2 \\left( \\frac{\\sigma (t_{2n-2; \\alpha/2} + t_{2n-2; \\beta})}{\\delta} \\right)^2 \\] Where: \\(t_{2n-2; \\alpha/2}\\): The critical value for the t-distribution with \\(2n - 2\\) degrees of freedom for significance level \\(\\alpha/2\\), \\(t_{2n-2; \\beta}\\): The critical value for the t-distribution with \\(2n - 2\\) degrees of freedom for power \\(1 - \\beta\\). This correction adjusts for the increased variability of the t-distribution, especially important for small sample sizes. # Parameters alpha &lt;- 0.05 # Significance level power &lt;- 0.8 # Desired power sigma &lt;- 1 # Common standard deviation delta &lt;- 0.5 # Minimum detectable difference # Calculate sample size for two-sided test sample_size &lt;- power.t.test( delta = delta, sd = sigma, sig.level = alpha, power = power, type = &quot;two.sample&quot;, alternative = &quot;two.sided&quot; ) # Display results sample_size #&gt; #&gt; Two-sample t test power calculation #&gt; #&gt; n = 63.76576 #&gt; delta = 0.5 #&gt; sd = 1 #&gt; sig.level = 0.05 #&gt; power = 0.8 #&gt; alternative = two.sided #&gt; #&gt; NOTE: n is number in *each* group Key Insights Z-Test vs. T-Test: For large samples, the normal approximation (z-test) works well. For small samples, the t-test correction using the t-distribution is essential. Effect of Power and Significance Level: Increasing power (\\(1 - \\beta\\)) or decreasing \\(\\alpha\\) requires larger sample sizes. A smaller minimum detectable difference (\\(\\delta\\)) also requires a larger sample size. Two-Sided Tests: Two-sided tests require larger sample sizes compared to one-sided tests due to the split critical region. Formula Summary Test Type Formula for Sample Size One-Sided Test \\(n = 2 \\left( \\frac{\\sigma (z_{\\alpha} + z_{\\beta})}{\\delta} \\right)^2\\) Two-Sided Test \\(n = 2 \\left( \\frac{\\sigma (z_{\\alpha/2} + z_{\\beta})}{\\delta} \\right)^2\\) Approximate t-Test \\(n^* = 2 \\left( \\frac{\\sigma (t_{2n-2; \\alpha/2} + t_{2n-2; \\beta})}{\\delta} \\right)^2\\) 4.4.4 Matched Pair Designs In matched pair designs, two treatments are compared by measuring responses for the same subjects under both treatments. This ensures that the effects of subject-to-subject variability are minimized, as each subject serves as their own control. We have two treatments, and the data are structured as follows: Subject Treatment A Treatment B Difference 1 \\(y_1\\) \\(x_1\\) \\(d_1 = y_1 - x_1\\) 2 \\(y_2\\) \\(x_2\\) \\(d_2 = y_2 - x_2\\) … … … … n \\(y_n\\) \\(x_n\\) \\(d_n = y_n - x_n\\) Here: \\(y_i\\) represents the observation under Treatment A, \\(x_i\\) represents the observation under Treatment B, \\(d_i = y_i - x_i\\) is the difference for subject \\(i\\). Assumptions Observations \\(y_i\\) and \\(x_i\\) are measured for the same subjects, inducing correlation. The differences \\(d_i\\) are independent and identically distributed (iid), and follow a normal distribution: \\[ d_i \\sim N(\\mu_D, \\sigma_D^2) \\] Mean and Variance of the Difference The mean difference \\(\\mu_D\\) and the variance \\(\\sigma_D^2\\) are given by: \\[ \\mu_D = E(y_i - x_i) = \\mu_y - \\mu_x \\] \\[ \\sigma_D^2 = \\text{Var}(y_i - x_i) = \\text{Var}(y_i) + \\text{Var}(x_i) - 2 \\cdot \\text{Cov}(y_i, x_i) \\] If the covariance between \\(y_i\\) and \\(x_i\\) is positive (a typical case), the variance of the differences \\(\\sigma_D^2\\) is reduced compared to the independent sample case. This is the key benefit of Matched Pair Designs: reduced variability increases the precision of estimates. Sample Statistics For the differences \\(d_i = y_i - x_i\\): The sample mean of the differences: \\[ \\bar{d} = \\frac{1}{n} \\sum_{i=1}^n d_i = \\bar{y} - \\bar{x} \\] The sample variance of the differences: \\[ s_d^2 = \\frac{1}{n-1} \\sum_{i=1}^n (d_i - \\bar{d})^2 \\] Once the data are converted into differences \\(d_i\\), the problem reduces to one-sample inference. We can use tests and confidence intervals (CIs) for the mean of a single sample. Hypothesis Test We test the following hypotheses: \\[ H_0: \\mu_D = 0 \\quad \\text{vs.} \\quad H_a: \\mu_D \\neq 0 \\] The test statistic is: \\[ t = \\frac{\\bar{d}}{s_d / \\sqrt{n}} \\sim t_{n-1} \\] where \\(n\\) is the number of subjects. Reject \\(H_0\\) at significance level \\(\\alpha\\) if: \\[ |t| &gt; t_{n-1, \\alpha/2} \\] Confidence Interval A \\(100(1 - \\alpha)\\%\\) confidence interval for \\(\\mu_D\\) is: \\[ \\bar{d} \\pm t_{n-1, \\alpha/2} \\cdot \\frac{s_d}{\\sqrt{n}} \\] # Sample data treatment_a &lt;- c(85, 90, 78, 92, 88) treatment_b &lt;- c(80, 86, 75, 89, 85) # Compute differences differences &lt;- treatment_a - treatment_b # Perform one-sample t-test on the differences t_test &lt;- t.test(differences, mu = 0, alternative = &quot;two.sided&quot;) # Display results t_test #&gt; #&gt; One Sample t-test #&gt; #&gt; data: differences #&gt; t = 9, df = 4, p-value = 0.0008438 #&gt; alternative hypothesis: true mean is not equal to 0 #&gt; 95 percent confidence interval: #&gt; 2.489422 4.710578 #&gt; sample estimates: #&gt; mean of x #&gt; 3.6 The output includes: t-statistic: The calculated test statistic for the matched pairs. p-value: The probability of observing such a difference under the null hypothesis. Confidence Interval: The range of plausible values for the mean difference \\(\\mu_D\\). If the p-value is less than \\(\\alpha\\), reject \\(H_0\\) and conclude that there is a significant difference between the two treatments. If the confidence interval does not include 0, this supports the conclusion of a significant difference. Key Insights Reduced Variability: Positive correlation between paired observations reduces the variance of the differences, increasing test power. Use of Differences: The paired design converts the data into a single-sample problem for inference. Robustness: The paired t-test assumes normality of the differences \\(d_i\\). For larger \\(n\\), the Central Limit Theorem ensures robustness to non-normality. Matched pair designs are a powerful way to control for subject-specific variability, leading to more precise comparisons between treatments. 4.4.5 Nonparametric Tests for Two Samples For Matched Pair Designs or independent samples where normality cannot be assumed, we use nonparametric tests. These tests do not assume any specific distribution of the data and are robust alternatives to parametric methods. Stochastic Order and Location Shift Suppose \\(Y\\) and \\(X\\) are random variables with cumulative distribution functions (CDFs) \\(F_Y\\) and \\(F_X\\). Then \\(Y\\) is stochastically larger than \\(X\\) if, for all real numbers \\(u\\): \\[ P(Y &gt; u) \\geq P(X &gt; u) \\quad \\text{(equivalently, } F_Y(u) \\leq F_X(u)). \\] If the two distributions differ only in their location parameters, say \\(\\theta_y\\) and \\(\\theta_x\\), then we can frame the relationship as: \\[ Y &gt; X \\quad \\text{if} \\quad \\theta_y &gt; \\theta_x. \\] We test the following hypotheses: Two-Sided Hypothesis: \\[ H_0: F_Y = F_X \\quad \\text{vs.} \\quad H_a: F_Y \\neq F_X \\] Upper One-Sided Hypothesis: \\[ H_0: F_Y = F_X \\quad \\text{vs.} \\quad H_a: F_Y &lt; F_X \\] Lower One-Sided Hypothesis: \\[ H_0: F_Y = F_X \\quad \\text{vs.} \\quad H_a: F_Y &gt; F_X \\] We generally avoid the completely non-directional alternative \\(H_a: F_Y \\neq F_X\\) because it allows arbitrary differences between the distributions, without requiring one distribution to be stochastically larger than the other. Nonparametric Tests When the focus is on whether the two distributions differ only in location parameters, two equivalent nonparametric tests are commonly used: Wilcoxon Signed Rank Test Mann-Whitney U Test Both tests are mathematically equivalent and test whether one sample is systematically larger than the other. 4.4.5.1 Wilcoxon Rank-Sum Test The Wilcoxon Rank Test is a nonparametric test used to compare two independent samples to assess whether their distributions differ in location. It is based on the ranks of the combined observations rather than their actual values. Procedure Combine and Rank Observations: Combine all \\(n = n_y + n_x\\) observations (from both groups) into a single dataset and rank them in ascending order. If ties exist, assign the average rank to tied values. Calculate Rank Sums: Compute the sum of ranks for each group: \\(w_y\\): Sum of the ranks for group \\(y\\) (sample 1), \\(w_x\\): Sum of the ranks for group \\(x\\) (sample 2). By definition: \\[ w_y + w_x = \\frac{n(n+1)}{2} \\] Test Statistic: The test focuses on the rank sum \\(w_y\\). Reject \\(H_0\\) if \\(w_y\\) is large (indicating \\(y\\) systematically has larger values) or equivalently, if \\(w_x\\) is small. Null Distribution: Under \\(H_0\\) (no difference between groups), all possible arrangements of ranks among \\(y\\) and \\(x\\) are equally likely. The total number of possible rank arrangements is: \\[ \\frac{(n_y + n_x)!}{n_y! \\, n_x!} \\] Computational Considerations: For small samples, the exact null distribution of the rank sums can be calculated. For large samples, an approximate normal distribution can be used. Hypotheses Null Hypothesis (\\(H_0\\)): The two samples come from identical distributions. Alternative Hypothesis (\\(H_a\\)): The two samples come from different distributions, or one distribution is systematically larger. Two-Sided Test: \\[ H_a: F_Y \\neq F_X \\] One-Sided Test: \\[ H_a: F_Y &gt; F_X \\quad \\text{or} \\quad H_a: F_Y &lt; F_X \\] # Subset data for two species irisVe &lt;- iris$Petal.Width[iris$Species == &quot;versicolor&quot;] irisVi &lt;- iris$Petal.Width[iris$Species == &quot;virginica&quot;] # Perform Wilcoxon Rank Test (approximate version, large sample) wilcox_result &lt;- wilcox.test( irisVe, irisVi, alternative = &quot;two.sided&quot;, # Two-sided test conf.level = 0.95, # Confidence level exact = FALSE, # Approximate test for large samples correct = TRUE # Apply continuity correction ) # Display results wilcox_result #&gt; #&gt; Wilcoxon rank sum test with continuity correction #&gt; #&gt; data: irisVe and irisVi #&gt; W = 49, p-value &lt; 2.2e-16 #&gt; alternative hypothesis: true location shift is not equal to 0 The output of wilcox.test includes: W: The test statistic, which is the smaller of the two rank sums. p-value: The probability of observing such a difference in rank sums under \\(H_0\\). Alternative Hypothesis: Specifies whether the test was one-sided or two-sided. Confidence Interval (if applicable): Provides a range for the difference in medians. Decision Rule Reject \\(H_0\\) at significance level \\(\\alpha\\) if the p-value \\(\\leq \\alpha\\). For large samples, compare the test statistic to a critical value from the normal approximation. Key Features Robustness: The test does not require assumptions of normality and is robust to outliers. Distribution-Free: It evaluates whether two samples differ in location without assuming a specific distribution. Rank-Based: It uses the ranks of the observations, which makes it scale-invariant (resistant to data transformation). Computational Considerations For small sample sizes, the exact distribution of the rank sums is used. For large sample sizes, the normal approximation with continuity correction is applied for computational efficiency. 4.4.5.2 Mann-Whitney U Test The Mann-Whitney U Test is a nonparametric test used to compare two independent samples. It evaluates whether one sample tends to produce larger observations than the other, based on pairwise comparisons. The test does not assume normality and is robust to outliers. Procedure Pairwise Comparisons: Compare each observation \\(y_i\\) from sample \\(Y\\) with each observation \\(x_j\\) from sample \\(X\\). Let \\(u_y\\) be the number of pairs where \\(y_i &gt; x_j\\). Let \\(u_x\\) be the number of pairs where \\(y_i &lt; x_j\\). By definition: \\[ u_y + u_x = n_y n_x \\] where \\(n_y\\) is the sample size for group \\(Y\\), and \\(n_x\\) is the sample size for group \\(X\\). Test Statistic: Reject \\(H_0\\) if \\(u_y\\) is large (or equivalently, if \\(u_x\\) is small). The Mann-Whitney U Test and Wilcoxon Rank-Sum Test are related through the rank sums: \\[ u_y = w_y - \\frac{n_y (n_y + 1)}{2}, \\quad u_x = w_x - \\frac{n_x (n_x + 1)}{2} \\] Here, \\(w_y\\) and \\(w_x\\) are the rank sums for groups \\(Y\\) and \\(X\\), respectively. Hypotheses Null Hypothesis (\\(H_0\\)): The two samples come from identical distributions. Alternative Hypothesis (\\(H_a\\)): Upper One-Sided: \\(F_Y &lt; F_X\\) (Sample \\(Y\\) is stochastically larger). Lower One-Sided: \\(F_Y &gt; F_X\\) (Sample \\(X\\) is stochastically larger). Two-Sided: \\(F_Y \\neq F_X\\) (Distributions differ in location). Test Statistic for Large Samples For large sample sizes \\(n_y\\) and \\(n_x\\), the null distribution of \\(U\\) can be approximated by a normal distribution with: Mean: \\[ E(U) = \\frac{n_y n_x}{2} \\] Variance: \\[ \\text{Var}(U) = \\frac{n_y n_x (n_y + n_x + 1)}{12} \\] The standardized test statistic \\(z\\) is: \\[ z = \\frac{u_y - \\frac{n_y n_x}{2} - \\frac{1}{2}}{\\sqrt{\\frac{n_y n_x (n_y + n_x + 1)}{12}}} \\] The test rejects \\(H_0\\) at level \\(\\alpha\\) if: \\[ z \\ge z_{\\alpha} \\quad \\text{(one-sided)} \\quad \\text{or} \\quad |z| \\ge z_{\\alpha/2} \\quad \\text{(two-sided)}. \\] For the two-sided test, we use: \\(u_{\\text{max}} = \\max(u_y, u_x)\\), and \\(u_{\\text{min}} = \\min(u_y, u_x)\\). The p-value is given by: \\[ p\\text{-value} = 2P(U \\ge u_{\\text{max}}) = 2P(U \\le u_{\\text{min}}). \\] When \\(y_i = x_j\\) (ties), assign a value of \\(1/2\\) to both \\(u_y\\) and \\(u_x\\) for that pair. While the exact sampling distribution differs slightly when ties exist, the large sample normal approximation remains reasonable. # Subset data for two species irisVe &lt;- iris$Petal.Width[iris$Species == &quot;versicolor&quot;] irisVi &lt;- iris$Petal.Width[iris$Species == &quot;virginica&quot;] # Perform Mann-Whitney U Test mann_whitney &lt;- wilcox.test( irisVe, irisVi, alternative = &quot;two.sided&quot;, conf.level = 0.95, exact = FALSE, # Approximate test for large samples correct = TRUE # Apply continuity correction ) # Display results mann_whitney #&gt; #&gt; Wilcoxon rank sum test with continuity correction #&gt; #&gt; data: irisVe and irisVi #&gt; W = 49, p-value &lt; 2.2e-16 #&gt; alternative hypothesis: true location shift is not equal to 0 Decision Rule Reject \\(H_0\\) if the p-value is less than \\(\\alpha\\). For large samples, check whether $z \\ge z_{\\alpha}$ (one-sided) or $|z| \\ge z_{\\alpha/2}$ (two-sided). Key Insights Robustness: The Mann-Whitney U Test does not assume normality and is robust to outliers. Relationship to Wilcoxon Test: The test is equivalent to the Wilcoxon Rank-Sum Test but formulated differently (based on pairwise comparisons). Large Sample Approximation: For large \\(n_y\\) and \\(n_x\\), the test statistic \\(U\\) follows an approximate normal distribution, simplifying computation. Handling Ties: Ties are accounted for by assigning fractional contributions to \\(u_y\\) and \\(u_x\\). References "],["categorical-data-analysis.html", "4.5 Categorical Data Analysis", " 4.5 Categorical Data Analysis Categorical Data Analysis is used when the outcome variables are categorical. Nominal Variables: Categories have no logical order (e.g., sex: male, female). Ordinal Variables: Categories have a logical order, but the relative distances between values are not well defined (e.g., small, medium, large). In categorical data, we often analyze how the distribution of one variable changes with the levels of another variable. For example, row percentages may differ across columns in a contingency table. 4.5.1 Association Tests 4.5.1.1 Small Samples 4.5.1.1.1 Fisher’s Exact Test For small samples, the approximate tests based on the asymptotic normality of \\(\\hat{p}_1 - \\hat{p}_2\\) (the difference in proportions) do not hold. In such cases, we use Fisher’s Exact Test to evaluate: Null Hypothesis (\\(H_0\\)): \\(p_1 = p_2\\) (no association between variables), Alternative Hypothesis (\\(H_a\\)): \\(p_1 \\neq p_2\\) (an association exists). Assumptions \\(X_1\\) and \\(X_2\\) are independent Binomial random variables: \\(X_1 \\sim \\text{Binomial}(n_1, p_1)\\), \\(X_2 \\sim \\text{Binomial}(n_2, p_2)\\). \\(x_1\\) and \\(x_2\\) are the observed values (successes in each sample). Total sample size is \\(n = n_1 + n_2\\). Total successes are \\(m = x_1 + x_2\\). By conditioning on \\(m\\), the total number of successes, the number of successes in sample 1 follows a Hypergeometric distribution. Test Statistic To test \\(H_0: p_1 = p_2\\) against \\(H_a: p_1 \\neq p_2\\), we use the test statistic: \\[ Z^2 = \\left( \\frac{\\hat{p}_1 - \\hat{p}_2}{\\sqrt{\\hat{p}(1 - \\hat{p}) \\left( \\frac{1}{n_1} + \\frac{1}{n_2} \\right)}} \\right)^2 \\sim \\chi^2_{1, \\alpha} \\] where: \\(\\hat{p}_1\\) and \\(\\hat{p}_2\\) are the observed proportions of successes in samples 1 and 2, \\(\\hat{p}\\) is the pooled proportion: \\[ \\hat{p} = \\frac{x_1 + x_2}{n_1 + n_2}, \\] \\(\\chi^2_{1, \\alpha}\\) is the upper \\(\\alpha\\) critical value of the Chi-squared distribution with 1 degree of freedom. Fisher’s Exact Test can be extended to a contingency table setting to test whether the observed frequencies differ significantly from the expected frequencies under the null hypothesis of no association. # Create a 2x2 contingency table data_table &lt;- matrix(c(8, 2, 1, 5), nrow = 2, byrow = TRUE) colnames(data_table) &lt;- c(&quot;Success&quot;, &quot;Failure&quot;) rownames(data_table) &lt;- c(&quot;Group 1&quot;, &quot;Group 2&quot;) # Display the table data_table #&gt; Success Failure #&gt; Group 1 8 2 #&gt; Group 2 1 5 # Perform Fisher&#39;s Exact Test fisher_result &lt;- fisher.test(data_table) # Display the results fisher_result #&gt; #&gt; Fisher&#39;s Exact Test for Count Data #&gt; #&gt; data: data_table #&gt; p-value = 0.03497 #&gt; alternative hypothesis: true odds ratio is not equal to 1 #&gt; 95 percent confidence interval: #&gt; 1.008849 1049.791446 #&gt; sample estimates: #&gt; odds ratio #&gt; 15.46969 The output of fisher.test() includes: p-value: The probability of observing such a contingency table under the null hypothesis. Alternative Hypothesis: Indicates whether the test is two-sided or one-sided. If the p-value is less than \\(\\alpha\\), reject \\(H_0\\) and conclude that there is a significant association between the two variables. 4.5.1.1.2 Exact Chi-Square Test For small samples where the normal approximation does not apply, we can compute the exact Chi-Square test by using Fisher’s Exact Test or Monte Carlo simulation methods. The Chi-Square test statistic in the 2x2 table is: \\(\\chi^2 = \\sum_{i=1}^r \\sum_{j=1}^c \\frac{(O_{ij} - E_{ij})^2}{E_{ij}}\\) where: \\(O_{ij}\\): Observed frequency in cell \\((i, j)\\), \\(E_{ij}\\): Expected frequency under the null hypothesis, \\(r\\): Number of rows, \\(c\\): Number of columns. 4.5.1.2 Large Samples 4.5.1.2.1 Pearson Chi-Square Test The Pearson Chi-Square Test is commonly used to test whether there is an association between two categorical variables. It compares the observed counts in a contingency table to the expected counts under the null hypothesis. The test statistic is: \\[ \\chi^2 = \\sum_{\\text{all cells}} \\frac{(\\text{observed} - \\text{expected})^2}{\\text{expected}} \\] The test is applied in settings where multiple proportions or frequencies are compared across independent surveys or experiments. Null Hypothesis (\\(H_0\\)): The observed data are consistent with the expected values (no association or no deviation from a model). Alternative Hypothesis (\\(H_a\\)): The observed data differ significantly from the expected values. Characteristics of the Test Validation of Models: In some cases, \\(H_0\\) represents the model whose validity is being tested. The goal is not necessarily to reject the model but to check whether the data are consistent with it. Deviations may be due to random chance. Strength of Association: The Chi-Square Test detects whether an association exists but does not measure the strength of the association. For measuring strength, metrics like Cramér’s V or the Phi coefficient should be used. Effect of Sample Size: The Chi-Square statistic reflects sample size. If the sample size is doubled (e.g., duplicating observations), the \\(\\chi^2\\) statistic will also double, even though the strength of the association remains unchanged. This sensitivity can sometimes lead to detecting significant results that are not practically meaningful. Expected Cell Frequencies: The test is not appropriate if more than 20% of the cells in a contingency table have expected frequencies less than 5. For small sample sizes, Fisher’s Exact Test or exact p-values should be used instead. Test for a Single Proportion We test whether the observed proportion of successes equals 0.5. \\[ H_0: p_J = 0.5 \\\\ H_a: p_J &lt; 0.5 \\] # Observed data july.x &lt;- 480 july.n &lt;- 1000 # Test for single proportion prop.test( x = july.x, n = july.n, p = 0.5, alternative = &quot;less&quot;, correct = FALSE ) #&gt; #&gt; 1-sample proportions test without continuity correction #&gt; #&gt; data: july.x out of july.n, null probability 0.5 #&gt; X-squared = 1.6, df = 1, p-value = 0.103 #&gt; alternative hypothesis: true p is less than 0.5 #&gt; 95 percent confidence interval: #&gt; 0.0000000 0.5060055 #&gt; sample estimates: #&gt; p #&gt; 0.48 Test for Equality of Proportions Between Two Groups: We test whether the proportions of successes in July and September are equal. \\[ H_0: p_J = p_S \\\\ H_a: p_j \\neq p_S \\] # Observed data for two groups sept.x &lt;- 704 sept.n &lt;- 1600 # Test for equality of proportions prop.test( x = c(july.x, sept.x), n = c(july.n, sept.n), correct = FALSE ) #&gt; #&gt; 2-sample test for equality of proportions without continuity correction #&gt; #&gt; data: c(july.x, sept.x) out of c(july.n, sept.n) #&gt; X-squared = 3.9701, df = 1, p-value = 0.04632 #&gt; alternative hypothesis: two.sided #&gt; 95 percent confidence interval: #&gt; 0.0006247187 0.0793752813 #&gt; sample estimates: #&gt; prop 1 prop 2 #&gt; 0.48 0.44 Comparison of Proportions for Multiple Groups Experiment 1 Experiment 2 … Experiment k Number of successes \\(x_1\\) \\(x_2\\) … \\(x_k\\) Number of failures \\(n_1 - x_1\\) \\(n_2 - x_2\\) … \\(n_k - x_k\\) Total \\(n_1\\) \\(n_2\\) … \\(n_k\\) We test the null hypothesis: \\[ H_0: p_1 = p_2 = \\dots = p_k \\] against the alternative that at least one proportion differs. Pooled Proportion Assuming \\(H_0\\) is true, we estimate the common value of the probability of success as: \\[ \\hat{p} = \\frac{x_1 + x_2 + \\dots + x_k}{n_1 + n_2 + \\dots + n_k}. \\] The expected counts under \\(H_0\\) are: Success \\(n_1 \\hat{p}\\) \\(n_2 \\hat{p}\\) … \\(n_k \\hat{p}\\) Failure \\(n_1(1-\\hat{p})\\) \\(n_2(1-\\hat{p})\\) … \\(n_k(1-\\hat{p})\\) \\(n_1\\) \\(n_2\\) \\(n_k\\) The test statistic is: \\[ \\chi^2 = \\sum_{\\text{all cells}} \\frac{(\\text{observed} - \\text{expected})^2}{\\text{expected}} \\] with \\(k - 1\\) degrees of freedom. Two-Way Contingency Tables When categorical data are cross-classified, we create a two-way table of observed counts. 1 2 … j … c Row Total 1 \\(n_{11}\\) \\(n_{12}\\) … \\(n_{1j}\\) … \\(n_{1c}\\) \\(n_{1.}\\) 2 \\(n_{21}\\) \\(n_{22}\\) … \\(n_{2j}\\) … \\(n_{2c}\\) \\(n_{2.}\\) … … … … … … … … r \\(n_{r1}\\) \\(n_{r2}\\) … \\(n_{rj}\\) … \\(n_{rc}\\) \\(n_{r.}\\) Column Total \\(n_{.1}\\) \\(n_{.2}\\) … \\(n_{.j}\\) … \\(n_{.c}\\) \\(n_{..}\\) Sampling Designs Design 1: Total Sample Size Fixed A single random sample of size \\(n\\) is drawn from the population. Units are cross-classified into \\(r\\) rows and \\(c\\) columns. Both row and column totals are random variables. The cell counts \\(n_{ij}\\) follow a multinomial distribution with probabilities \\(p_{ij}\\) such that: \\[ \\sum_{i=1}^r \\sum_{j=1}^c p_{ij} = 1. \\] Let \\(p_{ij} = P(X = i, Y = j)\\) be the joint probability, where \\(X\\) is the row variable and \\(Y\\) is the column variable. Null Hypothesis of Independence: \\[ H_0: p_{ij} = p_{i.} p_{.j}, \\quad \\text{where } p_{i.} = P(X = i) \\text{ and } p_{.j} = P(Y = j). \\] Alternative Hypothesis: \\[ H_a: p_{ij} \\neq p_{i.} p_{.j}. \\] Design 2: Row Totals Fixed Random samples of sizes \\(n_1, n_2, \\dots, n_r\\) are drawn independently from \\(r\\) row populations. The row totals \\(n_{i.}\\) are fixed, but column totals are random. Counts in each row follow independent multinomial distributions. The null hypothesis assumes that the conditional probabilities of the column variable \\(Y\\) are the same across all rows: \\[ H_0: p_{ij} = P(Y = j | X = i) = p_j \\quad \\text{for all } i \\text{ and } j. \\] Alternatively: \\[ H_0: (p_{i1}, p_{i2}, \\dots, p_{ic}) = (p_1, p_2, \\dots, p_c) \\quad \\text{for all } i. \\] Alternative Hypothesis: \\[ H_a: (p_{i1}, p_{i2}, \\dots, p_{ic}) \\text{ are not the same for all } i. \\] Design Total Sample Size Fixed Row Totals Fixed Scenario A single dataset or experiment where all observations are collected together as one sample. Observations are collected separately for each row, with fixed totals for each row population. Example Survey with 100 respondents randomly selected, recording responses based on two categorical variables (e.g., age group and gender). Stratified survey with specific numbers of individuals sampled from predefined groups (e.g., 30 males, 40 females, 30 non-binary). Why This Design? - Models situations where the total number of observations is fixed. - Both row and column categories emerge randomly. - Tests for independence between two categorical variables (row and column). - Models scenarios where sampling occurs independently within predefined strata or groups. - Tests for homogeneity of column proportions across rows, ignoring differences in total counts between rows. Practical Use Case - Market Research: Do customer demographics (rows) and purchase behavior (columns) show a dependence? - Biology: Is there an association between species (rows) and habitat types (columns)? - Public Health: Are smoking rates (columns) consistent across age groups (rows)? - Education: Do pass rates (columns) differ across schools (rows), controlling for the number of students in each school? Why Both Designs? Real-World Sampling Constraints: Sometimes, you have control over row totals (e.g., fixed group sizes in stratified sampling). Other times, you collect data without predefined group sizes, and totals emerge randomly. Different Null Hypotheses: Design 1 tests whether two variables are independent (e.g., does one variable predict the other?). Design 2 tests whether column proportions are homogeneous across groups (e.g., are the groups similar?). # Sampling Design 1: Total Sample Size Fixed # Parameters for the multinomial distribution r &lt;- 3 # Number of rows c &lt;- 4 # Number of columns n &lt;- 100 # Total sample size p &lt;- matrix(c(0.1, 0.2, 0.1, 0.1, 0.05, 0.15, 0.05, 0.1, 0.05, 0.05, 0.025, 0.075), nrow = r, byrow = TRUE) # Generate a single random sample set.seed(123) # For reproducibility n_ij &lt;- rmultinom(1, size = n, prob = as.vector(p)) # Reshape into a contingency table contingency_table_fixed_total &lt;- matrix(n_ij, nrow = r, ncol = c, byrow = TRUE) rownames(contingency_table_fixed_total) &lt;- paste0(&quot;Row&quot;, 1:r) colnames(contingency_table_fixed_total) &lt;- paste0(&quot;Col&quot;, 1:c) # Hypothesis testing (Chi-squared test of independence) chisq_test_fixed_total &lt;- chisq.test(contingency_table_fixed_total) # Display results print(&quot;Contingency Table (Total Sample Size Fixed):&quot;) #&gt; [1] &quot;Contingency Table (Total Sample Size Fixed):&quot; print(contingency_table_fixed_total) #&gt; Col1 Col2 Col3 Col4 #&gt; Row1 8 6 4 24 #&gt; Row2 18 1 9 7 #&gt; Row3 2 7 5 9 print(&quot;Chi-squared Test Results:&quot;) #&gt; [1] &quot;Chi-squared Test Results:&quot; print(chisq_test_fixed_total) #&gt; #&gt; Pearson&#39;s Chi-squared test #&gt; #&gt; data: contingency_table_fixed_total #&gt; X-squared = 28.271, df = 6, p-value = 8.355e-05 All counts in the contingency table come from a single multinomial sample where both row and column totals are random. Conclusion: Reject Null​. The data suggests significant dependence between row and column variables. # Sampling Design 2: Row Totals Fixed # Parameters for the fixed row totals n_row &lt;- c(30, 40, 30) # Row totals c &lt;- 4 # Number of columns p_col &lt;- c(0.25, 0.25, 0.25, 0.25) # Common column probabilities under H0 # Generate independent multinomial samples for each row set.seed(123) # For reproducibility row_samples &lt;- lapply(n_row, function(size) t(rmultinom(1, size, prob = p_col))) # Combine into a contingency table contingency_table_fixed_rows &lt;- do.call(rbind, row_samples) rownames(contingency_table_fixed_rows) &lt;- paste0(&quot;Row&quot;, 1:length(n_row)) colnames(contingency_table_fixed_rows) &lt;- paste0(&quot;Col&quot;, 1:c) # Hypothesis testing (Chi-squared test of homogeneity) chisq_test_fixed_rows &lt;- chisq.test(contingency_table_fixed_rows) # Display results print(&quot;Contingency Table (Row Totals Fixed):&quot;) #&gt; [1] &quot;Contingency Table (Row Totals Fixed):&quot; print(contingency_table_fixed_rows) #&gt; Col1 Col2 Col3 Col4 #&gt; Row1 6 10 7 7 #&gt; Row2 13 13 4 10 #&gt; Row3 8 10 6 6 print(&quot;Chi-squared Test Results:&quot;) #&gt; [1] &quot;Chi-squared Test Results:&quot; print(chisq_test_fixed_rows) #&gt; #&gt; Pearson&#39;s Chi-squared test #&gt; #&gt; data: contingency_table_fixed_rows #&gt; X-squared = 3.2069, df = 6, p-value = 0.7825 Row totals are fixed, and column counts within each row follow independent multinomial distributions. Conclusion: Fail to reject the null. The data does not provide evidence to suggest differences in column probabilities across rows. Why Are the Results Different? Data Generation Differences: In Design 1, the entire table is treated as a single multinomial sample. This introduces dependencies between counts in the table. In Design 2, rows are generated independently, and only the column probabilities are tested for consistency across rows. Null Hypotheses: Design 1 tests independence between row and column variables (more restrictive). Design 2 tests homogeneity of column probabilities across rows (less restrictive). Interpretation The results are not directly comparable because the null hypotheses are different: Design 1 focuses on whether rows and columns are independent across the entire table. Design 2 focuses on whether column distributions are consistent across rows. Real-World Implication: If you are testing for independence (e.g., whether two variables are unrelated), use Design 1. If you are testing for consistency across groups (e.g., whether proportions are the same across categories), use Design 2. Takeaways The tests use the same statistical machinery (Chi-squared test), but their interpretations differ based on the experimental design and null hypothesis. For the same dataset, differences in assumptions can lead to different conclusions. 4.5.1.2.2 Chi-Square Test for Independence The expected frequencies \\(\\hat{e}_{ij}\\) under the null hypothesis are: \\[ \\hat{e}_{ij} = \\frac{n_{i.} n_{.j}}{n_{..}}, \\] where \\(n_{i.}\\) and \\(n_{.j}\\) are the row and column totals, respectively, and \\(n_{..}\\) is the total sample size. The test statistic is: \\[ \\chi^2 = \\sum_{i=1}^r \\sum_{j=1}^c \\frac{(n_{ij} - \\hat{e}_{ij})^2}{\\hat{e}_{ij}} \\sim \\chi^2_{(r-1)(c-1)}. \\] We reject \\(H_0\\) at significance level \\(\\alpha\\) if: \\[ \\chi^2 &gt; \\chi^2_{(r-1)(c-1), \\alpha}. \\] Notes on the Pearson Chi-Square Test Purpose: Test for association or independence between two categorical variables. Sensitivity to Sample Size: The \\(\\chi^2\\) statistic is proportional to sample size. Doubling the sample size doubles \\(\\chi^2\\) even if the strength of the association remains unchanged. Assumption on Expected Frequencies: The test is not valid when more than 20% of the expected cell counts are less than 5. In such cases, exact tests are preferred. # Create a contingency table data_table &lt;- matrix(c(30, 10, 20, 40), nrow = 2, byrow = TRUE) colnames(data_table) &lt;- c(&quot;Category 1&quot;, &quot;Category 2&quot;) rownames(data_table) &lt;- c(&quot;Group 1&quot;, &quot;Group 2&quot;) # Display the table print(data_table) #&gt; Category 1 Category 2 #&gt; Group 1 30 10 #&gt; Group 2 20 40 # Perform Chi-Square Test chi_result &lt;- chisq.test(data_table) # Display results chi_result #&gt; #&gt; Pearson&#39;s Chi-squared test with Yates&#39; continuity correction #&gt; #&gt; data: data_table #&gt; X-squared = 15.042, df = 1, p-value = 0.0001052 The output includes: Chi-Square Statistic (\\(\\chi^2\\)): The test statistic measuring the deviation between observed and expected counts. p-value: The probability of observing such a deviation under \\(H_0\\). Degrees of Freedom: \\((r-1)(c-1)\\) for an \\(r \\times c\\) table. Expected Frequencies: The table of expected counts under \\(H_0\\). If the p-value is less than \\(\\alpha\\), reject \\(H_0\\) and conclude that there is a significant association between the row and column variables. 4.5.1.3 Key Takeaways Test Purpose Key Features Sample Size Suitability Statistical Assumptions Fisher’s Exact Test Tests association between two categorical variables in a 2x2 table. - Computes exact p-values. - Does not rely on asymptotic assumptions. - Handles small sample sizes. Small sample sizes - Observations are independent. - Fixed marginal totals. - No normality assumption. Exact Chi-Square Test Tests association in larger contingency tables using exact methods. - Generalization of Fisher’s Exact Test. - Avoids asymptotic assumptions. - Suitable for small to medium datasets. Small to medium sample sizes - Observations are independent. - Marginal totals may not be fixed. - No normality assumption. Pearson Chi-Square Test Tests discrepancies between observed and expected frequencies. - Most common chi-square-based test. - Includes independence and goodness-of-fit tests. - Relies on asymptotic assumptions. Large sample sizes - Observations are independent. - Expected cell frequencies ≥ 5. - Test statistic follows a chi-square distribution asymptotically. Chi-Square Test for Independence Tests independence between two categorical variables in a contingency table. - Application of Pearson Chi-Square Test. - Same assumptions as asymptotic chi-square tests. - Often used for larger contingency tables. Medium to large sample sizes - Observations are independent. - Expected cell frequencies ≥ 5. - Random sampling. Fisher’s Exact Test is specialized for small samples and fixed margins (2x2 tables). Exact Chi-Square Test is a broader version of Fisher’s for larger tables but avoids asymptotic approximations. Pearson Chi-Square Test is the general framework, and its applications include: Goodness-of-fit testing. Testing independence (same as the Chi-Square Test for Independence). Chi-Square Test for Independence is a specific application of the Pearson Chi-Square Test. In essence: Fisher’s Exact Test and Exact Chi-Square Test are precise methods for small datasets. Pearson Chi-Square Test and Chi-Square Test for Independence are interchangeable terms in many contexts, focusing on larger datasets. 4.5.2 Ordinal Association Ordinal association refers to a relationship between two variables where the levels of one variable exhibit a consistent pattern of increase or decrease in response to the levels of the other variable. This type of association is particularly relevant when dealing with ordinal variables, which have naturally ordered categories, such as ratings (“poor”, “fair”, “good”, “excellent”) or income brackets (“low”, “medium”, “high”). For example: As customer satisfaction ratings increase from “poor” to “excellent,” the likelihood of recommending a product may also increase (positive ordinal association). Alternatively, as stress levels move from “low” to “high,” job performance may tend to decrease (negative ordinal association). Key Characteristics of Ordinal Association Logical Ordering of Levels: The levels of both variables must follow a logical sequence. For instance, “small,” “medium,” and “large” are logically ordered, whereas categories like “blue,” “round,” and “tall” lack inherent order and are unsuitable for ordinal association. Monotonic Trends: The association is typically monotonic, meaning that as one variable moves in a specific direction, the other variable tends to move in a consistent direction (either increasing or decreasing). Tests for Ordinal Association: Specialized statistical tests assess ordinal association, focusing on how the rankings of one variable relate to those of the other. These tests require the data to respect the ordinal structure of both variables. Practical Considerations When using these tests, keep in mind: Ordinal Data Handling: Ensure that the data respects the ordinal structure (e.g., categories are correctly ranked and coded). Sample Size: Larger sample sizes provide more reliable estimates and stronger test power. Contextual Relevance: Interpret results within the context of the data and the research question. For example, a significant Spearman’s correlation does not imply causation but rather a consistent trend. 4.5.2.1 Mantel-Haenszel Chi-square Test The Mantel-Haenszel Chi-square Test is a statistical tool for evaluating ordinal associations, particularly when the data consists of multiple \\(2 \\times 2\\) contingency tables that examine the same association under varying conditions or strata. Unlike measures of association such as correlation coefficients, this test does not quantify the strength of the association but rather evaluates whether an association exists after controlling for stratification. The Mantel-Haenszel Test is applicable to \\(2 \\times 2 \\times K\\) contingency tables, where \\(K\\) represents the number of strata. Each stratum is a \\(2 \\times 2\\) table corresponding to different conditions or subgroups. For each stratum \\(k\\), let the marginal totals of the table be: \\(n_{.1k}\\): Total observations in column 1 \\(n_{.2k}\\): Total observations in column 2 \\(n_{1.k}\\): Total observations in row 1 \\(n_{2.k}\\): Total observations in row 2 \\(n_{..k}\\): Total observations in the entire table The observed cell count in row 1 and column 1 is denoted \\(n_{11k}\\). Given the marginal totals, the sampling distribution of \\(n_{11k}\\) follows a hypergeometric distribution. Under the assumption of conditional independence: The expected value of \\(n_{11k}\\) is: \\[ m_{11k} = E(n_{11k}) = \\frac{n_{1.k} n_{.1k}}{n_{..k}} \\] The variance of \\(n_{11k}\\) is: \\[ var(n_{11k}) = \\frac{n_{1.k} n_{2.k} n_{.1k} n_{.2k}}{n_{..k}^2 (n_{..k} - 1)} \\] Mantel and Haenszel proposed the test statistic: \\[ M^2 = \\frac{\\left(|\\sum_k n_{11k} - \\sum_k m_{11k}| - 0.5\\right)^2}{\\sum_k var(n_{11k})} \\sim \\chi^2_{1} \\] where The 0.5 adjustment, known as a continuity correction, improves the approximation to the \\(\\chi^2\\) distribution. The test statistic follows a \\(\\chi^2\\) distribution with 1 degree of freedom under the null hypothesis of conditional independence. This method can be extended to general \\(I \\times J \\times K\\) contingency tables, where \\(I\\) and \\(J\\) represent the number of rows and columns, respectively, and \\(K\\) is the number of strata. Null Hypothesis (\\(H_0\\)): There is no association between the two variables of interest across all strata, after controlling for the confounder. In mathematical terms: \\[ H_0: \\text{Odds Ratio (OR)} = 1 \\; \\text{or} \\; \\text{Risk Ratio (RR)} = 1 \\] Alternative Hypothesis (\\(H_a\\)): There is an association between the two variables of interest across all strata, after controlling for the confounder. In mathematical terms: \\[ H_a: \\text{Odds Ratio (OR)} \\neq 1 \\; \\text{or} \\; \\text{Risk Ratio (RR)} \\neq 1 \\] Let’s consider a scenario where a business wants to evaluate the relationship between customer satisfaction (Satisfied vs. Not Satisfied) and the likelihood of repeat purchases (Yes vs. No) across different regions (e.g., North, South, and West). The goal is to determine whether this relationship holds consistently across the regions. # Create a 2 x 2 x 3 contingency table CustomerData = array( c(40, 30, 200, 300, 35, 20, 180, 265, 50, 25, 250, 275), dim = c(2, 2, 3), dimnames = list( Satisfaction = c(&quot;Satisfied&quot;, &quot;Not Satisfied&quot;), RepeatPurchase = c(&quot;Yes&quot;, &quot;No&quot;), Region = c(&quot;North&quot;, &quot;South&quot;, &quot;West&quot;) ) ) # View marginal table (summarized across regions) margin.table(CustomerData, c(1, 2)) #&gt; RepeatPurchase #&gt; Satisfaction Yes No #&gt; Satisfied 125 630 #&gt; Not Satisfied 75 840 Calculate the overall odds ratio (ignoring strata): library(samplesizeCMH) marginal_table = margin.table(CustomerData, c(1, 2)) odds.ratio(marginal_table) #&gt; [1] 2.222222 Calculate the conditional odds ratios for each region: apply(CustomerData, 3, odds.ratio) #&gt; North South West #&gt; 2.000000 2.576389 2.200000 The Mantel-Haenszel Test evaluates whether the relationship between customer satisfaction and repeat purchases remains consistent across regions: mantelhaen.test(CustomerData, correct = TRUE) #&gt; #&gt; Mantel-Haenszel chi-squared test with continuity correction #&gt; #&gt; data: CustomerData #&gt; Mantel-Haenszel X-squared = 26.412, df = 1, p-value = 2.758e-07 #&gt; alternative hypothesis: true common odds ratio is not equal to 1 #&gt; 95 percent confidence interval: #&gt; 1.637116 3.014452 #&gt; sample estimates: #&gt; common odds ratio #&gt; 2.221488 Interpretation Overall Odds Ratio: This provides an estimate of the overall association between satisfaction and repeat purchases, ignoring regional differences. Conditional Odds Ratios: These show whether the odds of repeat purchases given satisfaction are similar across regions. Mantel-Haenszel Test: A significant test result (e.g., \\(p &lt; 0.05\\)) suggests that the relationship between satisfaction and repeat purchases is consistent across regions. Conversely, a non-significant result implies that regional differences may affect the association. By applying the Mantel-Haenszel Test, businesses can determine if a marketing or customer retention strategy should be uniformly applied or customized to account for regional variations. There is strong evidence to suggest that the two variables of interest are associated across the strata (North, South, and West), even after accounting for potential confounding effects of stratification. The common odds ratio of approximately \\(2.22\\) indicates a substantial association, meaning that the outcome is more likely in the exposed group compared to the unexposed group. The variability in the stratum-specific odds ratios suggests that the strength of the association may differ slightly by region, but the Mantel-Haenszel test assumes the association is consistent (homogeneous). 4.5.2.2 McNemar’s Test McNemar’s Test is a special case of the Mantel-Haenszel Chi-square Test, designed for paired nominal data. It is particularly useful for evaluating changes in categorical responses before and after a treatment or intervention, or for comparing paired responses in matched samples. Unlike the Mantel-Haenszel Test, which handles stratified data, McNemar’s Test is tailored to situations with a single \\(2 \\times 2\\) table derived from paired observations. McNemar’s Test assesses whether the proportions of discordant pairs (off-diagonal elements in a \\(2 \\times 2\\) table) are significantly different. Specifically, it tests the null hypothesis that the probabilities of transitioning from one category to another are equal. Null Hypothesis (\\(H_0\\)): \\[ P(\\text{Switch from A to B}) = P(\\text{Switch from B to A}) \\] This implies that the probabilities of transitioning from one category to the other are equal, or equivalently, the off-diagonal cell counts (\\(n_{12}\\) and \\(n_{21}\\)) are symmetric: \\[ H_0: n_{12} = n_{21} \\] Alternative Hypothesis (\\(H_A\\)): \\[ P(\\text{Switch from A to B}) \\neq P(\\text{Switch from B to A}) \\] This suggests that the probabilities of transitioning between categories are not equal, or equivalently, the off-diagonal cell counts (\\(n_{12}\\) and \\(n_{21}\\)) are asymmetric: \\[ H_A: n_{12} \\neq n_{21} \\] For example, consider a business analyzing whether a new advertising campaign influences customer preference for two products (A and B). Each customer is surveyed before and after the campaign, resulting in the following \\(2 \\times 2\\) contingency table: Before rows: Preference for Product A or B before the campaign. After columns: Preference for Product A or B after the campaign. Let the table structure be: After A After B Before A \\(n_{11}\\) \\(n_{12}\\) Before B \\(n_{21}\\) \\(n_{22}\\) \\(n_{12}\\): Customers who switched from Product A to B. \\(n_{21}\\): Customers who switched from Product B to A. The test focuses on \\(n_{12}\\) and \\(n_{21}\\), as they represent the discordant pairs. The McNemar’s Test statistic is: \\[ M^2 = \\frac{(|n_{12} - n_{21}| - 0.5)^2}{n_{12} + n_{21}} \\] where The 0.5 is a continuity correction applied when sample sizes are small. Under the null hypothesis of no preference change, \\(M^2\\) follows a \\(\\chi^2\\) distribution with 1 degree of freedom. Let’s analyze a voting behavior study where participants were surveyed before and after a campaign. The table represents: Rows: Voting preference before the campaign (Yes, No). Columns: Voting preference after the campaign (Yes, No). # Voting preference before and after a campaign vote = matrix(c(682, 22, 86, 810), nrow = 2, byrow = TRUE, dimnames = list( &quot;Before&quot; = c(&quot;Yes&quot;, &quot;No&quot;), &quot;After&quot; = c(&quot;Yes&quot;, &quot;No&quot;) )) # Perform McNemar&#39;s Test with continuity correction mcnemar_result &lt;- mcnemar.test(vote, correct = TRUE) mcnemar_result #&gt; #&gt; McNemar&#39;s Chi-squared test with continuity correction #&gt; #&gt; data: vote #&gt; McNemar&#39;s chi-squared = 36.75, df = 1, p-value = 1.343e-09 The test provides: Test statistic (\\(M^2\\)): Quantifies the asymmetry in discordant pairs. p-value: Indicates whether there is a significant difference in the discordant proportions. Interpretation Test Statistic: A large \\(M^2\\) value suggests significant asymmetry in the discordant pairs. p-value: A low p-value (e.g., \\(p &lt; 0.05\\)) rejects the null hypothesis, indicating that the proportion of participants switching preferences (e.g., from Yes to No) is significantly different from those switching in the opposite direction (e.g., from No to Yes). A high p-value fails to reject the null hypothesis, suggesting no significant preference change. McNemar’s Test is widely used in business and other fields: Marketing Campaigns: Evaluating whether a campaign shifts consumer preferences or purchase intentions. Product Testing: Determining if a new feature or redesign changes customer ratings. Healthcare Studies: Analyzing treatment effects in paired medical trials. 4.5.2.3 McNemar-Bowker Test The McNemar-Bowker Test is an extension of McNemar’s Test, designed for analyzing paired nominal data with more than two categories. It evaluates the symmetry of the full contingency table by comparing the off-diagonal elements across all categories. This test is particularly useful for understanding whether changes between categories are uniformly distributed or whether significant asymmetries exist. Let the data be structured in an \\(r \\times r\\) square contingency table, where \\(r\\) is the number of categories, and the off-diagonal elements represent transitions between categories. The hypotheses for the McNemar-Bowker Test are: Null Hypothesis (\\(H_0\\)): \\[ P(\\text{Switch from Category } i \\text{ to Category } j) = P(\\text{Switch from Category } j \\text{ to Category } i) \\quad \\forall \\, i \\neq j \\] This implies that the off-diagonal elements are symmetric, and there is no directional preference in category transitions. Alternative Hypothesis (\\(H_A\\)): \\[ P(\\text{Switch from Category } i \\text{ to Category } j) \\neq P(\\text{Switch from Category } j \\text{ to Category } i) \\quad \\text{for at least one pair } (i, j) \\] This suggests that the off-diagonal elements are not symmetric, indicating a directional preference in transitions between at least one pair of categories. The McNemar-Bowker Test statistic is: \\[ B^2 = \\sum_{i &lt; j} \\frac{(n_{ij} - n_{ji})^2}{n_{ij} + n_{ji}} \\] where \\(n_{ij}\\): Observed count of transitions from category \\(i\\) to category \\(j\\). \\(n_{ji}\\): Observed count of transitions from category \\(j\\) to category \\(i\\). Under the null hypothesis, the test statistic \\(B^2\\) approximately follows a \\(\\chi^2\\) distribution with \\(\\frac{r(r-1)}{2}\\) degrees of freedom (corresponding to the number of unique pairs of categories). For example, a company surveys customers about their satisfaction before and after implementing a new policy. Satisfaction is rated on a scale of 1 to 3 (1 = Low, 2 = Medium, 3 = High). The paired responses are summarized in the following \\(3 \\times 3\\) contingency table. # Satisfaction ratings before and after the intervention satisfaction_table &lt;- matrix(c( 30, 10, 5, # Before: Low 8, 50, 12, # Before: Medium 6, 10, 40 # Before: High ), nrow = 3, byrow = TRUE, dimnames = list( &quot;Before&quot; = c(&quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;), &quot;After&quot; = c(&quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;) )) # Function to perform McNemar-Bowker Test mcnemar_bowker_test &lt;- function(table) { if (!all(dim(table)[1] == dim(table)[2])) { stop(&quot;Input must be a square matrix.&quot;) } # Extract off-diagonal elements n &lt;- nrow(table) stat &lt;- 0 df &lt;- 0 for (i in 1:(n - 1)) { for (j in (i + 1):n) { nij &lt;- table[i, j] nji &lt;- table[j, i] stat &lt;- stat + (nij - nji)^2 / (nij + nji) df &lt;- df + 1 } } p_value &lt;- pchisq(stat, df = df, lower.tail = FALSE) return(list(statistic = stat, df = df, p_value = p_value)) } # Run the test result &lt;- mcnemar_bowker_test(satisfaction_table) # Print results cat(&quot;McNemar-Bowker Test Results:\\n&quot;) #&gt; McNemar-Bowker Test Results: cat(&quot;Test Statistic (B^2):&quot;, result$statistic, &quot;\\n&quot;) #&gt; Test Statistic (B^2): 0.4949495 cat(&quot;Degrees of Freedom:&quot;, result$df, &quot;\\n&quot;) #&gt; Degrees of Freedom: 3 cat(&quot;p-value:&quot;, result$p_value, &quot;\\n&quot;) #&gt; p-value: 0.9199996 The output includes: Test Statistic (\\(B^2\\)): A measure of the asymmetry in the off-diagonal elements. p-value: The probability of observing the data under the null hypothesis of symmetry. Interpretation Test Statistic: A large $B^2$ value suggests substantial asymmetry in transitions between categories. p-value: If the p-value is less than the significance level (e.g., $p &lt; 0.05$), we reject the null hypothesis, indicating significant asymmetry in the transitions between at least one pair of categories. If the p-value is greater than the significance level, we fail to reject the null hypothesis, suggesting that the category transitions are symmetric. The McNemar-Bowker Test has broad applications in business and other fields: Customer Feedback Analysis: Evaluating changes in customer satisfaction levels before and after interventions. Marketing Campaigns: Assessing shifts in brand preferences across multiple brands in response to an advertisement. Product Testing: Understanding how user preferences among different product features change after a redesign. 4.5.2.4 Stuart-Maxwell Test The Stuart-Maxwell Test is used for analyzing changes in paired categorical data with more than two categories. It is a generalization of McNemar’s Test, applied to square contingency tables where the off-diagonal elements represent transitions between categories. Unlike the McNemar-Bowker Test, which tests for symmetry across all pairs, the Stuart-Maxwell Test focuses on overall marginal homogeneity. The test evaluates whether the marginal distributions of paired data are consistent across categories. This is particularly useful when investigating whether the distribution of responses has shifted between two conditions, such as before and after an intervention. Hypotheses for the Stuart-Maxwell Test Null Hypothesis (\\(H_0\\)): \\[ \\text{The marginal distributions of the paired data are homogeneous (no difference).} \\] Alternative Hypothesis (\\(H_A\\)): \\[ \\text{The marginal distributions of the paired data are not homogeneous (there is a difference).} \\] The Stuart-Maxwell Test statistic is calculated as: \\[ M^2 = \\mathbf{b}&#39; \\mathbf{V}^{-1} \\mathbf{b} \\] where: \\(\\mathbf{b}\\): Vector of differences between the marginal totals of paired categories. \\(\\mathbf{V}\\): Covariance matrix of \\(\\mathbf{b}\\) under the null hypothesis. The test statistic \\(M^2\\) follows a \\(\\chi^2\\) distribution with \\((r - 1)\\) degrees of freedom, where \\(r\\) is the number of categories. A company surveys employees about their satisfaction levels (Low, Medium, High) before and after implementing a new workplace policy. The results are summarized in the following \\(3 \\times 3\\) contingency table. # Employee satisfaction data before and after a policy change satisfaction_table &lt;- matrix(c( 40, 10, 5, # Before: Low 8, 50, 12, # Before: Medium 6, 10, 40 # Before: High ), nrow = 3, byrow = TRUE, dimnames = list( &quot;Before&quot; = c(&quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;), &quot;After&quot; = c(&quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;) )) # Function to perform the Stuart-Maxwell Test stuart_maxwell_test &lt;- function(table) { if (!all(dim(table)[1] == dim(table)[2])) { stop(&quot;Input must be a square matrix.&quot;) } # Marginal totals for each category row_totals &lt;- rowSums(table) col_totals &lt;- colSums(table) # Vector of differences between row and column marginal totals b &lt;- row_totals - col_totals # Covariance matrix under the null hypothesis total &lt;- sum(table) V &lt;- diag(row_totals + col_totals) - (outer(row_totals, col_totals, &quot;+&quot;) / total) # Calculate the test statistic M2 &lt;- t(b) %*% solve(V) %*% b df &lt;- nrow(table) - 1 p_value &lt;- pchisq(M2, df = df, lower.tail = FALSE) return(list(statistic = M2, df = df, p_value = p_value)) } # Run the Stuart-Maxwell Test result &lt;- stuart_maxwell_test(satisfaction_table) # Print the results cat(&quot;Stuart-Maxwell Test Results:\\n&quot;) #&gt; Stuart-Maxwell Test Results: cat(&quot;Test Statistic (M^2):&quot;, result$statistic, &quot;\\n&quot;) #&gt; Test Statistic (M^2): 0.01802387 cat(&quot;Degrees of Freedom:&quot;, result$df, &quot;\\n&quot;) #&gt; Degrees of Freedom: 2 cat(&quot;p-value:&quot;, result$p_value, &quot;\\n&quot;) #&gt; p-value: 0.9910286 Interpretation Test Statistic: Measures the extent of marginal differences in the table. p-value: A low p-value (e.g., \\(p &lt; 0.05\\)) indicates significant differences between the marginal distributions, suggesting a change in the distribution of responses. A high p-value suggests no evidence of marginal differences, meaning the distribution is consistent across conditions. Practical Applications of the Stuart-Maxwell Test Employee Surveys: Analyzing shifts in satisfaction levels before and after policy changes. Consumer Studies: Evaluating changes in product preferences before and after a marketing campaign. Healthcare Research: Assessing changes in patient responses to treatments across categories. 4.5.2.5 Cochran-Mantel-Haenszel (CMH) Test The Cochran-Mantel-Haenszel (CMH) Test is a generalization of the Mantel-Haenszel Chi-square Test. It evaluates the association between two variables while controlling for the effect of a third stratifying variable. This test is particularly suited for ordinal data, allowing researchers to detect trends and associations across strata. The CMH Test addresses scenarios where: Two variables (e.g., exposure and outcome) are ordinal or nominal. A third variable (e.g., a demographic or environmental factor) stratifies the data into \\(K\\) independent groups. The test answers: Is there a consistent association between the two variables across the strata defined by the third variable? The CMH Test has three main variations depending on the nature of the data: Correlation Test for Ordinal Data: Assesses whether there is a linear association between two ordinal variables across strata. General Association Test: Tests for any association (not necessarily ordinal) between two variables while stratifying by a third. Homogeneity Test: Checks whether the strength of the association between the two variables is consistent across strata. Hypotheses Null Hypothesis (\\(H_0\\)): There is no association between the two variables across all strata, or the strength of the association is consistent across strata. Alternative Hypothesis (\\(H_A\\)): There is an association between the two variables in at least one stratum, or the strength of the association varies across strata. The CMH test statistic is: \\[ CMH = \\frac{\\left( \\sum_{k} \\left(O_k - E_k \\right)\\right)^2}{\\sum_{k} V_k} \\] Where: \\(O_k\\): Observed counts in stratum \\(k\\). \\(E_k\\): Expected counts in stratum \\(k\\), calculated under the null hypothesis. \\(V_k\\): Variance of the observed counts in stratum \\(k\\). The test statistic follows a \\(\\chi^2\\) distribution with 1 degree of freedom under the null hypothesis. A company evaluates whether sales performance (Low, Medium, High) is associated with product satisfaction (Low, Medium, High) across three experience levels (Junior, Mid-level, Senior). The data is organized into a \\(3 \\times 3 \\times 3\\) contingency table. # Sales performance data sales_data &lt;- array( c(20, 15, 10, 12, 18, 15, 8, 12, 20, # Junior 25, 20, 15, 20, 25, 30, 10, 15, 20, # Mid-level 30, 25, 20, 28, 32, 35, 15, 20, 30), # Senior dim = c(3, 3, 3), dimnames = list( SalesPerformance = c(&quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;), Satisfaction = c(&quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;), ExperienceLevel = c(&quot;Junior&quot;, &quot;Mid-level&quot;, &quot;Senior&quot;) ) ) # Load the vcd package for the CMH test library(vcd) # Perform CMH Test cmh_result &lt;- mantelhaen.test(sales_data, correct = FALSE) cmh_result #&gt; #&gt; Cochran-Mantel-Haenszel test #&gt; #&gt; data: sales_data #&gt; Cochran-Mantel-Haenszel M^2 = 22.454, df = 4, p-value = 0.0001627 Interpretation Test Statistic: A large CMH statistic suggests a significant association between sales performance and satisfaction after accounting for experience level. p-value: A low p-value (e.g., \\(p &lt; 0.05\\)) indicates a significant association between the two variables across strata. A high p-value suggests no evidence of association or that the relationship is consistent across all strata. Practical Applications of the CMH Test Business Performance Analysis: Investigating the relationship between customer satisfaction and sales performance across different demographic groups. Healthcare Studies: Assessing the effect of treatment (e.g., dosage) on outcomes while controlling for patient characteristics (e.g., age groups). Educational Research: Analyzing the relationship between test scores and study hours, stratified by teaching method. 4.5.2.6 Summary Table of Tests The following table provides a concise guide on when and why to use each test: Test Name When to Use Key Question Addressed Data Requirements [Mantel-Haenszel Chi-square Test] When testing for association between two binary variables across multiple strata. Is there a consistent association across strata? Binary variables in \\(2 \\times 2 \\times K\\) tables. [McNemar’s Test] When analyzing marginal symmetry in paired binary data. Are the proportions of discordant pairs equal? Paired binary responses (\\(2 \\times 2\\) table). [McNemar-Bowker Test] When testing for symmetry in paired nominal data with more than two categories. Are the off-diagonal elements symmetric across all categories? Paired nominal data in \\(r \\times r\\) tables. [Cochran-Mantel-Haenszel (CMH) Test] When testing ordinal or general associations while controlling for a stratifying variable. Is there an association between two variables after stratification? Ordinal or nominal data in \\(I \\times J \\times K\\) tables. [Stuart-Maxwell Test] When analyzing marginal homogeneity in paired nominal data with more than two categories. Are the marginal distributions of paired data homogeneous? Paired nominal data in \\(r \\times r\\) tables. How to Choose the Right Test Paired vs. Stratified Data: Use McNemar’s Test or McNemar-Bowker Test for paired data. Use Mantel-Haenszel or CMH Test for stratified data. Binary vs. Multi-category Variables: Use McNemar’s Test for binary data. Use McNemar-Bowker Test or Stuart-Maxwell Test for multi-category data. Ordinal Trends: Use the CMH Test if testing for ordinal associations while controlling for a stratifying variable. 4.5.3 Ordinal Trend When analyzing ordinal data, it is often important to determine whether a consistent trend exists between variables. Tests for trend are specifically designed to detect monotonic relationships where changes in one variable are systematically associated with changes in another. These tests are widely used in scenarios involving ordered categories, such as customer satisfaction ratings, income brackets, or educational levels. The primary objectives of trend tests are: To detect monotonic relationships: Determine if higher or lower categories of one variable are associated with higher or lower categories of another variable. To account for ordinal structure: Leverage the inherent order in the data to provide more sensitive and interpretable results compared to tests designed for nominal data. Key Considerations for Trend Tests Data Structure: Ensure that the variables have a natural order and are treated as ordinal. Verify that the trend test chosen matches the data structure (e.g., binary outcome vs. multi-level ordinal variables). Assumptions: Many tests assume monotonic trends, meaning that the relationship should not reverse direction. Interpretation: A significant result indicates the presence of a trend but does not imply causality. The direction and strength of the trend should be carefully interpreted in the context of the data. 4.5.3.1 Cochran-Armitage Test The Cochran-Armitage Test for Trend is a statistical method designed to detect a linear trend in proportions across ordered categories of a predictor variable. It is particularly useful in \\(2 \\times J\\) contingency tables, where there is a binary outcome (e.g., success/failure) and an ordinal predictor variable with \\(J\\) ordered levels. The Cochran-Armitage Test evaluates whether the proportion of a binary outcome changes systematically across the levels of an ordinal predictor. This test leverages the ordinal nature of the predictor to enhance sensitivity and power compared to general chi-square tests. Hypotheses Null Hypothesis (\\(H_0\\)): \\[ \\text{The proportion of the binary outcome is constant across the levels of the ordinal predictor.} \\] Alternative Hypothesis (\\(H_A\\)): \\[ \\text{There is a linear trend in the proportion of the binary outcome across the levels of the ordinal predictor.} \\] The Cochran-Armitage Test statistic is calculated as: \\[ Z = \\frac{\\sum_{j=1}^{J} w_j (n_{1j} - N_j \\hat{p})}{\\sqrt{\\hat{p} (1 - \\hat{p}) \\sum_{j=1}^{J} w_j^2 N_j}} \\] Where: \\(n_{1j}\\): Count of the binary outcome (e.g., “success”) in category \\(j\\). \\(N_j\\): Total number of observations in category \\(j\\). \\(\\hat{p}\\): Overall proportion of the binary outcome, calculated as: \\[ \\hat{p} = \\frac{\\sum_{j=1}^{J} n_{1j}}{\\sum_{j=1}^{J} N_j} \\] \\(w_j\\): Score assigned to the \\(j\\)th category of the ordinal predictor, often set to \\(j\\) for equally spaced levels. The test statistic \\(Z\\) follows a standard normal distribution under the null hypothesis. Key Assumptions Ordinal Predictor: The categories of the predictor variable must have a natural order. Binary Outcome: The response variable must be dichotomous (e.g., success/failure). Independent Observations: Observations within and across categories are independent. Let’s consider a study examining whether the success rate of a marketing campaign varies across three income levels (Low, Medium, High). The data is structured in a \\(2 \\times 3\\) contingency table: Income Level Success Failure Total Low 20 30 50 Medium 35 15 50 High 45 5 50 # Data: Success and Failure counts by Income Level income_levels &lt;- c(&quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;) success &lt;- c(20, 35, 45) failure &lt;- c(30, 15, 5) total &lt;- success + failure # Scores for ordinal levels (can be custom weights) scores &lt;- 1:length(income_levels) # Cochran-Armitage Test # Function to calculate Z statistic cochran_armitage_test &lt;- function(success, failure, scores) { N &lt;- success + failure p_hat &lt;- sum(success) / sum(N) weights &lt;- scores # Calculate numerator numerator &lt;- sum(weights * (success - N * p_hat)) # Calculate denominator denominator &lt;- sqrt(p_hat * (1 - p_hat) * sum(weights^2 * N)) # Z statistic Z &lt;- numerator / denominator p_value &lt;- 2 * (1 - pnorm(abs(Z))) return(list(Z_statistic = Z, p_value = p_value)) } # Perform the test result &lt;- cochran_armitage_test(success, failure, scores) # Print results cat(&quot;Cochran-Armitage Test for Trend Results:\\n&quot;) #&gt; Cochran-Armitage Test for Trend Results: cat(&quot;Z Statistic:&quot;, result$Z_statistic, &quot;\\n&quot;) #&gt; Z Statistic: 2.004459 cat(&quot;p-value:&quot;, result$p_value, &quot;\\n&quot;) #&gt; p-value: 0.04502088 Interpretation Test Statistic (\\(Z\\)): The \\(Z\\) value indicates the strength and direction of the trend. Positive \\(Z\\): Proportions increase with higher categories. Negative \\(Z\\): Proportions decrease with higher categories. p-value: A low p-value (e.g., \\(p &lt; 0.05\\)) rejects the null hypothesis, indicating a significant linear trend. A high p-value fails to reject the null hypothesis, suggesting no evidence of a trend. Practical Applications Marketing: Analyzing whether customer success rates vary systematically across income levels or demographics. Healthcare: Evaluating the dose-response relationship between medication levels and recovery rates. Education: Studying whether pass rates improve with higher levels of educational support. 4.5.3.2 Jonckheere-Terpstra Test The Jonckheere-Terpstra Test is a nonparametric test designed to detect ordered differences between groups. It is particularly suited for ordinal data where both the predictor and response variables exhibit a monotonic trend. Unlike general nonparametric tests like the Kruskal-Wallis test, which assess any differences between groups, the Jonckheere-Terpstra Test specifically evaluates whether the data follows a prespecified ordering. The Jonckheere-Terpstra Test determines whether: There is a monotonic trend in the response variable across ordered groups of the predictor. The data aligns with an a priori hypothesized order (e.g., group 1 &lt; group 2 &lt; group 3). Hypotheses Null Hypothesis (\\(H_0\\)): \\[ \\text{There is no trend in the response variable across the ordered groups.} \\] Alternative Hypothesis (\\(H_A\\)): \\[ \\text{The response variable exhibits a monotonic trend across the ordered groups.} \\] The trend can be increasing, decreasing, or as otherwise hypothesized. The Jonckheere-Terpstra Test statistic is based on the number of pairwise comparisons (\\(U\\)) that are consistent with the hypothesized trend. For \\(k\\) groups: Compare all possible pairs of observations across groups. Count the number of pairs where the values are consistent with the hypothesized order. The test statistic \\(T\\) is the sum of all pairwise comparisons: \\[ T = \\sum_{i &lt; j} T_{ij} \\] Where \\(T_{ij}\\) is the number of concordant pairs between groups \\(i\\) and \\(j\\). Under the null hypothesis, \\(T\\) follows a normal distribution with: Mean: \\[ \\mu_T = \\frac{N (N - 1)}{4} \\] Variance: \\[ \\sigma_T^2 = \\frac{N (N - 1) (2N + 1)}{24} \\] Where \\(N\\) is the total number of observations. The standardized test statistic is: \\[ Z = \\frac{T - \\mu_T}{\\sigma_T} \\] Key Assumptions Ordinal or Interval Data: The response variable must be at least ordinal, and the groups must have a logical order. Independent Groups: Observations within and between groups are independent. Consistent Hypothesis: The trend (e.g., increasing or decreasing) must be specified in advance. Let’s consider a study analyzing whether customer satisfaction ratings (on a scale of 1 to 5) improve with increasing levels of service tiers (Basic, Standard, Premium). The data is grouped by service tier, and we hypothesize that satisfaction ratings increase with higher service tiers. # Example Data: Customer Satisfaction Ratings by Service Tier satisfaction &lt;- list( Basic = c(2, 3, 2, 4, 3), Standard = c(3, 4, 3, 5, 4), Premium = c(4, 5, 4, 5, 5) ) # Prepare data ratings &lt;- unlist(satisfaction) groups &lt;- factor(rep(names(satisfaction), times = sapply(satisfaction, length))) # Calculate pairwise comparisons manual_jonckheere &lt;- function(ratings, groups) { n_groups &lt;- length(unique(groups)) pairwise_comparisons &lt;- 0 total_pairs &lt;- 0 # Iterate over group pairs for (i in 1:(n_groups - 1)) { for (j in (i + 1):n_groups) { group_i &lt;- ratings[groups == levels(groups)[i]] group_j &lt;- ratings[groups == levels(groups)[j]] # Count concordant pairs for (x in group_i) { for (y in group_j) { if (x &lt; y) pairwise_comparisons &lt;- pairwise_comparisons + 1 if (x == y) pairwise_comparisons &lt;- pairwise_comparisons + 0.5 total_pairs &lt;- total_pairs + 1 } } } } # Compute test statistic T &lt;- pairwise_comparisons N &lt;- length(ratings) mu_T &lt;- total_pairs / 2 sigma_T &lt;- sqrt(total_pairs * (N + 1) / 12) Z &lt;- (T - mu_T) / sigma_T p_value &lt;- 2 * (1 - pnorm(abs(Z))) return(list(T_statistic = T, Z_statistic = Z, p_value = p_value)) } # Perform the test result &lt;- manual_jonckheere(ratings, groups) # Print results cat(&quot;Jonckheere-Terpstra Test Results:\\n&quot;) #&gt; Jonckheere-Terpstra Test Results: cat(&quot;T Statistic (Sum of Concordant Pairs):&quot;, result$T_statistic, &quot;\\n&quot;) #&gt; T Statistic (Sum of Concordant Pairs): 49.5 cat(&quot;Z Statistic:&quot;, result$Z_statistic, &quot;\\n&quot;) #&gt; Z Statistic: 1.2 cat(&quot;p-value:&quot;, result$p_value, &quot;\\n&quot;) #&gt; p-value: 0.2301393 Interpretation Test Statistic (\\(T\\)): Represents the sum of all pairwise comparisons consistent with the hypothesized order. Includes 0.5 for tied pairs. \\(Z\\) Statistic: A standardized measure of the strength of the trend. Calculated using \\(T\\), the expected value of \\(T\\) under the null hypothesis (\\(\\mu_T\\)), and the variance of \\(T\\) (\\(\\sigma_T^2\\)). p-value: A low p-value (e.g., \\(p &lt; 0.05\\)) rejects the null hypothesis, indicating a significant trend in the response variable across ordered groups. A high p-value fails to reject the null hypothesis, suggesting no evidence of a trend. Practical Applications Customer Experience Analysis: Assessing whether customer satisfaction increases with higher service levels or product tiers. Healthcare Studies: Testing whether recovery rates improve with increasing doses of a treatment. Education Research: Analyzing whether test scores improve with higher levels of educational intervention. 4.5.3.3 Mantel Test for Trend The Mantel Test for Trend is a statistical method designed to detect a linear association between two ordinal variables. It is an extension of the Mantel-Haenszel Chi-square Test and is particularly suited for analyzing trends in ordinal contingency tables, such as \\(I \\times J\\) tables where both variables are ordinal. The Mantel Test for Trend evaluates whether an increasing or decreasing trend exists between two ordinal variables. It uses the ordering of categories to assess linear relationships, making it more sensitive to trends compared to general association tests like chi-square. Hypotheses Null Hypothesis (\\(H_0\\)): \\[ \\text{There is no linear association between the two ordinal variables.} \\] Alternative Hypothesis (\\(H_A\\)): \\[ \\text{There is a significant linear association between the two ordinal variables.} \\] The Mantel Test is based on the Pearson correlation between the row and column scores in an ordinal contingency table. The test statistic is: \\[ M = \\frac{\\sum_{i} \\sum_{j} w_i w_j n_{ij}}{\\sqrt{\\sum_{i} w_i^2 n_{i\\cdot} \\sum_{j} w_j^2 n_{\\cdot j}}} \\] Where: \\(n_{ij}\\): Observed frequency in cell \\((i, j)\\). \\(n_{i\\cdot}\\): Row marginal total for row \\(i\\). \\(n_{\\cdot j}\\): Column marginal total for column \\(j\\). \\(w_i\\): Score for the \\(i\\)th row. ore for the \\(j\\)th column. The test statistic \\(M\\) is asymptotically normally distributed under the null hypothesis. Key Assumptions Ordinal Variables: Both variables must have a natural order. Linear Trend: Assumes a linear relationship between the scores assigned to the rows and columns. Independence: Observations must be independent. Let’s consider a marketing study evaluating whether customer satisfaction levels (Low, Medium, High) are associated with increasing purchase frequency (Low, Medium, High). # Customer satisfaction and purchase frequency data data &lt;- matrix( c(10, 5, 2, 15, 20, 8, 25, 30, 12), nrow = 3, byrow = TRUE, dimnames = list( Satisfaction = c(&quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;), Frequency = c(&quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;) ) ) # Assign scores for rows and columns row_scores &lt;- 1:nrow(data) col_scores &lt;- 1:ncol(data) # Compute Mantel statistic manually mantel_test_manual &lt;- function(data, row_scores, col_scores) { numerator &lt;- sum(outer(row_scores, col_scores, &quot;*&quot;) * data) row_marginals &lt;- rowSums(data) col_marginals &lt;- colSums(data) row_variance &lt;- sum(row_scores^2 * row_marginals) col_variance &lt;- sum(col_scores^2 * col_marginals) M &lt;- numerator / sqrt(row_variance * col_variance) z_value &lt;- M p_value &lt;- 2 * (1 - pnorm(abs(z_value))) # Two-tailed test return(list(Mantel_statistic = M, p_value = p_value)) } # Perform the Mantel Test result &lt;- mantel_test_manual(data, row_scores, col_scores) # Display results cat(&quot;Mantel Test for Trend Results:\\n&quot;) #&gt; Mantel Test for Trend Results: cat(&quot;Mantel Statistic (M):&quot;, result$Mantel_statistic, &quot;\\n&quot;) #&gt; Mantel Statistic (M): 0.8984663 cat(&quot;p-value:&quot;, result$p_value, &quot;\\n&quot;) #&gt; p-value: 0.368937 Interpretation Test Statistic (\\(M\\)): Represents the strength and direction of the linear association. Positive \\(M\\): Increasing trend. Negative \\(M\\): Decreasing trend. p-value: A low p-value (e.g., \\(p &lt; 0.05\\)) indicates a significant linear association. A high p-value suggests no evidence of a trend. Practical Applications Marketing Analysis: Investigating whether satisfaction levels are associated with purchase behavior or loyalty. Healthcare Research: Testing for a dose-response relationship between treatment levels and outcomes. Social Sciences: Analyzing trends in survey responses across ordered categories. 4.5.3.4 Chi-square Test for Linear Trend The Chi-square Test for Linear Trend is a statistical method used to detect a linear relationship between an ordinal predictor and a binary outcome. It is an extension of the chi-square test, designed specifically for ordered categories, making it more sensitive to linear trends in proportions compared to a general chi-square test of independence. The Chi-square Test for Linear Trend evaluates whether the proportions of a binary outcome (e.g., success/failure) change systematically across ordered categories of a predictor variable. It is widely used in situations such as analyzing dose-response relationships or evaluating trends in survey responses. Hypotheses Null Hypothesis (\\(H_0\\)): \\[ \\text{There is no linear trend in the proportions of the binary outcome across ordered categories.} \\] Alternative Hypothesis (\\(H_A\\)): \\[ \\text{There is a significant linear trend in the proportions of the binary outcome across ordered categories.} \\] The test statistic is: \\[ X^2_{\\text{trend}} = \\frac{\\left( \\sum_{j=1}^J w_j (p_j - \\bar{p}) N_j \\right)^2}{\\sum_{j=1}^J w_j^2 \\bar{p} (1 - \\bar{p}) N_j} \\] Where: - \\(J\\): Number of ordered categories. - \\(w_j\\): Scores assigned to the \\(j\\)th category (typically \\(j = 1, 2, \\dots, J\\)). - \\(p_j\\): Proportion of success in the \\(j\\)th category. - \\(\\bar{p}\\): Overall proportion of success across all categories. - \\(N_j\\): Total number of observations in the \\(j\\)th category. The test statistic follows a chi-square distribution with 1 degree of freedom under the null hypothesis. Key Assumptions Binary Outcome: The response variable must be binary (e.g., success/failure). Ordinal Predictor: The predictor variable must have a natural order. Independent Observations: Data across categories must be independent. Let’s consider a study analyzing whether the proportion of customers who recommend a product increases with customer satisfaction levels (Low, Medium, High). # Example Data: Customer Satisfaction and Recommendation satisfaction_levels &lt;- c(&quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;) success &lt;- c(20, 35, 50) # Number of customers who recommend the product failure &lt;- c(30, 15, 10) # Number of customers who do not recommend the product total &lt;- success + failure # Assign ordinal scores scores &lt;- 1:length(satisfaction_levels) # Calculate overall proportion of success p_hat &lt;- sum(success) / sum(total) Interpretation Chi-square Statistic (\\(X^2_{\\text{trend}}\\)): Indicates the strength of the linear trend in the proportions. p-value: A low p-value (e.g., \\(p &lt; 0.05\\)) rejects the null hypothesis, indicating a significant linear trend. A high p-value suggests no evidence of a linear trend. Practical Applications Marketing: Analyzing whether customer satisfaction levels predict product recommendations or repurchase intentions. Healthcare: Evaluating dose-response relationships in clinical trials. Education: Testing whether higher levels of intervention improve success rates. 4.5.3.5 Key Takeways Test Purpose Key Assumptions Use Cases [Cochran-Armitage Test] Tests for a linear trend in proportions across ordinal categories. - Binary response variable. - Predictor variable is ordinal. Evaluating dose-response relationships, comparing proportions across ordinal groups. [Jonckheere-Terpstra Test] Tests for a monotonic trend in a response variable across ordered groups. - Response variable is continuous or ordinal. - Predictor variable is ordinal. Comparing medians or distributions across ordinal groups, e.g., treatment levels. [Mantel Test for Trend] Evaluates a linear association between an ordinal predictor and response. - Ordinal variables. - Linear trend expected. Determining trends in stratified or grouped data. [Chi-square Test for Linear Trend] Tests for linear trends in categorical data using contingency tables. - Contingency table with ordinal predictor. - Sufficient sample size (expected frequencies &gt; 5). Analyzing trends in frequency data, e.g., examining disease prevalence by age groups. "],["divergence-metrics-and-tests-for-comparing-distributions.html", "4.6 Divergence Metrics and Tests for Comparing Distributions", " 4.6 Divergence Metrics and Tests for Comparing Distributions Divergence metrics are powerful tools used to measure the similarity or dissimilarity between probability distributions. Unlike deviation and deviance statistics, divergence metrics focus on the broader relationships between entire distributions, rather than individual data points or specific model fit metrics. Let’s clarify these differences: Deviation Statistics: Measure the difference between the realization of a variable and some reference value (e.g., the mean). Common statistics derived from deviations include: Standard deviation Average absolute deviation Median absolute deviation Maximum absolute deviation Deviance Statistics: Assess the goodness-of-fit of statistical models. These are analogous to the sum of squared residuals in ordinary least squares (OLS) but are generalized for use in cases with maximum likelihood estimation (MLE). Deviance statistics are frequently employed in generalized linear models (GLMs). Divergence statistics differ fundamentally by focusing on statistical distances between entire probability distributions, rather than on individual data points or model errors. 1. Divergence Metrics Definition: Divergence metrics measure how much one probability distribution differs from another. Key Properties: Asymmetry: Many divergence metrics, such as Kullback-Leibler (KL) divergence, are not symmetric (i.e., \\(D(P \\|\\| Q) \\neq D(Q \\|\\| P)\\)). Non-Metric: They don’t necessarily satisfy the properties of a metric (e.g., symmetry, triangle inequality). Unitless: Divergences are often expressed in terms of information (e.g., bits or nats). When to Use: Use divergence metrics to assess the degree of mismatch between two probability distributions, especially in machine learning, statistical inference, or model evaluation. 2. Distance Metrics Definition: Distance metrics measure the “distance” or dissimilarity between two objects, including probability distributions, datasets, or points in space. Key Properties: Symmetry: \\(D(P, Q) = D(Q, P)\\). Triangle Inequality: \\(D(P, R) \\leq D(P, Q) + D(Q, R)\\). Non-Negativity: \\(D(P, Q) \\geq 0\\), with \\(D(P, Q) = 0\\) only if \\(P=Q\\). When to Use: Use distance metrics to compare datasets, distributions, or clustering outcomes where symmetry and geometric properties are important. Aspect Divergence Metrics Distance Metrics Symmetry Often asymmetric (e.g., KL divergence). Always symmetric (e.g., Wasserstein). Triangle Inequality Not satisfied. Satisfied. Use Case Quantifying how different distributions are. Measuring the dissimilarity or “cost” of transformation. Applications of Divergence Metrics Divergence metrics have found wide utility across domains, including: Detecting Data Drift in Machine Learning: Used to monitor whether the distribution of incoming data differs significantly from training data. Feature Selection: Employed to identify features with the most distinguishing power by comparing their distributions across different classes. Variational Autoencoders (VAEs): Divergence metrics (such as Kullback-Leibler divergence) are central to the loss functions used in training VAEs. Reinforcement Learning: Measure the similarity between policy distributions to improve decision-making processes. Assessing Consistency: Compare the distributions of two variables representing constructs to test their relationship or agreement. Divergence metrics are also highly relevant in business settings, providing insights and solutions for a variety of applications, such as: Customer Segmentation and Targeting: Compare the distributions of customer demographics or purchase behavior across market segments to identify key differences and target strategies more effectively. Market Basket Analysis: Measure divergence between distributions of product co-purchases across regions or customer groups to optimize product bundling and cross-selling strategies. Marketing Campaign Effectiveness: Evaluate whether the distribution of customer responses (e.g., click-through rates or conversions) differs significantly before and after a marketing campaign, providing insights into its success. Fraud Detection: Monitor divergence in transaction patterns over time to detect anomalies that may indicate fraudulent activities. Supply Chain Optimization: Compare demand distributions across time periods or regions to optimize inventory allocation and reduce stock-outs or overstocking. Pricing Strategy Evaluation: Analyze the divergence between pricing and purchase distributions across products or customer segments to refine pricing models and improve profitability. Churn Prediction: Compare distributions of engagement metrics (e.g., frequency of transactions or usage time) between customers likely to churn and those who stay, to design retention strategies. Financial Portfolio Analysis: Assess divergence between the expected returns and actual performance distributions of different asset classes to adjust investment strategies. 4.6.1 Kolmogorov-Smirnov Test The Kolmogorov-Smirnov (KS) test is a non-parametric test used to determine whether two distributions differ significantly or whether a sample distribution matches a reference distribution. It is applicable to continuous distributions and is widely used in hypothesis testing and model evaluation. Mathematical Definition The KS statistic is defined as: \\[ D = \\max |F_P(x) - F_Q(x)| \\] Where: \\(F_P(x)\\) is the cumulative distribution function (CDF) of the first distribution (or sample). \\(F_Q(x)\\) is the CDF of the second distribution (or theoretical reference distribution). \\(D\\) measures the maximum vertical distance between the two CDFs. Hypotheses Null Hypothesis (\\(H_0\\)): The empirical distribution follows a specified distribution (or the two samples are drawn from the same distribution). Alternative Hypothesis (\\(H_1\\)): The empirical distribution does not follow the specified distribution (or the two samples are drawn from different distributions). Properties of the KS Statistic Range: \\[ D \\in [0, 1] \\] \\(D = 0\\): Perfect match between the distributions. \\(D = 1\\): Maximum dissimilarity between the distributions. Non-parametric Nature: The KS test makes no assumptions about the underlying distribution of the data. The KS test is useful in various scenarios, including: Comparing two empirical distributions to evaluate similarity. Testing goodness-of-fit for a sample against a theoretical distribution. Detecting data drift or shifts in distributions over time. Validating simulation outputs by comparing them to real-world data. Example 1: Continuous Distributions # Load necessary libraries library(stats) # Generate two sample distributions set.seed(1) sample_1 &lt;- rnorm(100) # Sample from a standard normal distribution sample_2 &lt;- rnorm(100, mean = 1) # Sample with mean shifted to 1 # Perform Kolmogorov-Smirnov test ks_test_result &lt;- ks.test(sample_1, sample_2) print(ks_test_result) #&gt; #&gt; Asymptotic two-sample Kolmogorov-Smirnov test #&gt; #&gt; data: sample_1 and sample_2 #&gt; D = 0.36, p-value = 4.705e-06 #&gt; alternative hypothesis: two-sided This compares the CDFs of the two samples. The p-value indicates whether the null hypothesis (that the samples come from the same distribution) can be rejected. Example 2: Discrete Data with Bootstrapped KS Test For discrete data, a bootstrapped version of the KS test is often used to bypass the continuity requirement. library(Matching) # Define two discrete samples discrete_sample_1 &lt;- c(0:10) discrete_sample_2 &lt;- c(0:10) # Perform bootstrapped KS test ks_boot_result &lt;- ks.boot(Tr = discrete_sample_1, Co = discrete_sample_2) print(ks_boot_result) #&gt; $ks.boot.pvalue #&gt; [1] 1 #&gt; #&gt; $ks #&gt; #&gt; Exact two-sample Kolmogorov-Smirnov test #&gt; #&gt; data: Tr and Co #&gt; D = 0, p-value = 1 #&gt; alternative hypothesis: two-sided #&gt; #&gt; #&gt; $nboots #&gt; [1] 1000 #&gt; #&gt; attr(,&quot;class&quot;) #&gt; [1] &quot;ks.boot&quot; This method performs a bootstrapped version of the KS test, suitable for discrete data. The p-value indicates whether the null hypothesis (that the samples come from the same distribution) can be rejected. Example 3: Comparing Multiple Distributions with KL Divergence (Optional Enhancement) If you wish to extend the analysis to include divergence measures like KL divergence, use the following: library(entropy) library(tidyverse) # Define multiple samples lst &lt;- list(sample_1 = c(1:20), sample_2 = c(2:30), sample_3 = c(3:30)) # Compute KL divergence between all pairs of distributions result &lt;- expand.grid(1:length(lst), 1:length(lst)) %&gt;% rowwise() %&gt;% mutate(KL = KL.empirical(lst[[Var1]], lst[[Var2]])) print(result) #&gt; # A tibble: 9 × 3 #&gt; # Rowwise: #&gt; Var1 Var2 KL #&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; #&gt; 1 1 1 0 #&gt; 2 2 1 0.150 #&gt; 3 3 1 0.183 #&gt; 4 1 2 0.704 #&gt; 5 2 2 0 #&gt; 6 3 2 0.0679 #&gt; 7 1 3 0.622 #&gt; 8 2 3 0.0870 #&gt; 9 3 3 0 This calculates the KL divergence for all pairs of distributions in the list, offering additional insights into the relationships between the distributions. 4.6.2 Anderson-Darling Test The Anderson-Darling (AD) test is a goodness-of-fit test that evaluates whether a sample of data comes from a specific distribution. It is an enhancement of the Kolmogorov-Smirnov test, with greater sensitivity to deviations in the tails of the distribution. The Anderson-Darling test statistic is defined as: \\[ A^2 = -n - \\frac{1}{n} \\sum_{i=1}^n \\left[ (2i - 1) \\left( \\log F(Y_i) + \\log(1 - F(Y_{n+1-i})) \\right) \\right] \\] Where: \\(n\\) is the sample size. \\(F\\) is the cumulative distribution function (CDF) of the theoretical distribution being tested. \\(Y_i\\) are the ordered sample values. The AD test modifies the basic framework of the KS test by giving more weight to the tails of the distribution, making it particularly sensitive to tail discrepancies. Hypotheses Null Hypothesis (\\(H_0\\)): The sample data follows the specified distribution. Alternative Hypothesis (\\(H_1\\)): The sample data does not follow the specified distribution. Key Properties Tail Sensitivity: Unlike the Kolmogorov-Smirnov test, the Anderson-Darling test emphasizes discrepancies in the tails of the distribution. Distribution-Specific Critical Values: The AD test provides critical values tailored to the specific distribution being tested (e.g., normal, exponential). The Anderson-Darling test is commonly used in: Testing goodness-of-fit for a sample against theoretical distributions such as normal, exponential, or uniform. Evaluating the appropriateness of parametric models in hypothesis testing. Assessing distributional assumptions in quality control and reliability analysis. Example: Testing Normality with the Anderson-Darling Test library(nortest) # Generate a sample from a normal distribution set.seed(1) sample_data &lt;- rnorm(100, mean = 0, sd = 1) # Perform the Anderson-Darling test for normality ad_test_result &lt;- ad.test(sample_data) print(ad_test_result) #&gt; #&gt; Anderson-Darling normality test #&gt; #&gt; data: sample_data #&gt; A = 0.16021, p-value = 0.9471 If the p-value is below a chosen significance level (e.g., 0.05), the null hypothesis that the data is normally distributed is rejected. Example: Comparing Two Empirical Distributions The AD test can also be applied to compare two empirical distributions using resampling techniques. # Define two samples set.seed(1) sample_1 &lt;- rnorm(100, mean = 0, sd = 1) sample_2 &lt;- rnorm(100, mean = 1, sd = 1) # Perform resampling-based Anderson-Darling test (custom implementation or packages like twosamples) library(twosamples) ad_test_result_empirical &lt;- ad_test(sample_1, sample_2) print(ad_test_result_empirical) #&gt; Test Stat P-Value #&gt; 6796.70454 0.00025 This evaluates whether the two empirical distributions differ significantly. 4.6.3 Chi-Square Goodness-of-Fit Test The Chi-Square Goodness-of-Fit Test is a non-parametric statistical test used to evaluate whether a sample data set comes from a population with a specific distribution. It compares observed frequencies with expected frequencies under a hypothesized distribution. Null Hypothesis (\\(H_0\\)): The data follow the specified distribution. Alternative Hypothesis (\\(H_a\\)): The data do not follow the specified distribution. The Chi-Square test statistic is computed as: \\[ \\chi^2 = \\sum_{i=1}^k \\frac{(O_i - E_i)^2}{E_i} \\] Where: \\(O_i\\): Observed frequency for category \\(i\\). \\(E_i\\): Expected frequency for category \\(i\\). \\(k\\): Number of categories. The test statistic follows a Chi-Square distribution with degrees of freedom: \\[ \\nu = k - 1 - p \\] Where \\(p\\) is the number of parameters estimated from the data. Assumptions of the Test Random Sampling: The sample data are drawn randomly from the population. Minimum Expected Frequency: The expected frequencies \\(E_i\\) are sufficiently large (typically \\(E_i \\geq 5\\)). Independence: Observations in the sample are independent of each other. Decision Rule Compute the test statistic \\(\\chi^2\\) using the observed and expected frequencies. Determine the critical value \\(\\chi^2_{\\alpha, \\nu}\\) for the chosen significance level \\(\\alpha\\) and degrees of freedom \\(\\nu\\). Compare \\(\\chi^2\\) to \\(\\chi^2_{\\alpha, \\nu}\\): Reject \\(H_0\\) if \\(\\chi^2 &gt; \\chi^2_{\\alpha, \\nu}\\). Alternatively, use the p-value approach: Reject \\(H_0\\) if \\(p \\leq \\alpha\\). Fail to reject \\(H_0\\) if \\(p &gt; \\alpha\\). Steps for the Chi-Square Goodness-of-Fit Test Define the expected frequencies based on the hypothesized distribution. Compute the observed frequencies from the data. Calculate the test statistic \\(\\chi^2\\). Determine the degrees of freedom \\(\\nu\\). Compare \\(\\chi^2\\) with the critical value or use the p-value for decision-making. Example: Testing a Fair Die Suppose you are testing whether a six-sided die is fair. The die is rolled 60 times, and the observed frequencies of the outcomes are: Observed Frequencies: \\([10, 12, 8, 11, 9, 10]\\) Expected Frequencies: A fair die has equal probability for each face, so \\(E_i = 60 / 6 = 10\\) for each face. # Observed frequencies observed &lt;- c(10, 12, 8, 11, 9, 10) # Expected frequencies under a fair die expected &lt;- rep(10, 6) # Perform Chi-Square Goodness-of-Fit Test chisq_test &lt;- chisq.test(x = observed, p = expected / sum(expected)) # Display results chisq_test #&gt; #&gt; Chi-squared test for given probabilities #&gt; #&gt; data: observed #&gt; X-squared = 1, df = 5, p-value = 0.9626 Example: Testing a Loaded Die For a die with unequal probabilities (e.g., a loaded die), the expected probabilities are defined explicitly: # Observed frequencies observed &lt;- c(10, 12, 8, 11, 9, 10) # Expected probabilities (e.g., for a loaded die) probabilities &lt;- c(0.1, 0.2, 0.3, 0.1, 0.2, 0.1) # Expected frequencies expected &lt;- probabilities * sum(observed) # Perform Chi-Square Goodness-of-Fit Test chisq_test_loaded &lt;- chisq.test(x = observed, p = probabilities) # Display results chisq_test_loaded #&gt; #&gt; Chi-squared test for given probabilities #&gt; #&gt; data: observed #&gt; X-squared = 15.806, df = 5, p-value = 0.007422 Limitations of the Chi-Square Test Minimum Expected Frequency: If \\(E_i &lt; 5\\) for any category, the test may lose power. Consider merging categories to meet this criterion. Independence: Assumes observations are independent. Violations of this assumption can invalidate the test. Sample Size Sensitivity: Large sample sizes may result in significant \\(\\chi\\^2\\) values even for minor deviations from the expected distribution. The Chi-Square Goodness-of-Fit Test is a versatile tool for evaluating the fit of observed data to a hypothesized distribution, widely used in fields like quality control, genetics, and market research. 4.6.4 Cramér-von Mises Test The Cramér-von Mises (CvM) Test is a goodness-of-fit test that evaluates whether a sample data set comes from a specified distribution. Similar to the Kolmogorov-Smirnov Test (KS) and Anderson-Darling Test (AD), it assesses the discrepancy between the empirical and theoretical cumulative distribution functions (CDFs). However, the CvM test has equal sensitivity across the entire distribution, unlike the KS test (focused on the maximum difference) or the AD test (emphasizing the tails). The Cramér-von Mises test statistic is defined as: \\[ W^2 = n \\int_{-\\infty}^{\\infty} \\left( F_n(x) - F(x) \\right)^2 dF(x) \\] Where: \\(n\\) is the sample size. \\(F_n(x)\\) is the empirical cumulative distribution function (ECDF) of the sample. \\(F(x)\\) is the CDF of the specified theoretical distribution. For practical implementation, the test statistic is often computed as: \\[ W^2 = \\sum_{i=1}^n \\left[ F(X_i) - \\frac{2i - 1}{2n} \\right]^2 + \\frac{1}{12n} \\] Where \\(X_i\\) are the ordered sample values. Hypotheses Null Hypothesis (\\(H_0\\)): The sample data follow the specified distribution. Alternative Hypothesis (\\(H_a\\)): The sample data do not follow the specified distribution. Key Properties Equal Sensitivity: The CvM test gives equal weight to discrepancies across all parts of the distribution, unlike the AD test, which emphasizes the tails. Non-parametric: The test makes no strong parametric assumptions about the data, aside from the specified distribution. Complementary to KS and AD Tests: While the KS test focuses on the maximum distance between CDFs and the AD test emphasizes tails, the CvM test provides a balanced sensitivity across the entire range of the distribution. The Cramér-von Mises test is widely used in: Goodness-of-Fit Testing: Assessing whether data follow a specified theoretical distribution (e.g., normal, exponential). Model Validation: Evaluating the fit of probabilistic models in statistical and machine learning contexts. Complementary Testing: Used alongside KS and AD tests for a comprehensive analysis of distributional assumptions. Example 1: Testing Normality library(nortest) # Generate a sample from a normal distribution set.seed(1) sample_data &lt;- rnorm(100, mean = 0, sd = 1) # Perform the Cramér-von Mises test for normality cvm_test_result &lt;- cvm.test(sample_data) print(cvm_test_result) #&gt; #&gt; Cramer-von Mises normality test #&gt; #&gt; data: sample_data #&gt; W = 0.026031, p-value = 0.8945 The test evaluates whether the sample data follow a normal distribution. Example 2: Goodness-of-Fit for Custom Distributions For distributions other than normal, you can use resampling techniques or custom implementations. Here’s a pseudo-implementation for a custom theoretical distribution: # Custom ECDF and theoretical CDF comparison set.seed(1) sample_data &lt;- rexp(100, rate = 1) # Sample from exponential distribution theoretical_cdf &lt;- function(x) { pexp(x, rate = 1) } # Exponential CDF # Compute empirical CDF empirical_cdf &lt;- ecdf(sample_data) # Compute CvM statistic cvm_statistic &lt;- sum((empirical_cdf(sample_data) - theoretical_cdf(sample_data)) ^ 2) / length(sample_data) print(paste(&quot;Cramér-von Mises Statistic (Custom):&quot;, round(cvm_statistic, 4))) #&gt; [1] &quot;Cramér-von Mises Statistic (Custom): 0.0019&quot; This demonstrates a custom calculation of the CvM statistic for testing goodness-of-fit to an exponential distribution. Normality Test: The cvm.test function evaluates whether the sample data follow a normal distribution. A small p-value indicates significant deviation from normality. Custom Goodness-of-Fit: Custom implementation allows testing for distributions other than normal. The statistic measures the squared differences between the empirical and theoretical CDFs. Advantages and Limitations Advantages: Balanced sensitivity across the entire distribution. Complements KS and AD tests by providing a different perspective on goodness-of-fit. Limitations: Critical values are distribution-specific. The test may be less sensitive to tail deviations compared to the AD test. The Cramér-von Mises test is a robust and versatile goodness-of-fit test, offering balanced sensitivity across the entire distribution. Its complementarity to KS and AD tests makes it an essential tool for validating distributional assumptions in both theoretical and applied contexts. 4.6.5 Kullback-Leibler Divergence Kullback-Leibler (KL) divergence, also known as relative entropy, is a measure used to quantify the similarity between two probability distributions. It plays a critical role in statistical inference, machine learning, and information theory. However, KL divergence is not a true metric as it does not satisfy the triangle inequality. Key Properties of KL Divergence Not a Metric: KL divergence fails to meet the triangle inequality requirement, and it is not symmetric, meaning: \\[ D_{KL}(P \\| Q) \\neq D_{KL}(Q \\| P) \\] Generalization to Multivariate Case: KL divergence can be extended for multivariate distributions, making it flexible for complex analyses. Quantifies Information Loss: It measures the “information loss” when approximating the true distribution \\(P\\) with the predicted distribution \\(Q\\). Thus, smaller values indicate closer similarity between the distributions. Mathematical Definitions KL divergence is defined differently for discrete and continuous distributions. 1. Discrete Case For two discrete probability distributions \\(P = \\{P_i\\}\\) and \\(Q = \\{Q_i\\}\\), the KL divergence is given by: \\[ D_{KL}(P \\| Q) = \\sum_i P_i \\log\\left(\\frac{P_i}{Q_i}\\right) \\] 2. Continuous Case For continuous probability density functions \\(P(x)\\) and \\(Q(x)\\): \\[ D_{KL}(P \\| Q) = \\int P(x) \\log\\left(\\frac{P(x)}{Q(x)}\\right) dx \\] Range: \\[ D_{KL}(P \\| Q) \\in [0, \\infty) \\] \\(D_{KL} = 0\\) indicates identical distributions (\\(P = Q\\)). Larger values indicate greater dissimilarity between \\(P\\) and \\(Q\\). Non-Symmetric Nature: As noted, \\(D_{KL}(P \\| Q)\\) and \\(D_{KL}(Q \\| P)\\) are not equal, emphasizing its directed nature. library(philentropy) # Example 1: Continuous case # Define two continuous probability distributions with distinct patterns X_continuous &lt;- c(0.1, 0.2, 0.3, 0.4) # Normalized to sum to 1 Y_continuous &lt;- c(0.4, 0.3, 0.2, 0.1) # Normalized to sum to 1 # Calculate KL divergence (logarithm base 2) KL_continuous &lt;- KL(rbind(X_continuous, Y_continuous), unit = &quot;log2&quot;) print(paste(&quot;KL divergence (continuous):&quot;, round(KL_continuous, 2))) #&gt; [1] &quot;KL divergence (continuous): 0.66&quot; # Example 2: Discrete case # Define two discrete probability distributions X_discrete &lt;- c(5, 10, 15, 20) # Counts for events Y_discrete &lt;- c(20, 15, 10, 5) # Counts for events # Estimate probabilities empirically and compute KL divergence KL_discrete &lt;- KL(rbind(X_discrete, Y_discrete), est.prob = &quot;empirical&quot;) print(paste(&quot;KL divergence (discrete):&quot;, round(KL_discrete, 2))) #&gt; [1] &quot;KL divergence (discrete): 0.66&quot; Insights: Continuous case uses normalized probability values explicitly provided. Discrete case relies on empirical estimation of probabilities from counts. Observe how KL divergence quantifies the “distance” between the two distributions. 4.6.6 Jensen-Shannon Divergence Jensen-Shannon (JS) divergence is a symmetric and bounded measure of the similarity between two probability distributions. It is derived from the Kullback-Leibler Divergence (KL) but addresses its asymmetry and unboundedness by incorporating a mixed distribution. The Jensen-Shannon divergence is defined as: \\[ D_{JS}(P \\| Q) = \\frac{1}{2} \\left( D_{KL}(P \\| M) + D_{KL}(Q \\| M) \\right) \\] where: \\(M = \\frac{1}{2}(P + Q)\\) is the mixed distribution, representing the average of \\(P\\) and \\(Q\\). \\(D_{KL}\\) is the Kullback-Leibler divergence. Key Properties Symmetry: Unlike KL divergence, JS divergence is symmetric: \\[ D_{JS}(P \\| Q) = D_{JS}(Q \\| P) \\] Boundedness: For base-2 logarithms: \\[ D_{JS} \\in [0, 1] \\] For natural logarithms (base-\\(e\\)): \\[ D_{JS} \\in [0, \\ln(2)] \\] Interpretability: The JS divergence measures the average information gain when moving from the mixed distribution \\(M\\) to either \\(P\\) or \\(Q\\). Its bounded nature makes it easier to compare across datasets. # Load the required library library(philentropy) # Example 1: Continuous case # Define two continuous distributions X_continuous &lt;- 1:10 # Continuous sequence Y_continuous &lt;- 1:20 # Continuous sequence # Compute JS divergence (logarithm base 2) JS_continuous &lt;- JSD(rbind(X_continuous, Y_continuous), unit = &quot;log2&quot;) print(paste(&quot;JS divergence (continuous):&quot;, round(JS_continuous, 2))) #&gt; [1] &quot;JS divergence (continuous): 20.03&quot; # X_continuous and Y_continuous represent continuous distributions. # The mixed distribution (M) is computed internally as the average of the two distributions. # Example 2: Discrete case # Define two discrete distributions X_discrete &lt;- c(5, 10, 15, 20) # Observed counts for events Y_discrete &lt;- c(20, 15, 10, 5) # Observed counts for events # Compute JS divergence with empirical probability estimation JS_discrete &lt;- JSD(rbind(X_discrete, Y_discrete), est.prob = &quot;empirical&quot;) print(paste(&quot;JS divergence (discrete):&quot;, round(JS_discrete, 2))) #&gt; [1] &quot;JS divergence (discrete): 0.15&quot; # X_discrete and Y_discrete represent event counts. # Probabilities are estimated empirically before calculating the divergence. 4.6.7 Hellinger Distance The Hellinger distance is a bounded and symmetric measure of similarity between two probability distributions. It is widely used in statistics and machine learning to quantify how “close” two distributions are, with values ranging between 0 (identical distributions) and 1 (completely disjoint distributions). Mathematical Definition The Hellinger distance between two probability distributions \\(P\\) and \\(Q\\) is defined as: \\[ H(P, Q) = \\frac{1}{\\sqrt{2}} \\sqrt{\\sum_x \\left(\\sqrt{P(x)} - \\sqrt{Q(x)}\\right)^2} \\] Where: \\(P(x)\\) and \\(Q(x)\\) are the probability densities or probabilities at point \\(x\\) for the distributions \\(P\\) and \\(Q\\). The term \\(\\sqrt{P(x)}\\) is the square root of the probabilities, emphasizing geometric comparisons between the distributions. Alternatively, for continuous distributions, the Hellinger distance can be expressed as: \\[ H(P, Q) = \\frac{1}{\\sqrt{2}} \\sqrt{\\int \\left(\\sqrt{P(x)} - \\sqrt{Q(x)}\\right)^2 dx} \\] Key Properties Symmetry: \\[ H(P, Q) = H(Q, P) \\] The distance is symmetric, unlike Kullback-Leibler divergence. Boundedness: \\[ H(P, Q) \\in [0, 1] \\] \\(H = 0\\): The distributions are identical (\\(P(x) = Q(x)\\) for all \\(x\\)). \\(H = 1\\): The distributions have no overlap (\\(P(x) \\neq Q(x)\\)). Interpretability: Hellinger distance provides a scale-invariant measure, making it suitable for comparing distributions in various contexts. Hellinger distance is widely used in: Hypothesis Testing: Comparing empirical distributions to theoretical models. Machine Learning: Feature selection, classification, and clustering tasks. Bayesian Analysis: Quantifying differences between prior and posterior distributions. Economics and Ecology: Measuring dissimilarity in distributions like income, species abundance, or geographical data. library(philentropy) # Example 1: Compute Hellinger Distance for Discrete Distributions # Define two discrete distributions as probabilities P_discrete &lt;- c(0.1, 0.2, 0.3, 0.4) # Normalized probabilities Q_discrete &lt;- c(0.3, 0.3, 0.2, 0.2) # Normalized probabilities # Compute Hellinger distance hellinger_discrete &lt;- distance(rbind(P_discrete, Q_discrete), method = &quot;hellinger&quot;) print(paste(&quot;Hellinger Distance (Discrete):&quot;, round(hellinger_discrete, 4))) #&gt; [1] &quot;Hellinger Distance (Discrete): 0.465&quot; # Example 2: Compute Hellinger Distance for Empirical Distributions # Define two empirical distributions (counts) P_empirical &lt;- c(10, 20, 30, 40) # Counts for distribution P Q_empirical &lt;- c(30, 30, 20, 20) # Counts for distribution Q # Normalize counts to probabilities P_normalized &lt;- P_empirical / sum(P_empirical) Q_normalized &lt;- Q_empirical / sum(Q_empirical) # Compute Hellinger distance hellinger_empirical &lt;- distance(rbind(P_normalized, Q_normalized), method = &quot;hellinger&quot;) print(paste(&quot;Hellinger Distance (Empirical):&quot;, round(hellinger_empirical, 4))) #&gt; [1] &quot;Hellinger Distance (Empirical): 0.465&quot; 4.6.8 Bhattacharyya Distance The Bhattacharyya Distance is a statistical measure used to quantify the similarity or overlap between two probability distributions. It is commonly used in pattern recognition, signal processing, and statistics to evaluate how closely related two distributions are. The Bhattacharyya distance is particularly effective for comparing both discrete and continuous distributions. The Bhattacharyya distance between two probability distributions \\(P\\) and \\(Q\\) is defined as: \\[ D_B(P, Q) = -\\ln \\left( \\sum_x \\sqrt{P(x) Q(x)} \\right) \\] For continuous distributions, the Bhattacharyya distance is expressed as: \\[ D_B(P, Q) = -\\ln \\left( \\int \\sqrt{P(x) Q(x)} dx \\right) \\] Where: \\(P(x)\\) and \\(Q(x)\\) are the probability densities or probabilities for the distributions \\(P\\) and \\(Q\\). The term \\(\\int \\sqrt{P(x) Q(x)} dx\\) is known as the Bhattacharyya coefficient. Key Properties Symmetry: \\[ D_B(P, Q) = D_B(Q, P) \\] Range: \\[ D_B(P, Q) \\in [0, \\infty) \\] \\(D_B = 0\\): The distributions are identical (\\(P = Q\\)). Larger values indicate less overlap and greater dissimilarity between \\(P\\) and \\(Q\\). Relation to Hellinger Distance: The Bhattacharyya coefficient is related to the Hellinger distance: \\[ H(P, Q) = \\sqrt{1 - \\sum_x \\sqrt{P(x) Q(x)}} \\] The Bhattacharyya distance is widely used in: Classification: Measuring the similarity between feature distributions in machine learning. Hypothesis Testing: Evaluating the closeness of observed data to a theoretical model. Image Processing: Comparing pixel intensity distributions or color histograms. Economics and Ecology: Assessing similarity in income distributions or species abundance. Example 1: Discrete Distributions # Define two discrete probability distributions P_discrete &lt;- c(0.1, 0.2, 0.3, 0.4) # Normalized probabilities Q_discrete &lt;- c(0.3, 0.3, 0.2, 0.2) # Normalized probabilities # Compute Bhattacharyya coefficient bhattacharyya_coefficient &lt;- sum(sqrt(P_discrete * Q_discrete)) # Compute Bhattacharyya distance bhattacharyya_distance &lt;- -log(bhattacharyya_coefficient) # Display results print(paste( &quot;Bhattacharyya Coefficient:&quot;, round(bhattacharyya_coefficient, 4) )) #&gt; [1] &quot;Bhattacharyya Coefficient: 0.9459&quot; print(paste( &quot;Bhattacharyya Distance (Discrete):&quot;, round(bhattacharyya_distance, 4) )) #&gt; [1] &quot;Bhattacharyya Distance (Discrete): 0.0556&quot; A smaller Bhattacharyya distance indicates greater similarity between the two distributions. Example 2: Continuous Distributions (Approximation) For continuous distributions, the Bhattacharyya distance can be approximated using numerical integration or discretization. # Generate two continuous distributions set.seed(1) P_continuous &lt;- rnorm(1000, mean = 0, sd = 1) # Standard normal distribution Q_continuous &lt;- rnorm(1000, mean = 1, sd = 1) # Normal distribution with mean 1 # Create histograms to approximate probabilities hist_P &lt;- hist(P_continuous, breaks = 50, plot = FALSE) hist_Q &lt;- hist(Q_continuous, breaks = 50, plot = FALSE) # Normalize histograms to probabilities prob_P &lt;- hist_P$counts / sum(hist_P$counts) prob_Q &lt;- hist_Q$counts / sum(hist_Q$counts) # Compute Bhattacharyya coefficient bhattacharyya_coefficient_continuous &lt;- sum(sqrt(prob_P * prob_Q)) # Compute Bhattacharyya distance bhattacharyya_distance_continuous &lt;- -log(bhattacharyya_coefficient_continuous) # Display results print(paste( &quot;Bhattacharyya Coefficient (Continuous):&quot;, round(bhattacharyya_coefficient_continuous, 4) )) #&gt; [1] &quot;Bhattacharyya Coefficient (Continuous): 0.9823&quot; print(paste( &quot;Bhattacharyya Distance (Continuous Approximation):&quot;, round(bhattacharyya_distance_continuous, 4) )) #&gt; [1] &quot;Bhattacharyya Distance (Continuous Approximation): 0.0178&quot; Continuous distributions are discretized into histograms to compute the Bhattacharyya coefficient and distance. Discrete Case: The Bhattacharyya coefficient quantifies the overlap between \\(P\\) and \\(Q\\). The Bhattacharyya distance translates this overlap into a logarithmic measure of dissimilarity. Continuous Case: Distributions are discretized into histograms to approximate the Bhattacharyya coefficient and distance. 4.6.9 Wasserstein Distance The Wasserstein distance, also known as the Earth Mover’s Distance (EMD), is a measure of similarity between two probability distributions. It quantifies the “cost” of transforming one distribution into another, making it particularly suitable for continuous data and applications where the geometry of the data matters. Mathematical Definition The Wasserstein distance between two probability distributions \\(P\\) and \\(Q\\) over a domain \\(\\mathcal{X}\\) is defined as: \\[ W_p(P, Q) = \\left( \\int_{\\mathcal{X}} |F_P(x) - F_Q(x)|^p dx \\right)^{\\frac{1}{p}} \\] Where: \\(F_P(x)\\) and \\(F_Q(x)\\) are the cumulative distribution functions (CDFs) of \\(P\\) and \\(Q\\). \\(p \\geq 1\\) is the order of the Wasserstein distance (commonly \\(p = 1\\)). \\(|\\cdot|^p\\) is the absolute difference raised to the power \\(p\\). For the case of \\(p = 1\\), the formula simplifies to: \\[ W_1(P, Q) = \\int_{\\mathcal{X}} |F_P(x) - F_Q(x)| dx \\] This represents the minimum “cost” of transforming the distribution \\(P\\) into \\(Q\\), where cost is proportional to the distance a “unit of mass” must move. Key Properties Interpretability: Represents the “effort” required to morph one distribution into another. Metric: Wasserstein distance satisfies the properties of a metric, including symmetry, non-negativity, and the triangle inequality. Flexibility: Can handle both empirical and continuous distributions. Wasserstein distance is widely used in various fields, including: Machine Learning: Training generative models such as Wasserstein GANs. Monitoring data drift in online systems. Statistics: Comparing empirical distributions derived from observed data. Robustness testing under distributional shifts. Economics: Quantifying disparities in income or wealth distributions. Image Processing: Measuring structural differences between image distributions. library(transport) library(twosamples) # Example 1: Compute Wasserstein Distance (1D case) set.seed(1) dist_1 &lt;- rnorm(100) # Generate a sample from a standard normal distribution dist_2 &lt;- rnorm(100, mean = 1) # Generate a sample with mean shifted to 1 # Calculate the Wasserstein distance wass_distance &lt;- wasserstein1d(dist_1, dist_2) print(paste(&quot;1D Wasserstein Distance:&quot;, round(wass_distance, 4))) #&gt; [1] &quot;1D Wasserstein Distance: 0.8533&quot; # Example 2: Wasserstein Metric as a Statistic set.seed(1) wass_stat_value &lt;- wass_stat(dist_1, dist_2) print(paste(&quot;Wasserstein Statistic:&quot;, round(wass_stat_value, 4))) #&gt; [1] &quot;Wasserstein Statistic: 0.8533&quot; # Example 3: Wasserstein Test (Permutation-based Two-sample Test) set.seed(1) wass_test_result &lt;- wass_test(dist_1, dist_2) print(wass_test_result) #&gt; Test Stat P-Value #&gt; 0.8533046 0.0002500 # - Example 1 calculates the simple Wasserstein distance between two distributions. # - Example 2 computes the Wasserstein distance as a statistical metric. # - Example 3 performs a permutation-based two-sample test using the Wasserstein metric. 4.6.10 Energy Distance The Energy Distance is a statistical metric used to quantify the similarity between two probability distributions. It is particularly effective for comparing multi-dimensional distributions. The Energy Distance between two distributions \\(P\\) and \\(Q\\) is defined as: \\[ E(P, Q) = 2 \\mathbb{E}[||X - Y||] - \\mathbb{E}[||X - X&#39;||] - \\mathbb{E}[||Y - Y&#39;||] \\] Where: \\(X\\) and \\(X&#39;\\) are independent and identically distributed (i.i.d.) random variables from \\(P\\). \\(Y\\) and \\(Y&#39;\\) are i.i.d. random variables from \\(Q\\). \\(||\\cdot||\\) denotes the Euclidean distance. Alternatively, for empirical distributions, the Energy Distance can be approximated as: \\[ E(P, Q) = \\frac{2}{mn} \\sum_{i=1}^m \\sum_{j=1}^n ||X_i - Y_j|| - \\frac{1}{m^2} \\sum_{i=1}^m \\sum_{j=1}^m ||X_i - X_j|| - \\frac{1}{n^2} \\sum_{i=1}^n \\sum_{j=1}^n ||Y_i - Y_j|| \\] Where: \\(m\\) and \\(n\\) are the sample sizes from distributions \\(P\\) and \\(Q\\) respectively. \\(X_i\\) and \\(Y_j\\) are samples from \\(P\\) and \\(Q\\). Key Properties Metric: Energy distance satisfies the properties of a metric: symmetry, non-negativity, and the triangle inequality. Range: \\[ E(P, Q) \\geq 0 \\] \\(E(P, Q) = 0\\): The distributions are identical. Larger values indicate greater dissimilarity. Effectiveness for Multi-dimensional Data: Energy distance is designed to work well in higher-dimensional spaces, unlike some traditional metrics. The Energy Distance is widely used in: Hypothesis Testing: Testing whether two distributions are the same. Energy Test for equality of distributions. Clustering: Measuring dissimilarity between clusters in multi-dimensional data. Feature Selection: Comparing distributions of features across different classes to evaluate their discriminative power. Example 1: Comparing Two Distributions # Load the &#39;energy&#39; package library(energy) # Generate two sample distributions set.seed(1) X &lt;- matrix(rnorm(1000, mean = 0, sd = 1), ncol = 2) # Distribution P Y &lt;- matrix(rnorm(1000, mean = 1, sd = 1), ncol = 2) # Distribution Q # Combine X and Y and create a group identifier combined &lt;- rbind(X, Y) groups &lt;- c(rep(1, nrow(X)), rep(2, nrow(Y))) # Compute Energy Distance energy_dist &lt;- edist(combined, sizes = table(groups)) # Print the Energy Distance print(paste(&quot;Energy Distance:&quot;, round(energy_dist, 4))) #&gt; [1] &quot;Energy Distance: 201.9202&quot; This calculates the energy distance between two multi-dimensional distributions. Example 2: Energy Test for Equality of Distributions # Perform the Energy Test energy_test &lt;- eqdist.etest(rbind(X, Y), sizes = c(nrow(X), nrow(Y)), R = 999) print(energy_test) #&gt; #&gt; Multivariate 2-sample E-test of equal distributions #&gt; #&gt; data: sample sizes 500 500, replicates 999 #&gt; E-statistic = 201.92, p-value = 0.001 The energy test evaluates the null hypothesis that the two distributions are identical. Energy Distance: Provides a single metric to quantify the dissimilarity between two distributions, considering all dimensions of the data. Energy Test: Tests for equality of distributions using Energy Distance. The p-value indicates whether the distributions are significantly different. Advantages of Energy Distance Multi-dimensional Applicability: Works seamlessly with high-dimensional data, unlike some divergence metrics which may suffer from dimensionality issues. Non-parametric: Makes no assumptions about the form of the distributions. Robustness: Effective even with complex data structures. 4.6.11 Total Variation Distance The Total Variation (TV) Distance is a measure of the maximum difference between two probability distributions. It is widely used in probability theory, statistics, and machine learning to quantify how dissimilar two distributions are. The Total Variation Distance between two probability distributions \\(P\\) and \\(Q\\) is defined as: \\[ D_{TV}(P, Q) = \\frac{1}{2} \\sum_x |P(x) - Q(x)| \\] Where: \\(P(x)\\) and \\(Q(x)\\) are the probabilities assigned to the outcome \\(x\\) by the distributions \\(P\\) and \\(Q\\). The factor \\(\\frac{1}{2}\\) ensures that the distance lies within the range \\([0, 1]\\). Alternatively, for continuous distributions, the TV distance can be expressed as: \\[ D_{TV}(P, Q) = \\frac{1}{2} \\int |P(x) - Q(x)| dx \\] Key Properties Range: \\[ D_{TV}(P, Q) \\in [0, 1] \\] \\(D_{TV} = 0\\): The distributions are identical (\\(P = Q\\)). \\(D_{TV} = 1\\): The distributions are completely disjoint (no overlap). Symmetry: \\[ D_{TV}(P, Q) = D_{TV}(Q, P) \\] Interpretability: \\(D_{TV}(P, Q)\\) represents the maximum probability mass that needs to be shifted to transform \\(P\\) into \\(Q\\). The Total Variation Distance is used in: Hypothesis Testing: Quantifying the difference between observed and expected distributions. Machine Learning: Evaluating similarity between predicted and true distributions. Information Theory: Comparing distributions in contexts like communication and cryptography. Example 1: Discrete Distributions # Define two discrete probability distributions P_discrete &lt;- c(0.1, 0.2, 0.3, 0.4) # Normalized probabilities Q_discrete &lt;- c(0.3, 0.3, 0.2, 0.2) # Normalized probabilities # Compute Total Variation Distance tv_distance &lt;- sum(abs(P_discrete - Q_discrete)) / 2 print(paste(&quot;Total Variation Distance (Discrete):&quot;, round(tv_distance, 4))) #&gt; [1] &quot;Total Variation Distance (Discrete): 0.3&quot; This calculates the maximum difference between the two distributions, scaled to lie between 0 and 1. Example 2: Continuous Distributions (Approximation) For continuous distributions, the TV distance can be approximated using discretization or numerical integration. Here’s an example using random samples: # Generate two continuous distributions set.seed(1) P_continuous &lt;- rnorm(1000, mean = 0, sd = 1) # Standard normal distribution Q_continuous &lt;- rnorm(1000, mean = 1, sd = 1) # Normal distribution with mean 1 # Create histograms to approximate probabilities hist_P &lt;- hist(P_continuous, breaks = 50, plot = FALSE) hist_Q &lt;- hist(Q_continuous, breaks = 50, plot = FALSE) # Normalize histograms to probabilities prob_P &lt;- hist_P$counts / sum(hist_P$counts) prob_Q &lt;- hist_Q$counts / sum(hist_Q$counts) # Compute Total Variation Distance tv_distance_continuous &lt;- sum(abs(prob_P - prob_Q)) / 2 print(paste( &quot;Total Variation Distance (Continuous Approximation):&quot;, round(tv_distance_continuous, 4) )) #&gt; [1] &quot;Total Variation Distance (Continuous Approximation): 0.125&quot; The continuous distributions are discretized into histograms, and TV distance is computed based on the resulting probabilities. Discrete Case: The TV distance quantifies the maximum difference between \\(P\\) and \\(Q\\) in terms of probability mass. In this example, it highlights how much \\(P\\) and \\(Q\\) diverge. Continuous Case: For continuous distributions, TV distance is approximated using discretized probabilities from histograms. This approach provides an intuitive measure of similarity for large samples. The Total Variation Distance provides an intuitive and interpretable measure of the maximum difference between two distributions. Its symmetry and bounded nature make it a versatile tool for comparing both discrete and continuous distributions. 4.6.12 Summary 1. Tests for Comparing Distributions Test Name Purpose Type of Data Advantages Limitations Kolmogorov-Smirnov Test Tests if two distributions are the same or if a sample matches a reference distribution. Empirical Distributions (Continuous) Non-parametric, detects global differences. Less sensitive to tail differences, limited to one-dimensional data. Anderson-Darling Test Tests goodness-of-fit with emphasis on the tails. Continuous Data Strong sensitivity to tail behavior. Requires specifying a reference distribution. Chi-Square Goodness-of-Fit Test Tests if observed frequencies match expected frequencies. Categorical Data Simple, intuitive for discrete data. Requires large sample sizes and sufficiently large expected frequencies. Cramér-von Mises Test Evaluates goodness-of-fit using cumulative distribution functions. Empirical Distributions (Continuous) Sensitive across the entire distribution. Limited to one-dimensional data; requires cumulative distribution functions. 2. Divergence Metrics Metric Name Purpose Type of Data Advantages Limitations Kullback-Leibler Divergence Measures how one probability distribution diverges from another. Probability Distributions (Continuous/Discrete) Provides a clear measure of information loss. Asymmetric, sensitive to zero probabilities. Jensen-Shannon Divergence Symmetric measure of similarity between two probability distributions. Probability Distributions (Continuous/Discrete) Symmetric and bounded; intuitive for comparison. Less sensitive to tail differences. Hellinger Distance Measures geometric similarity between two probability distributions. Discrete or Continuous Probability Distributions Easy to interpret; bounded between 0 and 1. Computationally expensive for large datasets. Bhattacharyya Distance Quantifies overlap between two statistical distributions. Probability Distributions (Continuous/Discrete) Useful for classification and clustering tasks. Less interpretable in large-scale applications. 3. Distance Metrics Metric Name Purpose Type of Data Advantages Limitations Wasserstein Distance Measures the “effort” or “cost” to transform one distribution into another. Continuous or Empirical Distributions Provides geometric interpretation; versatile. Computationally expensive for large-scale data. Energy Distance Measures statistical dissimilarity between multivariate distributions. Multivariate Empirical Distributions Non-parametric, works well for high-dimensional data. Requires pairwise calculations; sensitive to outliers. Total Variation Distance Measures the maximum absolute difference between probabilities of two distributions. Probability Distributions (Discrete/Continuous) Intuitive and strict divergence measure. Ignores structural differences beyond the largest deviation. "],["linear-regression.html", "Chapter 5 Linear Regression", " Chapter 5 Linear Regression Linear regression is one of the most fundamental tools in statistics and econometrics, widely used for modeling relationships between variables. It forms the cornerstone of predictive analysis, enabling us to understand and quantify how changes in one or more explanatory variables are associated with a dependent variable. Its simplicity and versatility make it an essential tool in fields ranging from economics and marketing to healthcare and environmental studies. At its core, linear regression addresses questions about associations rather than causation. For example: How are advertising expenditures associated with sales performance? What is the relationship between a company’s revenue and its stock price? How does the level of education correlate with income? These questions are about patterns in data—not necessarily causal effects. While regression can provide insights into potential causal relationships, establishing causality requires more than just regression analysis. It requires careful consideration of the study design, assumptions, and potential confounding factors. So, why is it called “linear”? The term refers to the structure of the model, where the dependent variable (outcome) is modeled as a linear combination of one or more independent variables (predictors). For example, in simple linear regression, the relationship is represented as: \\[Y = \\beta_0 + \\beta_1 X + \\epsilon,\\] where \\(Y\\) is the dependent variable, \\(X\\) is the independent variable, \\(\\beta_0\\) and \\(\\beta_1\\) are parameters to be estimated, and \\(\\epsilon\\) is the error term capturing randomness or unobserved factors. Linear regression serves as a foundation for much of applied data analysis because of its wide-ranging applications: Understanding Patterns in Data: Regression provides a framework to summarize and explore relationships between variables. It allows us to identify patterns such as trends or associations, which can guide further analysis or decision-making. Prediction: Beyond exploring relationships, regression is widely used for making predictions. For instance, given historical data, we can use a regression model to predict future outcomes like sales, prices, or demand. Building Blocks for Advanced Techniques: Linear regression is foundational for many advanced statistical and machine learning models, such as logistic regression, ridge regression, and neural networks. Mastering linear regression equips you with the skills to tackle more complex methods. Regression and Causality: A Crucial Distinction It’s essential to remember that regression alone does not establish causation. For instance, a regression model might show a strong association between advertising and sales, but this does not prove that advertising directly causes sales to increase. Other factors—such as seasonality, market trends, or unobserved variables—could also influence the results. Establishing causality requires additional steps, such as controlled experiments, instrumental variable techniques, or careful observational study designs. As we work through the details of linear regression, we’ll revisit this distinction and highlight scenarios where causality might or might not be inferred. What is an Estimator? At the heart of regression lies the process of estimation—the act of using data to determine the unknown characteristics of a population or model. An estimator is a mathematical rule or formula used to calculate an estimate of an unknown quantity based on observed data. For example, when we calculate the average height of a sample to estimate the average height of a population, the sample mean is the estimator. In the context of regression, the quantities we typically estimate are: Parameters: Fixed, unknown values that describe the relationship between variables (e.g., coefficients in a regression equation). Estimating parameters → Parametric models (finite parameters, e.g., coefficients in regression). Functions: Unknown relationships or patterns in the data, often modeled without assuming a fixed functional form. Estimating functions → Non-parametric models (focus on shapes or trends, not a fixed number of parameters). Types of Estimators To better understand the estimation process, let’s introduce two broad categories of estimators that we’ll work with: Parametric Estimators Parametric estimation focuses on a finite set of parameters that define a model. For example, in a simple linear regression: \\[Y = \\beta_0 + \\beta_1 X + \\epsilon,\\] the task is to estimate the parameters \\(\\beta_0\\) (intercept) and \\(\\beta_1\\) (slope). Parametric estimators rely on specific assumptions about the form of the model (e.g., linearity) and the distribution of the error term (e.g., normality). Non-Parametric Estimators Non-parametric estimation avoids assuming a specific functional form for the relationship between variables. Instead, it focuses on estimating patterns or trends directly from the data. For example, using a scatterplot smoothing technique to visualize how sales vary with advertising spend without imposing a linear or quadratic relationship. These two categories reflect a fundamental trade-off in statistical analysis: parametric models are often simpler and more interpretable but require strong assumptions, while non-parametric models are more flexible but may require more data and computational resources. Desirable Properties of Estimators Regardless of whether we are estimating parameters or functions, we want our estimators to possess certain desirable properties. Think of these as the “golden standards” that help us judge whether an estimator is reliable: Unbiasedness An estimator is unbiased if it hits the true value of the parameter, on average, over repeated samples. Mathematically: \\[E[\\hat{\\beta}] = \\beta.\\] This means that, across multiple samples, the estimator does not systematically overestimate or underestimate the true parameter. Consistency Consistency ensures that as the sample size increases, the estimator converges to the true value of the parameter. Formally: \\[plim\\ \\hat{\\beta_n} = \\beta.\\] This property relies on the Law of Large Numbers, which guarantees that larger samples reduce random fluctuations, leading to more precise estimates. Efficiency Among all unbiased estimators, an efficient estimator has the smallest variance. The Ordinary Least Squares method is efficient because it is the Best Linear Unbiased Estimator (BLUE) under the Gauss-Markov Theorem. For estimators that meet specific distributional assumptions (e.g., normality), Maximum Likelihood Estimators (MLE) are asymptotically efficient, meaning they achieve the lowest possible variance as the sample size grows. Why These Properties Matter Understanding these properties is crucial because they ensure that the methods we use for estimation are reliable, precise, and robust. Whether we are estimating coefficients in a regression model or uncovering a complex pattern in the data, these properties provide the foundation for statistical inference and decision-making. Now that we’ve established what estimators are, the types we’ll encounter, and their desirable properties, we can move on to understanding how these concepts apply specifically to the Ordinary Least Squares method—the backbone of linear regression. Reference Table Estimator Key Assumptions Strengths Limitations Ordinary Least Squares Errors are independent, identically distributed (i.i.d.) with mean 0 and constant variance. Linear relationship between predictors and response. Simple, well-understood method. Minimizes residual sum of squares (easy to interpret coefficients). Sensitive to outliers and violations of normality. Can perform poorly if predictors are highly correlated (multicollinearity). Generalized Least Squares Errors have a known correlation structure or heteroscedasticity structure that can be modeled. Handles correlated or non-constant-variance errors. More flexible than OLS when noise structure is known. Requires specifying (or estimating) the error covariance structure. Misspecification can lead to biased estimates. Maximum Likelihood Underlying probability distribution (e.g., normal) must be specified correctly. Provides a general framework for estimating parameters under well-defined probability models. Can extend to complex likelihoods. Highly sensitive to model misspecification. May require more computation than OLS or GLS. Penalized (Regularized) Estimators Coefficients assumed to be shrinkable; model typically allows coefficient penalization. Controls overfitting via regularization. Handles high-dimensional data or many predictors. Can perform feature selection (e.g., Lasso). Requires choosing tuning parameter(s) (e.g., λ). Interpretation of coefficients becomes less straightforward. Robust Estimators Less sensitive to heavy-tailed or outlier-prone distributions (weaker assumptions on the error structure). Resistant to large deviations or outliers in data. Often maintains good performance under mild model misspecifications. Less efficient if errors are truly normal. Choice of robust method and tuning can be subjective. Partial Least Squares Predictors may be highly correlated; dimension reduction is desired. Simultaneously reduces dimensionality and fits regression. Works well with collinear, high-dimensional data. Can be harder to interpret than OLS (latent components instead of original predictors). Requires choosing the number of components. "],["ordinary-least-squares.html", "5.1 Ordinary Least Squares", " 5.1 Ordinary Least Squares Ordinary Least Squares (OLS) is the backbone of statistical modeling, a method so foundational that it often serves as the starting point for understanding data relationships. Whether predicting sales, estimating economic trends, or uncovering patterns in scientific research, OLS remains a critical tool. Its appeal lies in simplicity: OLS models the relationship between a dependent variable and one or more predictors by minimizing the squared differences between observed and predicted values. Why OLS Works: Linear and Nonlinear Relationships OLS rests on the Conditional Expectation Function (CEF), \\(E[Y | X]\\), which describes the expected value of \\(Y\\) given \\(X\\). Regression shines in two key scenarios: Perfect Fit (Linear CEF): If \\(E[Y_i | X_{1i}, \\dots, X_{Ki}] = a + \\sum_{k=1}^K b_k X_{ki}\\), the regression of \\(Y_i\\) on \\(X_{1i}, \\dots, X_{Ki}\\) exactly equals the CEF. In other words, the regression gives the true average relationship between \\(Y\\) and \\(X\\). If the true relationship is linear, regression delivers the exact CEF. For instance, imagine you’re estimating the relationship between advertising spend and sales revenue. If the true impact is linear, OLS will perfectly capture it. Approximation (Nonlinear CEF): If \\(E[Y_i | X_{1i}, \\dots, X_{Ki}]\\) is nonlinear, OLS provides the best linear approximation to this relationship. Specifically, it minimizes the expected squared deviation between the linear regression line and the nonlinear CEF. For example, the effect of advertising diminishes at higher spending levels? OLS still works, providing the best linear approximation to this nonlinear relationship by minimizing the squared deviations between predictions and the true (but unknown) CEF. In other words, regression is not just a tool for “linear” relationships—it’s a workhorse that adapts remarkably well to messy, real-world data. 5.1.1 Simple Regression (Basic) Model The simplest form of regression is a straight line: \\[ Y_i = \\beta_0 + \\beta_1 X_i + \\epsilon_i \\] where \\(Y_i\\): The dependent variable or outcome we’re trying to predict (e.g., sales, temperature). \\(X_i\\): The independent variable or predictor (e.g., advertising spend, time). \\(\\beta_0\\): The intercept—where the line crosses the \\(Y\\)-axis when \\(X = 0\\). \\(\\beta_1\\): The slope, representing the change in \\(Y\\) for a one-unit increase in \\(X\\). \\(\\epsilon_i\\): The error term, accounting for random factors that \\(X\\) cannot explain. Assumptions About the Error Term (\\(\\epsilon_i\\)): \\[ \\begin{aligned} E(\\epsilon_i) &amp;= 0 \\\\ \\text{Var}(\\epsilon_i) &amp;= \\sigma^2 \\\\ \\text{Cov}(\\epsilon_i, \\epsilon_j) &amp;= 0 \\quad \\text{for all } i \\neq j \\end{aligned} \\] Since \\(\\epsilon_i\\) is random, \\(Y_i\\) is also random: \\[ \\begin{aligned} E(Y_i) &amp;= E(\\beta_0 + \\beta_1 X_i + \\epsilon_i) \\\\ &amp;= \\beta_0 + \\beta_1 X_i \\end{aligned} \\] \\[ \\begin{aligned} \\text{Var}(Y_i) &amp;= \\text{Var}(\\beta_0 + \\beta_1 X_i + \\epsilon_i) \\\\ &amp;= \\text{Var}(\\epsilon_i) \\\\ &amp;= \\sigma^2 \\end{aligned} \\] Since \\(\\text{Cov}(\\epsilon_i, \\epsilon_j) = 0\\), the outcomes across observations are independent. Hence, \\(Y_i\\) and \\(Y_j\\) are uncorrelated as well, conditioned on the \\(X\\)’s. 5.1.1.1 Estimation in Ordinary Least Squares The goal of OLS is to estimate the regression parameters (\\(\\beta_0\\), \\(\\beta_1\\)) that best describe the relationship between the dependent variable \\(Y\\) and the independent variable \\(X\\). To achieve this, we minimize the sum of squared deviations between observed values of \\(Y_i\\) and their expected values predicted by the model. The deviation of an observed value \\(Y_i\\) from its expected value, based on the regression model, is: \\[ Y_i - E(Y_i) = Y_i - (\\beta_0 + \\beta_1 X_i). \\] This deviation represents the error in prediction for the \\(i\\)-th observation. To ensure that the errors don’t cancel each other out and to prioritize larger deviations, we consider the squared deviations. The sum of squared deviations, denoted by \\(Q\\), is defined as: \\[ Q = \\sum_{i=1}^{n} (Y_i - \\beta_0 - \\beta_1 X_i)^2. \\] The goal of OLS is to find the values of \\(\\beta_0\\) and \\(\\beta_1\\) that minimize \\(Q\\). These values are called the OLS estimators. To minimize \\(Q\\), we take partial derivatives with respect to \\(\\beta_0\\) and \\(\\beta_1\\), set them to zero, and solve the resulting system of equations. After simplifying, the estimators for the slope (\\(b_1\\)) and intercept (\\(b_0\\)) are obtained as follows: Slope (\\(b_1\\)): \\[ b_1 = \\frac{\\sum_{i=1}^{n} (X_i - \\bar{X})(Y_i - \\bar{Y})}{\\sum_{i=1}^{n} (X_i - \\bar{X})^2}. \\] Here, \\(\\bar{X}\\) and \\(\\bar{Y}\\) represent the means of \\(X\\) and \\(Y\\), respectively. This formula reveals that the slope is proportional to the covariance between \\(X\\) and \\(Y\\), scaled by the variance of \\(X\\). Intercept (\\(b_0\\)): \\[ b_0 = \\frac{1}{n} \\left( \\sum_{i=1}^{n} Y_i - b_1 \\sum_{i=1}^{n} X_i \\right) = \\bar{Y} - b_1 \\bar{X}. \\] The intercept is determined by aligning the regression line with the center of the data. Intuition Behind the Estimators \\(b_1\\) (Slope): This measures the average change in \\(Y\\) for a one-unit increase in \\(X\\). The formula uses deviations from the mean to ensure that the relationship captures the joint variability of \\(X\\) and \\(Y\\). \\(b_0\\) (Intercept): This ensures that the regression line passes through the mean of the data points \\((\\bar{X}, \\bar{Y})\\), anchoring the model in the center of the observed data. Equivalently, we can also write these parameters in terms of covariances. The covariance between two variables is defined as: \\[ \\text{Cov}(X_i, Y_i) = E[(X_i - E[X_i])(Y_i - E[Y_i])] \\] Properties of Covariance: \\(\\text{Cov}(X_i, X_i) = \\sigma^2_X\\) If \\(E(X_i) = 0\\) or \\(E(Y_i) = 0\\), then \\(\\text{Cov}(X_i, Y_i) = E[X_i Y_i]\\) For \\(W_i = a + b X_i\\) and \\(Z_i = c + d Y_i\\), \\(\\text{Cov}(W_i, Z_i) = bd \\cdot \\text{Cov}(X_i, Y_i)\\) For a bivariate regression, the slope \\(\\beta\\) in a bivariate regression is given by: \\[ \\beta = \\frac{\\text{Cov}(Y_i, X_i)}{\\text{Var}(X_i)} \\] For a multivariate case, the slope for \\(X_k\\) is: \\[ \\beta_k = \\frac{\\text{Cov}(Y_i, \\tilde{X}_{ki})}{\\text{Var}(\\tilde{X}_{ki})} \\] Where \\(\\tilde{X}_{ki}\\) represents the residual from a regression of \\(X_{ki}\\) on the \\(K-1\\) other covariates in the model. The intercept is: \\[ \\beta_0 = E[Y_i] - \\beta_1 E(X_i) \\] Note: OLS does not require the assumption of a specific distribution for the variables. Its robustness is based on the minimization of squared errors (i.e., no distributional assumptions). 5.1.1.2 Properties of Least Squares Estimators The properties of the Ordinary Least Squares (OLS) estimators (\\(b_0\\) and \\(b_1\\)) are derived based on their statistical behavior. These properties provide insights into the accuracy, variability, and reliability of the estimates. 5.1.1.2.1 Expectation of the OLS Estimators The OLS estimators \\(b_0\\) (intercept) and \\(b_1\\) (slope) are unbiased. This means their expected values equal the true population parameters: \\[ \\begin{aligned} E(b_1) &amp;= \\beta_1, \\\\ E(b_0) &amp;= E(\\bar{Y}) - \\bar{X}\\beta_1. \\end{aligned} \\] Since the expected value of the sample mean of \\(Y\\), \\(E(\\bar{Y})\\), is: \\[ E(\\bar{Y}) = \\beta_0 + \\beta_1 \\bar{X}, \\] the expected value of \\(b_0\\) simplifies to: \\[ E(b_0) = \\beta_0. \\] Thus, \\(b_0\\) and \\(b_1\\) are unbiased estimators of their respective population parameters \\(\\beta_0\\) and \\(\\beta_1\\). 5.1.1.2.2 Variance of the OLS Estimators The variability of the OLS estimators depends on the spread of the predictor variable \\(X\\) and the error variance \\(\\sigma^2\\). The variances are given by: Variance of \\(b_1\\) (Slope): \\[ \\text{Var}(b_1) = \\frac{\\sigma^2}{\\sum_{i=1}^{n} (X_i - \\bar{X})^2}. \\] Variance of \\(b_0\\) (Intercept): \\[ \\text{Var}(b_0) = \\sigma^2 \\left( \\frac{1}{n} + \\frac{\\bar{X}^2}{\\sum_{i=1}^{n} (X_i - \\bar{X})^2} \\right). \\] These formulas highlight that: \\(\\text{Var}(b_1) \\to 0\\) as the number of observations increases, provided \\(X_i\\) values are distributed around their mean \\(\\bar{X}\\). \\(\\text{Var}(b_0) \\to 0\\) as \\(n\\) increases, assuming \\(X_i\\) values are appropriately selected (i.e., not all clustered near the mean). 5.1.1.3 Mean Square Error (MSE) The Mean Square Error (MSE) quantifies the average squared residual (error) in the model: \\[ MSE = \\frac{SSE}{n-2} = \\frac{\\sum_{i=1}^{n} e_i^2}{n-2} = \\frac{\\sum_{i=1}^{n} (Y_i - \\hat{Y}_i)^2}{n-2}, \\] where \\(SSE\\) is the Sum of Squared Errors and \\(n-2\\) represents the degrees of freedom for a simple linear regression model (two parameters estimated: \\(\\beta_0\\) and \\(\\beta_1\\)). The expected value of the MSE equals the error variance (i.e., unbiased Estimator of MSE:): \\[ E(MSE) = \\sigma^2. \\] 5.1.1.4 Estimating Variance of the OLS Coefficients The sample-based estimates of the variances of \\(b_0\\) and \\(b_1\\) are expressed as follows: Estimated Variance of \\(b_1\\) (Slope): \\[ s^2(b_1) = \\widehat{\\text{Var}}(b_1) = \\frac{MSE}{\\sum_{i=1}^{n} (X_i - \\bar{X})^2}. \\] Estimated Variance of \\(b_0\\) (Intercept): \\[ s^2(b_0) = \\widehat{\\text{Var}}(b_0) = MSE \\left( \\frac{1}{n} + \\frac{\\bar{X}^2}{\\sum_{i=1}^{n} (X_i - \\bar{X})^2} \\right). \\] These estimates rely on the MSE to approximate \\(\\sigma^2\\). The variance estimates are unbiased: \\[ \\begin{aligned} E(s^2(b_1)) &amp;= \\text{Var}(b_1), \\\\ E(s^2(b_0)) &amp;= \\text{Var}(b_0). \\end{aligned} \\] Implications of These Properties Unbiasedness: The unbiased nature of \\(b_0\\) and \\(b_1\\) ensures that, on average, the regression model accurately reflects the true relationship in the population. Decreasing Variance: As the sample size \\(n\\) increases or as the spread of \\(X_i\\) values grows, the variances of \\(b_0\\) and \\(b_1\\) decrease, leading to more precise estimates. Error Estimation with MSE: MSE provides a reliable estimate of the error variance \\(\\sigma^2\\), which feeds directly into assessing the reliability of \\(b_0\\) and \\(b_1\\). 5.1.1.5 Residuals in Ordinary Least Squares Residuals are the differences between observed values (\\(Y_i\\)) and their predicted counterparts (\\(\\hat{Y}_i\\)). They play a central role in assessing model fit and ensuring the assumptions of OLS are met. The residual for the \\(i\\)-th observation is defined as: \\[ e_i = Y_i - \\hat{Y}_i = Y_i - (b_0 + b_1 X_i), \\] where: \\(e_i\\): Residual for the \\(i\\)-th observation. \\(\\hat{Y}_i\\): Predicted value based on the regression model. \\(Y_i\\): Actual observed value. Residuals estimate the unobservable error terms \\(\\epsilon_i\\): \\(e_i\\) is an estimate of \\(\\epsilon_i = Y_i - E(Y_i)\\). \\(\\epsilon_i\\) is always unknown because we do not know the true values of \\(\\beta_0\\) and \\(\\beta_1\\). 5.1.1.5.1 Key Properties of Residuals Residuals exhibit several mathematical properties that align with the OLS estimation process: Sum of Residuals: The residuals sum to zero: \\[ \\sum_{i=1}^{n} e_i = 0. \\] This ensures that the regression line passes through the centroid of the data, \\((\\bar{X}, \\bar{Y})\\). Orthogonality of Residuals to Predictors: The residuals are orthogonal (uncorrelated) to the predictor variable \\(X\\): \\[ \\sum_{i=1}^{n} X_i e_i = 0. \\] This reflects the fact that the OLS minimizes the squared deviations of residuals along the \\(Y\\)-axis, not the \\(X\\)-axis. 5.1.1.5.2 Expected Values of Residuals The expected values of residuals reinforce the unbiased nature of OLS: Mean of Residuals: The residuals have an expected value of zero: \\[ E[e_i] = 0. \\] Orthogonality to Predictors and Fitted Values: Residuals are uncorrelated with both the predictor variables and the fitted values: \\[ \\begin{aligned} E[X_i e_i] &amp;= 0, \\\\ E[\\hat{Y}_i e_i] &amp;= 0. \\end{aligned} \\] These properties highlight that residuals do not contain systematic information about the predictors or the fitted values, reinforcing the idea that the model has captured the underlying relationship effectively. 5.1.1.5.3 Practical Importance of Residuals Model Diagnostics: Residuals are analyzed to check the assumptions of OLS, including linearity, homoscedasticity (constant variance), and independence of errors. Patterns in residual plots can signal issues such as nonlinearity or heteroscedasticity. Goodness-of-Fit: The sum of squared residuals, \\(\\sum e_i^2\\), measures the total unexplained variation in \\(Y\\). A smaller sum indicates a better fit. Influence Analysis: Large residuals may indicate outliers or influential points that disproportionately affect the regression line. 5.1.1.6 Inference in Ordinary Least Squares Inference allows us to make probabilistic statements about the regression parameters (\\(\\beta_0\\), \\(\\beta_1\\)) and predictions (\\(Y_h\\)). To perform valid inference, certain assumptions about the distribution of errors are necessary. Normality Assumption OLS estimation itself does not require the assumption of normality. However, to conduct hypothesis tests or construct confidence intervals for \\(\\beta_0\\), \\(\\beta_1\\), and predictions, distributional assumptions are necessary. Inference on \\(\\beta_0\\) and \\(\\beta_1\\) is robust to moderate departures from normality, especially in large samples due to the Central Limit Theorem. Inference on predicted values, \\(Y_{pred}\\), is more sensitive to normality violations. When we assume a normal error model, the response variable \\(Y_i\\) is modeled as: \\[ Y_i \\sim N(\\beta_0 + \\beta_1 X_i, \\sigma^2), \\] where: \\(\\beta_0 + \\beta_1 X_i\\): Mean response \\(\\sigma^2\\): Variance of the errors Under this model, the sampling distributions of the OLS estimators, \\(b_0\\) and \\(b_1\\), can be derived. 5.1.1.6.1 Inference for \\(\\beta_1\\) (Slope) Under the normal error model: Sampling Distribution of \\(b_1\\): \\[ b_1 \\sim N\\left(\\beta_1, \\frac{\\sigma^2}{\\sum_{i=1}^{n} (X_i - \\bar{X})^2}\\right). \\] This indicates that \\(b_1\\) is an unbiased estimator of \\(\\beta_1\\) with variance proportional to \\(\\sigma^2\\). Test Statistic: \\[ t = \\frac{b_1 - \\beta_1}{s(b_1)} \\sim t_{n-2}, \\] where \\(s(b_1)\\) is the standard error of \\(b_1\\): \\[ s(b_1) = \\sqrt{\\frac{MSE}{\\sum_{i=1}^{n} (X_i - \\bar{X})^2}}. \\] Confidence Interval: A \\((1-\\alpha) 100\\%\\) confidence interval for \\(\\beta_1\\) is: \\[ b_1 \\pm t_{1-\\alpha/2; n-2} \\cdot s(b_1). \\] 5.1.1.6.2 Inference for \\(\\beta_0\\) (Intercept) Sampling Distribution of \\(b_0\\): Under the normal error model, the sampling distribution of \\(b_0\\) is: \\[ b_0 \\sim N\\left(\\beta_0, \\sigma^2 \\left(\\frac{1}{n} + \\frac{\\bar{X}^2}{\\sum_{i=1}^{n} (X_i - \\bar{X})^2}\\right)\\right). \\] Test Statistic: \\[ t = \\frac{b_0 - \\beta_0}{s(b_0)} \\sim t_{n-2}, \\] where \\(s(b_0)\\) is the standard error of \\(b_0\\): \\[ s(b_0) = \\sqrt{MSE \\left(\\frac{1}{n} + \\frac{\\bar{X}^2}{\\sum_{i=1}^{n} (X_i - \\bar{X})^2}\\right)}. \\] Confidence Interval: A \\((1-\\alpha) 100\\%\\) confidence interval for \\(\\beta_0\\) is: \\[ b_0 \\pm t_{1-\\alpha/2; n-2} \\cdot s(b_0). \\] 5.1.1.6.3 Mean Response In regression, we often estimate the mean response of the dependent variable \\(Y\\) for a given level of the predictor variable \\(X\\), denoted as \\(X_h\\). This estimation provides a predicted average outcome for a specific value of \\(X\\) based on the fitted regression model. Let \\(X_h\\) represent the level of \\(X\\) for which we want to estimate the mean response. The mean response when \\(X = X_h\\) is denoted as \\(E(Y_h)\\). A point estimator for \\(E(Y_h)\\) is \\(\\hat{Y}_h\\), which is the predicted value from the regression model: \\[ \\hat{Y}_h = b_0 + b_1 X_h. \\] The estimator \\(\\hat{Y}_h\\) is unbiased because its expected value equals the true mean response \\(E(Y_h)\\): \\[ \\begin{aligned} E(\\hat{Y}_h) &amp;= E(b_0 + b_1 X_h) \\\\ &amp;= \\beta_0 + \\beta_1 X_h \\\\ &amp;= E(Y_h). \\end{aligned} \\] Thus, \\(\\hat{Y}_h\\) provides a reliable estimate of the mean response at \\(X_h\\). The variance of \\(\\hat{Y}_h\\) reflects the uncertainty in the estimate of the mean response: \\[ \\begin{aligned} \\text{Var}(\\hat{Y}_h) &amp;= \\text{Var}(b_0 + b_1 X_h) \\quad\\text{(definition of }\\hat{Y}_h\\text{)}\\\\[6pt]&amp;= \\text{Var}\\bigl((\\bar{Y} - b_1 \\bar{X}) + b_1 X_h\\bigr)\\quad\\text{(since } b_0 = \\bar{Y} - b_1 \\bar{X}\\text{)}\\\\[6pt]&amp;= \\text{Var}\\bigl(\\bar{Y} + b_1(X_h - \\bar{X})\\bigr)\\quad\\text{(factor out } b_1\\text{)}\\\\[6pt]&amp;= \\text{Var}\\bigl(\\bar{Y} + b_1 (X_h - \\bar{X}) \\bigr) \\\\ &amp;= \\text{Var}(\\bar{Y}) + (X_h - \\bar{X})^2 \\text{Var}(b_1) + 2(X_h - \\bar{X}) \\text{Cov}(\\bar{Y}, b_1). \\end{aligned} \\] Since \\(\\text{Cov}(\\bar{Y}, b_1) = 0\\) (due to the independence of the errors, \\(\\epsilon_i\\)), the variance simplifies to: \\[ \\text{Var}(\\hat{Y}_h) = \\frac{\\sigma^2}{n} + (X_h - \\bar{X})^2 \\frac{\\sigma^2}{\\sum_{i=1}^{n} (X_i - \\bar{X})^2}. \\] This can also be expressed as: \\[ \\text{Var}(\\hat{Y}_h) = \\sigma^2 \\left( \\frac{1}{n} + \\frac{(X_h - \\bar{X})^2}{\\sum_{i=1}^{n} (X_i - \\bar{X})^2} \\right). \\] To estimate the variance of \\(\\hat{Y}_h\\), we replace \\(\\sigma^2\\) with \\(MSE\\), the mean squared error from the regression: \\[ s^2(\\hat{Y}_h) = MSE \\left( \\frac{1}{n} + \\frac{(X_h - \\bar{X})^2}{\\sum_{i=1}^{n} (X_i - \\bar{X})^2} \\right). \\] Under the normal error model, the sampling distribution of \\(\\hat{Y}_h\\) is: \\[ \\begin{aligned} \\hat{Y}_h &amp;\\sim N\\left(E(Y_h), \\text{Var}(\\hat{Y}_h)\\right), \\\\ \\frac{\\hat{Y}_h - E(Y_h)}{s(\\hat{Y}_h)} &amp;\\sim t_{n-2}. \\end{aligned} \\] This result follows because \\(\\hat{Y}_h\\) is a linear combination of normally distributed random variables, and its variance is estimated using \\(s^2(\\hat{Y}_h)\\). A \\(100(1-\\alpha)\\%\\) confidence interval for the mean response \\(E(Y_h)\\) is given by: \\[ \\hat{Y}_h \\pm t_{1-\\alpha/2; n-2} \\cdot s(\\hat{Y}_h), \\] where: \\(\\hat{Y}_h\\): Point estimate of the mean response, \\(s(\\hat{Y}_h)\\): Estimated standard error of the mean response, \\(t_{1-\\alpha/2; n-2}\\): Critical value from the \\(t\\)-distribution with \\(n-2\\) degrees of freedom. 5.1.1.6.4 Prediction of a New Observation When analyzing regression results, it is important to distinguish between: Estimating the mean response at a particular value of \\(X\\). Predicting an individual outcome for a particular value of \\(X\\). Mean Response vs. Individual Outcome Same Point Estimate The formula for both the estimated mean response and the predicted individual outcome at \\(X = X_h\\) is identical: \\[ \\hat{Y}_{pred} = \\hat{Y}_h = b_0 + b_1 X_h. \\] Different Variance Although the point estimates are the same, the level of uncertainty differs. When predicting an individual outcome, we must consider not only the uncertainty in estimating the mean response (\\(\\hat{Y}_h\\)) but also the additional random variation within the distribution of \\(Y\\). Therefore, prediction intervals (for individual outcomes) account for more uncertainty and are consequently wider than confidence intervals (for the mean response). To predict an individual outcome for a given \\(X_h\\), we combine the mean response with the random error: \\[ Y_{pred} = \\beta_0 + \\beta_1 X_h + \\epsilon. \\] Using the least squares predictor: \\[ \\hat{Y}_{pred} = b_0 + b_1 X_h, \\] since \\(E(\\epsilon) = 0\\). The variance of the predicted value for a new observation, \\(Y_{pred}\\), includes both: Variance of the estimated mean response: \\[ \\sigma^2 \\left( \\frac{1}{n} + \\frac{(X_h - \\bar{X})^2}{\\sum_{i=1}^{n} (X_i - \\bar{X})^2} \\right), \\] Variance of the error term, \\(\\epsilon\\), which is \\(\\sigma^2\\). Thus, the total variance is: \\[ \\begin{aligned} \\text{Var}(Y_{pred}) &amp;= \\text{Var}(b_0 + b_1 X_h + \\epsilon) \\\\ &amp;= \\text{Var}(b_0 + b_1 X_h) + \\text{Var}(\\epsilon) \\\\ &amp;= \\sigma^2 \\left( \\frac{1}{n} + \\frac{(X_h - \\bar{X})^2}{\\sum_{i=1}^{n} (X_i - \\bar{X})^2} \\right) + \\sigma^2 \\\\ &amp;= \\sigma^2 \\left( 1 + \\frac{1}{n} + \\frac{(X_h - \\bar{X})^2}{\\sum_{i=1}^{n} (X_i - \\bar{X})^2} \\right). \\end{aligned} \\] We estimate the variance of the prediction using \\(MSE\\), the mean squared error: \\[ s^2(pred) = MSE \\left( 1 + \\frac{1}{n} + \\frac{(X_h - \\bar{X})^2}{\\sum_{i=1}^{n} (X_i - \\bar{X})^2} \\right). \\] Under the normal error model, the standardized predicted value follows a \\(t\\)-distribution with \\(n-2\\) degrees of freedom: \\[ \\frac{Y_{pred} - \\hat{Y}_h}{s(pred)} \\sim t_{n-2}. \\] A \\(100(1-\\alpha)\\%\\) prediction interval for \\(Y_{pred}\\) is: \\[ \\hat{Y}_{pred} \\pm t_{1-\\alpha/2; n-2} \\cdot s(pred). \\] 5.1.1.6.5 Confidence Band In regression analysis, we often want to evaluate the uncertainty around the entire regression line, not just at a single value of the predictor variable \\(X\\). This is achieved using a confidence band, which provides a confidence interval for the mean response, \\(E(Y) = \\beta_0 + \\beta_1 X\\), over the entire range of \\(X\\) values. The Working-Hotelling confidence band is a method to construct simultaneous confidence intervals for the regression line. For a given \\(X_h\\), the confidence band is expressed as: \\[ \\hat{Y}_h \\pm W s(\\hat{Y}_h), \\] where: \\(W^2 = 2F_{1-\\alpha; 2, n-2}\\), \\(F_{1-\\alpha; 2, n-2}\\) is the critical value from the \\(F\\)-distribution with 2 and \\(n-2\\) degrees of freedom. \\(s(\\hat{Y}_h)\\) is the standard error of the estimated mean response at \\(X_h\\): \\[ s^2(\\hat{Y}_h) = MSE \\left( \\frac{1}{n} + \\frac{(X_h - \\bar{X})^2}{\\sum_{i=1}^{n} (X_i - \\bar{X})^2} \\right). \\] Key Properties of the Confidence Band Width of the Interval: The width of the confidence band changes with \\(X_h\\) because \\(s(\\hat{Y}_h)\\) depends on how far \\(X_h\\) is from the mean of \\(X\\) (\\(\\bar{X}\\)). The interval is narrowest at \\(X = \\bar{X}\\), where the variance of the estimated mean response is minimized. Shape of the Band: The boundaries of the confidence band form a hyperbolic shape around the regression line. This reflects the increasing uncertainty in the mean response as \\(X_h\\) moves farther from \\(\\bar{X}\\). Simultaneous Coverage: The Working-Hotelling band ensures that the true regression line \\(E(Y) = \\beta_0 + \\beta_1 X\\) lies within the band across all values of \\(X\\) with a specified confidence level (e.g., \\(95\\%\\)). 5.1.1.7 Analysis of Variance (ANOVA) in Regression ANOVA in regression decomposes the total variability in the response variable (\\(Y\\)) into components attributed to the regression model and residual error. In the context of regression, ANOVA provides a mechanism to assess the fit of the model and test hypotheses about the relationship between \\(X\\) and \\(Y\\). The corrected Total Sum of Squares (SSTO) quantifies the total variation in \\(Y\\): \\[ SSTO = \\sum_{i=1}^n (Y_i - \\bar{Y})^2, \\] where \\(\\bar{Y}\\) is the mean of the response variable. The term “corrected” refers to the fact that the sum of squares is calculated relative to the mean (i.e., the uncorrected total sum of squares is given by \\(\\sum Y_i^2\\)) Using the fitted regression model \\(\\hat{Y}_i = b_0 + b_1 X_i\\), we estimate the conditional mean of \\(Y\\) at \\(X_i\\). The total sum of squares can be decomposed as: \\[ \\begin{aligned} \\sum_{i=1}^n (Y_i - \\bar{Y})^2 &amp;= \\sum_{i=1}^n (Y_i - \\hat{Y}_i + \\hat{Y}_i - \\bar{Y})^2 \\\\ &amp;= \\sum_{i=1}^n (Y_i - \\hat{Y}_i)^2 + \\sum_{i=1}^n (\\hat{Y}_i - \\bar{Y})^2 + 2 \\sum_{i=1}^n (Y_i - \\hat{Y}_i)(\\hat{Y}_i - \\bar{Y}) \\\\ &amp;= \\sum_{i=1}^n (Y_i - \\hat{Y}_i)^2 + \\sum_{i=1}^n (\\hat{Y}_i - \\bar{Y})^2 \\end{aligned} \\] The cross-product term is zero, as shown below. This decomposition simplifies to: \\[ SSTO = SSE + SSR, \\] where: \\(SSE = \\sum_{i=1}^n (Y_i - \\hat{Y}_i)^2\\): Error Sum of Squares (variation unexplained by the model). \\(SSR = \\sum_{i=1}^n (\\hat{Y}_i - \\bar{Y})^2\\): Regression Sum of Squares (variation explained by the model), which measure how the conditional mean varies about a central value. Degrees of freedom are partitioned as: \\[ \\begin{aligned} SSTO &amp;= SSR + SSE \\\\ (n-1) &amp;= (1) + (n-2) \\\\ \\end{aligned} \\] To confirm that the cross-product term is zero: \\[ \\begin{aligned} \\sum_{i=1}^n (Y_i - \\hat{Y}_i)(\\hat{Y}_i - \\bar{Y}) &amp;= \\sum_{i=1}^{n}(Y_i - \\bar{Y} -b_1 (X_i - \\bar{X}))(\\bar{Y} + b_1 (X_i - \\bar{X})-\\bar{Y}) \\quad \\text{(Expand } Y_i - \\hat{Y}_i \\text{ and } \\hat{Y}_i - \\bar{Y}\\text{)} \\\\ &amp;=\\sum_{i=1}^{n}(Y_i - \\bar{Y} -b_1 (X_i - \\bar{X}))( b_1 (X_i - \\bar{X})) \\\\ &amp;= b_1 \\sum_{i=1}^n (Y_i - \\bar{Y})(X_i - \\bar{X}) - b_1^2 \\sum_{i=1}^n (X_i - \\bar{X})^2 \\quad \\text{(Distribute terms in the product)} \\\\ &amp;= b_1 \\frac{\\sum_{i=1}^n (Y_i - \\bar{Y})(X_i - \\bar{X})}{\\sum_{i=1}^n (X_i - \\bar{X})^2} \\sum_{i=1}^n (X_i - \\bar{X})^2 - b_1^2 \\sum_{i=1}^n (X_i - \\bar{X})^2 \\quad \\text{(Substitute } b_1 \\text{ definition)} \\\\ &amp;= b_1^2 \\sum_{i=1}^n (X_i - \\bar{X})^2 - b_1^2 \\sum_{i=1}^n (X_i - \\bar{X})^2 \\\\ &amp;= 0 \\end{aligned} \\] The ANOVA table summarizes the partitioning of variability: Source of Variation Sum of Squares df Mean Square \\(F\\) Statistic Regression (Model) \\(SSR\\) \\(1\\) \\(MSR = \\frac{SSR}{1}\\) \\(F = \\frac{MSR}{MSE}\\) Error \\(SSE\\) \\(n-2\\) \\(MSE = \\frac{SSE}{n-2}\\) Total (Corrected) \\(SSTO\\) \\(n-1\\) The expected values of the mean squares are: \\[ \\begin{aligned} E(MSE) &amp;= \\sigma^2, \\\\ E(MSR) &amp;= \\sigma^2 + \\beta_1^2 \\sum_{i=1}^n (X_i - \\bar{X})^2. \\end{aligned} \\] If \\(\\beta_1 = 0\\): The regression model does not explain any variation in \\(Y\\) beyond the mean, and \\(E(MSR) = E(MSE) = \\sigma^2\\). This condition corresponds to the null hypothesis, \\(H_0: \\beta_1 = 0\\). If \\(\\beta_1 \\neq 0\\): The regression model explains some variation in \\(Y\\), and \\(E(MSR) &gt; E(MSE)\\). The additional term \\(\\beta_1^2 \\sum_{i=1}^{n} (X_i - \\bar{X})^2\\) represents the variance explained by the predictor \\(X\\). The difference between \\(E(MSR)\\) and \\(E(MSE)\\) allows us to infer whether \\(\\beta_1 \\neq 0\\) by comparing their ratio. Assuming the errors \\(\\epsilon_i\\) are independent and identically distributed as \\(N(0, \\sigma^2)\\), and under the null hypothesis \\(H_0: \\beta_1 = 0\\), we have: The scaled \\(MSE\\) follows a chi-square distribution with \\(n-2\\) degrees of freedom: \\[ \\frac{MSE}{\\sigma^2} \\sim \\chi_{n-2}^2. \\] The scaled \\(MSR\\) follows a chi-square distribution with \\(1\\) degree of freedom: \\[ \\frac{MSR}{\\sigma^2} \\sim \\chi_{1}^2. \\] These two chi-square random variables are independent. The ratio of two independent chi-square random variables, scaled by their respective degrees of freedom, follows an \\(F\\)-distribution. Therefore, under \\(H_0\\): \\[ F = \\frac{MSR}{MSE} \\sim F_{1, n-2}. \\] The \\(F\\)-statistic tests whether the regression model provides a significant improvement over the null model (constant \\(E(Y)\\)). The hypotheses for the \\(F\\)-test are: Null Hypothesis (\\(H_0\\)): \\(\\beta_1 = 0\\) (no relationship between \\(X\\) and \\(Y\\)). Alternative Hypothesis (\\(H_a\\)): \\(\\beta_1 \\neq 0\\) (a significant relationship exists between \\(X\\) and \\(Y\\)). The rejection rule for \\(H_0\\) at significance level \\(\\alpha\\) is: \\[ F &gt; F_{1-\\alpha;1,n-2}, \\] where \\(F_{1-\\alpha;1,n-2}\\) is the critical value from the \\(F\\)-distribution with \\(1\\) and \\(n-2\\) degrees of freedom. If \\(F \\leq F_{1-\\alpha;1,n-2}\\): Fail to reject \\(H_0\\). There is insufficient evidence to conclude that \\(X\\) significantly explains variation in \\(Y\\). If \\(F &gt; F_{1-\\alpha;1,n-2}\\): Reject \\(H_0\\). There is significant evidence that \\(X\\) explains some of the variation in \\(Y\\). 5.1.1.8 Coefficient of Determination (\\(R^2\\)) The Coefficient of Determination (\\(R^2\\)) measures how well the linear regression model accounts for the variability in the response variable \\(Y\\). It is defined as: \\[ R^2 = \\frac{SSR}{SSTO} = 1 - \\frac{SSE}{SSTO}, \\] where: \\(SSR\\): Regression Sum of Squares (variation explained by the model). \\(SSTO\\): Total Sum of Squares (total variation in \\(Y\\) about its mean). \\(SSE\\): Error Sum of Squares (variation unexplained by the model). Properties of \\(R^2\\) Range: \\[ 0 \\leq R^2 \\leq 1. \\] \\(R^2 = 0\\): The model explains none of the variability in \\(Y\\) (e.g., \\(\\beta_1 = 0\\)). \\(R^2 = 1\\): The model explains all the variability in \\(Y\\) (perfect fit). Proportionate Reduction in Variance: \\(R^2\\) represents the proportionate reduction in the total variation of \\(Y\\) after fitting the model. It quantifies how much better the model predicts \\(Y\\) compared to simply using \\(\\bar{Y}\\). Potential Misinterpretation: It is not really correct to say \\(R^2\\) is the “variation in \\(Y\\) explained by \\(X\\).” The term “variation explained” assumes a causative or deterministic explanation, which is not always correct. For example: \\(R^2\\) shows how much variance in \\(Y\\) is accounted for by the regression model, but it does not imply causation. In cases with confounding variables or spurious correlations, \\(R^2\\) can still be high, even if there’s no direct causal link between \\(X\\) and \\(Y\\). For simple linear regression, \\(R^2\\) is the square of the Pearson correlation coefficient, \\(r\\): \\[ R^2 = (r)^2, \\] where: \\(r = \\text{corr}(X, Y)\\) is the sample correlation coefficient. The relationship between \\(b_1\\) (the slope of the regression line) and \\(r\\) is given by: \\[ b_1 = \\left(\\frac{\\sum_{i=1}^n (Y_i - \\bar{Y})^2}{\\sum_{i=1}^n (X_i - \\bar{X})^2}\\right)^{1/2}. \\] Additionally, \\(r\\) can be expressed as: \\[ r = \\frac{s_y}{s_x} \\cdot r, \\] where \\(s_y\\) and \\(s_x\\) are the sample standard deviations of \\(Y\\) and \\(X\\), respectively. 5.1.1.9 Lack of Fit in Regression The lack of fit test evaluates whether the chosen regression model adequately captures the relationship between the predictor variable \\(X\\) and the response variable \\(Y\\). When there are repeated observations at specific values of \\(X\\), we can partition the Error Sum of Squares (\\(SSE\\)) into two components: Pure Error Lack of Fit. Given the observations: \\(Y_{ij}\\): The \\(j\\)-th replicate for the \\(i\\)-th distinct value of \\(X\\), \\(Y_{11}, Y_{21}, \\dots, Y_{n_1, 1}\\): \\(n_1\\) repeated observations of \\(X_1\\) \\(Y_{1c}, Y_{2c}, \\dots, Y_{n_c,c}\\): \\(n_c\\) repeated observations of \\(X_c\\) \\(\\bar{Y}_j\\): The mean response for replicates at \\(X_j\\), \\(\\hat{Y}_{ij}\\): The predicted value from the regression model for \\(X_j\\), the Error Sum of Squares (\\(SSE\\)) can be decomposed as: \\[ \\begin{aligned} \\sum_{i} \\sum_{j} (Y_{ij} - \\hat{Y}_{ij})^2 &amp;= \\sum_{i} \\sum_{j} (Y_{ij} - \\bar{Y}_j + \\bar{Y}_j - \\hat{Y}_{ij})^2 \\\\ &amp;= \\sum_{i} \\sum_{j} (Y_{ij} - \\bar{Y}_j)^2 + \\sum_{j} n_j (\\bar{Y}_j - \\hat{Y}_{ij})^2 + \\text{cross product term} \\\\ &amp;= \\sum_{i} \\sum_{j} (Y_{ij} - \\bar{Y}_j)^2 + \\sum_{j} n_j (\\bar{Y}_j - \\hat{Y}_{ij})^2 \\end{aligned} \\] The cross product term is zero because the deviations within replicates and the deviations between replicates are orthogonal. This simplifies to: \\[ SSE = SSPE + SSLF, \\] where: \\(SSPE\\) (Pure Error Sum of Squares): Variation within replicates for the same \\(X_j\\), reflecting natural variability in the response. Degrees of freedom: \\(df_{pe} = n - c\\), where \\(n\\) is the total number of observations, and \\(c\\) is the number of distinct \\(X\\) values. \\(SSLF\\) (Lack of Fit Sum of Squares): Variation between the replicate means \\(\\bar{Y}_j\\) and the model-predicted values \\(\\hat{Y}_{ij}\\). If SSLF is large, it suggests the model may not adequately describe the relationship between \\(X\\) and \\(Y\\). Degrees of freedom: \\(df_{lf} = c - 2\\), where 2 accounts for the parameters in the linear regression model (\\(\\beta_0\\) and \\(\\beta_1\\)). Mean Square for Pure Error (MSPE): \\[ MSPE = \\frac{SSPE}{df_{pe}} = \\frac{SSPE}{n-c}. \\] Mean Square for Lack of Fit (MSLF): \\[ MSLF = \\frac{SSLF}{df_{lf}} = \\frac{SSLF}{c-2}. \\] 5.1.1.9.1 The F-Test for Lack of Fit The F-test for lack of fit evaluates whether the chosen regression model adequately captures the relationship between the predictor variable \\(X\\) and the response variable \\(Y\\). Specifically, it tests whether any systematic deviations from the model exist that are not accounted for by random error. Null Hypothesis (\\(H_0\\)): The regression model is adequate: \\[ H_0: Y_{ij} = \\beta_0 + \\beta_1 X_i + \\epsilon_{ij}, \\quad \\epsilon_{ij} \\sim \\text{i.i.d. } N(0, \\sigma^2). \\] Alternative Hypothesis (\\(H_a\\)): The regression model is not adequate and includes an additional function \\(f(X_i, Z_1, \\dots)\\) to account for the lack of fit: \\[ H_a: Y_{ij} = \\alpha_0 + \\alpha_1 X_i + f(X_i, Z_1, \\dots) + \\epsilon_{ij}^*, \\quad \\epsilon_{ij}^* \\sim \\text{i.i.d. } N(0, \\sigma^2). \\] Expected Mean Squares The expected Mean Square for Pure Error (MSPE) is the same under both \\(H_0\\) and \\(H_a\\): \\[ E(MSPE) = \\sigma^2. \\] The expected Mean Square for Lack of Fit (MSLF) depends on whether \\(H_0\\) is true: Under \\(H_0\\) (model is adequate): \\[ E(MSLF) = \\sigma^2. \\] Under \\(H_a\\) (model is not adequate): \\[ E(MSLF) = \\sigma^2 + \\frac{\\sum n_j f(X_i, Z_1, \\dots)^2}{n-2}. \\] The test statistic for the lack-of-fit test is: \\[ F = \\frac{MSLF}{MSPE}, \\] where: \\(MSLF = \\frac{SSLF}{c-2}\\), and \\(SSLF\\) is the Lack of Fit Sum of Squares. \\(MSPE = \\frac{SSPE}{n-c}\\), and \\(SSPE\\) is the Pure Error Sum of Squares. Under \\(H_0\\), the \\(F\\)-statistic follows an \\(F\\)-distribution: \\[ F \\sim F_{c-2, n-c}. \\] Decision Rule Reject \\(H_0\\) at significance level \\(\\alpha\\) if: \\[ F &gt; F_{1-\\alpha; c-2, n-c}. \\] Failing to reject \\(H_0\\): Indicates that there is no evidence of lack of fit. Does not imply the model is “true,” but it suggests that the model provides a reasonable approximation to the true relationship. To summarize, when repeat observations exist at some levels of \\(X\\), the Error Sum of Squares (SSE) can be further partitioned into Lack of Fit (SSLF) and Pure Error (SSPE). This leads to an extended ANOVA table: Source of Variation Sum of Squares df Mean Square F Statistic Regression SSR \\(1\\) \\(MSR = \\frac{SSR}{1}\\) \\(F = \\frac{MSR}{MSE}\\) Error SSE \\(n-2\\) \\(MSE = \\frac{SSE}{n-2}\\) Lack of fit SSLF \\(c-2\\) \\(MSLF = \\frac{SSLF}{c-2}\\) \\(F = \\frac{MSLF}{MSPE}\\) Pure Error SSPE \\(n-c\\) \\(MSPE = \\frac{SSPE}{n-c}\\) Total (Corrected) SSTO \\(n-1\\) Repeat observations have important implications for the coefficient of determination (\\(R^2\\)): \\(R^2\\) Can’t Attain 1 with Repeat Observations: With repeat observations, \\(SSE\\) (Error Sum of Squares) cannot be reduced to 0 because \\(SSPE &gt; 0\\) (variability within replicates). Maximum \\(R^2\\): The maximum attainable \\(R^2\\) in the presence of repeat observations is: \\[ R^2_{\\text{max}} = \\frac{SSTO - SSPE}{SSTO}. \\] Importance of Repeat Observations: Not all levels of \\(X\\) need repeat observations, but their presence enables the separation of pure error from lack of fit, making the \\(F\\)-test for lack of fit possible. Estimation of \\(\\sigma^2\\) with Repeat Observations Use of MSE: When \\(H_0\\) is appropriate (the model fits well), \\(MSE\\) is typically used as the estimate of \\(\\sigma^2\\) instead of \\(MSPE\\) because it has more degrees of freedom and provides a more reliable estimate. Pooling Estimates: In practice, \\(MSE\\) and \\(MSPE\\) may be pooled if \\(H_0\\) holds, resulting in a more precise estimate of \\(\\sigma^2\\). 5.1.1.10 Joint Inference for Regression Parameters Joint inference considers the simultaneous coverage of confidence intervals for multiple regression parameters, such as \\(\\beta_0\\) (intercept) and \\(\\beta_1\\) (slope). Ensuring adequate confidence for both parameters together requires adjustments to maintain the desired family-wise confidence level. Let: \\(\\bar{A}_1\\): The event that the confidence interval for \\(\\beta_0\\) covers its true value. \\(\\bar{A}_2\\): The event that the confidence interval for \\(\\beta_1\\) covers its true value. The individual confidence levels are: \\[ \\begin{aligned} P(\\bar{A}_1) &amp;= 1 - \\alpha, \\\\ P(\\bar{A}_2) &amp;= 1 - \\alpha. \\end{aligned} \\] The joint confidence coefficient, \\(P(\\bar{A}_1 \\cap \\bar{A}_2)\\), is: \\[ \\begin{aligned} P(\\bar{A}_1 \\cap \\bar{A}_2) &amp;= 1 - P(\\bar{A}_1 \\cup \\bar{A}_2), \\\\ &amp;= 1 - P(A_1) - P(A_2) + P(A_1 \\cap A_2), \\\\ &amp;\\geq 1 - P(A_1) - P(A_2), \\\\ &amp;= 1 - 2\\alpha. \\end{aligned} \\] This means that if \\(\\alpha\\) is the significance level for each parameter, the joint confidence coefficient is at least \\(1 - 2\\alpha\\). This inequality is known as the Bonferroni Inequality. Bonferroni Confidence Intervals To ensure a desired joint confidence level of \\((1-\\alpha)\\) for both \\(\\beta_0\\) and \\(\\beta_1\\), the Bonferroni method adjusts the confidence level for each parameter by dividing \\(\\alpha\\) by the number of parameters. For two parameters: The confidence level for each parameter is \\((1-\\alpha/2)\\). The resulting Bonferroni-adjusted confidence intervals are: \\[ \\begin{aligned} b_0 &amp;\\pm B \\cdot s(b_0), \\\\ b_1 &amp;\\pm B \\cdot s(b_1), \\end{aligned} \\] where \\(B = t_{1-\\alpha/4; n-2}\\) is the critical value from the \\(t\\)-distribution with \\(n-2\\) degrees of freedom. Interpretation of Bonferroni Confidence Intervals Coverage Probability: If repeated samples were taken, \\((1-\\alpha)100\\%\\) of the joint intervals would contain the true values of \\((\\beta_0, \\beta_1)\\). This implies that \\(\\alpha \\times 100\\%\\) of the samples would miss at least one of the true parameter values. Conservatism: The Bonferroni method ensures the family-wise confidence level but is conservative. The actual joint confidence level is often higher than \\((1-\\alpha)100\\%\\). This conservatism reduces statistical power. # Load necessary libraries library(ggplot2) library(MASS) # Set seed for reproducibility set.seed(123) # Generate synthetic data n &lt;- 100 # Number of observations x &lt;- rnorm(n, mean = 0, sd = 1) # Predictor beta_0 &lt;- 2 # True intercept beta_1 &lt;- 3 # True slope sigma &lt;- 1 # Standard deviation of error y &lt;- beta_0 + beta_1 * x + rnorm(n, mean = 0, sd = sigma) # Response # Fit linear model model &lt;- lm(y ~ x) summary(model) #&gt; #&gt; Call: #&gt; lm(formula = y ~ x) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -1.9073 -0.6835 -0.0875 0.5806 3.2904 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 1.89720 0.09755 19.45 &lt;2e-16 *** #&gt; x 2.94753 0.10688 27.58 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 0.9707 on 98 degrees of freedom #&gt; Multiple R-squared: 0.8859, Adjusted R-squared: 0.8847 #&gt; F-statistic: 760.6 on 1 and 98 DF, p-value: &lt; 2.2e-16 # Extract coefficients and standard errors b0_hat &lt;- coef(model)[1] b1_hat &lt;- coef(model)[2] s_b0 &lt;- summary(model)$coefficients[1, 2] # Standard error of intercept s_b1 &lt;- summary(model)$coefficients[2, 2] # Standard error of slope # Desired confidence level alpha &lt;- 0.05 # Overall significance level # Bonferroni correction adjusted_alpha &lt;- alpha / 2 # Adjusted alpha for each parameter # Critical t-value for Bonferroni adjustment t_crit &lt;- qt(1 - adjusted_alpha, df = n - 2) # n-2 degrees of freedom # Bonferroni confidence intervals ci_b0 &lt;- c(b0_hat - t_crit * s_b0, b0_hat + t_crit * s_b0) ci_b1 &lt;- c(b1_hat - t_crit * s_b1, b1_hat + t_crit * s_b1) # Print results cat(&quot;Bonferroni Confidence Intervals:\\n&quot;) #&gt; Bonferroni Confidence Intervals: cat(&quot;Intercept (beta_0): [&quot;, round(ci_b0[1], 2), &quot;,&quot;, round(ci_b0[2], 2), &quot;]\\n&quot;) #&gt; Intercept (beta_0): [ 1.7 , 2.09 ] cat(&quot;Slope (beta_1): [&quot;, round(ci_b1[1], 2), &quot;,&quot;, round(ci_b1[2], 2), &quot;]\\n&quot;) #&gt; Slope (beta_1): [ 2.74 , 3.16 ] # Calculate the covariance matrix of coefficients cov_matrix &lt;- vcov(model) # Generate points for confidence ellipse ellipse_points &lt;- MASS::mvrnorm(n = 1000, mu = coef(model), Sigma = cov_matrix) # Convert to data frame for plotting ellipse_df &lt;- as.data.frame(ellipse_points) colnames(ellipse_df) &lt;- c(&quot;beta_0&quot;, &quot;beta_1&quot;) # Plot confidence intervals and ellipse p &lt;- ggplot() + # Confidence ellipse geom_point( data = ellipse_df, aes(x = beta_0, y = beta_1), alpha = 0.1, color = &quot;grey&quot; ) + # Point estimate geom_point(aes(x = b0_hat, y = b1_hat), color = &quot;red&quot;, size = 3) + # Bonferroni confidence intervals geom_errorbar(aes(x = b0_hat, ymin = ci_b1[1], ymax = ci_b1[2]), width = 0.1, color = &quot;blue&quot;) + geom_errorbarh(aes(y = b1_hat, xmin = ci_b0[1], xmax = ci_b0[2]), height = 0.1, color = &quot;blue&quot;) + labs(title = &quot;Bonferroni Confidence Intervals and Joint Confidence Region&quot;, x = &quot;Intercept (beta_0)&quot;, y = &quot;Slope (beta_1)&quot;) + theme_minimal() print(p) The red point represents the estimated coefficients (b0_hat, b1_hat). The blue lines represent the Bonferroni-adjusted confidence intervals for beta_0 and beta_1. The grey points represent the joint confidence region based on the covariance matrix of coefficients. The Bonferroni intervals ensure family-wise confidence level but are conservative. Simulation results demonstrate how often the true values are captured in the intervals when repeated samples are drawn. Notes: Conservatism of Bonferroni Intervals The Bonferroni interval is conservative: The joint confidence level is a lower bound, ensuring family-wise coverage of at least \\((1-\\alpha)100\\%\\). This conservatism results in wider intervals, reducing the statistical power of the test. Adjustments for Conservatism: Practitioners often choose a larger \\(\\alpha\\) (e.g., \\(\\alpha = 0.1\\)) to reduce the width of the intervals in Bonferroni joint tests. A higher \\(\\alpha\\) allows for a better balance between confidence and precision, especially for exploratory analyses. Extending Bonferroni to Multiple Parameters: The Bonferroni method is not limited to two parameters. For testing \\(g\\) parameters, such as \\(\\beta_0, \\beta_1, \\dots, \\beta_{g-1}\\): Adjusted Confidence Level for Each Parameter: The confidence level for each individual parameter is \\((1-\\alpha/g)\\). Critical \\(t\\)-Value: For two-sided intervals, the critical value for each parameter is: \\[ t_{1-\\frac{\\alpha}{2g}; n-p}, \\] where \\(p\\) is the total number of parameters in the regression model. Example: If \\(\\alpha = 0.05\\) and \\(g = 10\\), each individual confidence interval is constructed at the: \\[ (1 - \\frac{0.05}{10}) = 99.5\\% \\text{ confidence level}. \\] This corresponds to using \\(t_{1-\\frac{0.005}{2}; n-p}\\) in the formula for the confidence intervals. Limitations for Large \\(g\\) Wide Intervals: As \\(g\\) increases, the intervals become excessively wide, often leading to reduced usefulness in practical applications. This issue stems from the conservatism of the Bonferroni method, which prioritizes family-wise error control. Suitability for Small \\(g\\): The Bonferroni procedure works well when \\(g\\) is relatively small (e.g., \\(g \\leq 5\\)). For larger \\(g\\), alternative methods (discussed below) are more efficient. Correlation Between Parameters: Correlation of \\(b_0\\) and \\(b_1\\): The estimated regression coefficients \\(b_0\\) and \\(b_1\\) are often correlated: Negative correlation if \\(\\bar{X} &gt; 0\\). Positive correlation if \\(\\bar{X} &lt; 0\\). This correlation can complicate joint inference but does not affect the validity of Bonferroni-adjusted intervals. Alternatives to Bonferroni Several alternative procedures provide more precise joint inference, especially for larger \\(g\\): Scheffé’s Method: Constructs simultaneous confidence regions for all possible linear combinations of parameters. Suitable for exploratory analyses but may result in even wider intervals than Bonferroni. Tukey’s Honest Significant Difference: Designed for pairwise comparisons in ANOVA but can be adapted for regression parameters. Holm’s Step-Down Procedure: A sequential testing procedure that is less conservative than Bonferroni while still controlling the family-wise error rate. Likelihood Ratio Tests: Construct joint confidence regions based on the likelihood function, offering more precision for large \\(g\\). 5.1.1.11 Assumptions of Linear Regression To ensure valid inference and reliable predictions in linear regression, the following assumptions must hold. We’ll cover them in depth in the next section. Assumption Description Linearity Linear relationship between predictors and response. Independence of Errors Errors are independent (important in time-series/clustering). Homoscedasticity Constant variance of residuals across predictors. Normality of Errors Residuals are normally distributed. No Multicollinearity Predictors are not highly correlated. No Outliers/Leverage Points No undue influence from outliers or high-leverage points. Exogeneity Predictors are uncorrelated with the error term (no endogeneity). Full Rank Predictors are linearly independent (no perfect multicollinearity). 5.1.1.12 Diagnostics for Model Assumptions Constant Variance To check homoscedasticity: Plot residuals vs. fitted values or residuals vs. predictors. Look for patterns or a funnel-shaped spread indicating heteroscedasticity. Outliers Detect outliers using: Residuals vs. predictors plot. Box plots. Stem-and-leaf plots. Scatter plots. Standardized Residuals: Residuals can be standardized to have unit variance, known as studentized residuals: \\[ r_i = \\frac{e_i}{s(e_i)}. \\] Semi-Studentized Residuals: A simplified standardization using the mean squared error (MSE): \\[ e_i^* = \\frac{e_i}{\\sqrt{MSE}}. \\] Non-Independent Error Terms To detect non-independence: Plot residuals vs. time for time-series data. Residuals \\(e_i\\) are not independent because they depend on \\(\\hat{Y}_i\\), which is derived from the same regression function. Detect dependency by plotting the residual for the \\(i\\)-th response vs. the \\((i-1)\\)-th. Non-Normality of Error Terms To assess normality: Plot distribution of residuals. Create box plots, stem-and-leaf plots, or normal probability plots. Issues such as an incorrect regression function or non-constant error variance can distort the residual distribution. Normality tests require relatively large sample sizes to detect deviations. Normality of Residuals Use tests based on the empirical cumulative distribution function (ECDF) (check Normality Assessment) Constancy of Error Variance Statistical tests for homoscedasticity: Brown-Forsythe Test (Modified Levene Test): Robust against non-normality, examines the variance of residuals across levels of predictors. Breusch-Pagan Test (Cook-Weisberg Test): Tests for heteroscedasticity by regressing squared residuals on predictors. 5.1.1.13 Remedial Measures for Violations of Assumptions When the assumptions of simple linear regression are violated, appropriate remedial measures can be applied to address these issues. Below is a list of measures for specific deviations from the assumptions. 5.1.1.13.1 General Remedies Use more complicated models (e.g., non-linear models, generalized linear models). Apply transformations (see Variable Transformation) on \\(X\\) and/or \\(Y\\) to stabilize variance, linearize relationships, or normalize residuals. Note that transformations may not always yield “optimal” results. 5.1.1.13.2 Specific Remedies for Assumption Violations Issue Remedy Explanation Non-Linearity - Apply transformations (e.g., log, square root). Transformation of variables can help linearize the relationship between \\(X\\) and \\(Y\\). - Use more complicated models (e.g., polynomial regression, splines). Higher-order terms or non-linear models can capture non-linear relationships. Non-Constant Error Variance - Apply Weighted Least Squares (WLS). WLS assigns weights to observations based on the inverse of their variance. - Use transformations (e.g., log, square root). Transformations can stabilize error variance. Correlated Errors - Use serially correlated error models (e.g., ARIMA for time-series data). Time-series models account for serial dependence in the errors. Non-Normality of Errors - Transform \\(Y\\) or use non-parametric methods. Transformations can normalize residuals; non-parametric methods do not assume normality. Omitted Variables - Use multiple regression to include additional relevant predictors. Adding relevant variables reduces omitted variable bias and improves model accuracy. Outliers - Apply robust estimation techniques (e.g., Huber regression, M-estimation). Robust methods reduce the influence of outliers on parameter estimates. 5.1.1.13.3 Remedies in Detail Non-Linearity: Transformations: Apply transformations to the response variable \\(Y\\) or the predictor variable \\(X\\). Common transformations include: Logarithmic transformation: \\(Y&#39; = \\log(Y)\\) or \\(X&#39; = \\log(X)\\). Polynomial terms: Include \\(X^2\\), \\(X^3\\), etc., to capture curvature. Alternative Models: Polynomial regression or splines for flexibility in modeling non-linear relationships. Non-Constant Error Variance: Weighted Least Squares (WLS): Assigns weights to observations inversely proportional to their variance. Transformations: Use a log or square root transformation to stabilize variance. Correlated Errors: For time-series data: Use serially correlated error models such as AR(1) or ARIMA. These models explicitly account for dependency in residuals over time. Non-Normality: Transformations: Apply a transformation to \\(Y\\) (e.g., log or square root) to make the residuals approximately normal. Non-parametric regression: Methods like LOESS or Theil-Sen regression do not require the normality assumption. Omitted Variables: Introduce additional predictors: Use multiple regression to include all relevant independent variables. Check for multicollinearity when adding new variables. Outliers: Robust Regression: Use methods such as Huber regression or M-estimation to reduce the impact of outliers on model coefficients. Diagnostics: Identify outliers using Cook’s Distance, leverage statistics, or studentized residuals. 5.1.1.14 Transformations in Regression Analysis Transformations involve modifying one or both variables to address issues such as non-linearity, non-constant variance, or non-normality. However, it’s important to note that the properties of least-squares estimates apply to the transformed model, not the original variables. When transforming the dependent variable \\(Y\\), we fit the model as: \\[ g(Y_i) = b_0 + b_1 X_i, \\] where \\(g(Y_i)\\) is the transformed response. To interpret the regression results in terms of the original \\(Y\\), we need to transform back: \\[ \\hat{Y}_i = g^{-1}(b_0 + b_1 X_i). \\] Direct back-transformation of predictions can introduce bias. For example, in a log-transformed model: \\[ \\log(Y_i) = b_0 + b_1 X_i, \\] the unbiased back-transformed prediction of \\(Y_i\\) is: \\[ \\hat{Y}_i = \\exp(b_0 + b_1 X_i + \\frac{\\sigma^2}{2}), \\] where \\(\\frac{\\sigma^2}{2}\\) accounts for the bias correction due to the log transformation. 5.1.1.14.1 Box-Cox Family of Transformations The Box-Cox transformation is a versatile family of transformations defined as: \\[ Y&#39; = \\begin{cases} \\frac{Y^\\lambda - 1}{\\lambda}, &amp; \\text{if } \\lambda \\neq 0, \\\\ \\ln(Y), &amp; \\text{if } \\lambda = 0. \\end{cases} \\] This transformation introduces a parameter \\(\\lambda\\) that is estimated from the data. Common transformations include: \\(\\lambda\\) Transformation \\(Y&#39;\\) 2 \\(Y^2\\) 0.5 \\(\\sqrt{Y}\\) 0 \\(\\ln(Y)\\) -0.5 \\(1/\\sqrt{Y}\\) -1 \\(1/Y\\) Choosing the Transformation Parameter \\(\\lambda\\) The value of \\(\\lambda\\) can be selected using one of the following methods: Trial and Error: Apply different transformations and compare the residual plots or model fit statistics (e.g., \\(R^2\\) or AIC). Maximum Likelihood Estimation: Choose \\(\\lambda\\) to maximize the likelihood function under the assumption of normally distributed errors. Numerical Search: Use computational optimization techniques to minimize the residual sum of squares (RSS) or another goodness-of-fit criterion. # Install and load the necessary library if (!require(&quot;MASS&quot;)) install.packages(&quot;MASS&quot;) library(MASS) # Fit a linear model set.seed(123) n &lt;- 50 x &lt;- rnorm(n, mean = 5, sd = 2) y &lt;- 3 + 2 * x + rnorm(n, mean = 0, sd = 2) model &lt;- lm(y ~ x) # Apply Box-Cox Transformation boxcox_result &lt;- boxcox(model, lambda = seq(-2, 2, 0.1), plotit = TRUE) # Find the optimal lambda optimal_lambda &lt;- boxcox_result$x[which.max(boxcox_result$y)] cat(&quot;Optimal lambda for Box-Cox transformation:&quot;, optimal_lambda, &quot;\\n&quot;) #&gt; Optimal lambda for Box-Cox transformation: 0.8686869 Notes Benefits of Transformations: Stabilize Variance: Helps address heteroscedasticity. Linearize Relationships: Useful for non-linear data. Normalize Residuals: Addresses non-normality issues. Caveats: Interpretability: Transformed variables may complicate interpretation. Over-Transformation: Excessive transformations can distort the relationship between variables. Applicability: Transformations are most effective for issues like non-linearity or non-constant variance. They are less effective for correcting independence violations or omitted variables. 5.1.1.14.2 Variance Stabilizing Transformations Variance stabilizing transformations are used when the standard deviation of the response variable depends on its mean. The delta method, which applies a Taylor series expansion, provides a systematic approach to find such transformations. Given that the standard deviation of \\(Y\\) is a function of its mean: \\[ \\sigma = \\sqrt{\\text{var}(Y)} = f(\\mu), \\] where \\(\\mu = E(Y)\\) and \\(f(\\mu)\\) is a smooth function of the mean, we aim to find a transformation \\(h(Y)\\) such that the variance of the transformed variable \\(h(Y)\\) is constant for all values of \\(\\mu\\). Expanding \\(h(Y)\\) in a Taylor Expansion series around \\(\\mu\\): \\[ h(Y) = h(\\mu) + h&#39;(\\mu)(Y - \\mu) + \\text{higher-order terms}. \\] Ignoring higher-order terms, the variance of \\(h(Y)\\) can be approximated as: \\[ \\text{var}(h(Y)) = \\text{var}(h(\\mu) + h&#39;(\\mu)(Y - \\mu)). \\] Since \\(h(\\mu)\\) is a constant: \\[ \\text{var}(h(Y)) = \\left(h&#39;(\\mu)\\right)^2 \\text{var}(Y). \\] Substituting \\(\\text{var}(Y) = \\left(f(\\mu)\\right)^2\\), we get: \\[ \\text{var}(h(Y)) = \\left(h&#39;(\\mu)\\right)^2 \\left(f(\\mu)\\right)^2. \\] To stabilize the variance (make it constant for all \\(\\mu\\)), we require: \\[ \\left(h&#39;(\\mu)\\right)^2 \\left(f(\\mu)\\right)^2 = \\text{constant}. \\] Thus, the derivative of \\(h(\\mu)\\) must be proportional to the inverse of \\(f(\\mu)\\): \\[ h&#39;(\\mu) \\propto \\frac{1}{f(\\mu)}. \\] Integrating both sides gives: \\[ h(\\mu) = \\int \\frac{1}{f(\\mu)} \\, d\\mu. \\] The specific form of \\(h(\\mu)\\) depends on the function \\(f(\\mu)\\), which describes the relationship between the standard deviation and the mean. Examples of Variance Stabilizing Transformations \\(f(\\mu)\\) Transformation \\(h(Y)\\) Purpose \\(\\sqrt{\\mu}\\) \\(\\int \\frac{1}{\\sqrt{\\mu}} d\\mu = 2\\sqrt{Y}\\) Stabilizes variance for Poisson data. \\(\\mu\\) \\(\\int \\frac{1}{\\mu} d\\mu = \\ln(Y)\\) Stabilizes variance for exponential or multiplicative models. \\(\\mu^2\\) \\(\\int \\frac{1}{\\mu^2} d\\mu = -\\frac{1}{Y}\\) Stabilizes variance for certain power law data. Variance stabilizing transformations are particularly useful for: Poisson-distributed data: Use \\(h(Y) = 2\\sqrt{Y}\\) to stabilize variance. Exponential or multiplicative models: Use \\(h(Y) = \\ln(Y)\\) for stabilization. Power law relationships: Use transformations like \\(h(Y) = Y^{-1}\\) or other forms derived from \\(f(\\mu)\\). Example: Variance Stabilizing Transformation for the Poisson Distribution For a Poisson distribution, the variance of \\(Y\\) is equal to its mean: \\[ \\sigma^2 = \\text{var}(Y) = E(Y) = \\mu. \\] Thus, the standard deviation is: \\[ \\sigma = f(\\mu) = \\sqrt{\\mu}. \\] Using the relationship for variance stabilizing transformations: \\[ h&#39;(\\mu) \\propto \\frac{1}{f(\\mu)} = \\mu^{-0.5}. \\] Integrating \\(h&#39;(\\mu)\\) gives the variance stabilizing transformation: \\[ h(\\mu) = \\int \\mu^{-0.5} \\, d\\mu = 2\\sqrt{\\mu}. \\] Hence, the variance stabilizing transformation is: \\[ h(Y) = \\sqrt{Y}. \\] This transformation is widely used in Poisson regression to stabilize the variance of the response variable. # Simulate Poisson data set.seed(123) n &lt;- 500 x &lt;- rnorm(n, mean = 5, sd = 2) y &lt;- rpois(n, lambda = exp(1 + 0.3 * x)) # Poisson-distributed Y # Fit linear model without transformation model_raw &lt;- lm(y ~ x) # Apply square root transformation y_trans &lt;- sqrt(y) model_trans &lt;- lm(y_trans ~ x) # Compare residual plots par(mfrow = c(2, 1)) # Residual plot for raw data plot( fitted(model_raw), resid(model_raw), main = &quot;Residuals: Raw Data&quot;, xlab = &quot;Fitted Values&quot;, ylab = &quot;Residuals&quot; ) abline(h = 0, col = &quot;red&quot;, lty = 2) # Residual plot for transformed data plot( fitted(model_trans), resid(model_trans), main = &quot;Residuals: Transformed Data (sqrt(Y))&quot;, xlab = &quot;Fitted Values&quot;, ylab = &quot;Residuals&quot; ) abline(h = 0, col = &quot;blue&quot;, lty = 2) 5.1.1.14.3 General Strategy When \\(f(\\mu)\\) Is Unknown If the relationship between \\(\\text{var}(Y)\\) and \\(\\mu\\) (i.e., \\(f(\\mu)\\)) is unknown, the following steps can help: Trial and Error: Apply common transformations (e.g., \\(\\log(Y)\\), \\(\\sqrt{Y}\\)) and examine residual plots. Select the transformation that results in stabilized variance (residuals show no pattern in plots). Leverage Prior Research: Consult researchers or literature on similar experiments to determine the transformations typically used. Analyze Observations with the Same Predictor Value: If multiple observations \\(Y_{ij}\\) are available at the same \\(X\\) value: Compute the mean \\(\\bar{Y}_i\\) and standard deviation \\(s_i\\) for each group. Check if \\(s_i \\propto \\bar{Y}_i^{\\lambda}\\). For example, assume: \\[ s_i = a \\bar{Y}_i^{\\lambda}. \\] Taking the natural logarithm: \\[ \\ln(s_i) = \\ln(a) + \\lambda \\ln(\\bar{Y}_i). \\] Perform a regression of \\(\\ln(s_i)\\) on \\(\\ln(\\bar{Y}_i)\\) to estimate \\(\\lambda\\) and suggest the form of \\(f(\\mu)\\). Group Observations: If individual observations are sparse, try grouping similar observations by \\(X\\) values to compute \\(\\bar{Y}_i\\) and \\(s_i\\) for each group. 5.1.1.14.4 Common Transformations and Their Applications The table below summarizes common transformations used to stabilize variance under various conditions, along with their appropriate contexts and comments: Transformation Situation Comments \\(\\sqrt{Y}\\) \\(var(\\epsilon_i) = k \\, E(Y_i)\\) For counts following a Poisson distribution. \\(\\sqrt{Y} + \\sqrt{Y+1}\\) \\(var(\\epsilon_i) = k \\, E(Y_i)\\) Useful for small counts or datasets with zeros. \\(\\log(Y)\\) \\(var(\\epsilon_i) = k \\, (E(Y_i))^2\\) Appropriate for positive integers with a wide range. \\(\\log(Y+1)\\) \\(var(\\epsilon_i) = k \\, (E(Y_i))^2\\) Used when the data includes zero counts. \\(1/Y\\) \\(var(\\epsilon_i) = k \\, (E(Y_i))^4\\) For responses mostly near zero, with occasional large values. \\(\\arcsin(\\sqrt{Y})\\) \\(var(\\epsilon_i) = k \\, E(Y_i)(1-E(Y_i))\\) Suitable for binomial proportions or percentage data. Choosing the Transformation: Start by identifying the relationship between the variance of the residuals (\\(var(\\epsilon_i)\\)) and the mean of the response variable (\\(E(Y_i)\\)). Select the transformation that matches the identified variance structure. Transformations for Zero Values: For data with zeros, transformations like \\(\\sqrt{Y+1}\\) or \\(\\log(Y+1)\\) can be used to avoid undefined values. But this will seriously jeopardize model assumption (J. Chen and Roth 2024). Use in Regression Models: Apply these transformations to the dependent variable \\(Y\\) in the regression model. Always check residual plots to confirm that the transformation stabilizes variance and resolves non-linearity. Interpretation After Transformation: After transforming \\(Y\\), interpret the results in terms of the transformed variable. For practical interpretation, back-transform predictions and account for any associated bias. 5.1.2 Multiple Linear Regression The geometry of least squares regression involves projecting the response vector \\(\\mathbf{y}\\) onto the space spanned by the columns of the design matrix \\(\\mathbf{X}\\). The fitted values \\(\\mathbf{\\hat{y}}\\) can be expressed as: \\[ \\begin{aligned} \\mathbf{\\hat{y}} &amp;= \\mathbf{Xb} \\\\ &amp;= \\mathbf{X(X&#39;X)^{-1}X&#39;y} \\\\ &amp;= \\mathbf{Hy}, \\end{aligned} \\] where: \\(\\mathbf{H} = \\mathbf{X(X&#39;X)^{-1}X&#39;}\\) is the projection operator (sometimes denoted as \\(\\mathbf{P}\\)). \\(\\mathbf{\\hat{y}}\\) is the projection of \\(\\mathbf{y}\\) onto the linear space spanned by the columns of \\(\\mathbf{X}\\) (the model space). The dimension of the model space is equal to the rank of \\(\\mathbf{X}\\) (i.e., the number of linearly independent columns in \\(\\mathbf{X}\\)). Properties of the Projection Matrix \\(\\mathbf{H}\\) Symmetry: The projection matrix \\(\\mathbf{H}\\) is symmetric: \\[ \\mathbf{H} = \\mathbf{H}&#39;. \\] Idempotence: Applying \\(\\mathbf{H}\\) twice gives the same result: \\[ \\mathbf{HH} = \\mathbf{H}. \\] Proof: \\[ \\begin{aligned} \\mathbf{HH} &amp;= \\mathbf{X(X&#39;X)^{-1}X&#39;X(X&#39;X)^{-1}X&#39;} \\\\ &amp;= \\mathbf{X(X&#39;X)^{-1}IX&#39;} \\\\ &amp;= \\mathbf{X(X&#39;X)^{-1}X&#39;} \\\\ &amp;= \\mathbf{H}. \\end{aligned} \\] Dimensionality: \\(\\mathbf{H}\\) is an \\(n \\times n\\) matrix (where \\(n\\) is the number of observations). The rank of \\(\\mathbf{H}\\) is equal to the rank of \\(\\mathbf{X}\\), which is typically the number of predictors (including the intercept). Orthogonal Complement: The matrix \\(\\mathbf{(I - H)}\\), where: \\[ \\mathbf{I - H} = \\mathbf{I - X(X&#39;X)^{-1}X&#39;}, \\] is also a projection operator. It projects onto the orthogonal complement of the space spanned by the columns of \\(\\mathbf{X}\\) (i.e., the space orthogonal to the model space). Orthogonality of Projections: \\(\\mathbf{H}\\) and \\(\\mathbf{(I - H)}\\) are orthogonal: \\[ \\mathbf{H(I - H)} = \\mathbf{0}. \\] Similarly: \\[ \\mathbf{(I - H)H} = \\mathbf{0}. \\] Intuition for \\(\\mathbf{H}\\) and \\(\\mathbf{(I - H)}\\) \\(\\mathbf{H}\\): Projects \\(\\mathbf{y}\\) onto the model space, giving the fitted values \\(\\mathbf{\\hat{y}}\\). \\(\\mathbf{I - H}\\): Projects \\(\\mathbf{y}\\) onto the residual space, giving the residuals \\(\\mathbf{e}\\): \\[ \\mathbf{e} = \\mathbf{(I - H)y}. \\] \\(\\mathbf{H}\\) and \\(\\mathbf{(I - H)}\\) divide the response vector \\(\\mathbf{y}\\) into two components: \\[ \\mathbf{y} = \\mathbf{\\hat{y}} + \\mathbf{e}. \\] \\(\\mathbf{\\hat{y}} = \\mathbf{Hy}\\) (fitted values). \\(\\mathbf{e} = \\mathbf{(I - H)y}\\) (residuals). The properties of \\(\\mathbf{H}\\) (symmetry, idempotence, dimensionality) reflect its role as a linear transformation that projects vectors onto the model space. This geometric perspective provides insight into the mechanics of least squares regression, particularly how the response variable \\(\\mathbf{y}\\) is decomposed into fitted values and residuals. Similar to simple regression, the total sum of squares in multiple regression analysis can be partitioned into components corresponding to the regression (model fit) and the residuals (errors). The uncorrected total sum of squares is: \\[ \\mathbf{y&#39;y} = \\mathbf{\\hat{y}&#39;\\hat{y} + e&#39;e}, \\] where: \\(\\mathbf{\\hat{y} = Hy}\\) (fitted values, projected onto the model space). \\(\\mathbf{e = (I - H)y}\\) (residuals, projected onto the orthogonal complement of the model space). Expanding this using projection matrices: \\[ \\begin{aligned} \\mathbf{y&#39;y} &amp;= \\mathbf{(Hy)&#39;(Hy) + ((I-H)y)&#39;((I-H)y)} \\\\ &amp;= \\mathbf{y&#39;H&#39;Hy + y&#39;(I-H)&#39;(I-H)y} \\\\ &amp;= \\mathbf{y&#39;Hy + y&#39;(I-H)y}. \\end{aligned} \\] This equation shows the partition of \\(\\mathbf{y&#39;y}\\) into components explained by the model (\\(\\mathbf{\\hat{y}}\\)) and the unexplained variation (residuals). For the corrected total sum of squares, we adjust for the mean (using the projection matrix \\(\\mathbf{H_1}\\)): \\[ \\mathbf{y&#39;(I-H_1)y = y&#39;(H-H_1)y + y&#39;(I-H)y}. \\] Here: \\(\\mathbf{H_1} = \\frac{1}{n} \\mathbf{J}\\), where \\(\\mathbf{J}\\) is an \\(n \\times n\\) matrix of ones. \\(\\mathbf{H - H_1}\\) projects onto the subspace explained by the predictors after centering. Aspect Uncorrected Total Sum of Squares (\\(\\mathbf{y&#39;y}\\)) Corrected Total Sum of Squares (\\(\\mathbf{y&#39;(I-H_1)y}\\)) Definition Total variation in \\(y\\) relative to the origin. Total variation in \\(y\\) relative to its mean (centered data). Adjustment No adjustment for the mean of \\(y\\). Adjusts for the mean of \\(y\\) by centering it. Equation \\(\\mathbf{y&#39;y} = \\mathbf{\\hat{y}&#39;\\hat{y}} + \\mathbf{e&#39;e}\\) \\(\\mathbf{y&#39;(I-H_1)y} = \\mathbf{y&#39;(H-H_1)y} + \\mathbf{y&#39;(I-H)y}\\) Projection Matrices \\(\\mathbf{H}\\): Projects onto model space. \\(\\mathbf{I-H}\\): Projects onto residuals. \\(\\mathbf{H_1} = \\frac{1}{n} \\mathbf{J}\\): Adjusts for the mean. \\(\\mathbf{H-H_1}\\): Projects onto predictors after centering. \\(\\mathbf{I-H}\\): Projects onto residuals. Interpretation Includes variation due to the mean of \\(y\\). Focuses on variation in \\(y\\) around its mean. Usage Suitable for raw, uncentered data. Common in regression and ANOVA to isolate variability explained by predictors. Application Measures total variability in \\(y\\), including overall level (mean). Measures variability explained by predictors relative to the mean. Why the Correction Matters In ANOVA and regression, removing the contribution of the mean helps isolate the variability explained by predictors from the overall level of the response variable. Corrected sums of squares are more common when comparing models or computing \\(R^2\\), which requires centering to ensure consistency in proportionate variance explained. The corrected total sum of squares can be decomposed into the sum of squares for regression (SSR) and the sum of squares for error (SSE): Source SS df MS F Regression \\(SSR = \\mathbf{y&#39;(H - \\frac{1}{n} J)y}\\) \\(p - 1\\) \\(MSR = SSR / (p-1)\\) \\(MSR / MSE\\) Error \\(SSE = \\mathbf{y&#39;(I - H)y}\\) \\(n - p\\) \\(MSE = SSE / (n-p)\\) Total \\(SST = \\mathbf{y&#39;(I - H_1)y}\\) \\(n - 1\\) Where: \\(p\\): Number of parameters (including intercept). \\(n\\): Number of observations. Alternatively, the regression model can be expressed as: \\[ \\mathbf{Y = X\\hat{\\beta} + (Y - X\\hat{\\beta})}, \\] where: \\(\\mathbf{\\hat{Y} = X\\hat{\\beta}}\\): Vector of fitted values (in the subspace spanned by \\(\\mathbf{X}\\)). \\(\\mathbf{e = Y - X\\hat{\\beta}}\\): Vector of residuals (in the orthogonal complement of the subspace spanned by \\(\\mathbf{X}\\)). \\(\\mathbf{Y}\\) is an \\(n \\times 1\\) vector in the \\(n\\)-dimensional space \\(\\mathbb{R}^n\\). \\(\\mathbf{X}\\) is an \\(n \\times p\\) full-rank matrix, with its columns generating a \\(p\\)-dimensional subspace of \\(\\mathbb{R}^n\\). Hence, any estimator \\(\\mathbf{X\\hat{\\beta}}\\) is also in this subspace. In linear regression, the Ordinary Least Squares estimator \\(\\hat{\\beta}\\) minimizes the squared Euclidean distance \\(\\|\\mathbf{Y} - \\mathbf{X}\\beta\\|^2\\) between the observed response vector \\(\\mathbf{Y}\\) and the fitted values \\(\\mathbf{X}\\beta\\). This minimization corresponds to the orthogonal projection of \\(\\mathbf{Y}\\) onto the column space of \\(\\mathbf{X}\\). We solve the optimization problem: \\[ \\min_{\\beta} \\|\\mathbf{Y} - \\mathbf{X}\\beta\\|^2. \\] The objective function can be expanded as: \\[ \\|\\mathbf{Y} - \\mathbf{X}\\beta\\|^2 = (\\mathbf{Y} - \\mathbf{X}\\beta)^\\top (\\mathbf{Y} - \\mathbf{X}\\beta). \\] Perform the multiplication: \\[ \\begin{aligned} (\\mathbf{Y} - \\mathbf{X}\\beta)^\\top (\\mathbf{Y} - \\mathbf{X}\\beta) &amp;= \\mathbf{Y}^\\top \\mathbf{Y} - \\mathbf{Y}^\\top \\mathbf{X}\\beta - \\beta^\\top \\mathbf{X}^\\top \\mathbf{Y} + \\beta^\\top (\\mathbf{X}^\\top \\mathbf{X}) \\beta. \\end{aligned} \\] Since \\(\\mathbf{Y}^\\top \\mathbf{X}\\beta\\) is a scalar, it equals \\(\\beta^\\top \\mathbf{X}^\\top \\mathbf{Y}\\). Therefore, the expanded expression becomes: \\[ \\|\\mathbf{Y} - \\mathbf{X}\\beta\\|^2 = \\mathbf{Y}^\\top \\mathbf{Y} - 2\\beta^\\top \\mathbf{X}^\\top \\mathbf{Y} + \\beta^\\top (\\mathbf{X}^\\top \\mathbf{X}) \\beta. \\] To find the \\(\\beta\\) that minimizes this expression, take the derivative with respect to \\(\\beta\\) and set it to 0: \\[ \\frac{\\partial}{\\partial \\beta} \\Bigl[ \\mathbf{Y}^\\top \\mathbf{Y} - 2\\beta^\\top \\mathbf{X}^\\top \\mathbf{Y} + \\beta^\\top (\\mathbf{X}^\\top \\mathbf{X}) \\beta \\Bigr] = 0. \\] Computing the gradient: \\[ \\frac{\\partial}{\\partial \\beta} = -2\\mathbf{X}^\\top \\mathbf{Y} + 2(\\mathbf{X}^\\top \\mathbf{X})\\beta. \\] Setting this to zero: \\[ -2\\mathbf{X}^\\top \\mathbf{Y} + 2\\mathbf{X}^\\top \\mathbf{X}\\beta = 0. \\] Simplify: \\[ \\mathbf{X}^\\top \\mathbf{X}\\beta = \\mathbf{X}^\\top \\mathbf{Y}. \\] If \\(\\mathbf{X}^\\top \\mathbf{X}\\) is invertible, the solution is: \\[ \\hat{\\beta} = (\\mathbf{X}^\\top \\mathbf{X})^{-1} \\mathbf{X}^\\top \\mathbf{Y}. \\] Orthogonal Projection Interpretation The fitted values are: \\[ \\hat{\\mathbf{Y}} = \\mathbf{X}\\hat{\\beta}. \\] From the normal equations, \\(\\mathbf{X}^\\top(\\mathbf{Y} - \\mathbf{X}\\hat{\\beta}) = 0\\), which implies that the residual vector \\(\\mathbf{Y} - \\hat{\\mathbf{Y}}\\) is orthogonal to every column of \\(\\mathbf{X}\\). Therefore: \\(\\hat{\\mathbf{Y}} = \\mathbf{X}\\hat{\\beta}\\) is the orthogonal projection of \\(\\mathbf{Y}\\) onto \\(\\mathrm{Col}(\\mathbf{X})\\). \\(\\mathbf{Y} - \\mathbf{X}\\hat{\\beta}\\) lies in the orthogonal complement of \\(\\mathrm{Col}(\\mathbf{X})\\). Pythagoras Decomposition The geometric interpretation gives us the decomposition: \\[ \\mathbf{Y} = \\mathbf{X}\\hat{\\beta} + (\\mathbf{Y} - \\mathbf{X}\\hat{\\beta}), \\] where: \\(\\mathbf{X}\\hat{\\beta}\\) is the projection of \\(\\mathbf{Y}\\) onto the column space of \\(\\mathbf{X}\\). \\((\\mathbf{Y} - \\mathbf{X}\\hat{\\beta})\\) is the residual vector, orthogonal to \\(\\mathbf{X}\\hat{\\beta}\\). Since the two components are orthogonal, their squared norms satisfy: \\[ \\begin{aligned}\\|\\mathbf{Y}\\|^2 &amp;= \\mathbf{Y}^\\top \\mathbf{Y}&amp;&amp; \\text{(definition of norm squared)} \\\\[6pt]&amp;= (\\mathbf{Y} - \\mathbf{X}\\hat{\\beta} + \\mathbf{X}\\hat{\\beta})^\\top(\\mathbf{Y} - \\mathbf{X}\\hat{\\beta} + \\mathbf{X}\\hat{\\beta})&amp;&amp; \\text{(add and subtract the same term } \\mathbf{X}\\hat{\\beta}\\text{)} \\\\[6pt]&amp;= (\\mathbf{Y} - \\mathbf{X}\\hat{\\beta})^\\top(\\mathbf{Y} - \\mathbf{X}\\hat{\\beta})\\;+\\; 2\\,(\\mathbf{X}\\hat{\\beta})^\\top(\\mathbf{Y} - \\mathbf{X}\\hat{\\beta})\\;+\\; (\\mathbf{X}\\hat{\\beta})^\\top(\\mathbf{X}\\hat{\\beta})&amp;&amp; \\text{(expand }(a+b)^\\top(a+b)\\text{)} \\\\[6pt]&amp;= \\|\\mathbf{Y} - \\mathbf{X}\\hat{\\beta}\\|^2\\;+\\; 2\\,(\\mathbf{X}\\hat{\\beta})^\\top(\\mathbf{Y} - \\mathbf{X}\\hat{\\beta})\\;+\\; \\|\\mathbf{X}\\hat{\\beta}\\|^2&amp;&amp; \\text{(rewrite each quadratic form as a norm)} \\\\[6pt]&amp;= \\|\\mathbf{Y} - \\mathbf{X}\\hat{\\beta}\\|^2 + \\|\\mathbf{X}\\hat{\\beta}\\|^2&amp;&amp; \\text{(use that }(\\mathbf{X}\\hat{\\beta})^\\top(\\mathbf{Y}-\\mathbf{X}\\hat{\\beta}) = 0\\text{, i.e. orthogonality)} \\\\[6pt]&amp; \\quad = \\|\\mathbf{X}\\hat{\\beta}\\|^2 \\;+\\; \\|\\mathbf{Y} - \\mathbf{X}\\hat{\\beta}\\|^2. \\end{aligned} \\] where the norm of a vector \\(\\mathbf{a}\\) in \\(\\mathbb{R}^p\\) is defined as: \\[ \\|\\mathbf{a}\\| = \\sqrt{\\mathbf{a}^\\top \\mathbf{a}} = \\sqrt{\\sum_{i=1}^p a_i^2}. \\] We are saying that \\(\\mathbf{Y}\\) is decomposed into two orthogonal components: \\(\\mathbf{X}\\hat{\\beta}\\) (the projection onto \\(\\mathrm{Col}(\\mathbf{X})\\) \\(\\|\\mathbf{X}\\hat{\\beta}\\|\\) measures the part of \\(\\mathbf{Y}\\) explained by the model. \\(\\mathbf{Y} - \\mathbf{X}\\hat{\\beta}\\) (the residual lying in the orthogonal complement). \\(\\|\\mathbf{Y} - \\mathbf{X}\\hat{\\beta}\\|\\) measures the residual error. This geometric interpretation (projection plus orthogonal remainder) is exactly why we call \\(\\mathbf{X}\\hat{\\beta}\\) the orthogonal projection of \\(\\mathbf{Y}\\) onto the column space of \\(\\mathbf{X}\\). This decomposition also underlies the analysis of variance (ANOVA) in regression. The coefficient of multiple determination, denoted \\(R^2\\), measures the proportion of the total variation in the response variable (\\(\\mathbf{Y}\\)) that is explained by the regression model. It is defined as: \\[ R^2 = \\frac{SSR}{SSTO} = 1 - \\frac{SSE}{SSTO}, \\] where: \\(SSR\\): Regression sum of squares (variation explained by the model). \\(SSE\\): Error sum of squares (unexplained variation). \\(SSTO\\): Total sum of squares (total variation in \\(\\mathbf{Y}\\)). The adjusted \\(R^2\\) adjusts \\(R^2\\) for the number of predictors in the model, penalizing for adding predictors that do not improve the model’s fit substantially. It is defined as: \\[ R^2_a = 1 - \\frac{SSE/(n-p)}{SSTO/(n-1)} = 1 - \\frac{(n-1)SSE}{(n-p)SSTO}, \\] where: \\(n\\): Number of observations. \\(p\\): Number of parameters (including the intercept). Key Differences Between \\(R^2\\) and \\(R^2_a\\) Aspect \\(R^2\\) \\(R^2_a\\) Behavior with Predictors Always increases (or remains constant) when more predictors are added, even if they are not statistically significant. Includes a penalty for the number of predictors. May decrease if added predictors do not improve the model sufficiently. Interpretation Proportion of the total variation in \\(\\mathbf{Y}\\) explained by the regression model. Adjusted measure of explained variance, accounting for model complexity. Range Ranges between \\(0\\) and \\(1\\). Can be lower than \\(R^2\\), particularly when the model includes irrelevant predictors. Usefulness Useful for understanding the overall fit of the model. Useful for comparing models with different numbers of predictors. In multiple regression, \\(R^2_a\\) provides a more reliable measure of model fit, especially when comparing models with different numbers of predictors. In a regression model with coefficients \\(\\beta = (\\beta_0, \\beta_1, \\dots, \\beta_{p-1})^\\top\\), the sums of squares are used to evaluate the contribution of predictors to explaining the variation in the response variable. Model Sums of Squares: \\(SSM\\): Total model sum of squares, capturing the variation explained by all predictors: \\[ SSM = SS(\\beta_0, \\beta_1, \\dots, \\beta_{p-1}). \\] Marginal Contribution: \\(SSM_m\\): Conditional model sum of squares, capturing the variation explained by predictors after accounting for others: \\[ SSM_m = SS(\\beta_0, \\beta_1, \\dots, \\beta_{p-1} | \\beta_0). \\] Decompositions of \\(SSM_m\\) Sequential Sums of Squares (Type I SS) Definition: Sequential SS depends on the order in which predictors are added to the model. It represents the additional contribution of each predictor given only the predictors that precede it in the sequence. Formula: \\[ SSM_m = SS(\\beta_1 | \\beta_0) + SS(\\beta_2 | \\beta_0, \\beta_1) + \\dots + SS(\\beta_{p-1} | \\beta_0, \\dots, \\beta_{p-2}). \\] Key Points: Sequential SS is not unique; it depends on the order of the predictors. Default in many statistical software functions (e.g., anova() in R). Marginal Sums of Squares (Type II SS) Definition: Marginal SS evaluates the contribution of a predictor after accounting for all other predictors except those with which it is collinear. It ignores hierarchical relationships or interactions, focusing on independent contributions. Formula: \\(SSM_m = SS(\\beta_j | \\beta_1, \\dots, \\beta_{j-1}, \\beta_{j + 1}, \\dots, \\beta_{p-1})\\) where Type II SS evaluates the contribution of \\(\\beta_j\\) while excluding any terms collinear with \\(\\beta_j\\). Key Points: Type II SS is independent of predictor order. Suitable for models without interaction terms or when predictors are balanced. Partial Sums of Squares (Type III SS) Definition: Partial SS evaluates the contribution of each predictor after accounting for all other predictors in the model. It quantifies the unique contribution of a predictor, controlling for the presence of others. Formula: \\[ SSM_m = SS(\\beta_1 | \\beta_0, \\beta_2, \\dots, \\beta_{p-1}) + \\dots + SS(\\beta_{p-1} | \\beta_0, \\beta_1, \\dots, \\beta_{p-2}). \\] Key Points: Partial SS is unique for a given model. More commonly used in practice for assessing individual predictor importance. Comparison of Sequential, Marginal, and Partial SS Aspect Sequential SS (Type I) Marginal SS (Type II) Partial SS (Type III) Dependency Depends on the order in which predictors are entered. Independent of order; adjusts for non-collinear predictors. Independent of order; evaluates unique contributions. Usage Default in software functions like anova() (Type I SS). Models without interactions or hierarchical dependencies. Commonly used for hypothesis testing. Interpretation Measures the additional contribution of predictors in sequence. Measures the contribution of a predictor, ignoring collinear terms. Measures the unique contribution of each predictor. Uniqueness Not unique; changes with predictor order. Unique for a given model without interactions. Unique for a given model. Practical Notes Use Type III SS (Partial SS) when: The focus is on individual predictor contributions while accounting for all others. Conducting hypothesis tests on predictors in complex models with interactions or hierarchical structures. Use Type II SS (Marginal SS) when: Working with balanced datasets or models without interaction terms. Ignoring interactions and focusing on independent effects. Use Type I SS (Sequential SS) when: Interested in understanding the incremental contribution of predictors based on a specific order of entry (e.g., stepwise regression). 5.1.2.1 OLS Assumptions A1 Linearity A2 Full Rank A3 Exogeneity of Independent Variables A4 Homoskedasticity A5 Data Generation (Random Sampling) A6 Normal Distribution 5.1.2.1.1 A1 Linearity The linear regression model is expressed as: \\[ A1: y = \\mathbf{x}\\beta + \\epsilon \\] This assumption is not restrictive since \\(x\\) can include nonlinear transformations (e.g., interactions, natural logarithms, quadratic terms). However, when combined with A3 (Exogeneity of Independent Variables), linearity can become restrictive. 5.1.2.1.1.1 Log Model Variants Logarithmic transformations of variables allow for flexible modeling of nonlinear relationships. Common log model forms include: Model Form Interpretation of \\(\\beta\\) In Words Level-Level \\(y = \\beta_0 + \\beta_1x + \\epsilon\\) \\(\\Delta y = \\beta_1 \\Delta x\\) A unit change in \\(x\\) results in a \\(\\beta_1\\) unit change in \\(y\\). Log-Level \\(\\ln(y) = \\beta_0 + \\beta_1x + \\epsilon\\) \\(\\% \\Delta y = 100 \\beta_1 \\Delta x\\) A unit change in \\(x\\) results in a \\(100 \\beta_1 \\%\\) change in \\(y\\). Level-Log \\(y = \\beta_0 + \\beta_1 \\ln(x) + \\epsilon\\) \\(\\Delta y = (\\beta_1/100)\\% \\Delta x\\) A 1% change in \\(x\\) results in a \\((\\beta_1 / 100)\\) unit change in \\(y\\). Log-Log \\(\\ln(y) = \\beta_0 + \\beta_1 \\ln(x) + \\epsilon\\) \\(\\% \\Delta y = \\beta_1 \\% \\Delta x\\) A 1% change in \\(x\\) results in a \\(\\beta_1 \\%\\) change in \\(y\\). 5.1.2.1.1.2 Higher-Order Models Higher-order terms allow the effect of \\(x_1\\) on \\(y\\) to depend on the level of \\(x_1\\). For example: \\[ y = \\beta_0 + x_1\\beta_1 + x_1^2\\beta_2 + \\epsilon \\] The partial derivative of \\(y\\) with respect to \\(x_1\\) is: \\[ \\frac{\\partial y}{\\partial x_1} = \\beta_1 + 2x_1\\beta_2 \\] The effect of \\(x_1\\) on \\(y\\) depends on the value of \\(x_1\\). Partial Effect at the Average: \\(\\beta_1 + 2E(x_1)\\beta_2\\). Average Partial Effect: \\(E(\\beta_1 + 2x_1\\beta_2)\\). 5.1.2.1.1.3 Interaction Terms Interactions capture the joint effect of two variables. For example: \\[ y = \\beta_0 + x_1\\beta_1 + x_2\\beta_2 + x_1x_2\\beta_3 + \\epsilon \\] \\(\\beta_1\\) is the average effect of a unit change in \\(x_1\\) on \\(y\\) when \\(x_2 = 0\\). The partial effect of \\(x_1\\) on \\(y\\), which depends on the level of \\(x_2\\), is: \\[ \\beta_1 + x_2\\beta_3. \\] 5.1.2.1.2 A2 Full Rank The full rank assumption ensures the uniqueness and existence of the parameter estimates in the population regression equation. It is expressed as: \\[ A2: \\text{rank}(E(\\mathbf{x&#39;x})) = k \\] This assumption is also known as the identification condition. Key Points No Perfect Multicollinearity: The columns of \\(\\mathbf{x}\\) (the matrix of predictors) must be linearly independent. No column in \\(\\mathbf{x}\\) can be written as a linear combination of other columns. Implications: Ensures that each parameter in the regression equation is identifiable and unique. Prevents computational issues, such as the inability to invert \\(\\mathbf{x&#39;x}\\), which is required for estimating \\(\\hat{\\beta}\\). Example of Violation If two predictors, \\(x_1\\) and \\(x_2\\), are perfectly correlated (e.g., \\(x_2 = 2x_1\\)), the rank of \\(\\mathbf{x}\\) is reduced, and \\(\\mathbf{x&#39;x}\\) becomes singular. In such cases: The regression coefficients cannot be uniquely estimated. The model fails to satisfy the full rank assumption. 5.1.2.1.3 A3 Exogeneity of Independent Variables The exogeneity assumption ensures that the independent variables (\\(\\mathbf{x}\\)) are not systematically related to the error term (\\(\\epsilon\\)). It is expressed as: \\[ A3: E[\\epsilon | x_1, x_2, \\dots, x_k] = E[\\epsilon | \\mathbf{x}] = 0 \\] This assumption is often referred to as strict exogeneity or mean independence (see Correlation and Independence. Key Points Strict Exogeneity: Independent variables carry no information about the error term \\(\\epsilon\\). By the [Law of Iterated Expectations], \\(E(\\epsilon) = 0\\), which can be satisfied by always including an intercept in the regression model. Implication: A3 implies: \\[ E(y | \\mathbf{x}) = \\mathbf{x}\\beta, \\] meaning the conditional mean function is a linear function of \\(\\mathbf{x}\\). This aligns with A1 Linearity. Relationship with Independence: Also referred to as mean independence, which is a weaker condition than full independence (see Correlation and Independence). 5.1.2.1.3.1 A3a: Weaker Exogeneity Assumption A weaker version of the exogeneity assumption is: \\[ A3a: E(\\mathbf{x_i&#39;}\\epsilon_i) = 0 \\] This implies: The independent variables (\\(\\mathbf{x}_i\\)) are uncorrelated with the error term (\\(\\epsilon_i\\)). Weaker than mean independence in A3. Comparison Between A3 and A3a Aspect A3 (Strict Exogeneity) A3a (Weaker Exogeneity) Definition \\(E(\\epsilon | \\mathbf{x}) = 0\\). \\(E(\\mathbf{x}_i&#39;\\epsilon_i) = 0\\). Strength Stronger assumption; implies A3a. Weaker assumption; does not imply A3. Interpretation Predictors provide no information about \\(\\epsilon\\). Predictors are uncorrelated with \\(\\epsilon\\). Causality Enables causal interpretation. Does not allow causal interpretations. Notes on Practical Relevance Checking for Exogeneity: Strict exogeneity cannot be tested directly, but violations can manifest as omitted variable bias, endogeneity, or measurement error. Including all relevant predictors and ensuring accurate measurement can help satisfy this assumption. Violations of Exogeneity: If A3 is violated, standard OLS estimates are biased and inconsistent. In such cases, instrumental variable (IV) methods or other approaches may be required to correct for endogeneity. 5.1.2.1.4 A4 Homoskedasticity The homoskedasticity assumption ensures that the variance of the error term (\\(\\epsilon\\)) is constant across all levels of the independent variables (\\(\\mathbf{x}\\)). It is expressed as: \\[ A4: \\text{Var}(\\epsilon | \\mathbf{x}) = \\text{Var}(\\epsilon) = \\sigma^2 \\] Key Points Definition: The variance of the disturbance term \\(\\epsilon\\) is the same for all observations, regardless of the values of the predictors \\(\\mathbf{x}\\). Practical Implication: Homoskedasticity ensures that the errors do not systematically vary with the predictors. This is critical for valid inference, as the standard errors of the coefficients rely on this assumption. Violation (Heteroskedasticity): If the variance of \\(\\epsilon\\) depends on \\(\\mathbf{x}\\), the assumption is violated. Common signs include funnel-shaped patterns in residual plots or varying error sizes. 5.1.2.1.5 A5 Data Generation (Random Sampling) The random sampling assumption ensures that the observations \\((y_i, x_{i1}, \\dots, x_{ik-1})\\) are drawn independently and identically distributed (iid) from the joint distribution of \\((y, \\mathbf{x})\\). It is expressed as: \\[ A5: \\{y_i, x_{i1}, \\dots, x_{ik-1} : i = 1, \\dots, n\\} \\] Key Points Random Sampling: The dataset is assumed to be a random sample from the population. Each observation is independent of others and follows the same probability distribution. Implications: With A3 (Exogeneity of Independent Variables) and A4 (Homoskedasticity), random sampling implies: Strict Exogeneity: \\[ E(\\epsilon_i | x_1, \\dots, x_n) = 0 \\] Independent variables do not contain information for predicting \\(\\epsilon\\). Non-Autocorrelation: \\[ E(\\epsilon_i \\epsilon_j | x_1, \\dots, x_n) = 0 \\quad \\text{for } i \\neq j \\] The error terms are uncorrelated across observations, conditional on the independent variables. Variance of Errors: \\[ \\text{Var}(\\epsilon | \\mathbf{X}) = \\text{Var}(\\epsilon) = \\sigma^2 \\mathbf{I}_n \\] When A5 May Not Hold: In time series data, where observations are often autocorrelated. In spatial data, where neighboring observations may not be independent. Practical Considerations Time Series Data: Use methods such as autoregressive models or generalized least squares (GLS) to address dependency in observations. Spatial Data: Spatial econometric models may be required to handle correlation across geographic locations. Checking Random Sampling: While true randomness cannot always be verified, exploratory analysis of the residuals (e.g., for patterns or autocorrelation) can help detect violations. 5.1.2.1.5.1 A5a: Stationarity in Stochastic Processes A stochastic process \\(\\{x_t\\}_{t=1}^T\\) is stationary if, for every collection of time indices \\(\\{t_1, t_2, \\dots, t_m\\}\\), the joint distribution of: \\[ x_{t_1}, x_{t_2}, \\dots, x_{t_m} \\] is the same as the joint distribution of: \\[ x_{t_1+h}, x_{t_2+h}, \\dots, x_{t_m+h} \\] for any \\(h \\geq 1\\). Key Points on Stationarity Definition: A stationary process has statistical properties (mean, variance, and covariance) that are invariant over time. For example, the joint distribution for the first ten observations is identical to the joint distribution for the next ten observations, regardless of their position in time. Implication: Stationarity ensures that the relationships observed in the data remain consistent over time. Independent draws automatically satisfy the stationarity condition. Weak Stationarity A stochastic process \\(\\{x_t\\}_{t=1}^T\\) is weakly stationary if: The covariance between \\(x_t\\) and \\(x_{t+h}\\) depends only on the lag \\(h\\) and not on \\(t\\). As \\(h \\to \\infty\\), the covariance diminishes, meaning \\(x_t\\) and \\(x_{t+h}\\) become “almost independent.” Differences Between Stationarity and Weak Stationarity Aspect Stationarity Weak Stationarity Joint Distribution Entire joint distribution remains unchanged over time. Focuses only on the first two moments: mean and covariance. Dependence Over Time Observations at all lags are equally distributed. Observations far apart are “almost independent.” Application Ensures strong consistency in time-series processes. More practical for many time-series applications. Weak stationarity is often sufficient for many time-series analyses, especially when focusing on correlations and trends rather than full distributions. Common Weakly Dependent Processes 1. Moving Average Process of Order 1 (MA(1)) An MA(1) process models the dependent variable \\(y_t\\) as a function of the current and one-period lagged stochastic error term: \\[ y_t = u_t + \\alpha_1 u_{t-1}, \\] where \\(u_t\\) is white noise, independently and identically distributed (iid) with variance \\(\\sigma^2\\). Key Properties Mean: \\[ E(y_t) = E(u_t) + \\alpha_1E(u_{t-1}) = 0 \\] Variance: \\[ \\begin{aligned} \\text{Var}(y_t) &amp;= \\text{Var}(u_t) + \\alpha_1^2 \\text{Var}(u_{t-1}) \\\\ &amp;= \\sigma^2 + \\alpha_1^2 \\sigma^2 \\\\ &amp;= \\sigma^2 (1 + \\alpha_1^2) \\end{aligned} \\] An increase in the absolute value of \\(\\alpha_1\\) increases the variance. Autocovariance: For lag 1: \\[ \\text{Cov}(y_t, y_{t-1}) = \\alpha_1 \\text{Var}(u_{t-1}) = \\alpha_1 \\sigma^2. \\] For lag 2 or greater: \\[ \\text{Cov}(y_t, y_{t-2}) = 0. \\] The MA(1) process is invertible if \\(|\\alpha_1| &lt; 1\\), allowing it to be rewritten as an autoregressive (AR) representation: \\[ u_t = y_t - \\alpha_1 u_{t-1}. \\] Invertibility implies that we can express the current observation in terms of past observations. An MA(q) process generalizes the MA(1) process to include \\(q\\) lags: \\[ y_t = u_t + \\alpha_1 u_{t-1} + \\dots + \\alpha_q u_{t-q}, \\] where \\(u_t \\sim WN(0, \\sigma^2)\\) (white noise with mean 0 and variance \\(\\sigma^2\\)). Key Characteristics: Covariance Stationary: An MA(q) process is covariance stationary irrespective of the parameter values. Invertibility: An MA(q) process is invertible if the parameters satisfy certain conditions (e.g., \\(|\\alpha_i| &lt; 1\\)). Autocorrelations: The autocorrelations are nonzero for lags up to \\(q\\) but are 0 for lags beyond \\(q\\). Conditional Mean: The conditional mean of \\(y_t\\) depends on the \\(q\\) lags, indicating “long-term memory.” Example: Autocovariance of an MA(1) Lag 1: \\[ \\begin{aligned} \\text{Cov}(y_t, y_{t-1}) &amp;= \\text{Cov}(u_t + \\alpha_1 u_{t-1}, u_{t-1} + \\alpha_1 u_{t-2}) \\\\ &amp;= \\alpha_1 \\text{Var}(u_{t-1}) \\\\ &amp;= \\alpha_1 \\sigma^2. \\end{aligned} \\] Lag 2: \\[ \\begin{aligned} \\text{Cov}(y_t, y_{t-2}) &amp;= \\text{Cov}(u_t + \\alpha_1 u_{t-1}, u_{t-2} + \\alpha_1 u_{t-3}) \\\\ &amp;= 0. \\end{aligned} \\] An MA process captures a linear relationship between the dependent variable \\(y_t\\) and the current and past values of a stochastic error term \\(u_t\\). Its properties make it useful for modeling time-series data with limited memory and short-term dependencies. Auto-Regressive Process of Order 1 (AR(1)) An auto-regressive process of order 1 (AR(1)) is defined as: \\[ y_t = \\rho y_{t-1} + u_t, \\quad |\\rho| &lt; 1 \\] where \\(u_t\\) represents independent and identically distributed (i.i.d.) random noise over \\(t\\) with variance \\(\\sigma^2\\). Covariance at lag 1: \\[ \\begin{aligned} Cov(y_t, y_{t-1}) &amp;= Cov(\\rho y_{t-1} + u_t, y_{t-1}) \\\\ &amp;= \\rho Var(y_{t-1}) \\\\ &amp;= \\rho \\frac{\\sigma^2}{1-\\rho^2}. \\end{aligned} \\] Covariance at lag \\(h\\): \\[ Cov(y_t, y_{t-h}) = \\rho^h \\frac{\\sigma^2}{1-\\rho^2}. \\] Stationarity implies that the distribution of \\(y_t\\) does not change over time, requiring constant mean and variance. For this process: Mean Stationarity: Assuming \\(E(y_t) = 0\\), we have: \\[ y_t = \\rho^t y_0 + \\rho^{t-1}u_1 + \\rho^{t-2}u_2 + \\dots + \\rho u_{t-1} + u_t. \\] If the initial observation \\(y_0 = 0\\), then \\(y_t\\) is simply a weighted sum of the random shocks \\(u_t\\) from all prior time periods. Thus, \\(E(y_t) = 0\\) for all \\(t\\). Variance Stationarity: The variance is computed as: \\[ Var(y_t) = Var(\\rho y_{t-1} + u_t). \\] Expanding and simplifying: \\[ Var(y_t) = \\rho^2 Var(y_{t-1}) + Var(u_t) + 2\\rho Cov(y_{t-1}, u_t). \\] Since \\(u_t\\) is independent of \\(y_{t-1}\\), \\(Cov(y_{t-1}, u_t) = 0\\), giving: \\[ Var(y_t) = \\rho^2 Var(y_{t-1}) + \\sigma^2. \\] Solving recursively, we find: \\[ Var(y_t) = \\frac{\\sigma^2}{1-\\rho^2}. \\] For the variance to remain constant over time, it is required that \\(|\\rho| &lt; 1\\) and \\(p \\notin \\{1,-1\\}\\). Key Insights on Stationarity Stationarity Requirement: The condition \\(|\\rho| &lt; 1\\) ensures stationarity, as this guarantees that both the mean and variance of the process are constant over time. Weak Dependence: As \\(|\\rho| &lt; 1\\), the dependency between observations diminishes with increasing lag \\(h\\), as seen from the covariance: \\[ Cov(y_t, y_{t-h}) = \\rho^h \\frac{\\sigma^2}{1-\\rho^2}. \\] To estimate an AR(1) process, we utilize the Yule-Walker equations, which relate the autocovariances of the process to its parameters. Starting with the AR(1) process: \\[ y_t = \\epsilon_t + \\phi y_{t-1}, \\] multiplying both sides by \\(y_{t-\\tau}\\) and taking expectations, we get: \\[ y_t y_{t-\\tau} = \\epsilon_t y_{t-\\tau} + \\phi y_{t-1} y_{t-\\tau}. \\] For \\(\\tau \\geq 1\\), the autocovariance \\(\\gamma(\\tau)\\) satisfies: \\[ \\gamma(\\tau) = \\phi \\gamma(\\tau - 1). \\] Dividing through by the variance \\(\\gamma(0)\\), we obtain the autocorrelation: \\[ \\rho_\\tau = \\phi^\\tau. \\] Thus, the autocorrelations decay geometrically as \\(\\phi^\\tau\\), where \\(|\\phi| &lt; 1\\) ensures stationarity and decay over time. Generalizing to AR(p) An AR(p) process extends the AR(1) structure to include \\(p\\) lags: \\[ y_t = \\phi_1 y_{t-1} + \\phi_2 y_{t-2} + \\dots + \\phi_p y_{t-p} + \\epsilon_t. \\] Here, \\(\\epsilon_t\\) is white noise with \\(E(\\epsilon_t) = 0\\) and \\(Var(\\epsilon_t) = \\sigma^2\\). The AR(p) process is covariance stationary if the roots of the characteristic equation lie outside the unit circle: \\[ 1 - \\phi_1 z - \\phi_2 z^2 - \\dots - \\phi_p z^p = 0. \\] For the AR(p) process, the autocorrelations \\(\\rho_\\tau\\) decay more complexly compared to the AR(1). However, they still diminish over time, ensuring weak dependence among distant observations. The Yule-Walker equations for an AR(p) process provide a system of linear equations to estimate the parameters \\(\\phi_1, \\phi_2, \\dots, \\phi_p\\): \\[ \\gamma(\\tau) = \\phi_1 \\gamma(\\tau - 1) + \\phi_2 \\gamma(\\tau - 2) + \\dots + \\phi_p \\gamma(\\tau - p), \\quad \\tau \\geq 1. \\] This system can be written in matrix form for \\(\\tau = 1, \\dots, p\\) as: \\[ \\begin{bmatrix} \\gamma(1) \\\\ \\gamma(2) \\\\ \\vdots \\\\ \\gamma(p) \\end{bmatrix} = \\begin{bmatrix} \\gamma(0) &amp; \\gamma(1) &amp; \\dots &amp; \\gamma(p-1) \\\\ \\gamma(1) &amp; \\gamma(0) &amp; \\dots &amp; \\gamma(p-2) \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\gamma(p-1) &amp; \\gamma(p-2) &amp; \\dots &amp; \\gamma(0) \\end{bmatrix} \\begin{bmatrix} \\phi_1 \\\\ \\phi_2 \\\\ \\vdots \\\\ \\phi_p \\end{bmatrix}. \\] This system is solved to estimate the coefficients \\(\\phi_1, \\phi_2, \\dots, \\phi_p\\). ARMA(p, q) Process An ARMA(p, q) process combines autoregressive (AR) and moving average (MA) components to model time series data effectively. The general form is: \\[ y_t = \\phi_1 y_{t-1} + \\phi_2 y_{t-2} + \\dots + \\phi_p y_{t-p} + \\epsilon_t + \\alpha_1 \\epsilon_{t-1} + \\alpha_2 \\epsilon_{t-2} + \\dots + \\alpha_q \\epsilon_{t-q}. \\] A simple case of ARMA(1, 1) is given by: \\[ y_t = \\phi y_{t-1} + \\epsilon_t + \\alpha \\epsilon_{t-1}, \\] where: \\(\\phi\\) captures the autoregressive behavior, \\(\\alpha\\) controls the moving average component, \\(\\epsilon_t\\) represents white noise. ARMA processes can capture seasonality and more complex dependencies than pure AR or MA models. Random Walk Process A random walk is a non-stationary process defined as: \\[ y_t = y_0 + \\sum_{s=1}^t u_s, \\] where \\(u_s\\) are i.i.d. random variables. Properties: Non-Stationarity: If \\(y_0 = 0\\), then \\(E(y_t) = 0\\), but the variance increases over time: \\[ Var(y_t) = t \\sigma^2. \\] Not Weakly Dependent: The covariance of the process does not diminish with increasing lag \\(h\\): \\[ Cov\\left(\\sum_{s=1}^t u_s, \\sum_{s=1}^{t-h} u_s\\right) = (t-h)\\sigma^2. \\] As \\(h\\) increases, the covariance remains large, violating the condition for weak dependence. 5.1.2.1.5.2 A5a: Stationarity and Weak Dependence in Time Series For time series data, the set \\(\\{y_t, x_{t1}, \\dots, x_{tk-1}\\}\\), where \\(t = 1, \\dots, T\\), must satisfy the conditions of stationarity and weak dependence. These properties are essential to ensure the consistency and efficiency of estimators in time-series regression models. Stationarity: A stationary process has statistical properties (e.g., mean, variance, autocovariance) that remain constant over time. This ensures that the relationships in the data do not change as \\(t\\) progresses, making it possible to draw meaningful inferences. Weak Dependence: Weak dependence implies that observations far apart in time are “almost independent.” While there may be short-term correlations, these diminish as the time lag increases. This property ensures that the sample averages are representative of the population mean. The Weak Law of Large Numbers provides a foundation for the consistency of sample means. If \\(\\{z_t\\}\\) is a weakly dependent, stationary process with \\(E(|z_t|) &lt; \\infty\\) and \\(E(z_t) = \\mu\\), then: \\[ \\frac{1}{T} \\sum_{t=1}^T z_t \\xrightarrow{p} \\mu. \\] Interpretation: As the sample size \\(T \\to \\infty\\), the sample mean \\(\\bar{z} = \\frac{1}{T} \\sum_{t=1}^T z_t\\) converges in probability to the true mean \\(\\mu\\). This ensures the consistency of estimators based on time-series data. The Central Limit Theorem extends the WLLN by describing the distribution of the sample mean. Under additional regularity conditions (e.g., finite variance) (Greene 1990), the sample mean \\(\\bar{z}\\) satisfies: \\[ \\sqrt{T}(\\bar{z} - \\mu) \\xrightarrow{d} N(0, B), \\] where: \\[ B = \\text{Var}(z_t) + 2\\sum_{h=1}^\\infty \\text{Cov}(z_t, z_{t-h}). \\] Interpretation: The sample mean \\(\\bar{z}\\) is approximately normally distributed for large \\(T\\). The variance of the limiting distribution, \\(B\\), depends not only on the variance of \\(z_t\\) but also on the covariances between \\(z_t\\) and its past values. 5.1.2.1.6 A6 Normal Distribution A6: \\(\\epsilon|\\mathbf{x} \\sim N(0, \\sigma^2 I_n)\\) The assumption here implies that the error term \\(\\epsilon\\) is normally distributed with mean zero and variance \\(\\sigma^2 I_n\\). This assumption is fundamental for statistical inference in linear regression models. Using assumptions A1 Linearity, A2 Full Rank, and A3 Exogeneity of Independent Variables, we derive the identification (or orthogonality condition) for the population parameter \\(\\beta\\): \\[ \\begin{aligned} y &amp;= x\\beta + \\epsilon &amp;&amp; \\text{(A1: Model Specification)} \\\\ x&#39;y &amp;= x&#39;x\\beta + x&#39;\\epsilon &amp;&amp; \\text{(Multiply both sides by $x&#39;$)} \\\\ E(x&#39;y) &amp;= E(x&#39;x)\\beta + E(x&#39;\\epsilon) &amp;&amp; \\text{(Taking expectation)} \\\\ E(x&#39;y) &amp;= E(x&#39;x)\\beta &amp;&amp; \\text{(A3: Exogeneity, $E(x&#39;\\epsilon) = 0$)} \\\\ [E(x&#39;x)]^{-1}E(x&#39;y) &amp;= [E(x&#39;x)]^{-1}E(x&#39;x)\\beta &amp;&amp; \\text{(Invertibility of $E(x&#39;x)$, A2)} \\\\ [E(x&#39;x)]^{-1}E(x&#39;y) &amp;= \\beta &amp;&amp; \\text{(Simplified solution for $\\beta$)} \\end{aligned} \\] Thus, \\(\\beta\\) is identified as the vector of parameters that minimizes the expected squared error. To find \\(\\beta\\), we minimize the expected value of the squared error: \\[ \\underset{\\gamma}{\\operatorname{argmin}} \\ E\\big((y - x\\gamma)^2\\big) \\] The first-order condition is derived by taking the derivative of the objective function with respect to \\(\\gamma\\) and setting it to zero: \\[ \\begin{aligned} \\frac{\\partial E\\big((y - x\\gamma)^2\\big)}{\\partial \\gamma} &amp;= 0 \\\\ -2E(x&#39;(y - x\\gamma)) &amp;= 0 \\\\ E(x&#39;y) - E(x&#39;x\\gamma) &amp;= 0 \\\\ E(x&#39;y) &amp;= E(x&#39;x)\\gamma \\\\ (E(x&#39;x))^{-1}E(x&#39;y) &amp;= \\gamma \\end{aligned} \\] This confirms that \\(\\gamma = \\beta\\). The second-order condition ensures that the solution minimizes the objective function. Taking the second derivative: \\[ \\frac{\\partial^2 E\\big((y - x\\gamma)^2\\big)}{\\partial \\gamma&#39;^2} = 0 = 2E(x&#39;x) \\] If assumption A3 Exogeneity of Independent Variables holds, \\(E(x&#39;x)\\) is positive semi-definite (PSD). Thus, \\(2E(x&#39;x)\\) is also PSD, ensuring a minimum. 5.1.2.1.7 Hierarchy of OLS Assumptions This table summarizes the hierarchical nature of assumptions required to derive different properties of the OLS estimator. Usage of Assumptions Assumption Identification Data Description Unbiasedness Consistency Gauss-Markov (BLUE) Asymptotic Inference (z and Chi-squared) Classical LM (BUE) Small-sample Inference (t and F) A2 Full Rank Variation in \\(\\mathbf{X}\\) \\(\\checkmark\\) \\(\\checkmark\\) \\(\\checkmark\\) \\(\\checkmark\\) A5 Data Generation (Random Sampling) Random Sampling \\(\\checkmark\\) \\(\\checkmark\\) \\(\\checkmark\\) A1 Linearity Linearity in Parameters \\(\\checkmark\\) \\(\\checkmark\\) \\(\\checkmark\\) A3 Exogeneity of Independent Variables Zero Conditional Mean \\(\\checkmark\\) \\(\\checkmark\\) \\(\\checkmark\\) A4 Homoskedasticity \\(\\mathbf{H}\\) homoskedasticity \\(\\checkmark\\) \\(\\checkmark\\) A6 Normal Distribution Normality of Errors \\(\\checkmark\\) Identification Data Description: Ensures the model is identifiable and coefficients can be estimated. Unbiasedness Consistency: Guarantees that OLS estimates are unbiased and converge to the true parameter values as the sample size increases. Gauss-Markov (BLUE) and Asymptotic Inference: Requires additional assumptions (e.g., homoskedasticity) to ensure minimum variance of estimators and valid inference using large-sample tests (z and chi-squared). Classical LM (BUE) Small-sample Inference: Builds on all previous assumptions and adds normality of errors for valid t and F tests in finite samples. 5.1.2.2 Theorems 5.1.2.2.1 Frisch–Waugh–Lovell Theorem The Frisch–Waugh–Lovell (FWL) Theorem is a fundamental result in linear regression that allows for a deeper understanding of how coefficients are computed in a multiple regression setting (Lovell 2008). Informally, it states: When estimating the effect of a subset of variables (\\(X_1\\)) on \\(y\\) in the presence of other variables (\\(X_2\\)), you can “partial out” the influence of \\(X_2\\) from both \\(y\\) and \\(X_1\\). Then, regressing the residuals of \\(y\\) on the residuals of \\(X_1\\) produces coefficients for \\(X_1\\) that are identical to those obtained from the full multiple regression. Consider the multiple linear regression model: \\[ \\mathbf{y = X\\beta + \\epsilon = X_1\\beta_1 + X_2\\beta_2 + \\epsilon} \\] where: \\(y\\) is an \\(n \\times 1\\) vector of the dependent variable. \\(X_1\\) is an \\(n \\times k_1\\) matrix of regressors of interest. \\(X_2\\) is an \\(n \\times k_2\\) matrix of additional regressors. \\(\\beta_1\\) and \\(\\beta_2\\) are coefficient vectors of sizes \\(k_1 \\times 1\\) and \\(k_2 \\times 1\\), respectively. \\(\\epsilon\\) is an \\(n \\times 1\\) error term vector. This can be equivalently represented in partitioned matrix form as: \\[ \\left( \\begin{array}{cc} X_1&#39;X_1 &amp; X_1&#39;X_2 \\\\ X_2&#39;X_1 &amp; X_2&#39;X_2 \\end{array} \\right) \\left( \\begin{array}{c} \\hat{\\beta_1} \\\\ \\hat{\\beta_2} \\end{array} \\right) = \\left( \\begin{array}{c} X_1&#39;y \\\\ X_2&#39;y \\end{array} \\right) \\] The ordinary least squares (OLS) estimator for the vector \\(\\begin{pmatrix} \\beta_1 \\\\ \\beta_2 \\end{pmatrix}\\) is: \\[ \\begin{pmatrix} \\hat{\\beta}_1 \\\\ \\hat{\\beta}_2 \\end{pmatrix} = \\begin{pmatrix} X_1&#39;X_1 &amp; X_1&#39;X_2 \\\\ X_2&#39;X_1 &amp; X_2&#39;X_2 \\end{pmatrix}^{-1} \\begin{pmatrix} X_1&#39;y \\\\ X_2&#39;y \\end{pmatrix}. \\] If we only want the coefficients on \\(X_1\\), a known result from partitioned-inversion gives: \\[ \\hat{\\beta}_1 = \\bigl(X_1&#39; M_2\\, X_1\\bigr)^{-1} \\,X_1&#39; M_2\\, y, \\] where \\[ M_2 = I - X_2 \\bigl(X_2&#39;X_2\\bigr)^{-1} X_2&#39;. \\] The matrix \\(M_2\\) is often called the residual-maker or annihilator matrix for \\(X_2\\). It is an \\(n \\times n\\) symmetric, idempotent projection matrix that projects any vector in \\(\\mathbb{R}^n\\) onto the orthogonal complement of the column space of \\(X_2\\). \\(M_2\\) satisfies \\(M_2^2 = M_2\\), and \\(M_2 = M_2&#39;\\). Intuitively, \\(M_2\\) captures the part of \\(y\\) (and any other vector) that is orthogonal to the columns of \\(X_2\\). This “partialling out” of \\(X_2\\) from both \\(y\\) and \\(X_1\\) lets us isolate \\(\\hat{\\beta}_1\\). Equivalently, we can also represent \\(\\hat{\\beta_1}\\) as: \\[ \\mathbf{\\hat{\\beta_1} = (X_1&#39;X_1)^{-1}X_1&#39;y - (X_1&#39;X_1)^{-1}X_1&#39;X_2\\hat{\\beta_2}} \\] From this equation, we can see that Betas from Multiple vs. Simple Regressions: The coefficients (\\(\\beta\\)) from a multiple regression are generally not the same as the coefficients from separate individual simple regressions. Impact of Additional Variables (\\(X_2\\)): The inclusion of different sets of explanatory variables (\\(X_2\\)) affects all coefficient estimates, even for those in \\(X_1\\). Special Cases: If \\(X_1&#39;X_2 = 0\\) (orthogonality between \\(X_1\\) and \\(X_2\\)) or \\(\\hat{\\beta_2} = 0\\), the above points (1 and 2) do not hold. In such cases, there is no interaction between the coefficients in \\(X_1\\) and \\(X_2\\), making the coefficients in \\(X_1\\) unaffected by \\(X_2\\). Steps in FWL: Partial Out \\(X_2\\) from \\(y\\): Regress \\(y\\) on \\(X_2\\) to obtain residuals: \\[ \\tilde{y} = M_2y. \\] Partial Out \\(X_2\\) from \\(X_1\\): For each column of \\(X_1\\), regress it on \\(X_2\\) to obtain residuals: \\[ \\tilde{X}_1 = M_2X_1. \\] Regression of Residuals: Regress \\(\\tilde{y}\\) on \\(\\tilde{X}_1\\): \\[ \\tilde{y} = \\tilde{X}_1\\beta_1 + \\text{error}. \\] The coefficients \\(\\beta_1\\) obtained here are identical to those from the full model regression: \\[ y = X_1\\beta_1 + X_2\\beta_2 + \\epsilon. \\] Why It Matters Interpretation of Partial Effects: The FWL Theorem provides a way to interpret \\(\\beta_1\\) as the effect of \\(X_1\\) on \\(y\\) after removing any linear dependence on \\(X_2\\). Computational Simplicity: It allows the decomposition of a large regression problem into smaller, computationally simpler pieces. # Simulate data set.seed(123) n &lt;- 100 X1 &lt;- matrix(rnorm(n * 2), n, 2) # Two regressors of interest X2 &lt;- matrix(rnorm(n * 2), n, 2) # Two additional regressors beta1 &lt;- c(2,-1) # Coefficients for X1 beta2 &lt;- c(1, 0.5) # Coefficients for X2undefined u &lt;- rnorm(n) # Error term y &lt;- X1 %*% beta1 + X2 %*% beta2 + u # Generate dependent variable # Full regression full_model &lt;- lm(y ~ X1 + X2) summary(full_model) #&gt; #&gt; Call: #&gt; lm(formula = y ~ X1 + X2) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -2.47336 -0.58010 0.07461 0.68778 2.46552 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 0.11614 0.10000 1.161 0.248 #&gt; X11 1.77575 0.10899 16.293 &lt; 2e-16 *** #&gt; X12 -1.14151 0.10204 -11.187 &lt; 2e-16 *** #&gt; X21 0.94954 0.10468 9.071 1.60e-14 *** #&gt; X22 0.47667 0.09506 5.014 2.47e-06 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 0.9794 on 95 degrees of freedom #&gt; Multiple R-squared: 0.8297, Adjusted R-squared: 0.8225 #&gt; F-statistic: 115.7 on 4 and 95 DF, p-value: &lt; 2.2e-16 # Step 1: Partial out X2 from y y_residual &lt;- residuals(lm(y ~ X2)) # Step 2: Partial out X2 from X1 X1_residual &lt;- residuals(lm(X1 ~ X2)) # Step 3: Regress residuals fwl_model &lt;- lm(y_residual ~ X1_residual - 1) summary(fwl_model) #&gt; #&gt; Call: #&gt; lm(formula = y_residual ~ X1_residual - 1) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -2.47336 -0.58010 0.07461 0.68778 2.46552 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; X1_residual1 1.7758 0.1073 16.55 &lt;2e-16 *** #&gt; X1_residual2 -1.1415 0.1005 -11.36 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 0.9643 on 98 degrees of freedom #&gt; Multiple R-squared: 0.8109, Adjusted R-squared: 0.807 #&gt; F-statistic: 210.1 on 2 and 98 DF, p-value: &lt; 2.2e-16 # Comparison of coefficients cat(&quot;Full model coefficients (X1):&quot;, coef(full_model)[2:3], &quot;\\n&quot;) #&gt; Full model coefficients (X1): 1.775754 -1.141514 cat(&quot;FWL model coefficients:&quot;, coef(fwl_model), &quot;\\n&quot;) #&gt; FWL model coefficients: 1.775754 -1.141514 5.1.2.2.2 Gauss-Markov Theorem For a linear regression model: \\[ \\mathbf{y = X\\beta + \\epsilon}, \\] under the assumptions: A1: Linearity of the model. A2: Full rank of \\(\\mathbf{X}\\). A3: Exogeneity of \\(\\mathbf{X}\\). A4: Homoskedasticity of \\(\\epsilon\\). The Ordinary Least Squares (OLS) estimator: \\[ \\hat{\\beta} = \\mathbf{(X&#39;X)^{-1}X&#39;y}, \\] is the Best Linear Unbiased Estimator (BLUE). This means that \\(\\hat{\\beta}\\) has the minimum variance among all linear unbiased estimators of \\(\\beta\\). 1. Unbiasedness Suppose we consider any linear estimator of \\(\\beta\\) of the form: \\[ \\tilde{\\beta} = \\mathbf{C\\,y}, \\] where \\(\\mathbf{y}\\) is the \\(n \\times 1\\) vector of observations, \\(\\mathbf{C}\\) is a \\(k \\times n\\) matrix (with \\(k\\) the dimension of \\(\\beta\\)) that depends only on the design matrix \\(\\mathbf{X}\\). Our regression model is \\[ \\mathbf{y} = \\mathbf{X}\\beta + \\boldsymbol{\\epsilon}, \\quad E[\\boldsymbol{\\epsilon} \\mid \\mathbf{X}] = \\mathbf{0}, \\quad \\mathrm{Var}(\\boldsymbol{\\epsilon} \\mid \\mathbf{X}) = \\sigma^2 \\mathbf{I}. \\] We say \\(\\tilde{\\beta}\\) is unbiased if its conditional expectation (given \\(\\mathbf{X}\\)) equals the true parameter \\(\\beta\\): \\[ E(\\tilde{\\beta} \\mid \\mathbf{X}) = E(\\mathbf{C\\,y} \\mid \\mathbf{X}) = \\beta. \\] Substitute \\(\\mathbf{y} = \\mathbf{X}\\beta + \\boldsymbol{\\epsilon}\\): \\[ E(\\mathbf{C\\,y} \\mid \\mathbf{X}) = E\\bigl(\\mathbf{C}(\\mathbf{X}\\beta + \\boldsymbol{\\epsilon}) \\mid \\mathbf{X}\\bigr) = \\mathbf{C\\,X}\\,\\beta + \\mathbf{C}\\,E(\\boldsymbol{\\epsilon} \\mid \\mathbf{X}) = \\mathbf{C\\,X}\\,\\beta. \\] For this to hold for all \\(\\beta\\), we require \\[ \\mathbf{C\\,X} = \\mathbf{I}. \\] In other words, \\(\\mathbf{C}\\) must be a “right-inverse” of \\(\\mathbf{X}\\). On the other hand, the OLS estimator \\(\\hat{\\beta}\\) is given by \\[ \\hat{\\beta} = (\\mathbf{X}&#39;\\mathbf{X})^{-1}\\mathbf{X}&#39;\\,\\mathbf{y}. \\] You can verify: Let \\(\\mathbf{C}_{\\text{OLS}} = (\\mathbf{X}&#39;\\mathbf{X})^{-1} \\mathbf{X}&#39;\\). Then \\[ \\mathbf{C}_{\\text{OLS}}\\,\\mathbf{X} = (\\mathbf{X}&#39;\\mathbf{X})^{-1}\\mathbf{X}&#39;\\,\\mathbf{X} = \\mathbf{I}. \\] By the argument above, this makes \\(\\hat{\\beta}\\) unbiased. Hence, any linear estimator \\(\\tilde{\\beta} = \\mathbf{C\\,y}\\) that is unbiased must satisfy \\(\\mathbf{C\\,X} = \\mathbf{I}\\). 2. Minimum Variance (Gauss–Markov Part) Among all estimators of the form \\(\\tilde{\\beta} = \\mathbf{C\\,y}\\) that are unbiased (so \\(\\mathbf{C\\,X} = \\mathbf{I}\\)), OLS achieves the smallest covariance matrix. Variance of a General Unbiased Estimator If \\(\\tilde{\\beta} = \\mathbf{C\\,y}\\) with \\(\\mathbf{C\\,X} = \\mathbf{I}\\), then: \\[ \\mathrm{Var}(\\tilde{\\beta} \\mid \\mathbf{X}) = \\mathrm{Var}(\\mathbf{C\\,y} \\mid \\mathbf{X}) = \\mathbf{C}\\,\\mathrm{Var}(\\mathbf{y} \\mid \\mathbf{X})\\,\\mathbf{C}&#39; = \\mathbf{C}\\bigl(\\sigma^2 \\mathbf{I}\\bigr)\\mathbf{C}&#39; = \\sigma^2\\,\\mathbf{C}\\,\\mathbf{C}&#39;. \\] Variance of the OLS Estimator For OLS, \\(\\hat{\\beta} = (\\mathbf{X}&#39;\\mathbf{X})^{-1}\\mathbf{X}&#39;\\,\\mathbf{y}\\). Thus, \\[ \\mathrm{Var}(\\hat{\\beta} \\mid \\mathbf{X}) = \\sigma^2\\,(\\mathbf{X}&#39;\\mathbf{X})^{-1}. \\] Comparing \\(\\mathrm{Var}(\\tilde{\\beta})\\) to \\(\\mathrm{Var}(\\hat{\\beta})\\) We want to show: \\[ \\mathrm{Var}(\\tilde{\\beta} \\mid \\mathbf{X}) - \\mathrm{Var}(\\hat{\\beta} \\mid \\mathbf{X}) \\;\\;\\text{is positive semi-definite.} \\] Since both \\(\\tilde{\\beta}\\) and \\(\\hat{\\beta}\\) are unbiased, we know: \\[ \\mathbf{C\\,X} = \\mathbf{I}, \\quad (\\mathbf{X}&#39;\\mathbf{X})^{-1}\\mathbf{X}&#39;\\,\\mathbf{X} = \\mathbf{I}. \\] One can show algebraically (as in the proof provided above) that \\[ \\mathrm{Var}(\\tilde{\\beta} \\mid \\mathbf{X}) - \\mathrm{Var}(\\hat{\\beta} \\mid \\mathbf{X}) = \\sigma^2 \\bigl[\\mathbf{C}\\mathbf{C}&#39; - (\\mathbf{X}&#39;\\mathbf{X})^{-1}\\bigr]. \\] Under the condition \\(\\mathbf{C\\,X} = \\mathbf{I}\\), the difference \\(\\mathbf{C}\\mathbf{C}&#39; - (\\mathbf{X}&#39;\\mathbf{X})^{-1}\\) is positive semi-definite. Positive semi-definite difference means \\[ \\mathbf{v}&#39; \\Bigl(\\mathbf{C}\\mathbf{C}&#39; - (\\mathbf{X}&#39;\\mathbf{X})^{-1}\\Bigr)\\mathbf{v} \\ge 0 \\quad \\text{for all vectors } \\mathbf{v}. \\] Hence, \\(\\hat{\\beta}\\) has the smallest variance (in the sense of covariance matrices) among all linear unbiased estimators \\(\\tilde{\\beta} = \\mathbf{C\\,y}\\). Summary of the Key Points Unbiasedness: A linear estimator \\(\\tilde{\\beta} = \\mathbf{C\\,y}\\) is unbiased if \\(E(\\tilde{\\beta}\\mid \\mathbf{X}) = \\beta\\). This forces \\(\\mathbf{C\\,X} = \\mathbf{I}\\). OLS is Unbiased: The OLS estimator \\(\\hat{\\beta} = (X&#39;X)^{-1} X&#39; \\, y\\) satisfies \\((X&#39;X)^{-1} X&#39; \\, X = I\\), hence is unbiased. OLS has Minimum Variance: Among all \\(\\mathbf{C}\\) that satisfy \\(\\mathbf{C\\,X} = \\mathbf{I}\\), the matrix \\((\\mathbf{X}&#39;\\mathbf{X})^{-1}\\) gives the smallest possible \\(\\mathrm{Var}(\\tilde{\\beta})\\). In matrix form, \\(\\mathrm{Var}(\\tilde{\\beta}) - \\mathrm{Var}(\\hat{\\beta})\\) is positive semi-definite, showing OLS is optimal (the Best Linear Unbiased Estimator, BLUE). 5.1.2.3 Finite Sample Properties The finite sample properties of an estimator are considered when the sample size \\(n\\) is fixed (not asymptotically large). Key properties include bias, distribution, and standard deviation of the estimator. Bias measures how close an estimator is, on average, to the true parameter value \\(\\beta\\). It is defined as: \\[ \\text{Bias} = E(\\hat{\\beta}) - \\beta \\] Where: \\(\\beta\\): True parameter value. \\(\\hat{\\beta}\\): Estimator for \\(\\beta\\). Unbiased Estimator: An estimator is unbiased if: \\[ \\text{Bias} = E(\\hat{\\beta}) - \\beta = 0 \\quad \\text{or equivalently} \\quad E(\\hat{\\beta}) = \\beta \\] This means the estimator will produce estimates that are, on average, equal to the value it is trying to estimate. An estimator is a function of random variables (data). Its distribution describes how the estimates vary across repeated samples. Key aspects include: Center: Mean of the distribution, which relates to bias. Spread: Variability of the estimator, captured by its standard deviation or variance. The standard deviation of an estimator measures the spread of its sampling distribution. It indicates the variability of the estimator across different samples. 5.1.2.3.1 Ordinary Least Squares Properties Under the standard assumptions for OLS: A1: The relationship between \\(Y\\) and \\(X\\) is linear. A2: The matrix \\(\\mathbf{X&#39;X}\\) is invertible. A3: \\(E(\\epsilon|X) = 0\\) (errors are uncorrelated with predictors). OLS is unbiased under these assumptions. The proof is as follows: \\[ \\begin{aligned} E(\\hat{\\beta}) &amp;= E(\\mathbf{(X&#39;X)^{-1}X&#39;y}) &amp;&amp; \\text{A2}\\\\ &amp;= E(\\mathbf{(X&#39;X)^{-1}X&#39;(X\\beta + \\epsilon)}) &amp;&amp; \\text{A1}\\\\ &amp;= E(\\mathbf{(X&#39;X)^{-1}X&#39;X\\beta + (X&#39;X)^{-1}X&#39;\\epsilon}) \\\\ &amp;= E(\\beta + \\mathbf{(X&#39;X)^{-1}X&#39;\\epsilon}) \\\\ &amp;= \\beta + E(\\mathbf{(X&#39;X)^{-1}X&#39;\\epsilon}) \\\\ &amp;= \\beta + E(E(\\mathbf{(X&#39;X)^{-1}X&#39;\\epsilon}|X)) &amp;&amp; \\text{LIE (Law of Iterated Expectation)} \\\\ &amp;= \\beta + E(\\mathbf{(X&#39;X)^{-1}X&#39;}E(\\epsilon|X)) \\\\ &amp;= \\beta + E(\\mathbf{(X&#39;X)^{-1}X&#39;} \\cdot 0) &amp;&amp; \\text{A3}\\\\ &amp;= \\beta \\end{aligned} \\] Key Points: Linearity of Expectation: Used to separate terms involving \\(\\beta\\) and \\(\\epsilon\\). Law of Iterated Expectation (LIE): Simplifies nested expectations. Exogeneity of Errors (A3): Ensures \\(E(\\epsilon|X) = 0\\), eliminating bias. Implications of Unbiasedness OLS estimators are centered around the true value \\(\\beta\\) across repeated samples. In small samples, OLS estimators may exhibit variability, but their expected value remains \\(\\beta\\). If the assumption of exogeneity (A3) is violated, the OLS estimator becomes biased. Specifically, omitted variables or endogeneity can introduce systematic errors into the estimation. From the Frisch-Waugh-Lovell Theorem: If an omitted variable \\(\\hat{\\beta}_2 \\neq 0\\) (non-zero effect) and the omitted variable is correlated with the included predictors (\\(\\mathbf{X_1&#39;X_2} \\neq 0\\)), then the OLS estimator will be biased. This bias arises because the omitted variable contributes to the variation in the dependent variable, but its effect is incorrectly attributed to other predictors. 5.1.2.3.2 Conditional Variance of OLS Estimator Under assumptions A1, A2, A3, and A4, the conditional variance of the OLS estimator is: \\[ \\begin{aligned} Var(\\hat{\\beta}|\\mathbf{X}) &amp;= Var(\\beta + \\mathbf{(X&#39;X)^{-1}X&#39;\\epsilon|X}) &amp;&amp; \\text{A1-A2} \\\\ &amp;= Var((\\mathbf{X&#39;X)^{-1}X&#39;\\epsilon|X}) \\\\ &amp;= \\mathbf{(X&#39;X)^{-1}X&#39;} Var(\\epsilon|\\mathbf{X})\\mathbf{X(X&#39;X)^{-1}} \\\\ &amp;= \\mathbf{(X&#39;X)^{-1}X&#39;} \\sigma^2 I \\mathbf{X(X&#39;X)^{-1}} &amp;&amp; \\text{A4} \\\\ &amp;= \\sigma^2 \\mathbf{(X&#39;X)^{-1}} \\end{aligned} \\] This result shows that the variance of \\(\\hat{\\beta}\\) depends on: \\(\\sigma^2\\): The variance of the errors. \\(\\mathbf{X&#39;X}\\): The information content in the design matrix \\(\\mathbf{X}\\). 5.1.2.3.3 Sources of Variation in OLS Estimator Unexplained Variation in the Dependent Variable: \\(\\sigma^2 = Var(\\epsilon_i|\\mathbf{X})\\) Large \\(\\sigma^2\\) indicates that the amount of unexplained variation (noise) is high relative to the explained variation (\\(\\mathbf{x_i \\beta}\\)). This increases the variance of the OLS estimator. Small Variation in Predictor Variables If the variance of predictors (\\(Var(x_{i1}), Var(x_{i2}), \\dots\\)) is small, the design matrix \\(\\mathbf{X}\\) lacks information, leading to: High variability in \\(\\hat{\\beta}\\). Potential issues in estimating coefficients accurately. Small sample size exacerbates this issue, as fewer observations reduce the robustness of parameter estimates. Correlation Between Explanatory Variables (Collinearity) Strong correlation among explanatory variables creates problems: \\(x_{i1}\\) being highly correlated with a linear combination of \\(1, x_{i2}, x_{i3}, \\dots\\) contributes to inflated standard errors for \\(\\hat{\\beta}_1\\). Including many irrelevant variables exacerbates this issue. Perfect Collinearity: If \\(x_1\\) is perfectly determined by a linear combination of other predictors, the matrix \\(\\mathbf{X&#39;X}\\) becomes singular. This violates A2, making OLS impossible to compute. Multicollinearity: If \\(x_1\\) is highly correlated (but not perfectly) with a linear combination of other variables, the variance of \\(\\hat{\\beta}_1\\) increases. Multicollinearity does not violate OLS assumptions but weakens inference by inflating standard errors. 5.1.2.3.4 Standard Errors Standard errors measure the variability of an estimator, specifically the standard deviation of \\(\\hat{\\beta}\\). They are crucial for inference, as they quantify the uncertainty associated with parameter estimates. The variance of the OLS estimator \\(\\hat{\\beta}\\) is: \\[ Var(\\hat{\\beta}|\\mathbf{X}) = \\sigma^2 \\mathbf{(X&#39;X)^{-1}} \\] Where: \\(\\sigma^2\\): Variance of the error terms. \\(\\mathbf{(X&#39;X)^{-1}}\\): Inverse of the design matrix product, capturing the geometry of the predictors. Estimation of \\(\\sigma^2\\) Under assumptions A1 through A5, we can estimate \\(\\sigma^2\\) as: \\[ s^2 = \\frac{1}{n-k} \\sum_{i=1}^{n} e_i^2 = \\frac{1}{n-k} SSR \\] Where: \\(n\\): Number of observations. \\(k\\): Number of predictors, including the intercept. \\(e_i\\): Residuals from the regression model (\\(e_i = y_i - \\hat{y}_i\\)). \\(SSR\\): Sum of squared residuals (\\(\\sum e_i^2\\)). The degrees of freedom adjustment (\\(n-k\\)) accounts for the fact that residuals \\(e_i\\) are not true errors \\(\\epsilon_i\\). Since the regression model uses \\(k\\) parameters, we lose \\(k\\) degrees of freedom in estimating variance. The standard error for \\(\\sigma\\) is: \\[ s = \\sqrt{s^2} \\] However, \\(s\\) is a biased estimator of \\(\\sigma\\) due to Jensen’s Inequality. The standard error of each regression coefficient \\(\\hat{\\beta}_{j-1}\\) is: \\[ SE(\\hat{\\beta}_{j-1}) = s \\sqrt{[(\\mathbf{X&#39;X})^{-1}]_{jj}} \\] Alternatively, it can be expressed in terms of \\(SST_{j-1}\\) and \\(R_{j-1}^2\\): \\[ SE(\\hat{\\beta}_{j-1}) = \\frac{s}{\\sqrt{SST_{j-1}(1 - R_{j-1}^2)}} \\] Where: \\(SST_{j-1}\\): Total sum of squares for \\(x_{j-1}\\) from a regression of \\(x_{j-1}\\) on all other predictors. \\(R_{j-1}^2\\): Coefficient of determination for the same regression. This formulation highlights the role of multicollinearity, as \\(R_{j-1}^2\\) reflects the correlation between \\(x_{j-1}\\) and other predictors. 5.1.2.3.5 Summary of Finite Sample Properties of OLS Under Different Assumptions Under A1-A3: OLS is unbiased. \\[ E(\\hat{\\beta}) = \\beta \\] Under A1-A4: The variance of the OLS estimator is: \\[ Var(\\hat{\\beta}|\\mathbf{X}) = \\sigma^2 \\mathbf{(X&#39;X)^{-1}} \\] Under A1-A4, A6: The OLS estimator is normally distributed: \\[ \\hat{\\beta} \\sim N(\\beta, \\sigma^2 \\mathbf{(X&#39;X)^{-1}}) \\] Under A1-A4, Gauss-Markov Theorem: OLS is BLUE (Best Linear Unbiased Estimator). Under A1-A5: The standard errors for \\(\\hat{\\beta}\\) are unbiased estimators of the standard deviation of \\(\\hat{\\beta}\\). 5.1.2.4 Large Sample Properties Large sample properties provide a framework to evaluate the quality of estimators when finite sample properties are either uninformative or computationally infeasible. This perspective becomes crucial in modern data analysis, especially for methods like GLS or MLE, where assumptions for finite sample analysis may not hold. When to Use Finite vs. Large Sample Analysis Aspect Finite Sample Properties Large Sample Properties Applicability Limited to fixed sample sizes Relevant for \\(n \\to \\infty\\) Exactness Exact results (e.g., distributions, unbiasedness) Approximate results Assumptions May require stronger assumptions (e.g., normality, independence) Relies on asymptotic approximations (e.g., CLT, LLN) Estimator Behavior Performance may vary significantly Estimators stabilize and improve in accuracy Ease of Use Often complex due to reliance on exact distributions Simplifies analysis by leveraging asymptotic approximations Real-World Relevance More realistic for small datasets More relevant for large datasets Finite Sample Analysis: Small sample sizes (e.g., \\(n &lt; 30\\)). Critical for studies where exact results are needed. Useful in experimental designs and case studies. Large Sample Analysis: Large datasets (e.g., \\(n &gt; 100\\)). Necessary when asymptotic approximations improve computational simplicity. Key Concepts: Consistency: Consistency ensures that an estimator converges in probability to the true parameter value as the sample size increases. Mathematically, an estimator \\(\\hat{\\theta}\\) is consistent for \\(\\theta\\) if: \\[ \\hat{\\theta}_n \\to^p \\theta \\quad \\text{as } n \\to \\infty. \\] Consistency does not imply unbiasedness, and unbiasedness does not guarantee consistency. Asymptotic Distribution: The limiting distribution describes the shape of the scaled estimator as \\(n \\to \\infty\\). Asymptotic distributions often follow normality due to the Central Limit Theorem, which underpins much of inferential statistics. Asymptotic Variance: Represents the spread of the estimator with respect to its limiting distribution. Smaller asymptotic variance implies greater precision in large samples. Motivation Finite Sample Properties, such as unbiasedness, rely on strong assumptions like: A1 Linearity A3 Exogeneity of Independent Variables A4 Homoskedasticity A6 Normal Distribution When these assumptions are violated or impractical to verify, finite sample properties lose relevance. In such cases, Large Sample Propertiesserve as an essential alternative for evaluating estimators. For example, let the conditional expectation function (CEF) be: \\[ \\mu(\\mathbf{X}) = E(y | \\mathbf{X}), \\] which represents the minimum mean squared predictor over all possible functions \\(f(\\mathbf{X})\\): \\[ \\min_f E((y - f(\\mathbf{X}))^2). \\] Under the assumptions A1 and A3, the CEF simplifies to: \\[ \\mu(\\mathbf{X}) = \\mathbf{X}\\beta. \\] The linear projection is given by: \\[ L(y | 1, \\mathbf{X}) = \\gamma_0 + \\mathbf{X}\\text{Var}(\\mathbf{X})^{-1}\\text{Cov}(\\mathbf{X}, y), \\] where: \\[ \\gamma = \\mathbf{X}\\text{Var}(\\mathbf{X})^{-1}\\text{Cov}(\\mathbf{X}, y). \\] This linear projection minimizes the mean squared error: \\[ (\\gamma_0, \\gamma) = \\arg\\min_{(a, b)} E\\left[\\left(E(y|\\mathbf{X}) - \\left(a + \\mathbf{X}b\\right)\\right)^2\\right]. \\] Implications for OLS Consistency: OLS is always consistent for the linear projection, ensuring convergence to the true parameter value as \\(n \\to \\infty\\). Causal Interpretation: The linear projection has no inherent causal interpretation—it approximates the conditional mean function. Assumption Independence: Unlike the CEF, the linear projection does not depend on assumptions A1 and A3. Evaluating Estimators via Large Sample Properties Consistency: Measures the estimator’s centrality to the true value. A consistent estimator ensures that with larger samples, estimates become arbitrarily close to the population parameter. Limiting Distribution: Helps infer the sampling behavior of the estimator as \\(n\\) grows. Often approximated by a normal distribution for practical use in hypothesis testing and confidence interval construction. Asymptotic Variance: Quantifies the dispersion of the estimator around its limiting distribution. Smaller variance is desirable for greater reliability. An estimator \\(\\hat{\\theta}\\) is consistent for a parameter \\(\\theta\\) if, as the sample size \\(n\\) increases, \\(\\hat{\\theta}\\) converges in probability to \\(\\theta\\): \\[ \\hat{\\theta}_n \\to^p \\theta \\quad \\text{as } n \\to \\infty. \\] Convergence in Probability: The probability that \\(\\hat{\\theta}\\) deviates from \\(\\theta\\) by more than a small margin (no matter how small) approaches zero as \\(n\\) increases. Formally: \\[ \\forall \\epsilon &gt; 0, \\quad P(|\\hat{\\theta}_n - \\theta| &gt; \\epsilon) \\to 0 \\quad \\text{as } n \\to \\infty. \\] Interpretation: Consistency ensures that the estimator becomes arbitrarily close to the true population parameter \\(\\theta\\) as the sample size grows. Asymptotic Behavior: Large sample properties rely on consistency to provide valid approximations of an estimator’s behavior in finite samples. Relationship Between Consistency and Unbiasedness Unbiasedness: An estimator \\(\\hat{\\theta}\\) is unbiased if its expected value equals the true parameter: \\[ E(\\hat{\\theta}) = \\theta. \\] Unbiasedness is a finite-sample property and does not depend on the sample size. Consistency: Consistency is a large-sample property and requires \\(\\hat{\\theta}\\) to converge to \\(\\theta\\) as \\(n \\to \\infty\\). Important Distinctions Unbiasedness Does Not Imply Consistency: Example: Consider an unbiased estimator with extremely high variance that does not diminish as \\(n\\) increases. Such an estimator does not converge to \\(\\theta\\) in probability. Consistency Does Not Imply Unbiasedness: Example: \\(\\hat{\\theta}_n = \\frac{n-1}{n}\\theta\\) is biased for all finite \\(n\\), but as \\(n \\to \\infty\\), \\(\\hat{\\theta}_n \\to^p \\theta\\), making it consistent. From the OLS formula: \\[ \\hat{\\beta} = \\mathbf{(X&#39;X)^{-1}X&#39;y}, \\] we can expand as: \\[ \\hat{\\beta} = \\mathbf{(\\sum_{i=1}^{n}x_i&#39;x_i)^{-1} \\sum_{i=1}^{n}x_i&#39;y_i}, \\] or equivalently: \\[ \\hat{\\beta} = (n^{-1}\\mathbf{\\sum_{i=1}^{n}x_i&#39;x_i)^{-1}} n^{-1}\\mathbf{\\sum_{i=1}^{n}x_i&#39;y_i}. \\] Taking the probability limit under the assumptions A2 and A5, we apply the Weak Law of Large Numbers (for a random sample, averages converge to expectations as \\(n \\to \\infty\\)): \\[ plim(\\hat{\\beta}) = plim((n^{-1}\\mathbf{\\sum_{i=1}^{n}x_i&#39;x_i)^{-1}})plim(n^{-1}\\mathbf{\\sum_{i=1}^{n}x_i&#39;y_i}), \\] which simplifies to: \\[ \\begin{aligned} plim(\\hat{\\beta}) &amp;= (E(\\mathbf{x_i&#39;x_i}))^{-1}E(\\mathbf{x_i&#39;y_i}) &amp; \\text{A1}\\\\ &amp;= (E(\\mathbf{x_i&#39;x_i}))^{-1} \\bigl(E(\\mathbf{x_i&#39;x_i} \\,\\beta) + E(\\mathbf{x_i\\,\\epsilon_i})\\bigr) &amp; (A3a) \\\\ &amp;= (E(\\mathbf{x_i&#39; x_i}))^{-1}E(\\mathbf{x_i&#39; x_i})\\, \\beta &amp; (A2)\\\\ &amp;= \\beta \\end{aligned} \\] Proof: For a model of \\(y_i = x_i \\beta + \\epsilon_i\\), where \\(\\beta\\) is the true parameter vector, \\(\\epsilon_i\\) is the random error: Expanding \\(E(x_i y_i)\\): \\[ E(x_i&#39;y_i) = E(x_i&#39;(x_i\\beta + \\epsilon_i)) \\] By the linearity of expectation: \\[ E(x_i&#39;y_i) = E(x_i&#39;x_i \\beta) + E(x_i \\epsilon_i) \\] The second term \\(E(x_i \\epsilon_i) = 0\\) under assumption A3a. Thus, \\[ E(x_i&#39;y_i) = E(x_i&#39;x_i)\\beta. \\] Consistency of OLS Hence, in short, under the assumptions: A1 Linearity A2 Full Rank A3a: Weaker Exogeneity Assumption A5 Data Generation (Random Sampling) the term \\(E(\\mathbf{x_i&#39;\\epsilon_i}) = 0\\), and the OLS estimator is consistent: \\[ plim(\\hat{\\beta}) = \\beta. \\] However, OLS consistency does not guarantee unbiasedness in small samples. 5.1.2.4.1 Asymptotic Distribution of OLS Under the same assumptions : A1 Linearity A2 Full Rank A3a: Weaker Exogeneity Assumption A5 Data Generation (Random Sampling) and if \\(\\mathbf{x_i&#39;x_i}\\) has finite first and second moments (required for the Central Limit Theorem), we have: Convergence of \\(n^{-1}\\sum_{i=1}^n \\mathbf{x_i&#39;x_i}\\): \\[ n^{-1}\\sum_{i=1}^n \\mathbf{x_i&#39;x_i} \\to^p E(\\mathbf{x_i&#39;x_i}). \\] Asymptotic normality of \\(\\sqrt{n}(n^{-1}\\sum_{i=1}^n \\mathbf{x_i&#39;\\epsilon_i})\\): \\[ \\sqrt{n}(n^{-1}\\sum_{i=1}^n \\mathbf{x_i&#39;\\epsilon_i}) \\to^d N(0, \\mathbf{B}), \\] where \\(\\mathbf{B} = Var(\\mathbf{x_i&#39;\\epsilon_i})\\). From these results, the scaled difference between \\(\\hat{\\beta}\\) and \\(\\beta\\) follows: \\[ \\sqrt{n}(\\hat{\\beta} - \\beta) = (n^{-1}\\sum_{i=1}^n \\mathbf{x_i&#39;x_i})^{-1} \\sqrt{n}(n^{-1}\\sum_{i=1}^n \\mathbf{x_i&#39;\\epsilon_i}). \\] By the Central Limit Theorem: \\[ \\sqrt{n}(\\hat{\\beta} - \\beta) \\to^d N(0, \\Sigma), \\] where: \\[ \\Sigma = (E(\\mathbf{x_i&#39;x_i}))^{-1} \\mathbf{B} (E(\\mathbf{x_i&#39;x_i}))^{-1}. \\] The sandwich form is \\(\\Sigma\\) is standard. Implications for Homoskedasticity (A4) vs. Heteroskedasticity No Homoskedasticity (A4 Homoskedasticity) needed: the CLT and the large-sample distribution of \\(\\hat{\\beta}\\) do not require homoskedasticity. The only place homoskedasticity would simplify things is that \\[ \\mathbf{B} = Var(\\mathbf{x_i&#39;\\epsilon_i}) = \\sigma^2 E(\\mathbf{x_i&#39;x_i}), \\] only if \\(Var(\\epsilon_i | \\mathbf{x}_i) \\sigma^2\\) Then \\[ \\Sigma = \\sigma^2 (E(\\mathbf{x_i&#39;x_i}))^{-1}. \\] Adjusting for Heteroskedasticity: In practice, \\(\\sigma_i^2\\) can vary with \\(\\mathbf{x}_i\\)​, leading to heteroskedasticity. The standard OLS formula for \\(Var(\\hat{\\beta})\\) is inconsistent under heteroskedasticity, so one uses robust (White) standard errors. Heteroskedasticity can arise from (but not limited to): Limited dependent variables. Dependent variables with large or skewed ranges. 5.1.2.4.2 Derivation of Asymptotic Variance The asymptotic variance of the OLS estimator is derived as follows: \\[ \\Sigma = (E(\\mathbf{x_i&#39;x_i}))^{-1}\\mathbf{B}(E(\\mathbf{x_i&#39;x_i}))^{-1}. \\] Substituting \\(\\mathbf{B} = Var(\\mathbf{x_i&#39;}\\epsilon_i)\\): \\[ \\Sigma = (E(\\mathbf{x_i&#39;x_i}))^{-1}Var(\\mathbf{x_i&#39;}\\epsilon_i)(E(\\mathbf{x_i&#39;x_i}))^{-1}. \\] Using the definition of variance: \\[ \\Sigma = (E(\\mathbf{x_i&#39;x_i}))^{-1}E[(\\mathbf{x_i&#39;}\\epsilon_i - 0)(\\mathbf{x_i&#39;}\\epsilon_i - 0)&#39;](E(\\mathbf{x_i&#39;x_i}))^{-1}. \\] By the [Law of Iterated Expectations] and A3a: Weaker Exogeneity Assumption, we have: \\[ E[(\\mathbf{x_i&#39;}\\epsilon_i)(\\mathbf{x_i&#39;}\\epsilon_i)&#39;] = E[E(\\epsilon_i^2|\\mathbf{x_i})\\mathbf{x_i&#39;x_i}], \\] Assuming homoskedasticity (A4 Homoskedasticity), \\(E(\\epsilon_i^2|\\mathbf{x_i}) = \\sigma^2\\), so: \\[ \\Sigma = (E(\\mathbf{x_i&#39;x_i}))^{-1}\\sigma^2E(\\mathbf{x_i&#39;x_i})(E(\\mathbf{x_i&#39;x_i}))^{-1}. \\] Simplifying: \\[ \\Sigma = \\sigma^2(E(\\mathbf{x_i&#39;x_i}))^{-1}. \\] Hence, under the assumptions: A1 Linearity A2 Full Rank A3a: Weaker Exogeneity Assumption A4 Homoskedasticity A5 Data Generation (Random Sampling) we have\\[ \\sqrt{n}(\\hat{\\beta} - \\beta) \\to^d N(0, \\sigma^2(E(\\mathbf{x_i&#39;x_i}))^{-1}). \\] The asymptotic variance provides an approximation of the scaled estimator’s variance for large \\(n\\). This leads to: \\[ Avar(\\sqrt{n}(\\hat{\\beta} - \\beta)) = \\sigma^2(E(\\mathbf{x_i&#39;x_i}))^{-1}. \\] The finite sample variance of an estimator can be approximated using the asymptotic variance for large sample sizes: \\[ \\begin{aligned} Avar(\\sqrt{n}(\\hat{\\beta}-\\beta)) &amp;\\approx Var(\\sqrt{n}(\\hat{\\beta}-\\beta)) \\\\ Avar(\\sqrt{n}(\\hat{\\beta}-\\beta))/n &amp;\\approx Var(\\sqrt{n}(\\hat{\\beta}-\\beta))/n = Var(\\hat{\\beta}) \\end{aligned} \\] However, it is critical to note that asymptotic variance (\\(Avar(.)\\)) does not behave in the same manner as finite sample variance (\\(Var(.)\\)). This distinction is evident in the following expressions: \\[ \\begin{aligned} Avar(\\sqrt{n}(\\hat{\\beta}-\\beta))/n &amp;\\neq Avar(\\sqrt{n}(\\hat{\\beta}-\\beta)/\\sqrt{n}) \\\\ &amp;\\neq Avar(\\hat{\\beta}) \\end{aligned} \\] Thus, while \\(Avar(.)\\) provides a useful approximation for large samples, its conceptual properties differ from finite sample variance. In Finite Sample Properties, the standard errors are calculated as estimates of the conditional standard deviation: \\[ SE_{fs}(\\hat{\\beta}_{j-1}) = \\sqrt{\\hat{Var}(\\hat{\\beta}_{j-1}|\\mathbf{X})} = \\sqrt{s^2 \\cdot [\\mathbf{(X&#39;X)}^{-1}]_{jj}}, \\] where: \\(s^2\\) is the estimator of the error variance, \\([\\mathbf{(X&#39;X)}^{-1}]_{jj}\\) represents the \\(j\\)th diagonal element of the inverse design matrix. In contrast, in Large Sample Properties, the standard errors are calculated as estimates of the square root of the asymptotic variance: \\[ SE_{ls}(\\hat{\\beta}_{j-1}) = \\sqrt{\\hat{Avar}(\\sqrt{n} \\hat{\\beta}_{j-1})/n} = \\sqrt{s^2 \\cdot [\\mathbf{(X&#39;X)}^{-1}]_{jj}}. \\] Interestingly, the standard error estimator is identical for both finite and large samples: The expressions for \\(SE_{fs}\\) and \\(SE_{ls}\\) are mathematically the same. However, they are conceptually estimating two different quantities: Finite Sample Standard Error: An estimate of the conditional standard deviation of \\(\\hat{\\beta}_{j-1}\\) given \\(\\mathbf{X}\\). Large Sample Standard Error: An estimate of the square root of the asymptotic variance of \\(\\hat{\\beta}_{j-1}\\). The assumptions required for these estimators to be valid differ in their stringency: Finite Sample Variance (Conditional Variance): Requires stronger assumptions (A1-A5). Asymptotic Variance: Valid under weaker assumptions (A1, A2, A3a, A4, A5). This distinction highlights the utility of asymptotic properties in providing robust approximations when finite sample assumptions may not hold. 5.1.2.5 Diagnostics 5.1.2.5.1 Normality of Errors Ensuring the normality of errors is a critical assumption in many regression models. Deviations from this assumption can impact inference and model interpretation. Diagnostics for assessing normality include: Methods Based on Empirical Cumulative Distribution Function: The ECDF of residuals can be compared to the cumulative distribution function (CDF) of the standard normal distribution. Plots are invaluable for visual inspection of normality. One common approach is the Q-Q plot, which compares the quantiles of the residuals against those of a standard normal distribution: # Example Q-Q plot set.seed(123) # For reproducibility y &lt;- 1:100 x &lt;- rnorm(100) # Generating random normal data qqplot(x, y, main = &quot;Q-Q Plot&quot;, xlab = &quot;Theoretical Quantiles&quot;, ylab = &quot;Sample Quantiles&quot;) 5.1.2.5.2 Influential Observations and Outliers Identifying influential observations or outliers is essential for robust regression modeling. The hat matrix (\\(\\mathbf{H}\\)) plays a key role in diagnosing influence. 5.1.2.5.2.1 Hat Matrix: Outliers in X-Space The hat matrix is primarily concerned with leverage, which reflects how far an observation’s predictor values (\\(X\\)-space) are from the centroid of the predictor space. What it measures: The diagonal elements of the hat matrix quantify leverage, not residual size or model fit. High leverage suggests that an observation has an unusual predictor configuration and might disproportionately influence the regression line, irrespective of the response variable. What it doesn’t measure: It doesn’t directly account for outliers in \\(Y\\)-space or residuals. The hat matrix, defined as: \\[ \\mathbf{H} = \\mathbf{X}(\\mathbf{X}&#39;\\mathbf{X})^{-1} \\] has the following properties: Fitted Values: \\(\\hat{\\mathbf{Y}} = \\mathbf{H}\\mathbf{Y}\\). Residuals: \\(\\mathbf{e} = (\\mathbf{I} - \\mathbf{H})\\mathbf{Y}\\). Variance of Residuals: \\(\\text{var}(\\mathbf{e}) = \\sigma^2 (\\mathbf{I} - \\mathbf{H})\\). Diagonal Elements of the Hat Matrix (\\(h_{ii}\\)) \\(h_{ii}\\) is the \\(i\\)-th element on the main diagonal of \\(\\mathbf{H}\\). It must satisfy \\(0 \\leq h_{ii} \\leq 1\\). \\(\\sum_{i=1}^{n} h_{ii} = p\\), where \\(p\\) is the number of parameters (including the intercept). The variance of residuals for observation \\(i\\) is given by \\(\\sigma^2(e_i) = \\sigma^2 (1 - h_{ii})\\). The covariance between residuals for observations \\(i\\) and \\(j\\) (\\(i \\neq j\\)) is \\(-h_{ij}\\sigma^2\\). For large datasets, the off-diagonal elements (\\(h_{ij}\\)) tend to have small covariance if model assumptions hold. Estimations Using MSE Variance of residuals: \\(s^2(e_i) = MSE (1 - h_{ii})\\), where \\(MSE\\) is the mean squared error. Covariance of residuals: \\(\\hat{\\text{cov}}(e_i, e_j) = -h_{ij}(MSE)\\). Interpretation of \\(h_{ii}\\) If \\(\\mathbf{x}_i = [1, X_{i,1}, \\ldots, X_{i,p-1}]&#39;\\) represents the vector of predictor values for observation \\(i\\), then: \\[ h_{ii} = \\mathbf{x}_i&#39; (\\mathbf{X}&#39;\\mathbf{X})^{-1} \\mathbf{x}_i \\] The value of \\(h_{ii}\\) depends on the relative positions of the design points \\(X_{i,1}, \\ldots, X_{i,p-1}\\). Observations with high \\(h_{ii}\\) are more influential and warrant closer inspection for leverage or outlier behavior. 5.1.2.5.2.2 Studentized Residuals: Outliers in Y-Space Residuals focus on discrepancies between observed (\\(Y\\)) and predicted (\\(\\hat{Y}\\)) values, helping to identify outliers in \\(Y\\)-space. What they measure: Standardized or studentized residuals assess how far an observation’s response is from the regression line, adjusted for variance. Externally studentized residuals are more robust because they exclude the \\(i\\)-th observation when estimating variance. Large studentized residuals (e.g., \\(&gt;2\\) or \\(&gt;3\\)) indicate observations that are unusual in \\(Y\\)-space. What they don’t measure: They do not consider leverage or the \\(X\\)-space configuration. A point with a large residual could have low leverage, making it less influential overall. Studentized residuals, also known as standardized residuals, adjust for the variance of residuals by dividing the residuals by their standard error: \\[ \\begin{aligned} r_i &amp;= \\frac{e_i}{s(e_i)} \\\\ r_i &amp;\\sim N(0,1), \\end{aligned} \\] where \\(s(e_i) = \\sqrt{MSE(1-h_{ii})}\\), and \\(r_i\\) accounts for the varying variances of residuals. These residuals allow for a better comparison of model fit across observations. Semi-Studentized Residuals: In contrast, the semi-studentized residuals are defined as: \\[ e_i^* = \\frac{e_i}{\\sqrt{MSE}} \\] This approach does not adjust for the heterogeneity in variances of residuals, as \\(e_i^*\\) assumes equal variance for all residuals. To assess the influence of individual observations, we consider the model without a particular value. When the \\(i\\)-th observation is removed, the deleted residual is defined as: \\[ \\begin{aligned} d_i &amp;= Y_i - \\hat{Y}_{i(i)} \\\\ &amp;= \\frac{e_i}{1-h_{ii}}, \\end{aligned} \\] where \\(Y_i\\) is the actual observation, and \\(\\hat{Y}_{i(i)}\\) is the predicted value for the \\(i\\)-th observation, computed using the regression model fitted to the remaining \\(n-1\\) observations. Importantly, we do not need to refit the regression model for each observation to compute \\(d_i\\). As \\(h_{ii}\\) (leverage) increases, \\(d_i\\) also increases, indicating higher influence of the observation. The variance of the deleted residual is given by: \\[ s^2(d_i) = \\frac{MSE_{(i)}}{1-h_{ii}}, \\] where \\(MSE_{(i)}\\) is the mean squared error when the \\(i\\)-th case is omitted. The studentized deleted residual accounts for variability and follows a \\(t\\)-distribution with \\(n-p-1\\) degrees of freedom: \\[ t_i = \\frac{d_i}{s(d_i)} = \\frac{e_i}{\\sqrt{MSE_{(i)}(1-h_{ii})}}, \\] where \\(t_i\\) helps identify outliers more effectively. We can compute \\(t_i\\) without fitting the regression model multiple times. Using the relationship: \\[ (n-p)MSE = (n-p-1)MSE_{(i)} + \\frac{e_i^2}{1-h_{ii}}, \\] we derive: \\[ t_i = e_i \\sqrt{\\frac{n-p-1}{SSE(1-h_{ii}) - e_i^2}}. \\] This formulation avoids the need for recalculating \\(MSE_{(i)}\\) explicitly for each case. Outlying \\(Y\\)-observations are those with large studentized deleted residuals in absolute value. To handle multiple testing when there are many residuals, we use a Bonferroni-adjusted critical value: \\[ t_{1-\\alpha/2n; n-p-1}, \\] where \\(\\alpha\\) is the desired significance level, \\(n\\) is the sample size, and \\(p\\) is the number of parameters in the model. Observations exceeding this threshold are flagged as potential outliers. # Example R Code for Demonstrating Residual Diagnostics set.seed(123) # For reproducibility # Simulate some data n &lt;- 100 x &lt;- rnorm(n, mean = 10, sd = 3) y &lt;- 5 + 2 * x + rnorm(n, mean = 0, sd = 2) # Fit a linear regression model model &lt;- lm(y ~ x) # Extract residuals, fitted values, and hat values residuals &lt;- resid(model) hat_values &lt;- lm.influence(model)$hat mse &lt;- mean(residuals ^ 2) n &lt;- length(residuals) p &lt;- length(coefficients(model)) # Number of parameters # Compute studentized residuals studentized_residuals &lt;- residuals / sqrt(mse * (1 - hat_values)) # Compute deleted residuals deleted_residuals &lt;- residuals / (1 - hat_values) # Compute studentized deleted residuals studentized_deleted_residuals &lt;- residuals * sqrt((n - p - 1) / (sum(residuals ^ 2) * (1 - hat_values) - residuals ^ 2)) # Flag potential outliers using Bonferroni-adjusted critical value alpha &lt;- 0.05 bonferroni_threshold &lt;- qt(1 - alpha / (2 * n), df = n - p - 1) outliers &lt;- abs(studentized_deleted_residuals) &gt; bonferroni_threshold # Print results results &lt;- data.frame( Residuals = residuals, Hat_Values = hat_values, Studentized_Residuals = studentized_residuals, Deleted_Residuals = deleted_residuals, Studentized_Deleted_Residuals = studentized_deleted_residuals, Outlier = outliers ) causalverse::nice_tab(head(results)) #&gt; Residuals Hat_Values Studentized_Residuals Deleted_Residuals #&gt; 1 -1.27 0.02 -0.67 -1.29 #&gt; 2 0.70 0.01 0.36 0.70 #&gt; 3 -0.12 0.04 -0.07 -0.13 #&gt; 4 -0.48 0.01 -0.25 -0.49 #&gt; 5 -1.68 0.01 -0.88 -1.70 #&gt; 6 0.30 0.04 0.16 0.31 #&gt; Studentized_Deleted_Residuals Outlier #&gt; 1 -0.66 FALSE #&gt; 2 0.36 FALSE #&gt; 3 -0.06 FALSE #&gt; 4 -0.25 FALSE #&gt; 5 -0.87 FALSE #&gt; 6 0.15 FALSE # Plot studentized deleted residuals for visualization plot( studentized_deleted_residuals, main = &quot;Studentized Deleted Residuals&quot;, xlab = &quot;Observation&quot;, ylab = &quot;Studentized Deleted Residuals&quot;, pch = 16, col = ifelse(outliers, &quot;red&quot;, &quot;black&quot;) ) abline( h = c(-bonferroni_threshold, bonferroni_threshold), col = &quot;blue&quot;, lty = 2 ) legend( &quot;topright&quot;, legend = c(&quot;Potential Outliers&quot;, &quot;Threshold&quot;), col = c(&quot;red&quot;, &quot;blue&quot;), pch = c(16, NA), lty = c(NA, 2) ) 5.1.2.5.3 Identifying Influential Cases By influential, we refer to observations whose exclusion causes major changes in the fitted regression model. Note that not all outliers are influential. Types of Influence Measures Influence on Single Fitted Values: DFFITS Influence on All Fitted Values: Cook’s D Influence on the Regression Coefficients: DFBETAS Measures like Cook’s D, DFFITS, and DFBETAS combine leverage (from the hat matrix) and residual size (from studentized residuals) to assess the influence of an observation on the model as a whole. Hence, these effectively combine impact of \\(X\\)-space and \\(Y\\)-space. 5.1.2.5.3.1 DFFITS DFFITS measures the influence on single fitted values. It is defined as: \\[ \\begin{aligned} (DFFITS)_i &amp;= \\frac{\\hat{Y}_i - \\hat{Y}_{i(i)}}{\\sqrt{MSE_{(i)}h_{ii}}} \\\\ &amp;= t_i \\left(\\frac{h_{ii}}{1-h_{ii}}\\right)^{1/2} \\end{aligned} \\] Where: \\(\\hat{Y}_i\\) = fitted value for observation \\(i\\) using all data. \\(\\hat{Y}_{i(i)}\\) = fitted value for observation \\(i\\) with the \\(i\\)th case removed. \\(MSE_{(i)}\\) = mean squared error with observation \\(i\\) excluded. \\(h_{ii}\\) = leverage of the \\(i\\)th observation. \\(t_i\\) = studentized deleted residual. High DFFITS values occur when leverage and residuals are jointly significant. DFFITS captures the standardized difference between the fitted value for observation \\(i\\) with and without the \\(i\\)th case in the model. It is a product of: The studentized deleted residual. A scaling factor based on the leverage of the \\(i\\)th observation, \\(h_{ii}\\). An observation is considered influential based on DFFITS if: Small to medium data sets: \\(|DFFITS| &gt; 1\\) Large data sets: \\(|DFFITS| &gt; 2 \\sqrt{p/n}\\) Where: \\(p\\) = number of predictors (including the intercept). \\(n\\) = total number of observations. This provides a practical threshold for detecting influential observations in different dataset sizes. # Load necessary package library(car) # Fit a linear model model &lt;- lm(mpg ~ hp + wt, data = mtcars) # Compute DFFITS dffits_values &lt;- dffits(model) # Display influential observations based on the threshold for a large dataset threshold &lt;- 2 * sqrt(length(coefficients(model)) / nrow(mtcars)) influential_obs &lt;- which(abs(dffits_values) &gt; threshold) # Results list( DFFITS = dffits_values, Threshold = threshold, Influential_Observations = influential_obs ) #&gt; $DFFITS #&gt; Mazda RX4 Mazda RX4 Wag Datsun 710 Hornet 4 Drive #&gt; -0.218494101 -0.126664789 -0.249103400 0.011699160 #&gt; Hornet Sportabout Valiant Duster 360 Merc 240D #&gt; 0.028162679 -0.253806124 -0.191618944 0.221917842 #&gt; Merc 230 Merc 280 Merc 280C Merc 450SE #&gt; 0.079763706 -0.067222732 -0.190099538 0.064280875 #&gt; Merc 450SL Merc 450SLC Cadillac Fleetwood Lincoln Continental #&gt; 0.020560728 -0.135714533 0.008984366 0.227919348 #&gt; Chrysler Imperial Fiat 128 Honda Civic Toyota Corolla #&gt; 1.231668760 0.749153703 0.165329646 0.865985851 #&gt; Toyota Corona Dodge Challenger AMC Javelin Camaro Z28 #&gt; -0.292008465 -0.253389811 -0.294709853 -0.170476763 #&gt; Pontiac Firebird Fiat X1-9 Porsche 914-2 Lotus Europa #&gt; 0.207813200 -0.041423665 -0.004054382 0.471518032 #&gt; Ford Pantera L Ferrari Dino Maserati Bora Volvo 142E #&gt; -0.161026362 -0.129395315 0.907521354 -0.128232538 #&gt; #&gt; $Threshold #&gt; [1] 0.6123724 #&gt; #&gt; $Influential_Observations #&gt; Chrysler Imperial Fiat 128 Toyota Corolla Maserati Bora #&gt; 17 18 20 31 5.1.2.5.3.2 Cook’s D Cook’s D measures the influence of the \\(i\\)th case on all fitted values in a regression model. It is defined as: \\[ \\begin{aligned} D_i &amp;= \\frac{\\sum_{j=1}^{n}(\\hat{Y}_j - \\hat{Y}_{j(i)})^2}{p(MSE)} \\\\ &amp;= \\frac{e^2_i}{p(MSE)}\\left(\\frac{h_{ii}}{(1-h_{ii})^2}\\right) \\end{aligned} \\] Where: \\(\\hat{Y}_j\\) = fitted value for observation \\(j\\) using all data. \\(\\hat{Y}_{j(i)}\\) = fitted value for observation \\(j\\) with the \\(i\\)th case removed. \\(e_i\\) = residual for observation \\(i\\). \\(h_{ii}\\) = leverage of the \\(i\\)th observation. \\(p\\) = number of predictors (including the intercept). \\(MSE\\) = mean squared error of the model. Key Insights Cook’s D quantifies the overall influence of the \\(i\\)th observation on the entire set of fitted values. If either the residual \\(e_i\\) increases or the leverage \\(h_{ii}\\) increases, then \\(D_i\\) also increases, indicating higher influence. Observations with both high leverage and large residuals are flagged as influential. Threshold for Influence \\(D_i\\) can be interpreted as a percentile of an \\(F_{(p,n-p)}\\) distribution. Practical thresholds: If \\(D_i &gt; 4/n\\), the \\(i\\)th case has major influence. Alternatively, cases where \\(D_i\\) exceeds the 50th percentile of the \\(F\\)-distribution may also be considered influential. # Load necessary package library(car) # Fit a linear model model &lt;- lm(mpg ~ hp + wt, data = mtcars) # Compute Cook&#39;s D cooks_d_values &lt;- cooks.distance(model) # Display influential observations based on the threshold threshold &lt;- 4 / nrow(mtcars) influential_obs &lt;- which(cooks_d_values &gt; threshold) # Results list( Cooks_D = cooks_d_values, Threshold = threshold, Influential_Observations = influential_obs ) #&gt; $Cooks_D #&gt; Mazda RX4 Mazda RX4 Wag Datsun 710 Hornet 4 Drive #&gt; 1.589652e-02 5.464779e-03 2.070651e-02 4.724822e-05 #&gt; Hornet Sportabout Valiant Duster 360 Merc 240D #&gt; 2.736184e-04 2.155064e-02 1.255218e-02 1.677650e-02 #&gt; Merc 230 Merc 280 Merc 280C Merc 450SE #&gt; 2.188702e-03 1.554996e-03 1.215737e-02 1.423008e-03 #&gt; Merc 450SL Merc 450SLC Cadillac Fleetwood Lincoln Continental #&gt; 1.458960e-04 6.266049e-03 2.786686e-05 1.780910e-02 #&gt; Chrysler Imperial Fiat 128 Honda Civic Toyota Corolla #&gt; 4.236109e-01 1.574263e-01 9.371446e-03 2.083933e-01 #&gt; Toyota Corona Dodge Challenger AMC Javelin Camaro Z28 #&gt; 2.791982e-02 2.087419e-02 2.751510e-02 9.943527e-03 #&gt; Pontiac Firebird Fiat X1-9 Porsche 914-2 Lotus Europa #&gt; 1.443199e-02 5.920440e-04 5.674986e-06 7.353985e-02 #&gt; Ford Pantera L Ferrari Dino Maserati Bora Volvo 142E #&gt; 8.919701e-03 5.732672e-03 2.720397e-01 5.600804e-03 #&gt; #&gt; $Threshold #&gt; [1] 0.125 #&gt; #&gt; $Influential_Observations #&gt; Chrysler Imperial Fiat 128 Toyota Corolla Maserati Bora #&gt; 17 18 20 31 5.1.2.5.3.3 DFBETAS DFBETAS measures the influence of the \\(i\\)th observation on each regression coefficient in a regression model. It is defined as: \\[ (DFBETAS)_{k(i)} = \\frac{b_k - b_{k(i)}}{\\sqrt{MSE_{(i)}c_{kk}}} \\] Where: \\(b_k\\) = regression coefficient for the \\(k\\)th predictor using all observations. \\(b_{k(i)}\\) = regression coefficient for the \\(k\\)th predictor with the \\(i\\)th observation omitted. \\(MSE_{(i)}\\) = mean squared error with the \\(i\\)th observation excluded. \\(c_{kk}\\) = \\(k\\)th diagonal element of \\(\\mathbf{X&#39;X}^{-1}\\), representing the variance of \\(b_k\\). Key Insights DFBETAS quantifies the change in each regression coefficient (\\(b_k\\)) caused by omitting the \\(i\\)th observation. The sign of DFBETAS indicates whether the inclusion of an observation increases or decreases the regression coefficient. Positive DFBETAS: Inclusion increases \\(b_k\\). Negative DFBETAS: Inclusion decreases \\(b_k\\). High DFBETAS indicate that a single observation disproportionately affects one or more predictors. The thresholds for identifying influential observations based on DFBETAS are: Small data sets: \\(|DFBETAS| &gt; 1\\) Large data sets: \\(|DFBETAS| &gt; 2 / \\sqrt{n}\\) Where \\(n\\) is the total number of observations. # Load necessary package library(car) # Fit a linear model model &lt;- lm(mpg ~ hp + wt, data = mtcars) # Compute DFBETAS dfbetas_values &lt;- dfbetas(model) # Display influential observations based on the threshold for each predictor threshold &lt;- 2 / sqrt(nrow(mtcars)) influential_obs &lt;- apply(dfbetas_values, 2, function(x) which(abs(x) &gt; threshold)) # Results list( DFBETAS = dfbetas_values, Threshold = threshold, Influential_Observations = influential_obs ) #&gt; $DFBETAS #&gt; (Intercept) hp wt #&gt; Mazda RX4 -0.161347204 0.032966471 0.0639304305 #&gt; Mazda RX4 Wag -0.069324050 0.045785122 -0.0004066495 #&gt; Datsun 710 -0.211199646 0.043374926 0.0972314374 #&gt; Hornet 4 Drive 0.002672687 -0.006839301 0.0044886906 #&gt; Hornet Sportabout 0.001784844 0.009208434 -0.0015536931 #&gt; Valiant -0.005985946 0.180374447 -0.1516565139 #&gt; Duster 360 0.004705177 -0.159988770 0.0781031774 #&gt; Merc 240D 0.034255292 -0.189552940 0.1224118752 #&gt; Merc 230 0.019788247 -0.055075623 0.0332570461 #&gt; Merc 280 -0.003198686 0.036709039 -0.0337297820 #&gt; Merc 280C -0.009045583 0.103809696 -0.0953846390 #&gt; Merc 450SE -0.026973686 -0.005712458 0.0356973740 #&gt; Merc 450SL -0.003961562 0.003399822 0.0049302300 #&gt; Merc 450SLC 0.031572445 -0.016800308 -0.0400515832 #&gt; Cadillac Fleetwood -0.006420656 -0.002577897 0.0075499557 #&gt; Lincoln Continental -0.168791258 -0.058242601 0.1903129995 #&gt; Chrysler Imperial -0.924056752 -0.148009806 0.9355996760 #&gt; Fiat 128 0.605181396 -0.311246566 -0.1672758566 #&gt; Honda Civic 0.156388333 -0.034026915 -0.0819144214 #&gt; Toyota Corolla 0.804669969 -0.170934240 -0.4114605894 #&gt; Toyota Corona -0.231328587 0.066064464 0.0882138248 #&gt; Dodge Challenger 0.003923967 0.049775308 -0.0888481611 #&gt; AMC Javelin -0.019610048 0.037837437 -0.0734203131 #&gt; Camaro Z28 0.029920076 -0.128670440 0.0390740055 #&gt; Pontiac Firebird -0.058806962 -0.002278294 0.0868742949 #&gt; Fiat X1-9 -0.037559007 0.010208853 0.0174261386 #&gt; Porsche 914-2 -0.003655931 0.000316321 0.0020588013 #&gt; Lotus Europa 0.423409344 0.188396749 -0.4072338373 #&gt; Ford Pantera L -0.022536462 -0.148176049 0.0999346699 #&gt; Ferrari Dino -0.065508308 -0.085182962 0.0869804902 #&gt; Maserati Bora -0.007482815 0.865763737 -0.4999048760 #&gt; Volvo 142E -0.080001907 0.038406565 0.0127537553 #&gt; #&gt; $Threshold #&gt; [1] 0.3535534 #&gt; #&gt; $Influential_Observations #&gt; $Influential_Observations$`(Intercept)` #&gt; Chrysler Imperial Fiat 128 Toyota Corolla Lotus Europa #&gt; 17 18 20 28 #&gt; #&gt; $Influential_Observations$hp #&gt; Maserati Bora #&gt; 31 #&gt; #&gt; $Influential_Observations$wt #&gt; Chrysler Imperial Toyota Corolla Lotus Europa Maserati Bora #&gt; 17 20 28 31 5.1.2.5.4 Collinearity Collinearity (or multicollinearity) refers to the correlation among explanatory variables in a regression model. It can lead to various issues, including: Large changes in the estimated regression coefficients when a predictor variable is added or removed, or when observations are altered. Non-significant results for individual tests on regression coefficients of important predictor variables. Regression coefficients with signs opposite to theoretical expectations or prior experience. Large coefficients of simple correlation between pairs of predictor variables in the correlation matrix. Wide confidence intervals for the regression coefficients representing important predictor variables. When some \\(X\\) variables are highly correlated, the inverse \\((X&#39;X)^{-1}\\) either does not exist or is computationally unstable. This can result in: Non-interpretability of parameters: \\[\\mathbf{b = (X&#39;X)^{-1}X&#39;y}\\] Infinite sampling variability: \\[\\mathbf{s^2(b) = MSE (X&#39;X)^{-1}}\\] If some predictor variables (\\(X\\)) are “perfectly” correlated, the system becomes undetermined, leading to an infinite number of models that fit the data. Specifically: If \\(X&#39;X\\) is singular, then \\((X&#39;X)^{-1}\\) does not exist. This results in poor parameter estimation and invalid statistical inference. 5.1.2.5.4.1 Variance Inflation Factors (VIFs) The Variance Inflation Factor (VIF) quantifies how much the variance of a regression coefficient is inflated due to multicollinearity. It is defined as: \\[ VIF_k = \\frac{1}{1-R^2_k} \\] Where: \\(R^2_k\\) is the coefficient of multiple determination when \\(X_k\\) is regressed on the other \\(p-2\\) predictor variables in the model. Interpretation of VIFs Large \\(VIF_k\\) values indicate that near collinearity is inflating the variance of \\(b_k\\). The relationship is given by: \\[ var(b_k) \\propto \\sigma^2 (VIF_k) \\] Thresholds: \\(VIF &gt; 4\\): Investigate the cause of multicollinearity. \\(VIF_k &gt; 10\\): Serious multicollinearity problem that can lead to poor parameter estimates. The mean VIF provides an estimate of the degree of multicollinearity: If \\(avg(VIF) &gt;&gt; 1\\), serious multicollinearity is present. Multicollinearity and VIF: High VIFs with indicator variables are normal and not problematic. VIF is generally not useful for detecting multicollinearity concerns in models with fixed effects. Overemphasis on Multicollinearity: Multicollinearity inflates standard errors and widens confidence intervals but does not bias results. If key variables have narrow confidence intervals, multicollinearity is not an issue. Goldberger’s Insight (Goldberger 1991): Multicollinearity is akin to small sample size (“micronumerosity”). Large standard errors are expected with highly correlated independent variables. Practical Implications: Evaluate whether confidence intervals for key variables are sufficiently narrow. If not, the study is inconclusive, and a larger dataset or redesigned study is needed. # Load necessary packages library(car) # Fit a regression model model &lt;- lm(mpg ~ hp + wt + disp, data = mtcars) # Compute Variance Inflation Factors vif_values &lt;- vif(model) # Check for high multicollinearity threshold &lt;- 10 high_vif &lt;- which(vif_values &gt; threshold) # Results list( VIFs = vif_values, High_VIF_Threshold = threshold, High_VIF_Indices = high_vif ) #&gt; $VIFs #&gt; hp wt disp #&gt; 2.736633 4.844618 7.324517 #&gt; #&gt; $High_VIF_Threshold #&gt; [1] 10 #&gt; #&gt; $High_VIF_Indices #&gt; named integer(0) 5.1.2.5.4.2 Condition Number Condition Number is a diagnostic measure for detecting multicollinearity, derived from the spectral decomposition of the matrix \\(\\mathbf{X&#39;X}\\). The spectral decomposition of \\(\\mathbf{X&#39;X}\\) is: \\[ \\mathbf{X&#39;X}= \\sum_{i=1}^{p} \\lambda_i \\mathbf{u_i u_i&#39;} \\] Where: \\(\\lambda_i\\): Eigenvalue associated with the \\(i\\)th eigenvector. \\(\\mathbf{u}_i\\): Eigenvector associated with \\(\\lambda_i\\). \\(\\lambda_1 &gt; \\lambda_2 &gt; \\dots &gt; \\lambda_p\\) (ordered eigenvalues). The eigenvectors are orthogonal: \\[ \\begin{cases} \\mathbf{u_i&#39;u_j} = 0 &amp; \\text{for } i \\neq j \\\\ \\mathbf{u_i&#39;u_j} = 1 &amp; \\text{for } i = j \\end{cases} \\] Definition of the Condition Number The Condition Number is defined as: \\[ k = \\sqrt{\\frac{\\lambda_{\\text{max}}}{\\lambda_{\\text{min}}}} \\] Where: \\(\\lambda_{\\text{max}}\\): Largest eigenvalue. \\(\\lambda_{\\text{min}}\\): Smallest eigenvalue. Interpretation \\(k &gt; 30\\): Cause for concern. \\(30 &lt; k &lt; 100\\): Moderate dependencies among predictors. \\(k &gt; 100\\): Strong collinearity, indicating serious multicollinearity. The Condition Index for the \\(i\\)th eigenvalue is defined as: \\[ \\delta_i = \\sqrt{\\frac{\\lambda_{\\text{max}}}{\\lambda_i}} \\] Where \\(i = 1, \\dots, p\\). Variance proportions can be used to identify collinearity issues. The proportion of total variance associated with the \\(k\\)th regression coefficient and the \\(i\\)th eigen mode is given by: \\[ \\frac{u_{ik}^2/\\lambda_i}{\\sum_j \\left(u^2_{jk}/\\lambda_j\\right)} \\] Key Indicators: A large condition index \\(\\delta_i\\) suggests potential collinearity. Variance proportions \\(&gt; 0.5\\) for at least two regression coefficients indicate serious collinearity problems. # Load necessary package library(car) # Fit a regression model model &lt;- lm(mpg ~ hp + wt + disp, data = mtcars) # Compute eigenvalues and eigenvectors of the correlation matrix of predictors cor_matrix &lt;- cor(mtcars[, c(&quot;hp&quot;, &quot;wt&quot;, &quot;disp&quot;)]) eigen_decomp &lt;- eigen(cor_matrix) # Extract eigenvalues and compute the Condition Number eigenvalues &lt;- eigen_decomp$values condition_number &lt;- sqrt(max(eigenvalues) / min(eigenvalues)) # Compute Condition Indices condition_indices &lt;- sqrt(max(eigenvalues) / eigenvalues) # Results list( Condition_Number = condition_number, Condition_Indices = condition_indices ) #&gt; $Condition_Number #&gt; [1] 5.469549 #&gt; #&gt; $Condition_Indices #&gt; [1] 1.000000 2.697266 5.469549 Condition Number: A single value indicating the degree of multicollinearity. Condition Indices: A vector showing the relative dependency associated with each eigenvalue. 5.1.2.5.5 Constancy of Error Variance Testing for the constancy of error variance (homoscedasticity) ensures that the assumptions of linear regression are met. Below are two commonly used tests to assess error variance. 5.1.2.5.5.1 Brown-Forsythe Test (Modified Levene Test) The Brown-Forsythe Test does not depend on the normality of errors and is suitable when error variance increases or decreases with \\(X\\). Procedure Split the residuals into two groups: \\[ e_{i1}, i = 1, \\dots, n_1 \\quad \\text{and} \\quad e_{j2}, j = 1, \\dots, n_2 \\] Compute absolute deviations from the group medians: \\[ d_{i1} = |e_{i1} - \\tilde{e}_1| \\quad \\text{and} \\quad d_{j2} = |e_{j2} - \\tilde{e}_2| \\] where \\(\\tilde{e}_1\\) and \\(\\tilde{e}_2\\) are the medians of groups 1 and 2, respectively. Perform a two-sample t-test on \\(d_{i1}\\) and \\(d_{j2}\\): \\[ t_L = \\frac{\\bar{d}_1 - \\bar{d}_2}{s\\sqrt{\\frac{1}{n_1} + \\frac{1}{n_2}}} \\] where \\[ s^2 = \\frac{\\sum_i (d_{i1} - \\bar{d}_1)^2 + \\sum_j (d_{j2} - \\bar{d}_2)^2}{n - 2} \\] Reject the null hypothesis of constant error variance if: \\[ |t_L| &gt; t_{1-\\alpha/2; n-2} \\] # Load necessary package library(car) # Fit a linear model model &lt;- lm(mpg ~ hp + wt, data = mtcars) # Perform the Brown-Forsythe Test levene_test &lt;- leveneTest(model$residuals ~ cut(mtcars$hp, 2)) # Split HP into 2 groups # Results levene_test #&gt; Levene&#39;s Test for Homogeneity of Variance (center = median) #&gt; Df F value Pr(&gt;F) #&gt; group 1 0.0851 0.7724 #&gt; 30 The p-value determines whether to reject the null hypothesis of constant variance. 5.1.2.5.5.2 Breusch-Pagan Test (Cook-Weisberg Test) The Breusch-Pagan Test assumes independent and normally distributed errors. It tests the hypothesis: \\(H_0: \\gamma_1 = 0\\) (Constant variance). \\(H_1: \\gamma_1 \\neq 0\\) (Non-constant variance). Procedure Assume the variance of the error terms is modeled as: \\[ \\sigma^2_i = \\gamma_0 + \\gamma_1 X_i \\] Regress the squared residuals (\\(e_i^2\\)) on \\(X_i\\): Obtain the regression sum of squares (\\(SSR^*\\)). Compute the Breusch-Pagan statistic: \\[ X^2_{BP} = \\frac{SSR^*/2}{\\left(\\frac{SSE}{n}\\right)^2} \\] where \\(SSE\\) is the error sum of squares from the regression of \\(Y\\) on \\(X\\). Compare \\(X^2_{BP}\\) to the critical value from the \\(\\chi^2\\) distribution with 1 degree of freedom: Reject \\(H_0\\) (homogeneous variance) if: \\[ X^2_{BP} &gt; \\chi^2_{1-\\alpha;1} \\] # Load necessary package library(lmtest) # Perform the Breusch-Pagan Test bp_test &lt;- bptest(model) # Results bp_test #&gt; #&gt; studentized Breusch-Pagan test #&gt; #&gt; data: model #&gt; BP = 0.88072, df = 2, p-value = 0.6438 If the p-value is below the chosen significance level (e.g., 0.05), reject $H_0$ and conclude non-constant variance. 5.1.2.5.6 Independence Testing for independence ensures that the residuals of a regression model are uncorrelated. Violation of this assumption may lead to biased or inefficient parameter estimates. Below, we discuss three primary methods for diagnosing dependence: plots, the Durbin-Watson test, and specific methods for time-series and spatial data. 5.1.2.5.6.1 Plots A residual plot can help detect dependence in the residuals: Plot residuals (\\(e_i\\)) versus the predicted values (\\(\\hat{Y}_i\\)). Patterns such as systematic waves, trends, or clusters indicate possible dependence. Independence is suggested if residuals are randomly scattered without clear patterns. # Fit a regression model model &lt;- lm(mpg ~ hp + wt, data = mtcars) # Residual plot plot(model$fitted.values, model$residuals, xlab = &quot;Fitted Values&quot;, ylab = &quot;Residuals&quot;, main = &quot;Residual Plot&quot;) abline(h = 0, col = &quot;red&quot;) 5.1.2.5.6.2 Durbin-Watson Test The Durbin-Watson test specifically detects autocorrelation in residuals, especially in time-series data. Hypotheses: \\(H_0\\): Residuals are uncorrelated. \\(H_1\\): Residuals are autocorrelated. The Durbin-Watson statistic (\\(d\\)) is calculated as: \\(d = \\frac{\\sum_{t=2}^n (e_t - e_{t-1})^2}{\\sum_{t=1}^n e_t^2}\\) \\(d \\approx 2\\): No autocorrelation. \\(d &lt; 2\\): Positive autocorrelation. \\(d &gt; 2\\): Negative autocorrelation. # Load necessary package library(lmtest) # Perform the Durbin-Watson test dw_test &lt;- dwtest(model) # Results dw_test #&gt; #&gt; Durbin-Watson test #&gt; #&gt; data: model #&gt; DW = 1.3624, p-value = 0.02061 #&gt; alternative hypothesis: true autocorrelation is greater than 0 5.1.2.5.6.3 Time-Series Autocorrelation For time-series data, autocorrelation often occurs due to the temporal structure. Key diagnostics include: Autocorrelation Function (ACF): Shows the correlation of residuals with their lagged values. Significant spikes in the ACF plot indicate autocorrelation. Partial Autocorrelation Function (PACF): Identifies the correlation of residuals after removing the influence of intermediate lags. # Load necessary package library(forecast) # Residuals from a time-series model time_series_res &lt;- ts(model$residuals) # Plot ACF and PACF acf(time_series_res, main = &quot;ACF of Residuals&quot;) pacf(time_series_res, main = &quot;PACF of Residuals&quot;) 5.1.2.5.6.4 Spatial Statistics Spatial dependence occurs when residuals are correlated across geographical or spatial locations. Two primary tests are used to diagnose spatial autocorrelation: Moran’s I measures global spatial autocorrelation. It determines whether similar values cluster spatially. The statistic is defined as: \\[ I = \\frac{n}{W} \\cdot \\frac{\\sum_i \\sum_j w_{ij} (x_i - \\bar{x})(x_j - \\bar{x})}{\\sum_i (x_i - \\bar{x})^2} \\] Where: \\(n\\): Number of observations. \\(W\\): Sum of all spatial weights \\(w_{ij}\\). \\(w_{ij}\\): Spatial weight between locations \\(i\\) and \\(j\\). \\(x_i\\): Residual value at location \\(i\\). \\(\\bar{x}\\): Mean of the residuals. Spatial Weight Matrix (\\(W\\)): \\(W\\) defines the spatial relationship between observations. It is often derived from: Distance-based methods: E.g., k-nearest neighbors or distance bands. Adjacency methods: Based on shared boundaries in geographic data. Interpretation: \\(I &gt; 0\\): Positive spatial autocorrelation (similar values cluster together). \\(I &lt; 0\\): Negative spatial autocorrelation (dissimilar values are neighbors). \\(I \\approx 0\\): Random spatial distribution. # Load necessary packages library(spdep) # Simulate spatial data (example with mtcars dataset) coords &lt;- cbind(mtcars$hp, mtcars$wt) # Coordinates based on two variables neighbors &lt;- knn2nb(knearneigh(coords, k = 3)) # Nearest neighbors weights &lt;- nb2listw(neighbors, style = &quot;W&quot;) # Spatial weights # Compute Moran&#39;s I for residuals model &lt;- lm(mpg ~ hp + wt, data = mtcars) moran_test &lt;- moran.test(model$residuals, weights) # Results moran_test #&gt; #&gt; Moran I test under randomisation #&gt; #&gt; data: model$residuals #&gt; weights: weights #&gt; #&gt; Moran I statistic standard deviate = 1.5146, p-value = 0.06494 #&gt; alternative hypothesis: greater #&gt; sample estimates: #&gt; Moran I statistic Expectation Variance #&gt; 0.15425069 -0.03225806 0.01516371 # Moran&#39;s scatterplot moran.plot(model$residuals, weights, main = &quot;Moran&#39;s Scatterplot&quot;) Significant Moran’s I: Indicates global clustering of similar residuals, suggesting spatial dependence. Geary’s C measures spatial autocorrelation at a local level, emphasizing differences between neighboring observations. The statistic is defined as: \\[ C = \\frac{n - 1}{2W} \\cdot \\frac{\\sum_i \\sum_j w_{ij} (x_i - x_j)^2}{\\sum_i (x_i - \\bar{x})^2} \\] Where: \\(C\\) ranges from 0 to 2: \\(C \\approx 0\\): High positive spatial autocorrelation. \\(C \\approx 1\\): Spatial randomness. \\(C \\approx 2\\): High negative spatial autocorrelation. Comparison of Moran’s I and Geary’s C: Moran’s I is more global and measures the overall pattern of autocorrelation. Geary’s C is more sensitive to local spatial autocorrelation, detecting small-scale patterns. # Compute Geary&#39;s C for residuals geary_test &lt;- geary.test(model$residuals, weights) # Results geary_test #&gt; #&gt; Geary C test under randomisation #&gt; #&gt; data: model$residuals #&gt; weights: weights #&gt; #&gt; Geary C statistic standard deviate = 1.0592, p-value = 0.1447 #&gt; alternative hypothesis: Expectation greater than statistic #&gt; sample estimates: #&gt; Geary C statistic Expectation Variance #&gt; 0.84535708 1.00000000 0.02131399 Significant Geary’s C: Highlights local spatial autocorrelation, useful for identifying specific regions or groups of observations where dependence is strong. References "],["generalized-least-squares.html", "5.2 Generalized Least Squares", " 5.2 Generalized Least Squares 5.2.1 Infeasible Generalized Least Squares Motivation for a More Efficient Estimator The Gauss-Markov Theorem guarantees that OLS is the Best Linear Unbiased Estimator (BLUE) under assumptions A1-A4: A4: \\(Var(\\epsilon | \\mathbf{X}) = \\sigma^2 \\mathbf{I}_n\\) (homoscedasticity and no autocorrelation). When A4 does not hold: Heteroskedasticity: \\(Var(\\epsilon_i | \\mathbf{X}) \\neq \\sigma^2\\). Serial Correlation: \\(Cov(\\epsilon_i, \\epsilon_j | \\mathbf{X}) \\neq 0\\) for (\\(i \\neq j\\)). Without A4, OLS is unbiased but no longer efficient. This motivates the need for an alternative approach to identify the most efficient estimator. The unweighted (standard) regression model is given by: \\[ \\mathbf{y} = \\mathbf{X \\beta} + \\boldsymbol{\\epsilon} \\] Assuming A1-A3 hold (linearity, full rank, exogeneity), but A4 does not, the variance of the error term is no longer proportional to an identity \\[ Var(\\boldsymbol{\\epsilon} | \\mathbf{X}) = \\boldsymbol{\\Omega} \\neq \\sigma^2 \\mathbf{I}_n. \\] To address the violation of A4 (\\(\\boldsymbol{\\Omega} \\neq \\sigma^2 \\mathbf{I}_n\\)), one can transform the model by premultiplying both sides by a full-rank matrix \\(\\mathbf{w}\\) to have a weighted (transformed) regression model: \\[ \\mathbf{w y} = \\mathbf{w X \\beta} + \\mathbf{w \\epsilon}, \\] where \\(\\mathbf{w}\\) is a full-rank matrix chosen such that: \\[ \\mathbf{w&#39;w} = \\boldsymbol{\\Omega}^{-1}. \\] \\(\\mathbf{w}\\) is the Cholesky Decomposition of \\(\\boldsymbol{\\Omega}^{-1}\\). The Cholesky decomposition ensures \\(\\mathbf{w}\\) satisfies \\(\\mathbf{w&#39;w = \\Omega^{-1}}\\), where \\(\\mathbf{w}\\) is the “square root” of \\(\\boldsymbol{\\Omega}^{-1}\\) in matrix terms. By transforming the original model, the variance of the transformed errors becomes: \\[ \\begin{aligned} \\boldsymbol{\\Omega} &amp;= Var(\\boldsymbol{\\epsilon} | \\mathbf{X}), \\\\ \\boldsymbol{\\Omega}^{-1} &amp;= Var(\\boldsymbol{\\epsilon} | \\mathbf{X})^{-1}. \\end{aligned} \\] The transformed equation allows us to compute a more efficient estimator. Using the transformed model, the Infeasible Generalized Least Squares (IGLS) estimator is: \\[ \\begin{aligned} \\mathbf{\\hat{\\beta}_{IGLS}} &amp;= \\mathbf{(X&#39;w&#39;wX)^{-1}X&#39;w&#39;wy} \\\\ &amp;= \\mathbf{(X&#39; \\boldsymbol{\\Omega}^{-1} X)^{-1} X&#39; \\boldsymbol{\\Omega}^{-1} y} \\\\ &amp;= \\mathbf{\\beta + (X&#39; \\boldsymbol{\\Omega}^{-1} X)^{-1} X&#39; \\boldsymbol{\\Omega}^{-1} \\boldsymbol{\\epsilon}}. \\end{aligned} \\] Unbiasedness Since assumptions A1-A3 hold for the unweighted model: \\[ \\begin{aligned} \\mathbf{E(\\hat{\\beta}_{IGLS}|\\mathbf{X})} &amp;= \\mathbf{E(\\beta + (X&#39;\\Omega^{-1}X&#39;\\Omega^{-1}\\epsilon)|\\mathbf{X})} \\\\ &amp;= \\mathbf{\\beta + E(X&#39;\\Omega^{-1}X&#39;\\Omega^{-1}\\epsilon|\\mathbf{X})} \\\\ &amp;= \\mathbf{\\beta + X&#39;\\Omega^{-1}X&#39;\\Omega^{-1}E(\\epsilon|\\mathbf{X})} &amp;&amp; \\text{since A3: } E(\\epsilon|\\mathbf{X})=0, \\\\ &amp;= \\mathbf{\\beta}. \\end{aligned} \\] Thus, the IGLS estimator is unbiased. Variance The variance of the transformed errors is given by: \\[ \\begin{aligned} \\mathbf{Var(w\\epsilon|\\mathbf{X})} &amp;= \\mathbf{wVar(\\epsilon|\\mathbf{X})w&#39;} \\\\ &amp;= \\mathbf{w\\Omega w&#39;} \\\\ &amp;= \\mathbf{w(w&#39;w)^{-1}w&#39;} &amp;&amp; \\text{since } \\mathbf{w} \\text{ is full-rank,} \\\\ &amp;= \\mathbf{ww^{-1}(w&#39;)^{-1}w&#39;} \\\\ &amp;= \\mathbf{I_n}. \\end{aligned} \\] Hence, A4 holds for the transformed (weighted) equation, satisfying the Gauss-Markov conditions. The variance of the IGLS estimator is: \\[ \\begin{aligned} \\mathbf{Var(\\hat{\\beta}_{IGLS}|\\mathbf{X})} &amp;= \\mathbf{Var(\\beta + (X&#39;\\Omega^{-1}X)^{-1}X&#39;\\Omega^{-1}\\epsilon|\\mathbf{X})} \\\\ &amp;= \\mathbf{Var((X&#39;\\Omega^{-1}X)^{-1}X&#39;\\Omega^{-1}\\epsilon|\\mathbf{X})} \\\\ &amp;= \\mathbf{(X&#39;\\Omega^{-1}X)^{-1}X&#39;\\Omega^{-1} Var(\\epsilon|\\mathbf{X}) \\Omega^{-1}X(X&#39;\\Omega^{-1}X)^{-1}} &amp;&amp; \\text{because A4 holds}, \\\\ &amp;= \\mathbf{(X&#39;\\Omega^{-1}X)^{-1}X&#39;\\Omega^{-1} \\Omega \\Omega^{-1} \\Omega^{-1}X(X&#39;\\Omega^{-1}X)^{-1}}, \\\\ &amp;= \\mathbf{(X&#39;\\Omega^{-1}X)^{-1}}. \\end{aligned} \\] Efficiency The difference in variances between OLS and IGLS is: \\[ \\mathbf{Var(\\hat{\\beta}_{OLS}|\\mathbf{X}) - Var(\\hat{\\beta}_{IGLS}|\\mathbf{X})} = \\mathbf{A\\Omega A&#39;}, \\] where: \\[ \\mathbf{A = (X&#39;X)^{-1}X&#39; - (X&#39;\\Omega^{-1}X)^{-1}X&#39;\\Omega^{-1}}. \\] Since \\(\\mathbf{\\Omega}\\) is positive semi-definite, \\(\\mathbf{A\\Omega A&#39;}\\) is also positive semi-definite. Thus, the IGLS estimator is more efficient than OLS under heteroskedasticity or autocorrelation. In short, properties of \\(\\mathbf{\\hat{\\beta}_{IGLS}}\\): Unbiasedness: \\(\\mathbf{\\hat{\\beta}_{IGLS}}\\) remains unbiased as long as A1-A3 hold. Efficiency: \\(\\mathbf{\\hat{\\beta}_{IGLS}}\\) is more efficient than OLS under heteroskedasticity or serial correlation since it accounts for the structure of \\(\\boldsymbol{\\Omega}\\). Why Is IGLS “Infeasible”? The name infeasible arises because it is generally impossible to compute the estimator directly due to the structure of \\(\\mathbf{w}\\) (or equivalently \\(\\boldsymbol{\\Omega}^{-1}\\)). The matrix \\(\\mathbf{w}\\) is defined as: \\[ \\mathbf{w} = \\begin{pmatrix} w_{11} &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 \\\\ w_{21} &amp; w_{22} &amp; 0 &amp; \\cdots &amp; 0 \\\\ w_{31} &amp; w_{32} &amp; w_{33} &amp; \\cdots &amp; \\cdots \\\\ w_{n1} &amp; w_{n2} &amp; w_{n3} &amp; \\cdots &amp; w_{nn} \\\\ \\end{pmatrix}, \\] with \\(n(n+1)/2\\) unique elements for \\(n\\) observations. This results in more parameters than data points, making direct estimation infeasible. To make the estimation feasible, assumptions about the structure of \\(\\mathbf{\\Omega}\\) are required. Common approaches include: Heteroskedasticity Errors: Assume a multiplicative exponential model for the variance, such as \\(Var(\\epsilon_i|\\mathbf{X}) = \\sigma_i^2\\). Assume no correlation between errors, but allow heterogeneous variances: \\[ \\mathbf{\\Omega} = \\begin{pmatrix} \\sigma_1^2 &amp; 0 &amp; \\cdots &amp; 0 \\\\ 0 &amp; \\sigma_2^2 &amp; \\cdots &amp; 0 \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ 0 &amp; 0 &amp; \\cdots &amp; \\sigma_n^2 \\end{pmatrix}. \\] Estimate \\(\\sigma_i^2\\) using methods such as: Modeling \\(\\sigma_i^2\\) as a function of predictors (e.g., \\(\\sigma_i^2 = \\exp(\\mathbf{x}_i \\gamma)\\)). Serial Correlation: Assume serial correlation follows an autoregressive process AR(1) Model, e.g., \\(\\epsilon_t = \\rho \\epsilon_{t-1} + u_t\\) and \\(Cov(\\epsilon_t, \\epsilon_{t -h}) = \\rho^h \\sigma^2\\), where we have a variance-covariance matrix with off-diagonal elements decaying geometrically: \\[ \\mathbf{\\Omega} = \\frac{\\sigma^2}{1-\\rho^2} \\begin{pmatrix} 1 &amp; \\rho &amp; \\rho^2 &amp; \\cdots &amp; \\rho^{n-1} \\\\ \\rho &amp; 1 &amp; \\rho &amp; \\cdots &amp; \\rho^{n-2} \\\\ \\rho^2 &amp; \\rho &amp; 1 &amp; \\cdots &amp; \\rho^{n-3} \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\rho^{n-1} &amp; \\rho^{n-2} &amp; \\rho^{n-3} &amp; \\cdots &amp; 1 \\end{pmatrix}. \\] Cluster Errors: Assume block-diagonal structure for \\(\\mathbf{\\Omega}\\) to account for grouped or panel data. Each assumption simplifies the estimation of \\(\\mathbf{\\Omega}\\) and thus \\(\\mathbf{w}\\), enabling Feasible Generalized Least Squares with fewer unknown parameters to estimate. 5.2.2 Feasible Generalized Least Squares 5.2.2.1 Heteroskedasticity Errors Heteroskedasticity occurs when the variance of the error term is not constant across observations. Specifically: \\[ Var(\\epsilon_i | x_i) = E(\\epsilon_i^2 | x_i) \\neq \\sigma^2, \\] but instead depends on a function of \\(x_i\\): \\[ Var(\\epsilon_i | x_i) = h(x_i) = \\sigma_i^2 \\] This violates the assumption of homoscedasticity (constant variance), impacting the efficiency of OLS estimates. For the model: \\[ y_i = x_i\\beta + \\epsilon_i, \\] we apply a transformation to standardize the variance: \\[ \\frac{y_i}{\\sigma_i} = \\frac{x_i}{\\sigma_i} \\beta + \\frac{\\epsilon_i}{\\sigma_i}. \\] By scaling each observation with \\(1/\\sigma_i\\), the variance of the transformed error term becomes: \\[ \\begin{aligned} Var\\left(\\frac{\\epsilon_i}{\\sigma_i} \\bigg| X \\right) &amp;= \\frac{1}{\\sigma_i^2} Var(\\epsilon_i | X) \\\\ &amp;= \\frac{1}{\\sigma_i^2} \\sigma_i^2 \\\\ &amp;= 1. \\end{aligned} \\] Thus, the heteroskedasticity is corrected in the transformed model. In matrix notation, the transformed model is: \\[ \\mathbf{w y} = \\mathbf{w X \\beta + w \\epsilon}, \\] where \\(\\mathbf{w}\\) is the weight matrix used to standardize the variance. The weight matrix \\(\\mathbf{w}\\) is defined as: \\[ \\mathbf{w} = \\begin{pmatrix} 1/\\sigma_1 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 \\\\ 0 &amp; 1/\\sigma_2 &amp; 0 &amp; \\cdots &amp; 0 \\\\ 0 &amp; 0 &amp; 1/\\sigma_3 &amp; \\cdots &amp; 0 \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 1/\\sigma_n \\end{pmatrix}. \\] In the presence of heteroskedasticity, the variance of the error term, \\(Var(\\epsilon_i|\\mathbf{x}_i)\\), is not constant across observations. This leads to inefficient OLS estimates. Infeasible Weighted Least Squares (IWLS) assumes that the variances \\(\\sigma_i^2 = Var(\\epsilon_i|\\mathbf{x}_i)\\) are known. This allows us to adjust the regression equation to correct for heteroskedasticity. The model is transformed as follows: \\[ y_i = \\mathbf{x}_i\\beta + \\epsilon_i \\quad \\text{(original equation)}, \\] where \\(\\epsilon_i\\) has variance \\(\\sigma_i^2\\). To make the errors homoskedastic, we divide through by \\(\\sigma_i\\): \\[ \\frac{y_i}{\\sigma_i} = \\frac{\\mathbf{x}_i}{\\sigma_i}\\beta + \\frac{\\epsilon_i}{\\sigma_i}. \\] Now, the transformed error term \\(\\epsilon_i / \\sigma_i\\) has a constant variance of 1: \\[ Var\\left(\\frac{\\epsilon_i}{\\sigma_i} | \\mathbf{x}_i \\right) = 1. \\] The IWLS estimator minimizes the weighted sum of squared residuals for the transformed model: \\[ \\text{Minimize: } \\sum_{i=1}^n \\left( \\frac{y_i - \\mathbf{x}_i\\beta}{\\sigma_i} \\right)^2. \\] In matrix form, the IWLS estimator is: \\[ \\hat{\\beta}_{IWLS} = (\\mathbf{X}&#39;\\mathbf{W}\\mathbf{X})^{-1}\\mathbf{X}&#39;\\mathbf{W}\\mathbf{y}, \\] where \\(\\mathbf{W}\\) is a diagonal matrix of weights: \\[ \\mathbf{W} = \\begin{pmatrix} 1/\\sigma_1^2 &amp; 0 &amp; \\cdots &amp; 0 \\\\ 0 &amp; 1/\\sigma_2^2 &amp; \\cdots &amp; 0 \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ 0 &amp; 0 &amp; \\cdots &amp; 1/\\sigma_n^2 \\end{pmatrix}. \\] Properties of IWLS Valid Standard Errors: If \\(Var(\\epsilon_i | \\mathbf{X}) = \\sigma_i^2\\), the usual standard errors from IWLS are valid. Robustness: If the variance assumption is incorrect (\\(Var(\\epsilon_i | \\mathbf{X}) \\neq \\sigma_i^2\\)), heteroskedasticity-robust standard errors must be used instead. The primary issue with IWLS is that \\(\\sigma_i^2 = Var(\\epsilon_i|\\mathbf{x}_i)\\) is generally unknown. Specifically, we do not know: \\[ \\sigma_i^2 = Var(\\epsilon_i|\\mathbf{x}_i) = E(\\epsilon_i^2|\\mathbf{x}_i). \\] The challenges are: Single Observation: For each observation \\(i\\), there is only one \\(\\epsilon_i\\), which is insufficient to estimate the variance \\(\\sigma_i^2\\) directly. Dependence on Assumptions: To estimate \\(\\sigma_i^2\\), we must impose assumptions about its relationship to \\(\\mathbf{x}_i\\). To make IWLS feasible, we model \\(\\sigma_i^2\\) as a function of the predictors \\(\\mathbf{x}_i\\). A common approach is: \\[ \\epsilon_i^2 = v_i \\exp(\\mathbf{x}_i\\gamma), \\] where: \\(v_i\\) is an independent error term with strictly positive values, representing random noise. \\(\\exp(\\mathbf{x}_i\\gamma)\\) is a deterministic function of the predictors \\(\\mathbf{x}_i\\). Taking the natural logarithm of both sides linearizes the model: \\[ \\ln(\\epsilon_i^2) = \\mathbf{x}_i\\gamma + \\ln(v_i), \\] where \\(\\ln(v_i)\\) is independent of \\(\\mathbf{x}_i\\). This transformation enables us to estimate \\(\\gamma\\) using standard OLS techniques. Estimation Procedure for Feasible GLS (FGLS) Since we do not observe the true errors \\(\\epsilon_i\\), we approximate them using the OLS residuals \\(e_i\\). Here’s the step-by-step process: Compute OLS Residuals: First, fit the original model using OLS and calculate the residuals: \\[ e_i = y_i - \\mathbf{x}_i\\hat{\\beta}_{OLS}. \\] Approximate \\(\\epsilon_i^2\\) with \\(e_i^2\\): Use the squared residuals as a proxy for the squared errors: \\[ e_i^2 \\approx \\epsilon_i^2. \\] Log-Linear Model: Fit the log-transformed model to estimate \\(\\gamma\\): \\[ \\ln(e_i^2) = \\mathbf{x}_i\\gamma + \\ln(v_i). \\] Estimate \\(\\gamma\\) using OLS, where \\(\\ln(v_i)\\) is treated as the error term. Estimate Variances: Use the fitted values \\(\\hat{\\gamma}\\) to estimate \\(\\sigma_i^2\\) for each observation: \\[ \\hat{\\sigma}_i^2 = \\exp(\\mathbf{x}_i\\hat{\\gamma}). \\] Perform Weighted Least Squares: Use the estimated variances \\(\\hat{\\sigma}_i^2\\) to construct the weight matrix \\(\\mathbf{\\hat{W}}\\): \\[ \\mathbf{\\hat{W}} = \\begin{pmatrix} 1/\\hat{\\sigma}_1^2 &amp; 0 &amp; \\cdots &amp; 0 \\\\ 0 &amp; 1/\\hat{\\sigma}_2^2 &amp; \\cdots &amp; 0 \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ 0 &amp; 0 &amp; \\cdots &amp; 1/\\hat{\\sigma}_n^2 \\end{pmatrix}. \\] Then, compute the Feasible GLS (FGLS) estimator: \\[ \\hat{\\beta}_{FGLS} = (\\mathbf{X}&#39;\\mathbf{\\hat{W}}\\mathbf{X})^{-1}\\mathbf{X}&#39;\\mathbf{\\hat{W}}\\mathbf{y}. \\] 5.2.2.2 Serial Correlation Serial correlation (also called autocorrelation) occurs when the error terms in a regression model are correlated across observations. Formally: \\[ Cov(\\epsilon_i, \\epsilon_j | \\mathbf{X}) \\neq 0 \\quad \\text{for } i \\neq j. \\] This violates the Gauss-Markov assumption that \\(Cov(\\epsilon_i, \\epsilon_j | \\mathbf{X}) = 0\\), leading to inefficiencies in OLS estimates. 5.2.2.2.1 Covariance Stationarity If the errors are covariance stationary, the covariance between errors depends only on their relative time or positional difference (\\(h\\)), not their absolute position: \\[ Cov(\\epsilon_i, \\epsilon_j | \\mathbf{X}) = Cov(\\epsilon_i, \\epsilon_{i+h} | \\mathbf{x}_i, \\mathbf{x}_{i+h}) = \\gamma_h, \\] where \\(\\gamma_h\\) represents the covariance at lag \\(h\\). Under covariance stationarity, the variance-covariance matrix of the error term \\(\\boldsymbol{\\epsilon}\\) takes the following form: \\[ Var(\\boldsymbol{\\epsilon}|\\mathbf{X}) = \\boldsymbol{\\Omega} = \\begin{pmatrix} \\sigma^2 &amp; \\gamma_1 &amp; \\gamma_2 &amp; \\cdots &amp; \\gamma_{n-1} \\\\ \\gamma_1 &amp; \\sigma^2 &amp; \\gamma_1 &amp; \\cdots &amp; \\gamma_{n-2} \\\\ \\gamma_2 &amp; \\gamma_1 &amp; \\sigma^2 &amp; \\cdots &amp; \\vdots \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\gamma_1 \\\\ \\gamma_{n-1} &amp; \\gamma_{n-2} &amp; \\cdots &amp; \\gamma_1 &amp; \\sigma^2 \\end{pmatrix}. \\] Key Points: The diagonal elements represent the variance of the error term: \\(\\sigma^2\\). The off-diagonal elements \\(\\gamma_h\\) represent covariances at different lags \\(h\\). Why Serial Correlation Is a Problem? The matrix \\(\\boldsymbol{\\Omega}\\) introduces \\(n\\) parameters to estimate (e.g., \\(\\sigma^2, \\gamma_1, \\gamma_2, \\ldots, \\gamma_{n-1}\\)). Estimating such a large number of parameters becomes impractical, especially for large datasets. To address this, we impose additional structure to reduce the number of parameters. 5.2.2.2.2 AR(1) Model In the AR(1) process, the errors follow a first-order autoregressive process: \\[ \\begin{aligned} y_t &amp;= \\beta_0 + x_t\\beta_1 + \\epsilon_t, \\\\ \\epsilon_t &amp;= \\rho \\epsilon_{t-1} + u_t, \\end{aligned} \\] where: \\(\\rho\\) is the first-order autocorrelation coefficient, capturing the relationship between consecutive errors. \\(u_t\\) is white noise, satisfying \\(Var(u_t) = \\sigma_u^2\\) and \\(Cov(u_t, u_{t-h}) = 0\\) for \\(h \\neq 0\\). Under the AR(1) assumption, the variance-covariance matrix of the error term \\(\\boldsymbol{\\epsilon}\\) becomes: \\[ Var(\\boldsymbol{\\epsilon} | \\mathbf{X}) = \\frac{\\sigma_u^2}{1-\\rho^2} \\begin{pmatrix} 1 &amp; \\rho &amp; \\rho^2 &amp; \\cdots &amp; \\rho^{n-1} \\\\ \\rho &amp; 1 &amp; \\rho &amp; \\cdots &amp; \\rho^{n-2} \\\\ \\rho^2 &amp; \\rho &amp; 1 &amp; \\cdots &amp; \\rho^{n-3} \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\rho^{n-1} &amp; \\rho^{n-2} &amp; \\cdots &amp; \\rho &amp; 1 \\end{pmatrix}. \\] Key Features: The diagonal elements represent the variance: \\(Var(\\epsilon_t | \\mathbf{X}) = \\sigma_u^2 / (1-\\rho^2)\\). The off-diagonal elements decay exponentially with lag \\(h\\): \\(Cov(\\epsilon_t, \\epsilon_{t-h} | \\mathbf{X}) = \\rho^h \\cdot Var(\\epsilon_t | \\mathbf{X})\\). Under AR(1), only one parameter \\(\\rho\\) needs to be estimated (in addition to \\(\\sigma_u^2\\)), greatly simplifying the structure of \\(\\boldsymbol{\\Omega}\\). OLS Properties Under AR(1) Consistency: If assumptions A1, A2, A3a, and A5a hold, OLS remains consistent. Asymptotic Normality: OLS estimates are asymptotically normal. Inference with Serial Correlation: Standard OLS errors are invalid. Use Newey-West standard errors to obtain robust inference. 5.2.2.2.3 Infeasible Cochrane-Orcutt The Infeasible Cochrane-Orcutt procedure addresses serial correlation in the error terms by assuming an AR(1) process for the errors: \\[ \\epsilon_t = \\rho \\epsilon_{t-1} + u_t, \\] where \\(u_t\\) is white noise and \\(\\rho\\) is the autocorrelation coefficient. By transforming the original regression equation: \\[ y_t = \\beta_0 + x_t\\beta_1 + \\epsilon_t, \\] we subtract \\(\\rho\\) times the lagged equation: \\[ \\rho y_{t-1} = \\rho (\\beta_0 + x_{t-1}\\beta_1 + \\epsilon_{t-1}), \\] to obtain the weighted first-difference equation: \\[ y_t - \\rho y_{t-1} = (1-\\rho)\\beta_0 + (x_t - \\rho x_{t-1})\\beta_1 + u_t. \\] Key Points: Dependent Variable: \\(y_t - \\rho y_{t-1}\\). Independent Variable: \\(x_t - \\rho x_{t-1}\\). Error Term: \\(u_t\\), which satisfies the Gauss-Markov assumptions (A3, A4, A5). The ICO estimator minimizes the sum of squared residuals for this transformed equation. Standard Errors: If the errors truly follow an AR(1) process, the standard errors for the transformed equation are valid. For more complex error structures, Newey-West HAC standard errors are required. Loss of Observations: The transformation involves first differences, which means the first observation (\\(y_1\\)) cannot be used. This reduces the effective sample size by one. The Problem: \\(\\rho\\) Is Unknown The ICO procedure is infeasible because it requires knowledge of \\(\\rho\\), the autocorrelation coefficient. In practice, we estimate \\(\\rho\\) from the data. To estimate \\(\\rho\\), we use the OLS residuals (\\(e_t\\)) as a proxy for the errors (\\(\\epsilon_t\\)). The estimate \\(\\hat{\\rho}\\) is given by: \\[ \\hat{\\rho} = \\frac{\\sum_{t=2}^{T} e_t e_{t-1}}{\\sum_{t=2}^{T} e_t^2}. \\] Estimation via OLS: Regress the OLS residuals \\(e_t\\) on their lagged values \\(e_{t-1}\\), without an intercept: \\[ e_t = \\rho e_{t-1} + u_t. \\] The slope of this regression is the estimate \\(\\hat{\\rho}\\). This estimation is efficient under the AR(1) assumption and provides a practical approximation for \\(\\rho\\). 5.2.2.2.4 Feasible Prais-Winsten The Feasible Prais-Winsten (FPW) method addresses AR(1) serial correlation in regression models by transforming the data to eliminate serial dependence in the errors. Unlike the Infeasible Cochrane-Orcutt procedure, which discards the first observation, the Prais-Winsten method retains it using a weighted transformation. The FPW transformation uses the following weighting matrix \\(\\mathbf{w}\\): \\[ \\mathbf{w} = \\begin{pmatrix} \\sqrt{1 - \\hat{\\rho}^2} &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 \\\\ -\\hat{\\rho} &amp; 1 &amp; 0 &amp; \\cdots &amp; 0 \\\\ 0 &amp; -\\hat{\\rho} &amp; 1 &amp; \\cdots &amp; 0 \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ 0 &amp; 0 &amp; 0 &amp; -\\hat{\\rho} &amp; 1 \\end{pmatrix}. \\] where The first row accounts for the transformation of the first observation, using \\(\\sqrt{1 - \\hat{\\rho}^2}\\). Subsequent rows represent the AR(1) transformation for the remaining observations. Step-by-Step Procedure Step 1: Initial OLS Estimation Estimate the regression model using OLS: \\[ y_t = \\mathbf{x}_t \\beta + \\epsilon_t, \\] and compute the residuals: \\[ e_t = y_t - \\mathbf{x}_t \\hat{\\beta}. \\] Step 2: Estimate the AR(1) Correlation Coefficient Estimate the AR(1) correlation coefficient \\(\\rho\\) by regressing \\(e_t\\) on \\(e_{t-1}\\) without an intercept: \\[ e_t = \\rho e_{t-1} + u_t. \\] The slope of this regression is the estimated \\(\\hat{\\rho}\\). Step 3: Transform the Data Apply the transformation using the weighting matrix \\(\\mathbf{w}\\) to transform both the dependent variable \\(\\mathbf{y}\\) and the independent variables \\(\\mathbf{X}\\): \\[ \\mathbf{wy} = \\mathbf{wX} \\beta + \\mathbf{w\\epsilon}. \\] Specifically: 1. For \\(t=1\\), the transformed dependent and independent variables are: \\[ \\tilde{y}_1 = \\sqrt{1 - \\hat{\\rho}^2} \\cdot y_1, \\quad \\tilde{\\mathbf{x}}_1 = \\sqrt{1 - \\hat{\\rho}^2} \\cdot \\mathbf{x}_1. \\] 2. For \\(t=2, \\dots, T\\), the transformed variables are: \\[ \\tilde{y}_t = y_t - \\hat{\\rho} \\cdot y_{t-1}, \\quad \\tilde{\\mathbf{x}}_t = \\mathbf{x}_t - \\hat{\\rho} \\cdot \\mathbf{x}_{t-1}. \\] Step 4: Feasible Prais-Winsten Estimation Run OLS on the transformed equation: \\[ \\mathbf{wy} = \\mathbf{wX} \\beta + \\mathbf{w\\epsilon}. \\] The resulting estimator is the Feasible Prais-Winsten (FPW) estimator: \\[ \\hat{\\beta}_{FPW} = (\\mathbf{X}&#39;\\mathbf{w}&#39;\\mathbf{w}\\mathbf{X})^{-1} \\mathbf{X}&#39;\\mathbf{w}&#39;\\mathbf{w}\\mathbf{y}. \\] Properties of Feasible Prais-Winsten Estimator Infeasible Prais-Winsten Estimator: The infeasible Prais-Winsten (PW) estimator assumes the AR(1) parameter \\(\\rho\\) is known. Under assumptions A1, A2, and A3 for the unweighted equation, the infeasible PW estimator is unbiased and efficient. Feasible Prais-Winsten (FPW) Estimator: The FPW estimator replaces the unknown \\(\\rho\\) with an estimate \\(\\hat{\\rho}\\) derived from the OLS residuals, introducing bias in small samples. Bias: The FPW estimator is biased due to the estimation of \\(\\hat{\\rho}\\), which introduces an additional layer of approximation. Consistency: The FPW estimator is consistent under the following assumptions: A1: The model is linear in parameters. A2: The independent variables are linearly independent. A5: The data is generated through random sampling. Additionally: \\[ E\\big((\\mathbf{x_t - \\rho x_{t-1}})&#39;\\big(\\epsilon_t - \\rho \\epsilon_{t-1}\\big)\\big) = 0. \\] This condition ensures the transformed error term \\(\\epsilon_t - \\rho \\epsilon_{t-1}\\) is uncorrelated with the transformed regressors \\(\\mathbf{x_t - \\rho x_{t-1}}\\). Note: A3a (zero conditional mean of the error term, \\(E(\\epsilon_t|\\mathbf{x}_t) = 0\\)) is not sufficient for the above condition. Full exogeneity of the independent variables (A3) is required. Efficiency Asymptotic Efficiency: The FPW estimator is asymptotically more efficient than OLS if the errors are truly generated by an AR(1) process: \\[ \\epsilon_t = \\rho \\epsilon_{t-1} + u_t, \\quad Var(u_t) = \\sigma^2. \\] Standard Errors: Usual Standard Errors: If the errors are correctly specified as an AR(1) process, the usual standard errors from FPW are valid. Robust Standard Errors: If there is concern about a more complex dependence structure (e.g., higher-order autocorrelation or heteroskedasticity), use Newey-West Standard Errors for inference. These are robust to both serial correlation and heteroskedasticity. 5.2.2.3 Cluster Errors Consider the regression model with clustered errors: \\[ y_{gi} = \\mathbf{x}_{gi}\\beta + \\epsilon_{gi}, \\] where: \\(g\\) indexes the group (e.g., households, firms, schools). \\(i\\) indexes the individual within the group. The covariance structure for the errors \\(\\epsilon_{gi}\\) is defined as: \\[ Cov(\\epsilon_{gi}, \\epsilon_{hj}) \\begin{cases} = 0 &amp; \\text{if } g \\neq h \\text{ (independent across groups)}, \\\\ \\neq 0 &amp; \\text{for any pair } (i,j) \\text{ within group } g. \\end{cases} \\] Within each group, individuals’ errors may be correlated (i.e., intra-group correlation), while errors are independent across groups. This violates A4 (constant variance and no correlation of errors). Suppose there are three groups with varying sizes. The variance-covariance matrix \\(\\boldsymbol{\\Omega}\\) for the errors \\(\\boldsymbol{\\epsilon}\\) is: \\[ Var(\\boldsymbol{\\epsilon}| \\mathbf{X}) = \\boldsymbol{\\Omega} = \\begin{pmatrix} \\sigma^2 &amp; \\delta_{12}^1 &amp; \\delta_{13}^1 &amp; 0 &amp; 0 &amp; 0 \\\\ \\delta_{12}^1 &amp; \\sigma^2 &amp; \\delta_{23}^1 &amp; 0 &amp; 0 &amp; 0 \\\\ \\delta_{13}^1 &amp; \\delta_{23}^1 &amp; \\sigma^2 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; \\sigma^2 &amp; \\delta_{12}^2 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; \\delta_{12}^2 &amp; \\sigma^2 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\sigma^2 \\end{pmatrix}. \\] where \\(\\delta_{ij}^g = Cov(\\epsilon_{gi}, \\epsilon_{gj})\\) is the covariance between errors for individuals \\(i\\) and \\(j\\) in group \\(g\\). \\(Cov(\\epsilon_{gi}, \\epsilon_{hj}) = 0\\) for \\(g \\neq h\\) (independent groups). Infeasible Generalized Least Squares (Cluster) Assume Known Variance-Covariance Matrix: If \\(\\sigma^2\\) and \\(\\delta_{ij}^g\\) are known, construct \\(\\boldsymbol{\\Omega}\\) and compute its inverse \\(\\boldsymbol{\\Omega}^{-1}\\). Infeasible GLS Estimator: The infeasible generalized least squares (IGLS) estimator is: \\[ \\hat{\\beta}_{IGLS} = (\\mathbf{X}&#39;\\boldsymbol{\\Omega}^{-1}\\mathbf{X})^{-1}\\mathbf{X}&#39;\\boldsymbol{\\Omega}^{-1}\\mathbf{y}. \\] Problem: We do not know \\(\\sigma^2\\) and \\(\\delta_{ij}^g\\), making this approach infeasible. Even if \\(\\boldsymbol{\\Omega}\\) is estimated, incorrect assumptions about its structure may lead to invalid inference. To make the estimation feasible, we assume a group-level random effects specification for the error: \\[ \\begin{aligned} y_{gi} &amp;= \\mathbf{x}_{gi}\\beta + c_g + u_{gi}, \\\\ Var(c_g|\\mathbf{x}_i) &amp;= \\sigma_c^2, \\\\ Var(u_{gi}|\\mathbf{x}_i) &amp;= \\sigma_u^2, \\end{aligned} \\] where: \\(c_g\\) represents the group-level random effect (common shocks within each group, independent across groups). \\(u_{gi}\\) represents the individual-level error (idiosyncratic shocks within each group, independent across individuals and groups). \\(\\epsilon_{gi} = c_g + u_{gi}\\) Independence Assumptions: \\(c_g\\) and \\(u_{gi}\\) are independent of each other. Both are mean-independent of \\(\\mathbf{x}_i\\). Under this specification, the variance-covariance matrix \\(\\boldsymbol{\\Omega}\\) becomes block diagonal, where each block corresponds to a group: \\[ Var(\\boldsymbol{\\epsilon}| \\mathbf{X}) = \\boldsymbol{\\Omega} = \\begin{pmatrix} \\sigma_c^2 + \\sigma_u^2 &amp; \\sigma_c^2 &amp; \\sigma_c^2 &amp; 0 &amp; 0 &amp; 0 \\\\ \\sigma_c^2 &amp; \\sigma_c^2 + \\sigma_u^2 &amp; \\sigma_c^2 &amp; 0 &amp; 0 &amp; 0 \\\\ \\sigma_c^2 &amp; \\sigma_c^2 &amp; \\sigma_c^2 + \\sigma_u^2 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; \\sigma_c^2 + \\sigma_u^2 &amp; \\sigma_c^2 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; \\sigma_c^2 &amp; \\sigma_c^2 + \\sigma_u^2 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\sigma_c^2 + \\sigma_u^2 \\end{pmatrix}. \\] When the variance components \\(\\sigma_c^2\\) and \\(\\sigma_u^2\\) are unknown, we can use the Feasible Group-Level Random Effects (RE) estimator to simultaneously estimate these variances and the regression coefficients \\(\\beta\\). This practical approach allows us to account for intra-group correlation in the errors and still obtain consistent and efficient estimates of the parameters. Step-by-Step Procedure Step 1: Initial OLS Estimation Estimate the regression model using OLS: \\[ y_{gi} = \\mathbf{x}_{gi}\\beta + \\epsilon_{gi}, \\] and compute the residuals: \\[ e_{gi} = y_{gi} - \\mathbf{x}_{gi}\\hat{\\beta}. \\] Step 2: Estimate Variance Components Use the standard OLS variance estimator \\(s^2\\) to estimate the total variance: \\[ s^2 = \\frac{1}{n - k} \\sum_{i=1}^{n} e_i^2, \\] where \\(n\\) is the total number of observations and \\(k\\) is the number of regressors (including the intercept). Estimate the between-group variance \\(\\hat{\\sigma}_c^2\\) using: \\[ \\hat{\\sigma}_c^2 = \\frac{1}{G} \\sum_{g=1}^{G} \\left( \\frac{1}{\\sum_{i=1}^{n_g - 1} i} \\sum_{i \\neq j} \\sum_{j=1}^{n_g} e_{gi} e_{gj} \\right), \\] where: \\(G\\) is the total number of groups, \\(n_g\\) is the size of group \\(g\\), The term \\(\\sum_{i \\neq j} e_{gi} e_{gj}\\) accounts for within-group covariance. Estimate the within-group variance as: \\[ \\hat{\\sigma}_u^2 = s^2 - \\hat{\\sigma}_c^2. \\] Step 3: Construct the Variance-Covariance Matrix Use the estimated variances \\(\\hat{\\sigma}_c^2\\) and \\(\\hat{\\sigma}_u^2\\) to construct the variance-covariance matrix \\(\\hat{\\Omega}\\) for the error term: \\[ \\hat{\\Omega}_{gi,gj} = \\begin{cases} \\hat{\\sigma}_c^2 + \\hat{\\sigma}_u^2 &amp; \\text{if } i = j \\text{ (diagonal elements)}, \\\\ \\hat{\\sigma}_c^2 &amp; \\text{if } i \\neq j \\text{ (off-diagonal elements within group)}, \\\\ 0 &amp; \\text{if } g \\neq h \\text{ (across groups)}. \\end{cases} \\] Step 4: Feasible GLS Estimation With \\(\\hat{\\Omega}\\) in hand, perform Feasible Generalized Least Squares (FGLS) to estimate \\(\\beta\\): \\[ \\hat{\\beta}_{RE} = (\\mathbf{X}&#39;\\hat{\\Omega}^{-1}\\mathbf{X})^{-1} \\mathbf{X}&#39;\\hat{\\Omega}^{-1}\\mathbf{y}. \\] If the assumptions about \\(\\boldsymbol{\\Omega}\\) are incorrect or infeasible, use cluster-robust standard errors to account for intra-group correlation without explicitly modeling the variance-covariance structure. These standard errors remain valid under arbitrary within-cluster dependence, provided clusters are independent. Properties of the Feasible Group-Level Random Effects Estimator Infeasible Group RE Estimator The infeasible RE estimator (assuming known variances) is unbiased under assumptions A1, A2, and A3 for the unweighted equation. A3 requires: \\[ E(\\epsilon_{gi}|\\mathbf{x}_i) = E(c_g|\\mathbf{x}_i) + E(u_{gi}|\\mathbf{x}_i) = 0. \\] This assumes: \\(E(c_g|\\mathbf{x}_i) = 0\\): The random effects assumption (group-level effects are uncorrelated with the regressors). \\(E(u_{gi}|\\mathbf{x}_i) = 0\\): No endogeneity at the individual level. Feasible Group RE Estimator The feasible RE estimator is biased because the variances \\(\\sigma_c^2\\) and \\(\\sigma_u^2\\) are estimated, introducing approximation errors. However, the estimator is consistent under A1, A2, A3a (\\(E(\\mathbf{x}_i&#39;\\epsilon_{gi}) = E(\\mathbf{x}_i&#39;c_g) + E(\\mathbf{x}_i&#39;u_{gi}) = 0\\)), A5a. Efficiency Asymptotic Efficiency: The feasible RE estimator is asymptotically more efficient than OLS if the errors follow the random effects specification. Standard Errors: If the random effects specification is correct, the usual standard errors are consistent. If there is concern about more complex dependence structures or heteroskedasticity, use cluster robust standard errors. 5.2.3 Weighted Least Squares In the presence of heteroskedasticity, the errors \\(\\epsilon_i\\) have non-constant variance \\(Var(\\epsilon_i|\\mathbf{x}_i) = \\sigma_i^2\\). This violates the Gauss-Markov assumption of homoskedasticity, leading to inefficient OLS estimates. Weighted Least Squares (WLS) addresses this by applying weights inversely proportional to the variance of the errors, ensuring that observations with larger variances have less influence on the estimation. Weighted Least Squares is essentially Generalized Least Squares in the special case that \\(\\mathbf{\\Omega}\\) is a diagonal matrix with variances \\(\\sigma_i^2\\) on the diagonal (i.e., errors are uncorrelated but have non-constant variance). That is, assume the errors are uncorrelated but heteroskedastic: \\(\\mathbf{\\Omega} = \\text{diag}\\bigl(\\sigma_1^2, \\ldots, \\sigma_n^2\\bigr)\\) Then \\(\\mathbf{\\Omega}^{-1} = \\text{diag}\\bigl(1/\\sigma_1^2, \\ldots, 1/\\sigma_n^2\\bigr)\\) Steps for Feasible Weighted Least Squares (FWLS) 1. Initial OLS Estimation First, estimate the model using OLS: \\[ y_i = \\mathbf{x}_i\\beta + \\epsilon_i, \\] and compute the residuals: \\[ e_i = y_i - \\mathbf{x}_i \\hat{\\beta}. \\] 2. Model the Error Variance Transform the residuals to model the variance as a function of the predictors: \\[ \\ln(e_i^2) = \\mathbf{x}_i\\gamma + \\ln(v_i), \\] where: \\(e_i^2\\) approximates \\(\\epsilon_i^2\\), \\(\\ln(v_i)\\) is the error term in this auxiliary regression, assumed independent of \\(\\mathbf{x}_i\\). Estimate this equation using OLS to obtain the predicted values: \\[ \\hat{g}_i = \\mathbf{x}_i \\hat{\\gamma}. \\] 3. Estimate Weights Use the predicted values from the auxiliary regression to compute the weights: \\[ \\hat{\\sigma}_i = \\sqrt{\\exp(\\hat{g}_i)}. \\] These weights approximate the standard deviation of the errors. 4. Weighted Regression Transform the original equation by dividing through by \\(\\hat{\\sigma}_i\\): \\[ \\frac{y_i}{\\hat{\\sigma}_i} = \\frac{\\mathbf{x}_i}{\\hat{\\sigma}_i}\\beta + \\frac{\\epsilon_i}{\\hat{\\sigma}_i}. \\] Estimate the transformed equation using OLS. The resulting estimator is the Feasible Weighted Least Squares (FWLS) estimator: \\[ \\hat{\\beta}_{FWLS} = (\\mathbf{X}&#39;\\mathbf{\\hat{W}}\\mathbf{X})^{-1}\\mathbf{X}&#39;\\mathbf{\\hat{W}}\\mathbf{y}, \\] where \\(\\mathbf{\\hat{W}}\\) is a diagonal weight matrix with elements \\(1/\\hat{\\sigma}_i^2\\). Properties of the FWLS Estimator Unbiasedness: The infeasible WLS estimator (where \\(\\sigma_i\\) is known) is unbiased under assumptions A1-A3 for the unweighted model. The FWLS estimator is not unbiased due to the approximation of \\(\\sigma_i\\) using \\(\\hat{\\sigma}_i\\). Consistency: The FWLS estimator is consistent under the following assumptions: A1 (for the unweighted equation): The model is linear in parameters. A2 (for the unweighted equation): The independent variables are linearly independent. A5: The data is randomly sampled. \\(E(\\mathbf{x}_i&#39;\\epsilon_i/\\sigma_i^2) = 0\\). A3a: Weaker Exogeneity Assumption is not sufficient, but A3 is. Efficiency: The FWLS estimator is asymptotically more efficient than OLS if the errors have multiplicative exponential heteroskedasticity: \\[ Var(\\epsilon_i|\\mathbf{x}_i) = \\sigma_i^2 = \\exp(\\mathbf{x}_i\\gamma). \\] The FWLS estimator is asymptotically more efficient than OLS if the errors have multiplicative exponential heteroskedasticity. Usual Standard Errors: If the errors are truly multiplicative exponential heteroskedastic, the usual standard errors for FWLS are valid. Heteroskedastic Robust Standard Errors: If there is potential mis-specification of the multiplicative exponential model for \\(\\sigma_i^2\\), heteroskedastic-robust standard errors should be reported to ensure valid inference. "],["maximum-likelihood-estimator.html", "5.3 Maximum Likelihood", " 5.3 Maximum Likelihood The Maximum Likelihood Estimation (MLE) is a statistical method used to estimate the parameters of a model by maximizing the likelihood of observing the given data. The premise is to find the parameter values that maximize the probability (or likelihood) of the observed data. The likelihood function, denoted as \\(L(\\theta)\\), is expressed as: \\[ L(\\theta) = \\prod_{i=1}^{n} f(y_i|\\theta) \\] where: \\(f(y|\\theta)\\) is the probability density or mass function of observing a single value of \\(Y\\) given the parameter \\(\\theta\\). The product runs over all \\(n\\) observations. For different types of data, \\(f(y|\\theta)\\) can take different forms. For example, if \\(y\\) is dichotomous (e.g., success/failure), then the likelihood function becomes: \\[ L(\\theta) = \\prod_{i=1}^{n} \\theta^{y_i} (1-\\theta)^{1-y_i} \\] Here, \\(\\hat{\\theta}\\) is the Maximum Likelihood Estimator (MLE) if: \\[ L(\\hat{\\theta}) &gt; L(\\theta_0), \\quad \\forall \\theta_0 \\text{ in the parameter space.} \\] See Distributions for a review on variable distributions. 5.3.1 Motivation for MLE Suppose we know the conditional distribution of \\(Y\\) given \\(X\\), denoted as: \\[ f_{Y|X}(y, x; \\theta) \\] where \\(\\theta\\) is an unknown parameter of the distribution. Sometimes, we are only concerned with the unconditional distribution \\(f_Y(y; \\theta)\\). For a sample of independent and identically distributed (i.i.d.) data, the joint probability of the sample is: \\[ f_{Y_1, \\ldots, Y_n|X_1, \\ldots, X_n}(y_1, \\ldots, y_n, x_1, \\ldots, x_n; \\theta) = \\prod_{i=1}^{n} f_{Y|X}(y_i, x_i; \\theta) \\] The joint distribution, evaluated at the observed data, defines the likelihood function. The goal of MLE is to find the parameter \\(\\theta\\) that maximizes this likelihood. To estimate \\(\\theta\\), we maximize the likelihood function: \\[ \\max_{\\theta} \\prod_{i=1}^{n} f_{Y|X}(y_i, x_i; \\theta) \\] In practice, it is easier to work with the natural logarithm of the likelihood (log-likelihood), as it transforms the product into a sum: \\[ \\max_{\\theta} \\sum_{i=1}^{n} \\ln(f_{Y|X}(y_i, x_i; \\theta)) \\] Solving for the Maximum Likelihood Estimator First-Order Condition: Solve the first derivative of the log-likelihood function with respect to \\(\\theta\\): \\[ \\frac{\\partial}{\\partial \\theta} \\ell(\\theta) \\;=\\; \\frac{\\partial}{\\partial \\theta} \\ln L(\\theta) \\;=\\; \\frac{\\partial}{\\partial \\theta} \\sum_{i=1}^{n} \\ln(f_{Y|X}(y_i, x_i; \\hat{\\theta}_{MLE})) = 0 \\] This yields the critical points where the likelihood is maximized. This derivative, sometimes written as \\(U(\\theta)\\), is called the score. Intuitively, the log-likelihood’s “peak” indicates the parameter value(s) that make the observed data “most likely.” Second-Order Condition: Verify that the second derivative of the log-likelihood function is negative at the critical point: \\[ \\frac{\\partial^2}{\\partial \\theta^2} \\sum_{i=1}^{n} \\ln(f_{Y|X}(y_i, x_i; \\hat{\\theta}_{MLE})) &lt; 0 \\] This ensures that the solution corresponds to a maximum. Examples of Likelihood Functions Unconditional Poisson Distribution The Poisson distribution models count data, such as the number of website visits in a day or product orders per hour. Its likelihood function is: \\[ L(\\theta) = \\prod_{i=1}^{n} \\frac{\\theta^{y_i} e^{-\\theta}}{y_i!} \\] Exponential Distribution The exponential distribution is often used to model the time between events, such as the time until a machine fails. Its probability density function (PDF) is: \\[ f_{Y|X}(y, x; \\theta) = \\frac{\\exp(-y / (x \\theta))}{x \\theta} \\] The joint likelihood for \\(n\\) observations is: \\[ L(\\theta) = \\prod_{i=1}^{n} \\frac{\\exp(-y_i / (x_i \\theta))}{x_i \\theta} \\] By taking the logarithm, we obtain the log-likelihood for ease of maximization. 5.3.2 Key Quantities for Inference Score Function The score is given by \\[ U(\\theta) \\;=\\; \\frac{d}{d\\theta} \\ell(\\theta). \\] Setting \\(U(\\hat{\\theta}_{\\mathrm{MLE}}) = 0\\) yields the critical points of the log-likelihood, from which we can find \\(\\hat{\\theta}_{\\mathrm{MLE}}\\). Observed Information The second derivative of the log-likelihood, taken at the MLE, is called the observed information: \\[ I_O(\\theta) \\;=\\; - \\frac{d^2}{d\\theta^2} \\ell(\\theta). \\] (The negative sign is often included so that \\(I_O(\\theta)\\) is positive if \\(\\ell(\\theta)\\) is concave near its maximum. In some texts, you will see it defined without the negative sign, but the idea is the same: it measures the “pointedness” or curvature of \\(\\ell(\\theta)\\) at its maximum.) Fisher Information The Fisher Information (or expected information) is the expectation of the observed information over the distribution of the data: \\[ I(\\theta) \\;=\\; \\mathbb{E}\\bigl[I_O(\\theta)\\bigr]. \\] It quantifies how much information the data carry about the parameter \\(\\theta\\). A larger Fisher information suggests that you can estimate \\(\\theta\\) more precisely. Approximate Variance of \\(\\hat{\\theta}_{\\mathrm{MLE}}\\) One of the key results from standard asymptotic theory is that, for large \\(n\\), the variance of \\(\\hat{\\theta}_{\\mathrm{MLE}}\\) can be approximated by the inverse of the Fisher information: \\[ \\mathrm{Var}\\bigl(\\hat{\\theta}_{\\mathrm{MLE}}\\bigr) \\;\\approx\\; I(\\theta)^{-1}. \\] This also lays the groundwork for constructing confidence intervals for \\(\\theta\\) in large samples. 5.3.3 Assumptions of MLE MLE has desirable properties—consistency, asymptotic normality, and efficiency—but these do not come “for free.” Instead, they rely on certain assumptions. Below is a breakdown of the main regularity conditions. These conditions are typically mild in many practical settings (for example, in exponential families, such as the normal distribution), but need to be checked in more complex models. High-Level Regulatory Assumptions Independence and Identical Distribution (iid) The sample \\(\\{(x_i, y_i)\\}\\) is usually assumed to be composed of independent and identically distributed observations. This independence assumption simplifies the likelihood to a product of individual densities: \\[ L(\\theta) = \\prod_{i=1}^n f_{Y\\mid X}(y_i, x_i; \\theta). \\] In practice, if you have dependent data (e.g., time series, spatial data), modifications are required in the likelihood function. Same Density Function All observations must come from the same conditional probability density function \\(f_{Y\\mid X}(\\cdot,\\cdot;\\theta)\\). If the model changes across observations, you cannot simply multiply all of them together in one unified likelihood. Multivariate Normality (for certain models) In many practical cases—especially for continuous outcomes—you might assume (multivariate) normal distributions with finite second or fourth moments (Little 1988). Under these assumptions, the MLE for the mean vector and covariance matrix is consistent and (under further conditions) asymptotically normal. This assumption is quite common in regression, ANOVA, and other classical statistical frameworks. 5.3.3.1 Large Sample Properties of MLE 5.3.3.1.1 Consistency of MLE Definition: An estimator \\(\\hat{\\theta}_n\\) is consistent if it converges in probability to the true parameter value \\(\\theta_0\\) as the sample size \\(n \\to \\infty\\): \\[ \\hat{\\theta}_n \\;\\to^p\\; \\theta_0. \\] For the MLE, a set of regularity conditions \\(R1\\)–\\(R4\\) is commonly used to ensure consistency: R1 If \\(\\theta \\neq \\theta_0\\), then \\[ f_{Y\\mid X}(y_i, x_i; \\theta) \\;\\neq\\; f_{Y\\mid X}(y_i, x_i; \\theta_0). \\] In simpler terms, the model is identifiable: no two distinct parameter values generate the exact same distribution for the data. R2 The parameter space \\(\\Theta\\) is compact (closed and bounded), and it contains the true parameter \\(\\theta_0\\). This ensures that \\(\\theta\\) lies in a “nice” region (no parameter going to infinity, etc.), making it easier to prove that a maximum in that space indeed exists. R3 The log-likelihood function \\(\\ln(f_{Y\\mid X}(y_i, x_i; \\theta))\\) is continuous in \\(\\theta\\) with probability \\(1\\). Continuity is important so that we can apply theorems (like the Continuous Mapping Theorem or the Extreme Value Theorem) to find maxima. R4 The expected supremum of the absolute value of the log-likelihood is finite: \\[ \\mathbb{E}\\!\\Bigl(\\sup_{\\theta \\in \\Theta} \\bigl|\\ln(f_{Y\\mid X}(y_i, x_i; \\theta))\\bigr|\\Bigr) \\;&lt;\\;\\infty. \\] This is a technical condition that helps ensure we can “exchange” expectations and suprema, a step needed in many consistency proofs. When these conditions are satisfied, you can show via standard arguments (e.g., the Law of Large Numbers, uniform convergence of the log-likelihood) that: \\[ \\hat{\\theta}_{\\mathrm{MLE}} \\;\\to^p\\; \\theta_0 \\quad (\\text{consistency}). \\] 5.3.3.1.2 Asymptotic Normality of MLE Definition: An estimator \\(\\hat{\\theta}_n\\) is asymptotically normal if \\[ \\sqrt{n}\\,(\\hat{\\theta}_n - \\theta_0) \\;\\to^d\\; \\mathcal{N}\\bigl(0,\\Sigma\\bigr), \\] where \\(\\to^d\\) denotes convergence in distribution and \\(\\Sigma\\) is some covariance matrix. For the MLE, \\(\\Sigma\\) is typically \\(I(\\theta_0)^{-1}\\), where \\(I(\\theta_0)\\) is the Fisher information evaluated at the true parameter. Beyond \\(R1\\)–\\(R4\\), we need the following additional assumptions: R5 The true parameter \\(\\theta_0\\) is in the interior of the parameter space \\(\\Theta\\). If \\(\\theta_0\\) sits on the boundary, different arguments are required to handle edge effects. R6 The pdf \\(f_{Y\\mid X}(y_i, x_i; \\theta)\\) is twice continuously differentiable (in \\(\\theta\\)) and strictly positive in a neighborhood \\(N\\) of \\(\\theta_0\\). This allows us to use second-order Taylor expansions around \\(\\theta_0\\) to get the approximate distribution of \\(\\hat{\\theta}_{\\mathrm{MLE}}\\). R7 The following integrals are finite in some neighborhood \\(N\\) of \\(\\theta_0\\): \\(\\displaystyle \\int \\sup_{\\theta \\in N} \\Bigl\\|\\partial f_{Y\\mid X}(y_i, x_i; \\theta)/\\partial \\theta \\Bigr\\|\\; d(y,x) &lt; \\infty\\). \\(\\displaystyle \\int \\sup_{\\theta \\in N} \\Bigl\\|\\partial^2 f_{Y\\mid X}(y_i, x_i; \\theta)/\\partial \\theta \\partial \\theta&#39; \\Bigr\\|\\; d(y,x) &lt; \\infty\\). \\(\\displaystyle \\mathbb{E}\\Bigl(\\sup_{\\theta \\in N} \\Bigl\\|\\partial^2 \\ln(f_{Y\\mid X}(y_i, x_i; \\theta))/\\partial \\theta \\partial \\theta&#39; \\Bigr\\|\\Bigr) &lt; \\infty\\). These conditions ensure that differentiating inside integrals is justified (via the dominated convergence theorem) and that we can expand the log-likelihood in a Taylor series safely. R8 The information matrix \\(I(\\theta_0)\\) exists and is nonsingular: \\[ I(\\theta_0) \\;=\\; \\mathrm{Var}\\Bigl(\\frac{\\partial}{\\partial \\theta} \\ln\\bigl(f_{Y\\mid X}(y_i, x_i; \\theta_0)\\bigr)\\Bigr) \\;\\neq\\; 0. \\] Nonsingularity implies there is enough information in the data to estimate \\(\\theta\\) uniquely. Under \\(R1\\)–\\(R8\\), you can show that \\[ \\sqrt{n}\\,(\\hat{\\theta}_{\\mathrm{MLE}} - \\theta_0) \\;\\to^d\\; \\mathcal{N}\\Bigl(0,\\,I(\\theta_0)^{-1}\\Bigr). \\] This result is central to frequentist inference, allowing you to construct approximate confidence intervals and hypothesis tests using the normal approximation for large \\(n\\). 5.3.4 Properties of MLE Having established in earlier sections that Maximum Likelihood Estimators (MLEs) are consistent (Consistency of MLE) and asymptotically normal (Asymptotic Normality of MLE) under standard regularity conditions, we now highlight additional properties that make MLE a powerful estimation technique. Asymptotic Efficiency Definition: An estimator is asymptotically efficient if it attains the smallest possible asymptotic variance among all consistent estimators (i.e., it achieves the Cramér-Rao Lower Bound). Interpretation: In large samples, MLE typically has smaller standard errors than other consistent estimators that do not fully use the assumed distributional form. Implication: When the true model is correctly specified, MLE is the most efficient among a broad class of estimators, leading to more precise inference for \\(\\theta\\). Cramér-Rao Lower Bound (CRLB): A theoretical lower limit on the variance of any unbiased (or asymptotically unbiased) estimator C. R. Rao (1992). When MLE Meets CRLB: Under correct specification and standard regularity conditions, the asymptotic variance of the MLE matches the CRLB, making it asymptotically efficient. Interpretation: Achieving CRLB means no other unbiased estimator can consistently outperform MLE in terms of variance for large \\(n\\). Invariance Core Idea: If \\(\\hat{\\theta}\\) is the MLE for \\(\\theta\\), then for any smooth transformation \\(g(\\theta)\\), the MLE for \\(g(\\theta)\\) is simply \\(g(\\hat{\\theta})\\). Example: If \\(\\theta\\) is a mean parameter and you want the MLE for the variance \\(\\theta^2\\), you can just square the MLE for \\(\\theta\\). Key Point: This invariance property saves considerable effort—there is no need to re-derive a new likelihood for the transformed parameter. Explicit vs. Implicit MLE Explicit MLE: Occurs when the score equation can be solved in closed form. A classic example is the MLE for the mean and variance in a normal distribution. Implicit MLE: Happens when no closed-form solution exists. Iterative numerical methods, such as Newton-Raphson, Expectation-Maximization (EM), or other optimization algorithms, are used to find \\(\\hat{\\theta}\\). Distributional Mis-Specification Definition: If you assume a distribution for \\(f_{Y|X}(\\cdot;\\theta)\\) that does not reflect the true data-generating process, the MLE may become inconsistent or biased in finite samples. Quasi-MLE: A strategy to handle certain forms of mis-specification. If the chosen distribution belongs to a flexible class or meets certain conditions (e.g., generalized linear models with a robust link), the resulting parameter estimates can remain consistent for some parameters of interest. Nonparametric &amp; Semiparametric Approaches: Require minimal or no distributional assumptions. More robust to mis-specification but can be harder to implement and may exhibit higher variance or require larger sample sizes to achieve comparable precision. 5.3.5 Practical Considerations Use Cases MLE is extremely popular for: Binary Outcomes (logistic regression) Count Data (Poisson regression) Strictly Positive Outcomes (Gamma regression) Heteroskedastic Settings (models with variance related to mean, e.g., GLMs) Distributional Assumptions The efficiency gains of MLE stem from using a specific probability model. If the assumed model closely reflects the data-generating process, MLE gives accurate parameter estimates and reliable standard errors. MLE assumes knowledge of the conditional distribution of the outcome variable. This assumption parallels the normality assumption in linear regression models (e.g., A6 Normal Distribution). If severely mis-specified, consider robust or semi-/nonparametric methods. Comparison with OLS: See Comparison of MLE and OLS for more details. Ordinary Least Squares (OLS) is a special case of MLE when errors are normally distributed and homoscedastic. In more general settings (e.g., non-Gaussian or heteroskedastic data), MLE can outperform OLS in terms of smaller standard errors and better inference. Numerical Stability &amp; Computation For complex likelihoods, iterative methods can fail to converge or converge to local maxima. Proper initialization and diagnostics (e.g., checking multiple start points) are crucial. 5.3.6 Comparison of MLE and OLS While Maximum Likelihood Estimation (MLE) is a powerful estimation method, it does not solve all of the challenges associated with Ordinary Least Squares (OLS). Below is a detailed comparison highlighting similarities, differences, and limitations. Key Points of Comparison Inference Methods: MLE: Joint inference is typically conducted using log-likelihood calculations, such as likelihood ratio tests or information criteria (e.g., AIC, BIC). These methods replace the use of F-statistics commonly associated with OLS. OLS: Relies on the F-statistic for hypothesis testing and joint inference. Sensitivity to Functional Form: Both MLE and OLS are sensitive to the functional form of the model. Incorrect specification (e.g., linear vs. nonlinear relationships) can lead to biased or inefficient estimates in both cases. Perfect Collinearity and Multicollinearity: Both methods are affected by collinearity: Perfect collinearity (e.g., two identical predictors) makes parameter estimation impossible. Multicollinearity (highly correlated predictors) inflates standard errors, reducing the precision of estimates. Neither MLE nor OLS directly resolves these issues without additional measures, such as regularization or variable selection. Endogeneity: Problems like omitted variable bias or simultaneous equations affect both MLE and OLS: If relevant predictors are omitted, estimates from both methods are likely to be biased and inconsistent. Similarly, in systems of simultaneous equations, both methods yield biased results unless endogeneity is addressed through instrumental variables or other approaches. MLE, while efficient under correct model specification, does not inherently address endogeneity. Situations Where MLE and OLS Differ Aspect MLE OLS Estimator Efficiency Efficient for correctly specified distributions. Efficient under Gauss-Markov assumptions. Assumptions about Errors Requires specifying a distribution (e.g., normal, binomial). Requires only mean-zero errors and homoscedasticity. Use of Likelihood Based on maximizing the likelihood function for parameter estimation. Based on minimizing the sum of squared residuals. Model Flexibility More flexible (supports various distributions, non-linear models). Primarily linear models (extensions for non-linear exist). Interpretation Log-likelihood values guide model comparison (AIC/BIC). R-squared and adjusted R-squared measure fit. Practical Considerations When to Use MLE: Situations where the dependent variable is: Binary (e.g., logistic regression) Count data (e.g., Poisson regression) Skewed or bounded (e.g., survival models) When the model naturally arises from a probabilistic framework. When to Use OLS: Suitable for continuous dependent variables with approximately linear relationships between predictors and outcomes. Simpler to implement and interpret when the assumptions of linear regression are reasonably met. 5.3.7 Applications of MLE MLE is widely used across various applications to estimate parameters in models tailored for specific data structures. Below are key applications of MLE, categorized by problem type and estimation method. Model Type Examples Key Characteristics Common Estimation Methods Additional Notes Corner Solution Models Hours worked Donations to charity Household consumption of a good Dependent variable is often censored at zero (or another threshold). Large fraction of observations at the corner (e.g., 0 hours, 0 donations). Tobit regression (latent variable approach with censoring) Useful when a continuous outcome has a mass point at zero but also positive values (e.g., 30% of individuals donate $0, the rest donate &gt; $0). Non-Negative Count Models Number of arrests Number of cigarettes smoked Doctor visits per year Dependent variable consists of non-negative integer counts. Possible overdispersion (variance &gt; mean). Poisson regression, Negative Binomial regression Poisson assumes mean = variance, so often Negative Binomial is preferred for real data. Zero-inflated models (ZIP/ZINB) may be used for data with excess zeros. Multinomial Choice Models Demand for different car brands Votes in a primary election Choice of travel mode Dependent variable is a categorical choice among 3+ alternatives. Each category is distinct, with no inherent ordering (e.g., brand A, B, or C). Multinomial logit, Multinomial probit Extension of binary choice (logit/probit) to multiple categories. Independence of Irrelevant Alternatives (IIA) can be a concern for the multinomial logit. Ordinal Choice Models Self-reported happiness (low/medium/high) Income level brackets Likert-scale surveys Dependent variable is ordered (e.g., low &lt; medium &lt; high). Distances between categories are not necessarily equal. Ordered logit, Ordered probit Probit/logit framework adapted to preserve ordinal information. Interprets latent continuous variable mapped to discrete ordered categories. 5.3.7.1 Binary Response Models A binary response variable (\\(y_i\\)) follows a Bernoulli distribution: \\[ f_Y(y_i; p) = p^{y_i}(1-p)^{(1-y_i)} \\] where \\(p\\) is the probability of success. For conditional models, the likelihood becomes: \\[ f_{Y|X}(y_i, x_i; p(.)) = p(x_i)^{y_i}(1 - p(x_i))^{(1-y_i)} \\] To model \\(p(x_i)\\), we use a function of \\(x_i\\) and unknown parameters \\(\\theta\\). A common approach involves a latent variable model: \\[ \\begin{aligned} y_i &amp;= 1\\{y_i^* &gt; 0 \\}, \\\\ y_i^* &amp;= x_i \\beta - \\epsilon_i, \\end{aligned} \\] where: \\(y_i^*\\) is an unobserved (latent) variable. \\(\\epsilon_i\\) is a random variable with mean 0, representing unobserved noise. Rewriting in terms of observed data: \\[ y_i = 1\\{x_i \\beta &gt; \\epsilon_i\\}. \\] The probability function becomes: \\[ \\begin{aligned} p(x_i) &amp;= P(y_i = 1 | x_i) \\\\ &amp;= P(x_i \\beta &gt; \\epsilon_i | x_i) \\\\ &amp;= F_{\\epsilon|X}(x_i \\beta | x_i), \\end{aligned} \\] where \\(F_{\\epsilon|X}(.)\\) is the cumulative distribution function (CDF) of \\(\\epsilon_i\\). Assuming independence of \\(\\epsilon_i\\) and \\(x_i\\), the probability function simplifies to: \\[ p(x_i) = F_\\epsilon(x_i \\beta). \\] The conditional expectation function is equivalent: \\[ E(y_i | x_i) = P(y_i = 1 | x_i) = F_\\epsilon(x_i \\beta). \\] Common Distributional Assumptions Probit Model: Assumes \\(\\epsilon_i\\) follows a standard normal distribution. \\(F_\\epsilon(.) = \\Phi(.)\\), where \\(\\Phi(.)\\) is the standard normal CDF. Logit Model: Assumes \\(\\epsilon_i\\) follows a standard logistic distribution. \\(F_\\epsilon(.) = \\Lambda(.)\\), where \\(\\Lambda(.)\\) is the logistic CDF. Steps to Derive MLE for Binary Models Specify the Log-Likelihood: For a chosen distribution (e.g., normal for Probit or logistic for Logit), the log-likelihood is: \\[ \\ln(f_{Y|X}(y_i, x_i; \\beta)) = y_i \\ln(F_\\epsilon(x_i \\beta)) + (1 - y_i) \\ln(1 - F_\\epsilon(x_i \\beta)). \\] Maximize the Log-Likelihood: Find the parameter estimates that maximize the log-likelihood: \\[ \\hat{\\beta}_{MLE} = \\underset{\\beta}{\\text{argmax}} \\sum_{i=1}^{n} \\ln(f_{Y|X}(y_i, x_i; \\beta)). \\] Properties of Probit and Logit Estimators Consistency and Asymptotic Normality: Probit and Logit estimators are consistent and asymptotically normal if: A2 Full Rank: \\(E(x_i&#39; x_i)\\) exists and is non-singular. A5 Data Generation (Random Sampling): \\(\\{y_i, x_i\\}\\) are iid (or stationary and weakly dependent). Distributional assumptions on \\(\\epsilon_i\\) hold (e.g., normal or logistic, independent of \\(x_i\\)). Asymptotic Efficiency: Under these assumptions, Probit and Logit estimators are asymptotically efficient with variance: \\[ I(\\beta_0)^{-1} = \\left[E\\left(\\frac{(f_\\epsilon(x_i \\beta_0))^2}{F_\\epsilon(x_i \\beta_0)(1 - F_\\epsilon(x_i \\beta_0))} x_i&#39; x_i \\right)\\right]^{-1}, \\] where \\(f_\\epsilon(x_i \\beta_0)\\) is the PDF (derivative of the CDF). Interpretation of Binary Response Models Binary response models, such as Probit and Logit, estimate the probability of an event occurring (\\(y_i = 1\\)) given predictor variables \\(x_i\\). However, interpreting the estimated coefficients (\\(\\beta\\)) in these models differs significantly from linear models. Below, we explore how to interpret these coefficients and the concept of partial effects. Interpreting \\(\\beta\\) in Binary Response Models In binary response models, the coefficient \\(\\beta_j\\) represents the average change in the latent variable \\(y_i^*\\) (an unobserved variable) for a one-unit change in \\(x_{ij}\\). While this provides insight into the direction of the relationship: Magnitudes of \\(\\beta_j\\) do not have a direct, meaningful interpretation in terms of \\(y_i\\). Direction of \\(\\beta_j\\) is meaningful: \\(\\beta_j &gt; 0\\): A positive association between \\(x_{ij}\\) and the probability of \\(y_i = 1\\). \\(\\beta_j &lt; 0\\): A negative association between \\(x_{ij}\\) and the probability of \\(y_i = 1\\). Partial Effects in Nonlinear Binary Models To interpret the effect of a change in a predictor \\(x_{ij}\\) on the probability of an event occurring (\\(P(y_i = 1|x_i)\\)), we use the partial effect: \\[ E(y_i | x_i) = F_\\epsilon(x_i \\beta), \\] where \\(F_\\epsilon(.)\\) is the cumulative distribution function (CDF) of the error term \\(\\epsilon_i\\) (e.g., standard normal for Probit, logistic for Logit). The partial effect is the derivative of the expected probability with respect to \\(x_{ij}\\): \\[ PE(x_{ij}) = \\frac{\\partial E(y_i | x_i)}{\\partial x_{ij}} = f_\\epsilon(x_i \\beta) \\beta_j, \\] where: \\(f_\\epsilon(.)\\) is the probability density function (PDF) of the error term \\(\\epsilon_i\\). \\(\\beta_j\\) is the coefficient associated with \\(x_{ij}\\). Key Characteristics of Partial Effects Scaling Factor: The partial effect depends on a scaling factor, \\(f_\\epsilon(x_i \\beta)\\), which is derived from the density function \\(f_\\epsilon(.)\\). The scaling factor varies depending on the values of \\(x_i\\), making the partial effect nonlinear and context-dependent. Non-Constant Partial Effects: Unlike linear models where coefficients directly represent constant marginal effects, the partial effect in binary models changes based on \\(x_i\\). For example, in a Logit model, the partial effect is largest when \\(P(y_i = 1 | x_i)\\) is around 0.5 (the midpoint of the S-shaped logistic curve) and smaller at the extremes (close to 0 or 1). Single Values for Partial Effects In practice, researchers often summarize partial effects using either: Partial Effect at the Average (PEA): The partial effect is calculated for an “average individual,” where \\(x_i = \\bar{x}\\) (the sample mean of predictors): \\[ PEA = f_\\epsilon(\\bar{x}\\hat{\\beta}) \\hat{\\beta}_j. \\] This provides a single, interpretable value but assumes the average effect applies to all individuals. Average Partial Effect (APE): The average of all individual-level partial effects across the sample: \\[ APE = \\frac{1}{n} \\sum_{i=1}^{n} f_\\epsilon(x_i \\hat{\\beta}) \\hat{\\beta}_j. \\] This accounts for the nonlinearity of the partial effects and provides a more accurate summary of the marginal effect in the population. Comparing Partial Effects in Linear and Nonlinear Models Linear Models: Partial effects are constant: \\(APE = PEA\\). The coefficients directly represent the marginal effects on \\(E(y_i | x_i)\\). Nonlinear Models: Partial effects are not constant due to the dependence on \\(f_\\epsilon(x_i \\beta)\\). As a result, \\(APE \\neq PEA\\) in general. References "],["penalized-regularized-estimators.html", "5.4 Penalized (Regularized) Estimators", " 5.4 Penalized (Regularized) Estimators Penalized or regularized estimators are extensions of Ordinary Least Squares (OLS) designed to address its limitations, particularly in high-dimensional settings. Regularization methods introduce a penalty term to the loss function to prevent overfitting, handle multicollinearity, and improve model interpretability. There are three popular regularization techniques (but not limited to): Ridge Regression Lasso Regression Elastic Net 5.4.1 Motivation for Penalized Estimators OLS minimizes the Residual Sum of Squares (RSS): \\[ RSS = \\sum_{i=1}^n \\left( y_i - \\hat{y}_i \\right)^2 = \\sum_{i=1}^n \\left( y_i - x_i&#39;\\beta \\right)^2, \\] where: \\(y_i\\) is the observed outcome, \\(x_i\\) is the vector of predictors for observation \\(i\\), \\(\\beta\\) is the vector of coefficients. While OLS works well under ideal conditions (e.g., low dimensionality, no multicollinearity), it struggles when: Multicollinearity: Predictors are highly correlated, leading to large variances in \\(\\beta\\) estimates. High Dimensionality: The number of predictors (\\(p\\)) exceeds or approaches the sample size (\\(n\\)), making OLS inapplicable or unstable. Overfitting: When \\(p\\) is large, OLS fits noise in the data, reducing generalizability. To address these issues, penalized regression modifies the OLS loss function by adding a penalty term that shrinks the coefficients toward zero. This discourages overfitting and improves predictive performance. The general form of the penalized loss function is: \\[ L(\\beta) = \\sum_{i=1}^n \\left( y_i - x_i&#39;\\beta \\right)^2 + \\lambda P(\\beta), \\] where: \\(\\lambda \\geq 0\\): Tuning parameter controlling the strength of regularization. \\(P(\\beta)\\): Penalty term that quantifies model complexity. Different choices of \\(P(\\beta)\\) lead to ridge regression, lasso regression, or elastic net. 5.4.2 Ridge Regression Ridge regression, also known as L2 regularization, penalizes the sum of squared coefficients: \\[ P(\\beta) = \\sum_{j=1}^p \\beta_j^2. \\] The ridge objective function becomes: \\[ L_{ridge}(\\beta) = \\sum_{i=1}^n \\left( y_i - x_i&#39;\\beta \\right)^2 + \\lambda \\sum_{j=1}^p \\beta_j^2, \\] where: \\(\\lambda \\geq 0\\) controls the degree of shrinkage. Larger \\(\\lambda\\) leads to greater shrinkage. Ridge regression has a closed-form solution: \\[ \\hat{\\beta}_{ridge} = \\left( X&#39;X + \\lambda I \\right)^{-1} X&#39;y, \\] where \\(I\\) is the \\(p \\times p\\) identity matrix. Key Features Shrinks coefficients but does not set them exactly to zero. Handles multicollinearity effectively by stabilizing the coefficient estimates (Hoerl and Kennard 1970). Works well when all predictors contribute to the response. Example Use Case Ridge regression is ideal for applications with many correlated predictors, such as: Predicting housing prices based on a large set of features (e.g., size, location, age of the house). 5.4.3 Lasso Regression Lasso regression, or L1 regularization, penalizes the sum of absolute coefficients: \\[ P(\\beta) = \\sum_{j=1}^p |\\beta_j|. \\] The lasso objective function is: \\[ L_{lasso}(\\beta) = \\sum_{i=1}^n \\left( y_i - x_i&#39;\\beta \\right)^2 + \\lambda \\sum_{j=1}^p |\\beta_j|. \\] Key Features Unlike ridge regression, lasso can set coefficients to exactly zero, performing automatic feature selection. Encourages sparse models, making it suitable for high-dimensional data (Tibshirani 1996). Optimization Lasso does not have a closed-form solution due to the non-differentiability of \\(|\\beta_j|\\) at \\(\\beta_j = 0\\). It requires iterative algorithms, such as: Coordinate Descent, Least Angle Regression (LARS). Example Use Case Lasso regression is useful when many predictors are irrelevant, such as: Genomics, where only a subset of genes are associated with a disease outcome. 5.4.4 Elastic Net Elastic Net combines the penalties of ridge and lasso regression: \\[ P(\\beta) = \\alpha \\sum_{j=1}^p |\\beta_j| + \\frac{1 - \\alpha}{2} \\sum_{j=1}^p \\beta_j^2, \\] where: \\(0 \\leq \\alpha \\leq 1\\) determines the balance between lasso (L1) and ridge (L2) penalties. \\(\\lambda\\) controls the overall strength of regularization. The elastic net objective function is: \\[ L_{elastic\\ net}(\\beta) = \\sum_{i=1}^n \\left( y_i - x_i&#39;\\beta \\right)^2 + \\lambda \\left( \\alpha \\sum_{j=1}^p |\\beta_j| + \\frac{1 - \\alpha}{2} \\sum_{j=1}^p \\beta_j^2 \\right). \\] Key Features Combines the strengths of lasso (sparse models) and ridge (stability with correlated predictors) (H. Zou and Hastie 2005). Effective when predictors are highly correlated or when \\(p &gt; n\\). Example Use Case Elastic net is ideal for high-dimensional datasets with correlated predictors, such as: Predicting customer churn using demographic and behavioral features. 5.4.5 Tuning Parameter Selection Choosing the regularization parameter \\(\\lambda\\) (and \\(\\alpha\\) for elastic net) is critical for balancing model complexity (fit) and regularization (parsimony). If \\(\\lambda\\) is too large, coefficients are overly shrunk (or even set to zero in the case of L1 penalty), leading to underfitting. If \\(\\lambda\\) is too small, the model might overfit because coefficients are not penalized sufficiently. Hence, a systematic approach is needed to determine the optimal \\(\\lambda\\). For elastic net, we also choose an appropriate \\(\\alpha\\) to balance the L1 and L2 penalties. 5.4.5.1 Cross-Validation A common approach to selecting \\(\\lambda\\) (and \\(\\alpha\\)) is \\(K\\)-Fold Cross-Validation: Partition the data into \\(K\\) roughly equal-sized “folds.” Train the model on \\(K-1\\) folds and validate on the remaining fold, computing a validation error. Repeat this process for all folds, and compute the average validation error across the \\(K\\) folds. Select the value of \\(\\lambda\\) (and \\(\\alpha\\) if tuning it) that minimizes the cross-validated error. This method helps us maintain a good bias-variance trade-off because every point is used for both training and validation exactly once. 5.4.5.2 Information Criteria Alternatively, one can use information criteria—like the Akaike Information Criterion (AIC) or the Bayesian Information Criterion (BIC)—to guide model selection. These criteria reward goodness-of-fit while penalizing model complexity, thereby helping in selecting an appropriately regularized model. 5.4.6 Properties of Penalized Estimators Bias-Variance Tradeoff: Regularization introduces some bias in exchange for reducing variance, often resulting in better predictive performance on new data. Shrinkage: Ridge shrinks coefficients toward zero but usually retains all predictors. Lasso shrinks some coefficients exactly to zero, performing inherent feature selection. Flexibility: Elastic net allows for a continuum between ridge and lasso, so it can adapt to different data structures (e.g., many correlated features or very high-dimensional feature spaces). # Load required libraries library(glmnet) # Simulate data set.seed(123) n &lt;- 100 # Number of observations p &lt;- 20 # Number of predictors X &lt;- matrix(rnorm(n * p), nrow = n, ncol = p) # Predictor matrix y &lt;- rnorm(n) # Response vector # Ridge regression (alpha = 0) ridge_fit &lt;- glmnet(X, y, alpha = 0) plot(ridge_fit, xvar = &quot;lambda&quot;, label = TRUE) title(&quot;Coefficient Paths for Ridge Regression&quot;) In this plot, each curve represents a coefficient’s value as a function of \\(\\lambda\\). As \\(\\lambda\\) increases (moving from left to right on a log-scale by default), coefficients shrink toward zero but typically stay non-zero. Ridge regression tends to shrink coefficients but does not force them to be exactly zero. # Lasso regression (alpha = 1) lasso_fit &lt;- glmnet(X, y, alpha = 1) plot(lasso_fit, xvar = &quot;lambda&quot;, label = TRUE) title(&quot;Coefficient Paths for Lasso Regression&quot;) Here, as \\(\\lambda\\) grows, several coefficient paths hit zero exactly, illustrating the variable selection property of lasso. # Elastic net (alpha = 0.5) elastic_net_fit &lt;- glmnet(X, y, alpha = 0.5) plot(elastic_net_fit, xvar = &quot;lambda&quot;, label = TRUE) title(&quot;Coefficient Paths for Elastic Net (alpha = 0.5)&quot;) Elastic net combines ridge and lasso penalties. At \\(\\lambda = 0.5\\), we see partial shrinkage and some coefficients going to zero. This model is often helpful when you suspect both group-wise shrinkage (like ridge) and sparse solutions (like lasso) might be beneficial. We can further refine our choice of \\(\\lambda\\) by performing cross-validation on the lasso model: cv_lasso &lt;- cv.glmnet(X, y, alpha = 1) plot(cv_lasso) best_lambda &lt;- cv_lasso$lambda.min best_lambda #&gt; [1] 0.1449586 The plot displays the cross-validated error (often mean-squared error or deviance) on the y-axis versus \\(\\log(\\lambda)\\) on the x-axis. Two vertical dotted lines typically appear: \\(\\lambda.min\\): The \\(\\lambda\\) that achieves the minimum cross-validated error. \\(\\lambda.1se\\): The largest \\(\\lambda\\) such that the cross-validated error is still within one standard error of the minimum. This is a more conservative choice that favors higher regularization (simpler models). best_lambda above prints the numeric value of \\(\\lambda.min\\). This is the \\(\\lambda\\) that gave the lowest cross-validation error for the lasso model. Interpretation: By using cv.glmnet, we systematically compare different values of \\(\\lambda\\) in terms of their predictive performance (cross-validation error). The selected \\(\\lambda\\) typically balances having a smaller model (due to regularization) with retaining sufficient predictive power. If we used real-world data, we might also look at performance metrics on a hold-out test set to ensure that the chosen \\(\\lambda\\) generalizes well. References "],["robust-estimators.html", "5.5 Robust Estimators", " 5.5 Robust Estimators Robust estimators are statistical techniques designed to provide reliable parameter estimates even when the assumptions underlying classical methods, such as Ordinary Least Squares (OLS), are violated. Specifically, they address issues caused by outliers, non-normal errors, or heavy-tailed distributions, which can render OLS inefficient or biased. The goal of robust estimation is to reduce the sensitivity of the estimator to extreme or aberrant data points, thereby ensuring a more reliable and accurate fit to the majority of the data. We will cover the key robust estimation techniques, their properties, and applications, along with practical examples and mathematical derivations. The focus will include \\(M\\)-estimators, \\(R\\)-estimators, \\(L\\)-estimators, \\(LTS\\), \\(S\\)-estimators, \\(MM\\)-estimators, and more. 5.5.1 Motivation for Robust Estimation OLS seeks to minimize the Residual Sum of Squares (RSS): \\[ RSS = \\sum_{i=1}^n (y_i - x_i&#39;\\beta)^2, \\] where: \\(y_i\\) is the observed response for the \\(i\\)th observation, \\(x_i\\) is the vector of predictors for the \\(i\\)th observation, \\(\\beta\\) is the vector of coefficients. OLS assumes: Errors are normally distributed and no outliers in the data (A6 Normal Distribution). Homoscedasticity (constant variance of errors) (A4 Homoskedasticity). In real-world scenarios: Outliers in \\(y\\) or \\(x\\) can disproportionately affect the estimates, leading to biased or inefficient results. Heavy-tailed distributions (e.g., Cauchy) violate the normality assumption, making OLS inappropriate. For example, P. J. Huber (1964) demonstrates that a single extreme observation can arbitrarily distort OLS estimates, while Hampel et al. (2005) define the breakdown point as a measure of robustness. Robust estimators aim to mitigate these problems by limiting the influence of problematic observations. OLS inherently squares the residuals \\(e_i = y_i - x_i&#39;\\beta\\), amplifying the influence of large residuals. For example, if a single residual is much larger than the others, its squared value can dominate the RSS, distorting the estimated coefficients. Consider a simple case where \\(y_i = \\beta_0 + \\beta_1 x_i + e_i\\), with \\(e_i \\sim N(0, \\sigma^2)\\) under the classical assumptions. Now introduce an outlier: a single observation with an unusually large \\(e_i\\). The squared residual for this point will dominate the RSS and pull the estimated regression line towards it, leading to biased estimates of \\(\\beta_0\\) and \\(\\beta_1\\). The breakdown point of an estimator is the proportion of contamination (e.g., outliers) that the estimator can tolerate before yielding arbitrarily large or incorrect results. For OLS, the breakdown point is \\(1/n\\), meaning even one outlier can cause substantial distortion in the estimates. 5.5.2 \\(M\\)-Estimators To address the sensitivity of OLS, robust estimators minimize a different objective function: \\[ \\sum_{i=1}^n \\rho\\left(\\frac{y_i - x_i&#39;\\beta}{\\sigma}\\right), \\] where: \\(\\rho(\\cdot)\\) is a robust loss function that grows slower than the quadratic function used in OLS, \\(\\sigma\\) is a scale parameter to normalize residuals. In OLS, the quadratic loss function \\(\\rho(z) = z^2\\) penalizes large residuals disproportionately. Robust estimators replace this with alternative \\(\\rho\\) functions that limit the penalty for large residuals, thus reducing their influence on the parameter estimates. A robust \\(\\rho\\) function should satisfy the following properties: Bounded Influence: Large residuals contribute a finite amount to the objective function. Symmetry: \\(\\rho(z) = \\rho(-z)\\) ensures that positive and negative residuals are treated equally. Differentiability: For computational tractability, \\(\\rho\\) should be smooth and differentiable. 5.5.2.1 Examples of Robust \\(\\rho\\) Functions Huber’s Loss Function (P. J. Huber 1964) Huber’s loss function transitions between quadratic and linear growth: \\[ \\rho(z) = \\begin{cases} \\frac{z^2}{2} &amp; \\text{if } |z| \\leq c, \\\\ c|z| - \\frac{c^2}{2} &amp; \\text{if } |z| &gt; c. \\end{cases} \\] Key features: For small residuals (\\(|z| \\leq c\\)), the loss is quadratic, mimicking OLS. For large residuals (\\(|z| &gt; c\\)), the loss grows linearly, limiting their influence. The parameter \\(c\\) controls the threshold at which the loss function transitions from quadratic to linear. Smaller values of \\(c\\) make the estimator more robust but potentially less efficient under normality. Tukey’s Bisquare Function (Beaton and Tukey 1974) Tukey’s bisquare function completely bounds the influence of large residuals: \\[ \\rho(z) = \\begin{cases} c^2 \\left(1 - \\left(1 - \\left(\\frac{z}{c}\\right)^2\\right)^3\\right)/6 &amp; \\text{if } |z| \\leq c, \\\\ c^2/6 &amp; \\text{if } |z| &gt; c. \\end{cases} \\] Key features: Residuals larger than \\(c\\) contribute a constant value to the objective function, effectively excluding them from the estimation process. This approach achieves high robustness at the cost of lower efficiency for small residuals. Andrews’ Sine Function (D. F. Andrews 1974): Smoothly downweights extreme residuals: \\[ \\rho(z) = \\begin{cases} c^2 \\left(1 - \\cos\\left(\\frac{z}{c}\\right)\\right)/2 &amp; \\text{if } |z| \\leq \\pi c, \\\\ c^2/2 &amp; \\text{if } |z| &gt; \\pi c. \\end{cases} \\] 5.5.2.2 Weighting Scheme: Influence Functions A critical concept in robust estimation is the influence function, which describes the sensitivity of the estimator to individual observations. For \\(M\\)-estimators, the influence function is derived as the derivative of the loss function \\(\\rho(z)\\) with respect to \\(z\\): \\[ \\psi(z) = \\frac{d}{dz} \\rho(z). \\] This function plays a crucial role in downweighting large residuals. The weight assigned to each residual is proportional to \\(\\psi(z)/z\\), which decreases as \\(|z|\\) increases for robust estimators. For Huber’s loss function, the influence function is: \\[ \\psi(z) = \\begin{cases} z &amp; \\text{if } |z| \\leq c, \\\\ c \\cdot \\text{sign}(z) &amp; \\text{if } |z| &gt; c. \\end{cases} \\] For small residuals, \\(\\psi(z) = z\\), matching OLS. For large residuals, \\(\\psi(z)\\) is constant, ensuring bounded influence. A key consideration when selecting a robust estimator is the trade-off between robustness (resistance to outliers) and efficiency (performance under ideal conditions). The tuning parameters in \\(\\rho\\) functions (e.g., \\(c\\) in Huber’s loss) directly affect this balance: Smaller \\(c\\) increases robustness but reduces efficiency under normality. Larger \\(c\\) improves efficiency under normality but decreases robustness to outliers. This trade-off reflects the fundamental goal of robust estimation: to achieve a balance between reliability and precision across a wide range of data scenarios. 5.5.2.3 Properties of \\(M\\)-Estimators Robust estimators, particularly \\(M\\)-estimators, possess the following mathematical properties: Asymptotic Normality: Under mild regularity conditions, \\(M\\)-estimators are asymptotically normal: \\[ \\sqrt{n} (\\hat{\\beta} - \\beta) \\xrightarrow{d} N(0, \\Sigma), \\] where \\(\\Sigma\\) depends on the choice of \\(\\rho\\) and the distribution of residuals. Consistency: As \\(n \\to \\infty\\), \\(\\hat{\\beta} \\to \\beta\\) in probability, provided the majority of the data satisfies the model assumptions. Breakdown Point: \\(M\\)-estimators typically have a moderate breakdown point, sufficient to handle a reasonable proportion of contamination. 5.5.3 \\(R\\)-Estimators \\(R\\)-estimators are a class of robust estimators that rely on the ranks of residuals rather than their raw magnitudes. This approach makes them naturally resistant to the influence of outliers and highly effective in scenarios involving ordinal data or heavy-tailed error distributions. By leveraging rank-based methods, \\(R\\)-estimators are particularly useful in situations where classical assumptions about the data, such as normality or homoscedasticity, do not hold. The general form of an \\(R\\)-estimator can be expressed as: \\[ \\hat{\\beta}_R = \\arg\\min_\\beta \\sum_{i=1}^n w_i R_i \\left(y_i - x_i&#39;\\beta\\right), \\] where: \\(R_i\\) are the ranks of residuals \\(e_i = y_i - x_i&#39;\\beta\\), \\(w_i\\) are rank-based weights determined by a chosen scoring function, \\(y_i\\) are observed responses, \\(x_i\\) are predictor values, and \\(\\beta\\) is the vector of coefficients. This formulation differs from \\(M\\)-estimators, which directly minimize a loss function \\(\\rho\\), by instead using the ordering of residuals to drive the estimation. 5.5.3.1 Ranks and Scoring Function 5.5.3.1.1 Definition of Ranks The rank \\(R_i\\) of a residual \\(e_i\\) is its position in the sorted sequence of all residuals: \\[ R_i = \\text{rank}(e_i) = \\sum_{j=1}^n \\mathbb{I}(e_j \\leq e_i), \\] where \\(\\mathbb{I}(\\cdot)\\) is the indicator function, equal to 1 if the condition is true and 0 otherwise. This step transforms the residuals into an ordinal scale, eliminating their dependency on magnitude. 5.5.3.1.2 Scoring Function The weights \\(w_i\\) are derived from a scoring function \\(S(R_i)\\), which assigns importance to each rank. A common choice is the Wilcoxon scoring function, defined as: \\[ S(R_i) = \\frac{R_i}{n + 1}, \\] which gives equal weight to all ranks, scaled by their position relative to the total number of observations \\(n\\). Other scoring functions can emphasize different parts of the rank distribution: Normal Scores: Derived from the quantiles of a standard normal distribution. Logarithmic Scores: Weight lower ranks more heavily. The flexibility of the scoring function allows \\(R\\)-estimators to adapt to various data structures and assumptions. 5.5.3.2 Properties of \\(R\\)-Estimators 5.5.3.2.1 Influence Function and Robustness A key feature of \\(R\\)-estimators is their bounded influence function, which ensures robustness. Because the estimator depends only on the ranks of the residuals, extreme values in \\(y\\) or \\(x\\) do not disproportionately affect the results. For \\(R\\)-estimators, the influence function \\(\\psi(e_i)\\) is proportional to the derivative of the rank-based objective function: \\[ \\psi(e_i) = S&#39;(R_i), \\] where \\(S&#39;(R_i)\\) is the derivative of the scoring function. Since \\(R_i\\) depends only on the ordering of residuals, outliers in the data cannot produce excessive changes in \\(R_i\\), resulting in bounded influence. 5.5.3.2.2 Breakdown Point The breakdown point of \\(R\\)-estimators is higher than that of OLS and comparable to other robust methods. This means they can tolerate a larger proportion of contaminated data without yielding unreliable results. 5.5.3.2.3 Asymptotic Efficiency Under specific scoring functions, \\(R\\)-estimators achieve high asymptotic efficiency. For example, the Wilcoxon \\(R\\)-estimator performs nearly as well as OLS under normality while retaining robustness to non-normality. 5.5.3.3 Derivation of \\(R\\)-Estimators for Simple Linear Regression Consider the simple linear regression model: \\[ y_i = \\beta_0 + \\beta_1 x_i + e_i, \\] where \\(e_i = y_i - (\\beta_0 + \\beta_1 x_i)\\) are the residuals. Rank the Residuals: Compute the residuals \\(e_i\\) for all observations and rank them from smallest to largest. Assign Weights: Compute weights \\(w_i\\) for each residual rank based on the scoring function \\(S(R_i)\\). Minimize the Rank-Based Objective: Solve the following optimization problem: \\[ \\hat{\\beta}_R = \\arg\\min_{\\beta_0, \\beta_1} \\sum_{i=1}^n w_i R_i \\left( y_i - (\\beta_0 + \\beta_1 x_i) \\right). \\] This minimization can be performed iteratively using numerical methods, as the rank-based nature of the function makes direct analytic solutions challenging. 5.5.3.4 Comparison to \\(M\\)-Estimators While \\(M\\)-estimators downweight large residuals using robust loss functions, \\(R\\)-estimators completely avoid reliance on the magnitude of residuals by using their ranks. This distinction has important implications: \\(R\\)-estimators are naturally robust to leverage points and extreme outliers. The performance of \\(R\\)-estimators is less sensitive to the choice of scale parameter compared to \\(M\\)-estimators. However, \\(R\\)-estimators may be less efficient than \\(M\\)-estimators under normality because they do not use the full information contained in the residual magnitudes. 5.5.4 \\(L\\)-Estimators \\(L\\)-estimators are a class of robust estimators constructed as linear combinations of order statistics, where order statistics are simply the sorted values of a dataset. These estimators are particularly appealing due to their intuitive nature and computational simplicity. By using the relative ranks of observations, \\(L\\)-estimators offer robustness against outliers and heavy-tailed distributions. Order statistics are denoted as \\(y_{(1)}, y_{(2)}, \\dots, y_{(n)}\\), where \\(y_{(i)}\\) is the \\(i\\)th smallest observation in the sample. The general form of an \\(L\\)-estimator is: \\[ \\hat{\\theta}_L = \\sum_{i=1}^n c_i y_{(i)}, \\] where: \\(y_{(i)}\\) are the order statistics (sorted observations), \\(c_i\\) are coefficients (weights) that determine the contribution of each order statistic to the estimator. By appropriately choosing the weights \\(c_i\\), different types of \\(L\\)-estimators can be constructed to suit specific needs, such as handling outliers or capturing central tendencies robustly. Examples of \\(L\\)-Estimators Sample Median: The sample median is a simple \\(L\\)-estimator where only the middle order statistic contributes (for odd \\(n\\)) or the average of the two middle order statistics contributes (for even \\(n\\)): \\[ \\hat{\\mu}_{\\text{median}} = \\begin{cases} y_{\\left(\\frac{n+1}{2}\\right)} &amp; \\text{if } n \\text{ is odd}, \\\\ \\frac{1}{2}\\left(y_{\\left(\\frac{n}{2}\\right)} + y_{\\left(\\frac{n}{2} + 1\\right)}\\right) &amp; \\text{if } n \\text{ is even}. \\end{cases} \\] Robustness: The median has a breakdown point of \\(50\\%\\), meaning it remains unaffected unless more than half the data are corrupted. Efficiency: Under normality, the efficiency of the median is lower than that of the mean (about \\(64\\%\\)). Trimmed Mean: The trimmed mean excludes the smallest and largest \\(k\\%\\) of observations before averaging the remaining values: \\[ \\hat{\\mu}_T = \\frac{1}{n - 2k} \\sum_{i=k+1}^{n-k} y_{(i)}, \\] where: \\(k\\) is the number of observations trimmed from each tail, \\(n\\) is the sample size. Robustness: The trimmed mean is less sensitive to extreme values than the sample mean. Efficiency: By retaining most observations, the trimmed mean achieves a good balance between robustness and efficiency. Winsorized Mean: Similar to the trimmed mean, but instead of excluding extreme values, it replaces them with the nearest remaining observations: \\[ \\hat{\\mu}_W = \\frac{1}{n} \\sum_{i=1}^n y_{(i)}^*, \\] where \\(y_{(i)}^*\\) are “Winsorized” values: \\[ y_{(i)}^* = \\begin{cases} y_{(k+1)} &amp; \\text{if } i \\leq k, \\\\ y_{(i)} &amp; \\text{if } k+1 \\leq i \\leq n-k, \\\\ y_{(n-k)} &amp; \\text{if } i &gt; n-k. \\end{cases} \\] Robustness: The Winsorized mean reduces the influence of outliers without discarding data. Efficiency: Slightly less efficient than the trimmed mean under normality. Midrange: The midrange is the average of the smallest and largest observations: \\[ \\hat{\\mu}_{\\text{midrange}} = \\frac{y_{(1)} + y_{(n)}}{2}. \\] Robustness: Poor robustness, as it depends entirely on the extreme observations. Simplicity: Highly intuitive and computationally trivial. 5.5.4.1 Properties of \\(L\\)-Estimators Robustness to Outliers: \\(L\\)-estimators gain robustness by downweighting or excluding extreme observations. For instance: The trimmed mean completely removes outliers from the estimation process. The Winsorized mean limits the influence of outliers by bounding their values. Breakdown Point: The breakdown point of an \\(L\\)-estimator depends on how many extreme observations are excluded or replaced. The median has the highest possible breakdown point (\\(50\\%\\)), while the trimmed and Winsorized means have breakdown points proportional to the trimming percentage. Efficiency: The efficiency of \\(L\\)-estimators varies depending on the underlying data distribution and the specific estimator. For symmetric distributions, the trimmed mean and Winsorized mean approach the efficiency of the sample mean while being much more robust. Computational Simplicity: \\(L\\)-estimators involve simple operations like sorting and averaging, making them computationally efficient even for large datasets. 5.5.4.2 Derivation of the Trimmed Mean To understand the robustness of the trimmed mean, consider a dataset with \\(n\\) observations. Sorting the data gives \\(y_{(1)} \\leq y_{(2)} \\leq \\dots \\leq y_{(n)}\\). After trimming the smallest \\(k\\) and largest \\(k\\) observations, the remaining \\(n - 2k\\) observations are used to compute the mean: \\[ \\hat{\\mu}_T = \\frac{1}{n - 2k} \\sum_{i=k+1}^{n-k} y_{(i)}. \\] Key observations: Impact of \\(k\\): Larger \\(k\\) increases robustness by removing more extreme values but reduces efficiency by discarding more data. Choosing \\(k\\): In practice, \\(k\\) is often chosen as a percentage of the total sample size, such as \\(10\\%\\) trimming (\\(k = 0.1n\\)). 5.5.5 Least Trimmed Squares (LTS) Least Trimmed Squares (LTS) is a robust regression method that minimizes the sum of the smallest \\(h\\) squared residuals, rather than using all residuals as in Ordinary Least Squares (OLS). This approach ensures that large residuals, often caused by outliers or leverage points, have no influence on the parameter estimation. The LTS estimator is defined as: \\[ \\hat{\\beta}_{LTS} = \\arg\\min_\\beta \\sum_{i=1}^h r_{[i]}^2, \\] where: \\(r_{[i]}^2\\) are the ordered squared residuals, ranked from smallest to largest, \\(h\\) is the subset size of residuals to include in the minimization, typically chosen as \\(h = \\lfloor n/2 \\rfloor + 1\\) (where \\(n\\) is the sample size). This trimming process ensures robustness by focusing on the best-fitting \\(h\\) observations and ignoring the most extreme residuals. 5.5.5.1 Motivation for LTS In OLS regression, the objective is to minimize the Residual Sum of Squares (RSS): \\[ RSS = \\sum_{i=1}^n r_i^2, \\] where \\(r_i = y_i - x_i&#39;\\beta\\) are the residuals. However, this method is highly sensitive to outliers because even one large residual (\\(r_i^2\\)) can dominate the RSS, distorting the parameter estimates \\(\\beta\\). LTS addresses this issue by trimming the largest residuals and focusing only on the \\(h\\) smallest ones, thus preventing extreme values from affecting the fit. This approach provides a more robust estimate of the regression coefficients \\(\\beta\\). 5.5.5.2 Properties of LTS Objective Function: The LTS objective function is non-differentiable because it involves ordering the squared residuals. Formally, the ordered residuals are denoted as: \\[ r_{[1]}^2 \\leq r_{[2]}^2 \\leq \\dots \\leq r_{[n]}^2, \\] and the objective is to minimize: \\[ \\sum_{i=1}^h r_{[i]}^2. \\] This requires sorting the squared residuals, making the computation more complex than OLS. Choice of \\(h\\): The parameter \\(h\\) determines the number of residuals included in the minimization. A common choice is: \\[ h = \\lfloor n/2 \\rfloor + 1, \\] which ensures a high breakdown point (discussed below). Smaller values of \\(h\\) increase robustness but reduce efficiency, while larger \\(h\\) values improve efficiency but decrease robustness. Breakdown Point: LTS has a breakdown point of approximately \\(50\\%\\), the highest possible for a regression estimator. This means that LTS can handle up to \\(50\\%\\) of contaminated data (e.g., outliers) without yielding unreliable estimates. Robustness: By focusing only on the \\(h\\) best-fitting observations, LTS naturally excludes outliers from the estimation process, making it highly robust to both vertical outliers (extreme values in \\(y\\)) and leverage points (extreme values in \\(x\\)). 5.5.5.3 Algorithm for LTS Computing the LTS estimator involves the following steps: Initialization: Select an initial subset of \\(h\\) observations to compute a preliminary fit for \\(\\beta\\). Residual Calculation: For each observation, compute the squared residuals: \\[ r_i^2 = \\left(y_i - x_i&#39;\\beta\\right)^2. \\] Trimming: Rank the residuals from smallest to largest and retain only the \\(h\\) smallest residuals. Refitting: Use the \\(h\\) retained observations to recompute the regression coefficients \\(\\beta\\). Iterative Refinement: Repeat the process (residual calculation, trimming, refitting) until convergence, typically when \\(\\beta\\) stabilizes. Efficient algorithms, such as the Fast-LTS algorithm, are used in practice to reduce computational complexity. 5.5.5.4 Comparison of LTS with OLS Property OLS LTS Objective Minimize \\(\\sum_{i=1}^n r_i^2\\) Minimize \\(\\sum_{i=1}^h r_{[i]}^2\\) Sensitivity to Outliers High Low Breakdown Point \\(1/n\\) \\(\\approx 50\\%\\) Computational Cost Low Moderate (requires sorting and iterations) 5.5.6 \\(S\\)-Estimators \\(S\\)-estimators are a class of robust estimators that focus on minimizing a robust measure of the dispersion of residuals. Unlike methods such as \\(M\\)-estimators, which directly minimize a loss function based on residuals, \\(S\\)-estimators aim to find the parameter values \\(\\beta\\) that produce residuals with the smallest robust scale. These estimators are particularly useful in handling datasets with outliers, heavy-tailed distributions, or other violations of classical assumptions. The scale \\(\\sigma\\) is estimated by solving the following minimization problem: \\[ \\hat{\\sigma}_S = \\arg\\min_\\sigma \\frac{1}{n} \\sum_{i=1}^n \\rho\\left(\\frac{y_i - x_i&#39;\\beta}{\\sigma}\\right), \\] where: \\(\\rho\\) is a robust loss function that controls the influence of residuals, \\(y_i\\) are observed responses, \\(x_i\\) are predictors, \\(\\beta\\) is the vector of regression coefficients, \\(\\sigma\\) represents the robust scale of the residuals. Once \\(\\sigma\\) is estimated, the \\(S\\)-estimator of \\(\\beta\\) is obtained by solving: \\[ \\hat{\\beta}_S = \\arg\\min_\\beta \\hat{\\sigma}_S. \\] 5.5.6.1 Motivation for \\(S\\)-Estimators In regression analysis, classical methods such as Ordinary Least Squares (OLS) rely on minimizing the Residual Sum of Squares (RSS). However, OLS is highly sensitive to outliers because even a single extreme residual can dominate the sum of squared residuals, leading to biased estimates of \\(\\beta\\). \\(S\\)-estimators address this limitation by using a robust scale \\(\\sigma\\) to evaluate the dispersion of residuals. By minimizing this scale, \\(S\\)-estimators effectively downweight the influence of outliers, resulting in parameter estimates that are more resistant to contamination in the data. 5.5.6.2 Key Concepts in \\(S\\)-Estimators Robust Scale Function: The key idea of \\(S\\)-estimators is to minimize a robust measure of scale. The scale \\(\\sigma\\) is computed such that the residuals normalized by \\(\\sigma\\) produce a value close to the expected contribution of well-behaved observations. Formally, \\(\\sigma\\) satisfies: \\[ \\frac{1}{n} \\sum_{i=1}^n \\rho\\left(\\frac{y_i - x_i&#39;\\beta}{\\sigma}\\right) = \\delta, \\] where \\(\\delta\\) is a constant that depends on the choice of \\(\\rho\\) and ensures consistency under normality. This equation balances the residuals and controls their influence on the scale estimate. Choice of \\(\\rho\\)-Function: The choice of the robust \\(\\rho\\) function is critical in determining the behavior of \\(S\\)-estimators. Common \\(\\rho\\) functions include: Huber’s \\(\\rho\\)-Function: \\[ \\rho(z) = \\begin{cases} z^2/2 &amp; \\text{if } |z| \\leq c, \\\\ c|z| - c^2/2 &amp; \\text{if } |z| &gt; c. \\end{cases} \\] Tukey’s Bisquare: \\[ \\rho(z) = \\begin{cases} c^2 \\left(1 - \\left(1 - \\left(\\frac{z}{c}\\right)^2\\right)^3\\right)/6 &amp; \\text{if } |z| \\leq c, \\\\ c^2/6 &amp; \\text{if } |z| &gt; c. \\end{cases} \\] Andrews’ Sine: \\[ \\rho(z) = \\begin{cases} c^2 \\left(1 - \\cos\\left(\\frac{z}{c}\\right)\\right)/2 &amp; \\text{if } |z| \\leq \\pi c, \\\\ c^2/2 &amp; \\text{if } |z| &gt; \\pi c. \\end{cases} \\] Robust \\(\\rho\\) functions grow more slowly than the quadratic function used in OLS, limiting the impact of large residuals. 5.5.6.3 Properties of \\(S\\)-Estimators Breakdown Point: \\(S\\)-estimators have a breakdown point of up to \\(50\\%\\), meaning they can tolerate up to half the data being contaminated (e.g., outliers) without yielding unreliable estimates. Efficiency: The efficiency of \\(S\\)-estimators depends on the choice of \\(\\rho\\). While they are highly robust, their efficiency under ideal conditions (e.g., normality) may be lower than that of OLS. Proper tuning of \\(\\rho\\) can balance robustness and efficiency. Influence Function: The influence function measures the sensitivity of the estimator to a small perturbation in the data. For \\(S\\)-estimators, the influence function is bounded, ensuring robustness to outliers. Consistency: Under mild regularity conditions, \\(S\\)-estimators are consistent, meaning \\(\\hat{\\beta}_S \\to \\beta\\) as the sample size \\(n \\to \\infty\\). Asymptotic Normality: \\(S\\)-estimators are asymptotically normal, with: \\[ \\sqrt{n}(\\hat{\\beta}_S - \\beta) \\xrightarrow{d} N(0, \\Sigma), \\] where \\(\\Sigma\\) depends on the choice of \\(\\rho\\) and the distribution of residuals. 5.5.6.4 Algorithm for Computing \\(S\\)-Estimators Initial Guess: Compute an initial estimate of \\(\\beta\\) using a robust method (e.g., LTS or an \\(M\\)-estimator). Scale Estimation: Compute a robust estimate of scale \\(\\hat{\\sigma}\\) by solving: \\[ \\frac{1}{n} \\sum_{i=1}^n \\rho\\left(\\frac{y_i - x_i&#39;\\beta}{\\sigma}\\right) = \\delta. \\] Iterative Refinement: Recalculate residuals \\(r_i = y_i - x_i&#39;\\beta\\). Update \\(\\beta\\) and \\(\\sigma\\) iteratively until convergence, typically using numerical optimization techniques. 5.5.7 \\(MM\\)-Estimators \\(MM\\)-estimators are a robust regression method that combines the strengths of two powerful techniques: \\(S\\)-estimators and \\(M\\)-estimators. They are designed to achieve both a high breakdown point (up to \\(50\\%\\)) and high efficiency under ideal conditions (e.g., normality). This combination makes \\(MM\\)-estimators one of the most versatile and widely used robust regression methods. The process of computing \\(MM\\)-estimators involves three main steps: Compute an initial robust estimate of scale using an \\(S\\)-estimator. Use this robust scale to define weights for an \\(M\\)-estimator. Estimate regression coefficients by solving the weighted \\(M\\)-estimation problem. This stepwise approach ensures robustness in the initial scale estimation while leveraging the efficiency of \\(M\\)-estimators for the final parameter estimates. Step 1: Robust Scale Estimation The first step is to estimate the robust scale \\(\\sigma\\) using an \\(S\\)-estimator. This involves solving: \\[ \\hat{\\sigma}_S = \\arg\\min_\\sigma \\frac{1}{n} \\sum_{i=1}^n \\rho_S\\left(\\frac{y_i - x_i&#39;\\beta}{\\sigma}\\right), \\] where \\(\\rho_S\\) is a robust loss function chosen to control the influence of extreme residuals. Common choices for \\(\\rho_S\\) include Huber’s or Tukey’s bisquare functions. This scale estimation provides a robust baseline for weighting residuals in the subsequent \\(M\\)-estimation step. Step 2: Weight Definition for \\(M\\)-Estimation Using the robust scale \\(\\hat{\\sigma}_S\\) obtained in Step 1, the weights for the \\(M\\)-estimator are defined based on a second loss function, \\(\\rho_M\\). The weights downweight residuals proportional to their deviation relative to \\(\\hat{\\sigma}_S\\). For each residual \\(r_i = y_i - x_i&#39;\\beta\\), the weight is computed as: \\[ w_i = \\psi_M\\left(\\frac{r_i}{\\hat{\\sigma}_S}\\right) / \\frac{r_i}{\\hat{\\sigma}_S}, \\] where: \\(\\psi_M\\) is the derivative of the robust \\(\\rho_M\\) function, known as the influence function. \\(\\rho_M\\) is often chosen to provide high efficiency under normality, such as Huber’s or Hampel’s function. These weights reduce the impact of large residuals while preserving the influence of small, well-behaved residuals. Step 3: Final \\(M\\)-Estimation The final step involves solving the \\(M\\)-estimation problem using the weights defined in Step 2. The coefficients \\(\\hat{\\beta}_{MM}\\) are estimated by minimizing the weighted residuals: \\[ \\hat{\\beta}_{MM} = \\arg\\min_\\beta \\sum_{i=1}^n w_i \\rho_M\\left(\\frac{y_i - x_i&#39;\\beta}{\\hat{\\sigma}_S}\\right). \\] This ensures that the final estimates combine the robustness of the initial \\(S\\)-estimator with the efficiency of the \\(M\\)-estimator. 5.5.7.1 Properties of \\(MM\\)-Estimators High Breakdown Point: The \\(S\\)-estimator in the first step ensures a breakdown point of up to \\(50\\%\\), meaning the estimator can handle up to half the data being contaminated without producing unreliable results. Asymptotic Efficiency: The use of an efficient \\(\\rho_M\\) function in the final \\(M\\)-estimation step ensures that \\(MM\\)-estimators achieve high asymptotic efficiency under normality, often close to that of OLS. Robustness: The combination of robust scale estimation and downweighting of large residuals makes \\(MM\\)-estimators highly robust to outliers and leverage points. Influence Function: The influence function of \\(MM\\)-estimators is bounded, ensuring that no single observation can exert disproportionate influence on the parameter estimates. Consistency: \\(MM\\)-estimators are consistent, converging to the true parameter values as the sample size increases, provided the majority of the data satisfies the model assumptions. Asymptotic Normality: \\(MM\\)-estimators are asymptotically normal, with: \\[ \\sqrt{n} (\\hat{\\beta}_{MM} - \\beta) \\xrightarrow{d} N(0, \\Sigma), \\] where \\(\\Sigma\\) depends on the choice of \\(\\rho_M\\) and the distribution of residuals. 5.5.7.2 Choice of \\(\\rho\\)-Functions for \\(MM\\)-Estimators The robustness and efficiency of \\(MM\\)-estimators depend on the choice of \\(\\rho_S\\) (for scale) and \\(\\rho_M\\) (for final estimation). Common choices include: Huber’s \\(\\rho\\)-Function: Combines quadratic and linear growth to balance robustness and efficiency: \\[ \\rho(z) = \\begin{cases} \\frac{z^2}{2} &amp; \\text{if } |z| \\leq c, \\\\ c|z| - \\frac{c^2}{2} &amp; \\text{if } |z| &gt; c. \\end{cases} \\] Tukey’s Bisquare Function: Provides high robustness by completely bounding large residuals: \\[ \\rho(z) = \\begin{cases} c^2 \\left(1 - \\left(1 - \\left(\\frac{z}{c}\\right)^2\\right)^3\\right)/6 &amp; \\text{if } |z| \\leq c, \\\\ c^2/6 &amp; \\text{if } |z| &gt; c. \\end{cases} \\] Hampel’s Three-Part Redescending Function: Further limits the influence of large residuals by assigning a constant penalty beyond a certain threshold. \\[ \\rho(z) = \\begin{cases} z^2/2 &amp; \\text{if } |z| \\leq a, \\\\ a|z| - a^2/2 &amp; \\text{if } a &lt; |z| \\leq b, \\\\ \\text{constant} &amp; \\text{if } |z| &gt; b. \\end{cases} \\] 5.5.8 Practical Considerations The following table summarizes the key properties, advantages, and limitations of the robust estimators discussed: +—————–+———————————————————————-+————————-+——————————+————————————————————————–+———————————————–+ | Estimator | Key Features | Breakdown Point | Efficiency (Under Normality) | Applications | Advantages | +=================+======================================================================+=========================+==============================+==========================================================================+===============================================+ | \\(M\\)-Estimators | Generalization of OLS Robust \\(\\rho\\) reduces large residual influence | Moderate (up to \\(0.29\\)) | High with proper tuning | Wide applicability in regression with moderate robustness | Balances robustness and efficiency | | | | | | | | | | | | | | Flexible tuning via \\(\\rho\\)-function | +—————–+———————————————————————-+————————-+——————————+————————————————————————–+———————————————–+ | \\(R\\)-Estimators | Rank-based method | High (depends on ranks) | Moderate | Ordinal data or heavily skewed distributions | Handles both predictor and response outliers | | | | | | | | | | Immune to outliers in \\(x\\) and \\(y\\) | | | | Suitable for ordinal or rank-based data | +—————–+———————————————————————-+————————-+——————————+————————————————————————–+———————————————–+ | \\(L\\)-Estimators | Linear combination of order statistics | High (up to \\(50\\%\\)) | Moderate | Descriptive statistics, robust averages | Simple and intuitive | | | | | | | | | | | | | | Easy to compute, even for large datasets | +—————–+———————————————————————-+————————-+——————————+————————————————————————–+———————————————–+ | LTS | Minimizes smallest \\(h\\) squared residuals | High (up to \\(50\\%\\)) | Moderate | Data with high contamination, fault detection | High robustness to outliers | | | | | | | | | | | | | | Resistant to leverage points | +—————–+———————————————————————-+————————-+——————————+————————————————————————–+———————————————–+ | \\(S\\)-Estimators | Minimizes robust scale of residuals | High (up to \\(50\\%\\)) | Low to moderate | Outlier detection, data with heavy-tailed distributions | Focus on robust scale estimation | | | | | | | | | | | | | | Effective at detecting extreme outliers | +—————–+———————————————————————-+————————-+——————————+————————————————————————–+———————————————–+ | \\(MM\\)-Estimators | High robustness (scale) + high efficiency (coefficients) | High (up to \\(50\\%\\)) | High | Real-world applications with mixed contamination and heavy-tailed errors | Combinesrobustness and efficiency effectively | | | | | | | | | | | | | | Versatile and flexible | +—————–+———————————————————————-+————————-+——————————+————————————————————————–+———————————————–+ Notes on Choosing an Estimator \\(M\\)-Estimators: Best suited for general-purpose robust regression, offering a balance between robustness and efficiency with moderate contamination. \\(R\\)-Estimators: Ideal for rank-based data or ordinal data, especially when outliers are present in both predictors and responses. \\(L\\)-Estimators: Simple and effective for descriptive statistics or data cleaning with limited computational resources. LTS: Recommended for datasets with significant contamination or leverage points due to its high breakdown point. \\(S\\)-Estimators: Focus on robust scale estimation, suitable for identifying and mitigating the influence of extreme residuals. \\(MM\\)-Estimators: Combines the robustness of \\(S\\)-estimators with the efficiency of \\(M\\)-estimators, making it the most versatile choice for heavily contaminated data. # Load necessary libraries library(MASS) # For robust regression functions like rlm library(robustbase) # For LTS regression and MM-estimators library(dplyr) # For data manipulation library(ggplot2) # For visualization # Simulate dataset set.seed(123) n &lt;- 100 x &lt;- rnorm(n, mean = 5, sd = 2) # Predictor y &lt;- 3 + 2 * x + rnorm(n, sd = 1) # Response # Introduce outliers y[95:100] &lt;- y[95:100] + 20 # Vertical outliers x[90:95] &lt;- x[90:95] + 10 # Leverage points data &lt;- data.frame(x, y) # Visualize the data ggplot(data, aes(x, y)) + geom_point() + labs(title = &quot;Scatterplot of Simulated Data with Outliers&quot;, x = &quot;Predictor (x)&quot;, y = &quot;Response (y)&quot;) + theme_minimal() # Ordinary Least Squares (OLS) ols_model &lt;- lm(y ~ x, data = data) summary(ols_model) #&gt; #&gt; Call: #&gt; lm(formula = y ~ x, data = data) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -12.6023 -2.4590 -0.5717 0.9247 24.4024 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 8.8346 1.1550 7.649 1.41e-11 *** #&gt; x 0.9721 0.1749 5.558 2.36e-07 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 5.583 on 98 degrees of freedom #&gt; Multiple R-squared: 0.2396, Adjusted R-squared: 0.2319 #&gt; F-statistic: 30.89 on 1 and 98 DF, p-value: 2.358e-07 OLS coefficients are highly influenced by the presence of outliers. For example, the slope (x coefficient) and intercept are shifted to fit the outliers, resulting in a poor fit to the majority of the data. # $M$-Estimators m_model &lt;- rlm(y ~ x, data = data, psi = psi.huber) summary(m_model) #&gt; #&gt; Call: rlm(formula = y ~ x, data = data, psi = psi.huber) #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -18.43919 -0.97575 -0.03297 0.76967 21.85546 #&gt; #&gt; Coefficients: #&gt; Value Std. Error t value #&gt; (Intercept) 4.3229 0.2764 15.6421 #&gt; x 1.7250 0.0419 41.2186 #&gt; #&gt; Residual standard error: 1.349 on 98 degrees of freedom The \\(M\\)-estimator reduces the influence of large residuals using Huber’s psi function. This results in coefficients that are less affected by outliers compared to OLS. # Least Trimmed Squares (LTS) lts_model &lt;- ltsReg(y ~ x, data = data) lts_coefficients &lt;- coef(lts_model) LTS minimizes the smallest squared residuals, ignoring extreme residuals. This results in a more robust fit, particularly in the presence of both vertical outliers and leverage points. # $MM$-Estimators mm_model &lt;- lmrob(y ~ x, data = data, setting = &quot;KS2014&quot;) summary(mm_model) #&gt; #&gt; Call: #&gt; lmrob(formula = y ~ x, data = data, setting = &quot;KS2014&quot;) #&gt; \\--&gt; method = &quot;SMDM&quot; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -20.45989 -0.69436 -0.01455 0.73614 22.10173 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 3.02192 0.25850 11.69 &lt;2e-16 *** #&gt; x 1.96672 0.04538 43.34 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Robust residual standard error: 0.9458 #&gt; Multiple R-squared: 0.9562, Adjusted R-squared: 0.9558 #&gt; Convergence in 7 IRWLS iterations #&gt; #&gt; Robustness weights: #&gt; 10 observations c(90,91,92,93,94,96,97,98,99,100) #&gt; are outliers with |weight| = 0 ( &lt; 0.001); #&gt; 67 weights are ~= 1. The remaining 23 ones are summarized as #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; 0.2496 0.7969 0.9216 0.8428 0.9548 0.9943 #&gt; Algorithmic parameters: #&gt; tuning.chi1 tuning.chi2 tuning.chi3 tuning.chi4 #&gt; -5.000e-01 1.500e+00 NA 5.000e-01 #&gt; bb tuning.psi1 tuning.psi2 tuning.psi3 #&gt; 5.000e-01 -5.000e-01 1.500e+00 9.500e-01 #&gt; tuning.psi4 refine.tol rel.tol scale.tol #&gt; NA 1.000e-07 1.000e-07 1.000e-10 #&gt; solve.tol zero.tol eps.outlier eps.x #&gt; 1.000e-07 1.000e-10 1.000e-03 3.223e-11 #&gt; warn.limit.reject warn.limit.meanrw #&gt; 5.000e-01 5.000e-01 #&gt; nResample max.it best.r.s k.fast.s k.max #&gt; 1000 500 20 2 2000 #&gt; maxit.scale trace.lev mts compute.rd numpoints #&gt; 200 0 1000 0 10 #&gt; fast.s.large.n #&gt; 2000 #&gt; setting psi subsampling #&gt; &quot;KS2014&quot; &quot;lqq&quot; &quot;nonsingular&quot; #&gt; cov compute.outlier.stats #&gt; &quot;.vcov.w&quot; &quot;SMDM&quot; #&gt; seed : int(0) \\(MM\\)-estimators combine robust scale estimation (from \\(S\\)-estimators) with efficient coefficient estimation (from \\(M\\)-estimators). This achieves both high robustness and high efficiency under normal conditions. # Visualizing results data &lt;- data %&gt;% mutate( ols_fit = predict(ols_model, newdata = data), m_fit = predict(m_model, newdata = data), lts_fit = fitted(lts_model), # Use `fitted()` for ltsReg objects mm_fit = predict(mm_model, newdata = data) ) ggplot(data, aes(x, y)) + geom_point() + geom_line( aes(y = ols_fit), color = &quot;red&quot;, linetype = &quot;dashed&quot;, size = 1, label = &quot;OLS&quot; ) + geom_line( aes(y = m_fit), color = &quot;blue&quot;, linetype = &quot;dashed&quot;, size = 1, label = &quot;$M$-Estimator&quot; ) + geom_line( aes(y = lts_fit), color = &quot;green&quot;, linetype = &quot;dashed&quot;, size = 1, label = &quot;LTS&quot; ) + geom_line( aes(y = mm_fit), color = &quot;purple&quot;, linetype = &quot;dashed&quot;, size = 1, label = &quot;$MM$-Estimator&quot; ) + labs(title = &quot;Comparison of Regression Fits&quot;, x = &quot;Predictor (x)&quot;, y = &quot;Response (y)&quot;) + theme_minimal() Visualization shows the differences in regression fits: - OLS is heavily influenced by outliers and provides a poor fit to the majority of the data. ) - The \\(M\\)-estimator downweights large residuals, resulting in a better fit. - LTS regression ignores the extreme residuals entirely, providing the most robust fit. - \\(MM\\)-estimators balance robustness and efficiency, producing coefficients close to the LTS but with improved efficiency under normality. # Comparing Coefficients comparison &lt;- data.frame( Method = c(&quot;OLS&quot;, &quot;$M$-Estimator&quot;, &quot;LTS&quot;, &quot;$MM$-Estimator&quot;), Intercept = c( coef(ols_model)[1], coef(m_model)[1], lts_coefficients[1], coef(mm_model)[1] ), Slope = c( coef(ols_model)[2], coef(m_model)[2], lts_coefficients[2], coef(mm_model)[2] ) ) print(comparison) #&gt; Method Intercept Slope #&gt; 1 OLS 8.834553 0.9720994 #&gt; 2 $M$-Estimator 4.322869 1.7250441 #&gt; 3 LTS 2.954960 1.9777635 #&gt; 4 $MM$-Estimator 3.021923 1.9667208 The table above shows how the coefficients vary across methods: - OLS coefficients are the most distorted by outliers. - \\(M\\)-estimators and \\(MM\\)-estimators provide coefficients that are less influenced by extreme values. - LTS regression, with its trimming mechanism, produces the most robust coefficients by excluding the largest residuals. References "],["partial-least-squares.html", "5.6 Partial Least Squares", " 5.6 Partial Least Squares Partial Least Squares (PLS) is a dimensionality reduction technique used for regression and predictive modeling. It is particularly useful when predictors are highly collinear or when the number of predictors (\\(p\\)) exceeds the number of observations (\\(n\\)). Unlike methods such as Principal Component Regression (PCR), PLS simultaneously considers the relationship between predictors and the response variable. 5.6.1 Motivation for PLS Limitations of Classical Methods Multicollinearity: OLS fails when predictors are highly correlated because the design matrix \\(X&#39;X\\) becomes nearly singular, leading to unstable estimates. High-Dimensional Data: When \\(p &gt; n\\), OLS cannot be directly applied as \\(X&#39;X\\) is not invertible. Principal Component Regression (PCR): While PCR addresses multicollinearity by using principal components of \\(X\\), it does not account for the relationship between predictors and the response variable \\(y\\) when constructing components. PLS overcomes these limitations by constructing components that maximize the covariance between predictors \\(X\\) and the response \\(y\\). It finds a compromise between explaining the variance in \\(X\\) and predicting \\(y\\), making it particularly suited for regression in high-dimensional or collinear datasets. Let: \\(X\\) be the \\(n \\times p\\) matrix of predictors, \\(y\\) be the \\(n \\times 1\\) response vector, \\(t_k\\) be the \\(k\\)-th latent component derived from \\(X\\), \\(p_k\\) and \\(q_k\\) be the loadings for \\(X\\) and \\(y\\), respectively. PLS aims to construct latent components \\(t_1, t_2, \\ldots, t_K\\) such that: Each \\(t_k\\) is a linear combination of the predictors: \\(t_k = X w_k\\), where \\(w_k\\) is a weight vector. 2 The covariance between \\(t_k\\) and \\(y\\) is maximized: \\[ \\text{Maximize } Cov(t_k, y) = w_k&#39; X&#39; y. \\] 5.6.2 Steps to Construct PLS Components Compute Weights: The weights \\(w_k\\) for the \\(k\\)-th component are obtained by solving: \\[ w_k = \\frac{X&#39;y}{\\|X&#39;y\\|}. \\] Construct Latent Component: Form the \\(k\\)-th latent component: \\[ t_k = X w_k. \\] Deflate the Predictors: After extracting \\(t_k\\), the predictors are deflated to remove the information explained by \\(t_k\\): \\[ X \\leftarrow X - t_k p_k&#39;, \\] where \\(p_k = \\frac{X&#39;t_k}{t_k&#39;t_k}\\) are the loadings for \\(X\\). Deflate the Response: Similarly, deflate \\(y\\) to remove the variance explained by \\(t_k\\): \\[ y \\leftarrow y - t_k q_k, \\] where \\(q_k = \\frac{t_k&#39;y}{t_k&#39;t_k}\\). Repeat for All Components: Repeat the steps above until \\(K\\) components are extracted. After constructing \\(K\\) components, the response \\(y\\) is modeled as: \\[ y = T C + \\epsilon, \\] where: \\(T = [t_1, t_2, \\ldots, t_K]\\) is the matrix of latent components, \\(C\\) is the vector of regression coefficients. The estimated coefficients for the original predictors are then: \\[ \\hat{\\beta} = W (P&#39; W)^{-1} C, \\] where \\(W = [w_1, w_2, \\ldots, w_K]\\) and \\(P = [p_1, p_2, \\ldots, p_K]\\). 5.6.3 Properties of PLS Dimensionality Reduction: PLS reduces \\(X\\) to \\(K\\) components, where \\(K \\leq \\min(n, p)\\). Handles Multicollinearity: By constructing uncorrelated components, PLS avoids the instability caused by multicollinearity in OLS. Supervised Dimensionality Reduction: Unlike PCR, PLS considers the relationship between \\(X\\) and \\(y\\) when constructing components. Efficiency: PLS requires fewer components than PCR to achieve a similar level of predictive accuracy. Practical Considerations Number of Components: The optimal number of components \\(K\\) can be determined using cross-validation. Preprocessing: Standardizing predictors is essential for PLS, as it ensures that all variables are on the same scale. Comparison with Other Methods: PLS outperforms OLS and PCR in cases of multicollinearity or when \\(p &gt; n\\), but it may be less interpretable than sparse methods like Lasso. # Load required library library(pls) # Step 1: Simulate data set.seed(123) # Ensure reproducibility n &lt;- 100 # Number of observations p &lt;- 10 # Number of predictors X &lt;- matrix(rnorm(n * p), nrow = n, ncol = p) # Design matrix (predictors) beta &lt;- runif(p) # True coefficients y &lt;- X %*% beta + rnorm(n) # Response variable with noise # Step 2: Fit Partial Least Squares (PLS) Regression pls_fit &lt;- plsr(y ~ X, ncomp = 5, validation = &quot;CV&quot;) # Step 3: Summarize the PLS Model summary(pls_fit) #&gt; Data: X dimension: 100 10 #&gt; Y dimension: 100 1 #&gt; Fit method: kernelpls #&gt; Number of components considered: 5 #&gt; #&gt; VALIDATION: RMSEP #&gt; Cross-validated using 10 random segments. #&gt; (Intercept) 1 comps 2 comps 3 comps 4 comps 5 comps #&gt; CV 1.339 1.123 1.086 1.090 1.088 1.087 #&gt; adjCV 1.339 1.112 1.078 1.082 1.080 1.080 #&gt; #&gt; TRAINING: % variance explained #&gt; 1 comps 2 comps 3 comps 4 comps 5 comps #&gt; X 10.88 20.06 30.80 42.19 51.61 #&gt; y 44.80 48.44 48.76 48.78 48.78 # Step 4: Perform Cross-Validation and Select Optimal Components validationplot(pls_fit, val.type = &quot;MSEP&quot;) # Step 5: Extract Coefficients for Predictors pls_coefficients &lt;- coef(pls_fit) print(pls_coefficients) #&gt; , , 5 comps #&gt; #&gt; y #&gt; X1 0.30192935 #&gt; X2 -0.03161151 #&gt; X3 0.22392538 #&gt; X4 0.42315637 #&gt; X5 0.33000198 #&gt; X6 0.66228763 #&gt; X7 0.40452691 #&gt; X8 -0.05704037 #&gt; X9 -0.02699757 #&gt; X10 0.05944765 # Step 6: Evaluate Model Performance predicted_y &lt;- predict(pls_fit, X) actual_vs_predicted &lt;- data.frame( Actual = y, Predicted = predicted_y[, , 5] # Predicted values using 5 components ) # Plot Actual vs Predicted library(ggplot2) ggplot(actual_vs_predicted, aes(x = Actual, y = Predicted)) + geom_point() + geom_abline( intercept = 0, slope = 1, color = &quot;red&quot;, linetype = &quot;dashed&quot; ) + labs(title = &quot;Actual vs Predicted Values (PLS Regression)&quot;, x = &quot;Actual Values&quot;, y = &quot;Predicted Values&quot;) + theme_minimal() # Step 7: Extract and Interpret Variable Importance (Loadings) loadings_matrix &lt;- as.matrix(unclass(loadings(pls_fit))) variable_importance &lt;- as.data.frame(loadings_matrix) colnames(variable_importance) &lt;- paste0(&quot;Component_&quot;, 1:ncol(variable_importance)) rownames(variable_importance) &lt;- paste0(&quot;X&quot;, 1:nrow(variable_importance)) # Print variable importance print(variable_importance) #&gt; Component_1 Component_2 Component_3 Component_4 Component_5 #&gt; X1 -0.04991097 0.5774569 0.24349681 -0.41550345 -0.02098351 #&gt; X2 0.08913192 -0.1139342 -0.17582957 -0.05709948 -0.06707863 #&gt; X3 0.13773357 0.1633338 0.07622919 -0.07248620 -0.61962875 #&gt; X4 0.40369572 -0.2730457 0.69994206 -0.07949013 0.35239113 #&gt; X5 0.50562681 -0.1788131 -0.27936562 0.36197480 -0.41919645 #&gt; X6 0.57044281 0.3358522 -0.38683260 0.17656349 0.31154275 #&gt; X7 0.36258623 0.1202109 -0.01753715 -0.12980483 -0.06919411 #&gt; X8 0.12975452 -0.1164935 -0.30479310 -0.65654861 0.49948167 #&gt; X9 -0.29521786 0.6170234 -0.32082508 -0.01041860 0.04904396 #&gt; X10 0.23930055 -0.3259554 0.20006888 -0.53547258 -0.17963372 The loadings provide the contribution of each predictor to the PLS components. Higher absolute values indicate stronger contributions to the corresponding component. Summary of the Model: The proportion of variance explained indicates how much of the variability in both the predictors and response is captured by each PLS component. The goal is to retain enough components to explain most of the variance while avoiding overfitting. Validation Plot: The Mean Squared Error of Prediction (MSEP) curve is used to select the optimal number of components. Adding too many components can lead to overfitting, while too few may underfit the data. Coefficients: The extracted coefficients are the weights applied to the predictors in the final PLS model. These coefficients are derived from the PLS components and may differ from OLS regression coefficients due to dimensionality reduction. Actual vs Predicted Plot: This visualization evaluates how well the PLS model predicts the response variable. Points tightly clustered around the diagonal indicate good performance. VIP Scores: VIP scores help identify the most important predictors in the PLS model. Predictors with higher VIP scores contribute more to explaining the response variable. 5.6.4 Comparison with Related Methods Method Handles Multicollinearity Supervised Dimensionality Reduction Sparse Solution Interpretability OLS No No No High Ridge Regression Yes No No Moderate Lasso Regression Yes No Yes High PCR Yes No No Low PLS Yes Yes No Moderate "],["non-linear-regression.html", "Chapter 6 Non-Linear Regression", " Chapter 6 Non-Linear Regression Non-linear regression models differ fundamentally from linear regression models in that the derivatives of the mean function with respect to parameters depend on one or more of the parameters. This dependence adds complexity but also provides greater flexibility to model intricate relationships. Linear Regression: Model Form Example: A typical linear regression model looks like \\(y = \\beta_0 + \\beta_1 x\\), where \\(\\beta_0\\) and \\(\\beta_1\\) are the parameters. Parameter Effect: The influence of each parameter on \\(y\\) is constant. For example, if \\(\\beta_1\\) increases by 1, the change in \\(y\\) is always \\(x\\), regardless of the current value of \\(\\beta_1\\). Derivatives: The partial derivatives of \\(y\\) with respect to each parameter (e.g., \\(\\frac{\\partial y}{\\partial \\beta_1} = x\\)) do not depend on the parameters \\(\\beta_0\\) or \\(\\beta_1\\) themselves—they only depend on the data \\(x\\). This makes the mathematics of finding the best-fit line straightforward. Straightforward estimation via closed-form solutions like Ordinary Least Squares. Non-linear Regression: Model Form Example: Consider \\(y = \\alpha \\cdot e^{\\beta x}\\). Here, \\(\\alpha\\) and \\(\\beta\\) are parameters, but the relationship is not a straight line. Parameter Effect: The effect of changing \\(\\alpha\\) or \\(\\beta\\) on \\(y\\) is not constant. For instance, if you change \\(\\beta\\), the impact on \\(y\\) depends on both \\(x\\) and the current value of \\(\\beta\\). This makes predictions and adjustments more complex. Derivatives: Taking the partial derivative with respect to \\(\\beta\\) gives \\(\\frac{\\partial y}{\\partial \\beta} = \\alpha x e^{\\beta x}\\). Notice this derivative depends on \\(\\alpha\\), \\(\\beta\\), and \\(x\\). Unlike linear regression, the sensitivity of \\(y\\) to changes in \\(\\beta\\) changes as \\(\\beta\\) itself changes. Estimation requires iterative algorithms like the Gauss-Newton Algorithm, as closed-form solutions are not feasible. Summary Table: Linear vs. Non-Linear Regression Feature Linear Regression Non-Linear Regression Relationship Linear in parameters Non-linear in parameters Interpretability High Often challenging Estimation Closed-form solutions Iterative algorithms Computational Cost Low Higher Key Features of Non-linear regression: Complex Functional Forms: Non-linear regression allows for relationships that are not straight lines or planes. Interpretability Challenges: Non-linear models can be difficult to interpret, especially if the functional forms are complex. Practical Use Cases: Growth curves High-order polynomials Linear approximations (e.g., Taylor expansions) Collections of locally linear models or basis functions (e.g., splines) While these approaches can approximate data, they may suffer from interpretability issues or may not generalize well when data is sparse. Hence, intrinsically non-linear models are often preferred. Intrinsically Non-Linear Models The general form of an intrinsically non-linear regression model is: \\[ Y_i = f(\\mathbf{x}_i; \\mathbf{\\theta}) + \\epsilon_i \\] Where: \\(f(\\mathbf{x}_i; \\mathbf{\\theta})\\): A non-linear function that relates \\(E(Y_i)\\) to the independent variables \\(\\mathbf{x}_i\\). \\(\\mathbf{x}_i\\): A \\(k \\times 1\\) vector of independent variables (fixed). \\(\\mathbf{\\theta}\\): A \\(p \\times 1\\) vector of parameters. \\(\\epsilon_i\\): Independent and identically distributed random errors, often assumed to have a mean of 0 and a constant variance \\(\\sigma^2\\). In some cases, \\(\\epsilon_i \\sim \\mathcal{N}(0, \\sigma^2)\\). Example: Exponential Growth Model A common non-linear model is the exponential growth function: \\[ y = \\theta_1 e^{\\theta_2 x} + \\epsilon \\] Where: \\(\\theta_1\\): Initial value. \\(\\theta_2\\): Growth rate. \\(x\\): Independent variable (e.g., time). \\(\\epsilon\\): Random error. "],["inference.html", "6.1 Inference", " 6.1 Inference Since \\(Y_i = f(\\mathbf{x}_i, \\theta) + \\epsilon_i\\), where \\(\\epsilon_i \\sim \\text{iid}(0, \\sigma^2)\\), we can estimate parameters (\\(\\hat{\\theta}\\)) by minimizing the sum of squared errors: \\[ \\sum_{i=1}^{n} \\big(Y_i - f(\\mathbf{x}_i, \\theta)\\big)^2 \\] The variance of residuals is estimated as: \\[ s^2 = \\hat{\\sigma}^2_{\\epsilon} = \\frac{\\sum_{i=1}^{n} \\big(Y_i - f(\\mathbf{x}_i, \\hat{\\theta})\\big)^2}{n - p} \\] where \\(p\\) is the number of parameters in \\(\\mathbf{\\theta}\\), and \\(n\\) is the number of observations. 6.1.1 Linear Function of the Parameters If we assume \\(\\epsilon_i \\sim N(0, \\sigma^2)\\), the asymptotic distribution of the parameter estimates \\(\\hat{\\theta}\\) can be expressed as: \\[ \\hat{\\theta} \\sim AN(\\mathbf{\\theta}, \\sigma^2[\\mathbf{F}(\\theta)&#39;\\mathbf{F}(\\theta)]^{-1}) \\] where: \\(AN\\) stands for asymptotic normality. \\(\\mathbf{F}(\\theta)\\) is the Jacobian matrix of partial derivatives of \\(f(\\mathbf{x}_i, \\theta)\\) with respect to \\(\\mathbf{\\theta}\\), evaluated at \\(\\hat{\\theta}\\). Asymptotic normality means that as the sample size \\(n\\) becomes large, the sampling distribution of \\(\\hat{\\theta}\\) approaches a normal distribution, which enables inference on the parameters. Suppose we are interested in a linear combination of the parameters, such as \\(\\theta_1 - \\theta_2\\). Define the contrast vector \\(\\mathbf{a}\\) as: \\[ \\mathbf{a} = (0, 1, -1)&#39; \\] We then consider inference for \\(\\mathbf{a&#39;\\theta}\\). Using rules for the expectation and variance of a linear combination of a random vector \\(\\mathbf{Z}\\): \\[ \\begin{aligned} E(\\mathbf{a&#39;Z}) &amp;= \\mathbf{a&#39;}E(\\mathbf{Z}) \\\\ \\text{Var}(\\mathbf{a&#39;Z}) &amp;= \\mathbf{a&#39;} \\text{Var}(\\mathbf{Z}) \\mathbf{a} \\end{aligned} \\] Applying this to \\(\\mathbf{a&#39;\\hat{\\theta}}\\), we have: \\[ \\mathbf{a&#39;\\hat{\\theta}} \\sim AN\\big(\\mathbf{a&#39;\\theta}, \\sigma^2 \\mathbf{a&#39;[\\mathbf{F}(\\theta)&#39;\\mathbf{F}(\\theta)]^{-1}a}\\big) \\] This indicates that \\(\\mathbf{a&#39;\\hat{\\theta}}\\) is asymptotically independent of \\(s^2\\) (to order \\(1/n\\)). Using the \\(t\\)-distribution, a \\(100(1-\\alpha)\\%\\) confidence interval for \\(\\mathbf{a&#39;\\theta}\\) is given by: \\[ \\mathbf{a&#39;\\theta} \\pm t_{(1-\\alpha/2, n-p)} s \\sqrt{\\mathbf{a&#39;[\\mathbf{F}(\\hat{\\theta})&#39;\\mathbf{F}(\\hat{\\theta})]^{-1}a}} \\] where: \\(t_{(1-\\alpha/2, n-p)}\\) is the critical value of the \\(t\\)-distribution with \\(n - p\\) degrees of freedom. \\(s\\) is the estimated standard deviation of residuals. If we focus on a single parameter \\(\\theta_j\\), let \\(\\mathbf{a&#39;} = (0, \\dots, 1, \\dots, 0)\\) (with 1 at the \\(j\\)-th position). Then, the confidence interval for \\(\\theta_j\\) becomes: \\[ \\hat{\\theta}_j \\pm t_{(1-\\alpha/2, n-p)} s \\sqrt{\\hat{c}^j} \\] where \\(\\hat{c}^j\\) is the \\(j\\)-th diagonal element of \\([\\mathbf{F}(\\hat{\\theta})&#39;\\mathbf{F}(\\hat{\\theta})]^{-1}\\). 6.1.2 Nonlinear Functions of Parameters When \\(h(\\theta)\\) is a nonlinear function of the parameters, we can use a Taylor series expansion about \\(\\theta\\) to approximate \\(h(\\hat{\\theta})\\): \\[ h(\\hat{\\theta}) \\approx h(\\theta) + \\mathbf{h}&#39; [\\hat{\\theta} - \\theta] \\] where: \\(\\mathbf{h} = \\left( \\frac{\\partial h}{\\partial \\theta_1}, \\frac{\\partial h}{\\partial \\theta_2}, \\dots, \\frac{\\partial h}{\\partial \\theta_p} \\right)&#39;\\) is the gradient of \\(h(\\theta)\\). Key Approximations: Expectation and Variance of \\(\\hat{\\theta}\\): \\[ \\begin{aligned} E(\\hat{\\theta}) &amp;\\approx \\theta, \\\\ \\text{Var}(\\hat{\\theta}) &amp;\\approx \\sigma^2 [\\mathbf{F}(\\theta)&#39; \\mathbf{F}(\\theta)]^{-1}. \\end{aligned} \\] Expectation and Variance of \\(h(\\hat{\\theta})\\): \\[ \\begin{aligned} E(h(\\hat{\\theta})) &amp;\\approx h(\\theta), \\\\ \\text{Var}(h(\\hat{\\theta})) &amp;\\approx \\sigma^2 \\mathbf{h}&#39;[\\mathbf{F}(\\theta)&#39; \\mathbf{F}(\\theta)]^{-1} \\mathbf{h}. \\end{aligned} \\] Approximate Distribution: Combining these results, we find: \\[ h(\\hat{\\theta}) \\sim AN(h(\\theta), \\sigma^2 \\mathbf{h}&#39; [\\mathbf{F}(\\theta)&#39; \\mathbf{F}(\\theta)]^{-1} \\mathbf{h}), \\] where \\(AN\\) represents asymptotic normality. Confidence Interval for \\(h(\\theta)\\): An approximate \\(100(1-\\alpha)\\%\\) confidence interval for \\(h(\\theta)\\) is: \\[ h(\\hat{\\theta}) \\pm t_{(1-\\alpha/2, n-p)} s \\sqrt{\\mathbf{h}&#39;[\\mathbf{F}(\\theta)&#39; \\mathbf{F}(\\theta)]^{-1} \\mathbf{h}}, \\] where \\(\\mathbf{h}\\) and \\(\\mathbf{F}(\\theta)\\) are evaluated at \\(\\hat{\\theta}\\). To compute a prediction interval for a new observation \\(Y_0\\) at \\(x = x_0\\): Model Definition: \\[ Y_0 = f(x_0; \\theta) + \\epsilon_0, \\quad \\epsilon_0 \\sim N(0, \\sigma^2), \\] with the predicted value: \\[ \\hat{Y}_0 = f(x_0, \\hat{\\theta}). \\] Approximation for \\(\\hat{Y}_0\\): As \\(n \\to \\infty\\), \\(\\hat{\\theta} \\to \\theta\\), so we have: \\[ f(x_0, \\hat{\\theta}) \\approx f(x_0, \\theta) + \\mathbf{f}_0(\\theta)&#39; [\\hat{\\theta} - \\theta], \\] where: \\[ \\mathbf{f}_0(\\theta) = \\left( \\frac{\\partial f(x_0, \\theta)}{\\partial \\theta_1}, \\dots, \\frac{\\partial f(x_0, \\theta)}{\\partial \\theta_p} \\right)&#39;. \\] Error Approximation: \\[ \\begin{aligned}Y_0 - \\hat{Y}_0 &amp;\\approx Y_0 - f(x_0,\\theta) - f_0(\\theta)&#39;[\\hat{\\theta}-\\theta] \\\\&amp;= \\epsilon_0 - f_0(\\theta)&#39;[\\hat{\\theta}-\\theta]\\end{aligned} \\] Variance of \\(Y_0 - \\hat{Y}_0\\): \\[ \\begin{aligned} \\text{Var}(Y_0 - \\hat{Y}_0) &amp;\\approx \\text{Var}(\\epsilon_0 - \\mathbf{f}_0(\\theta)&#39; [\\hat{\\theta} - \\theta]) \\\\ &amp;= \\sigma^2 + \\sigma^2 \\mathbf{f}_0(\\theta)&#39; [\\mathbf{F}(\\theta)&#39; \\mathbf{F}(\\theta)]^{-1} \\mathbf{f}_0(\\theta) \\\\ &amp;= \\sigma^2 \\big(1 + \\mathbf{f}_0(\\theta)&#39; [\\mathbf{F}(\\theta)&#39; \\mathbf{F}(\\theta)]^{-1} \\mathbf{f}_0(\\theta)\\big). \\end{aligned} \\] Approximate Distribution of Prediction Error: The error \\(Y_0 - \\hat{Y}_0\\) follows an asymptotic normal distribution: \\[ Y_0 - \\hat{Y}_0 \\sim AN\\big(0, \\sigma^2 \\big(1 + \\mathbf{f}_0(\\theta)&#39; [\\mathbf{F}(\\theta)&#39; \\mathbf{F}(\\theta)]^{-1} \\mathbf{f}_0(\\theta)\\big)\\big). \\] Prediction Interval for \\(Y_0\\): A \\(100(1-\\alpha)\\%\\) prediction interval for \\(Y_0\\) is: \\[ \\hat{Y}_0 \\pm t_{(1-\\alpha/2, n-p)} s \\sqrt{1 + \\mathbf{f}_0(\\hat{\\theta})&#39; [\\mathbf{F}(\\hat{\\theta})&#39; \\mathbf{F}(\\hat{\\theta})]^{-1} \\mathbf{f}_0(\\hat{\\theta})}. \\] The confidence interval for the mean response \\(E(Y_i)\\) (different from a prediction interval) can be obtained similarly, but without including the variance of \\(\\epsilon_0\\) in the calculation. Specifically, for the mean response: \\[ E(Y_0) \\approx f(x_0; \\theta), \\] and the confidence interval is: \\[ f(x_0, \\hat{\\theta}) \\pm t_{(1-\\alpha/2, n-p)} s \\sqrt{\\mathbf{f}_0(\\hat{\\theta})&#39; [\\mathbf{F}(\\hat{\\theta})&#39; \\mathbf{F}(\\hat{\\theta})]^{-1} \\mathbf{f}_0(\\hat{\\theta})}. \\] "],["non-linear-least-squares-estimation.html", "6.2 Non-linear Least Squares Estimation", " 6.2 Non-linear Least Squares Estimation The least squares (LS) estimate of \\(\\theta\\), denoted as \\(\\hat{\\theta}\\), minimizes the residual sum of squares: \\[ S(\\hat{\\theta}) = SSE(\\hat{\\theta}) = \\sum_{i=1}^{n} \\{Y_i - f(\\mathbf{x}_i; \\hat{\\theta})\\}^2 \\] To solve this, we consider the partial derivatives of \\(S(\\theta)\\) with respect to each \\(\\theta_j\\) and set them to zero, leading to the normal equations: \\[ \\frac{\\partial S(\\theta)}{\\partial \\theta_j} = -2 \\sum_{i=1}^{n} \\{Y_i - f(\\mathbf{x}_i; \\theta)\\} \\frac{\\partial f(\\mathbf{x}_i; \\theta)}{\\partial \\theta_j} = 0 \\] However, these equations are inherently non-linear and, in most cases, cannot be solved analytically. As a result, various estimation techniques are employed to approximate solutions efficiently. These approaches include: Iterative Optimization – Methods that refine estimates through successive iterations to minimize error. Derivative-Free Methods – Techniques that do not rely on gradient information, useful for complex or non-smooth functions. Stochastic Heuristic – Algorithms that incorporate randomness, such as genetic algorithms or simulated annealing, to explore solution spaces. Linearization– Approximating non-linear models with linear ones to enable analytical or numerical solutions. Hybrid Approaches – Combining multiple methods to leverage their respective strengths for improved estimation. Category Method Best For Derivative? Optimization Comp. Cost Iterative Optimization Steepest Descent (Gradient Descent) Simple problems, slow convergence Yes Local Low Iterative Optimization Gauss-Newton Algorithm Faster than GD, ignores exact second-order info Yes Local Medium Iterative Optimization Levenberg-Marquardt Algorithm Balances GN &amp; GD, robust Yes Local Medium Iterative Optimization Newton-Raphson Method Quadratic convergence, needs Hessian Yes Local High Iterative Optimization Quasi-Newton Method Approximates Hessian for large problems Yes Local Medium Iterative Optimization Trust-Region Reflective Algorithm Handles constraints, robust Yes Local High Derivative-Free Secant Method Approximates derivative from function evaluations No Local Medium Derivative-Free Nelder-Mead (Simplex) No derivatives, heuristic No Local Medium Derivative-Free Powell’s Method Line search, no explicit gradient No Local Medium Derivative-Free Grid Search Exhaustive search (best in low dims) No Global Very High Derivative-Free Hooke-Jeeves Pattern Search Pattern-based, black-box optimization No Local Medium Derivative-Free Bisection Method Simple root/interval-based approach No Local Low Stochastic Heuristic Simulated Annealing Escapes local minima, non-smooth problems No Global High Stochastic Heuristic Genetic Algorithm Large search spaces, evolving parameters No Global High Stochastic Heuristic Particle Swarm Optimization Swarm-based, often fast global convergence No Global Medium Stochastic Heuristic Evolutionary Strategies High-dimensional, adaptive step-size No Global High Stochastic Heuristic Differential Evolution Algorithm Robust global optimizer, population-based No Global High Stochastic Heuristic Ant Colony Optimization (ACO) Discrete / combinatorial problems No Global High Linearization Taylor Series Approximation Local approximation of non-linearity Yes Local Low Linearization Log-Linearization Transforms non-linear equations Yes Local Low Hybrid Adaptive Levenberg-Marquardt Dynamically adjusts damping in LM Yes Local Medium Hybrid Hybrid Genetic Algorithm &amp; LM (GA-LM) GA for coarse search, LM for fine-tuning No Hybrid High Hybrid Neural Network-Based NLLS Deep learning for complex non-linear least squares No Hybrid Very High 6.2.1 Iterative Optimization 6.2.1.1 Gauss-Newton Algorithm The Gauss-Newton Algorithm is an iterative optimization method used to estimate parameters in nonlinear least squares problems. It refines parameter estimates by approximating the Hessian matrix using first-order derivatives, making it computationally efficient for many practical applications (e.g., regression models in finance and marketing analytics). The objective is to minimize the Sum of Squared Errors (SSE): \\[ SSE(\\theta) = \\sum_{i=1}^{n} [Y_i - f_i(\\theta)]^2, \\] where \\(\\mathbf{Y} = [Y_1, \\dots, Y_n]&#39;\\) are the observed responses, and \\(f_i(\\theta)\\) are the model-predicted values. Iterative Refinement via Taylor Expansion The Gauss-Newton algorithm iteratively refines an initial estimate \\(\\hat{\\theta}^{(0)}\\) using the Taylor series expansion of \\(f(\\mathbf{x}_i; \\theta)\\) about \\(\\hat{\\theta}^{(0)}\\). We start with the observation model: \\[ Y_i = f(\\mathbf{x}_i; \\theta) + \\epsilon_i. \\] By expanding \\(f(\\mathbf{x}_i; \\theta)\\) around \\(\\hat{\\theta}^{(0)}\\) and ignoring higher-order terms (assuming the remainder is small), we get: \\[ \\begin{aligned} Y_i &amp;\\approx f(\\mathbf{x}_i; \\hat{\\theta}^{(0)}) + \\sum_{j=1}^{p} \\frac{\\partial f(\\mathbf{x}_i; \\theta)}{\\partial \\theta_j} \\bigg|_{\\theta = \\hat{\\theta}^{(0)}} \\bigl(\\theta_j - \\hat{\\theta}_j^{(0)}\\bigr) + \\epsilon_i. \\end{aligned} \\] In matrix form, let \\[ \\mathbf{Y} = \\begin{bmatrix} Y_1 \\\\ \\vdots \\\\ Y_n \\end{bmatrix}, \\quad \\mathbf{f}(\\hat{\\theta}^{(0)}) = \\begin{bmatrix} f(\\mathbf{x}_1, \\hat{\\theta}^{(0)}) \\\\ \\vdots \\\\ f(\\mathbf{x}_n, \\hat{\\theta}^{(0)}) \\end{bmatrix}, \\] and define the Jacobian matrix of partial derivatives \\[ \\mathbf{F}(\\hat{\\theta}^{(0)}) = \\begin{bmatrix} \\frac{\\partial f(\\mathbf{x}_1, \\theta)}{\\partial \\theta_1} &amp; \\cdots &amp; \\frac{\\partial f(\\mathbf{x}_1, \\theta)}{\\partial \\theta_p} \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\frac{\\partial f(\\mathbf{x}_n, \\theta)}{\\partial \\theta_1} &amp; \\cdots &amp; \\frac{\\partial f(\\mathbf{x}_n, \\theta)}{\\partial \\theta_p} \\end{bmatrix}_{\\theta = \\hat{\\theta}^{(0)}}. \\] Then, \\[ \\mathbf{Y} \\approx \\mathbf{f}(\\hat{\\theta}^{(0)}) + \\mathbf{F}(\\hat{\\theta}^{(0)})\\,(\\theta - \\hat{\\theta}^{(0)}) + \\epsilon, \\] with \\(\\epsilon = [\\epsilon_1, \\dots, \\epsilon_n]&#39;\\) assumed i.i.d. with mean \\(0\\) and variance \\(\\sigma^2\\). From this linear approximation, \\[ \\mathbf{Y} - \\mathbf{f}(\\hat{\\theta}^{(0)}) \\approx \\mathbf{F}(\\hat{\\theta}^{(0)})\\,(\\theta - \\hat{\\theta}^{(0)}). \\] Solving for \\(\\theta - \\hat{\\theta}^{(0)}\\) in the least squares sense gives the Gauss increment \\(\\hat{\\delta}^{(1)}\\), so we can update: \\[ \\hat{\\theta}^{(1)} = \\hat{\\theta}^{(0)} + \\hat{\\delta}^{(1)}. \\] Step-by-Step Procedure Initialize: Start with an initial estimate \\(\\hat{\\theta}^{(0)}\\) and set \\(j = 0\\). Compute Taylor Expansion: Calculate \\(\\mathbf{f}(\\hat{\\theta}^{(j)})\\) and \\(\\mathbf{F}(\\hat{\\theta}^{(j)})\\). Solve for Increment: Treating \\(\\mathbf{Y} - \\mathbf{f}(\\hat{\\theta}^{(j)}) \\approx \\mathbf{F}(\\hat{\\theta}^{(j)})\\, (\\theta - \\hat{\\theta}^{(j)})\\) as a linear model, use Ordinary Least Squares to compute \\(\\hat{\\delta}^{(j+1)}\\). Update Parameters: Set \\(\\hat{\\theta}^{(j+1)} = \\hat{\\theta}^{(j)} + \\hat{\\delta}^{(j+1)}\\). Check for Convergence: If the convergence criteria are met (see below), stop; otherwise, return to Step 2. Estimate Variance: After convergence, we assume \\(\\epsilon \\sim (\\mathbf{0}, \\sigma^2 \\mathbf{I})\\). The variance \\(\\sigma^2\\) can be estimated by \\[ \\hat{\\sigma}^2 = \\frac{1}{n-p} \\bigl(\\mathbf{Y} - \\mathbf{f}(\\mathbf{x}; \\hat{\\theta})\\bigr)&#39; \\bigl(\\mathbf{Y} - \\mathbf{f}(\\mathbf{x}; \\hat{\\theta})\\bigr). \\] Convergence Criteria Common criteria for deciding when to stop iterating include: Objective Function Change: \\[ \\frac{\\bigl|SSE(\\hat{\\theta}^{(j+1)}) - SSE(\\hat{\\theta}^{(j)})\\bigr|}{SSE(\\hat{\\theta}^{(j)})} &lt; \\gamma_1. \\] Parameter Change: \\[ \\bigl|\\hat{\\theta}^{(j+1)} - \\hat{\\theta}^{(j)}\\bigr| &lt; \\gamma_2. \\] Residual Projection Criterion: The residuals satisfy convergence as defined in (Bates and Watts 1981). Another way to see the update step is by viewing the necessary condition for a minimum: the gradient of \\(SSE(\\theta)\\) with respect to \\(\\theta\\) should be zero. For \\[ SSE(\\theta) = \\sum_{i=1}^{n} [Y_i - f_i(\\theta)]^2, \\] the gradient is \\[ \\frac{\\partial SSE(\\theta)}{\\partial \\theta} = 2\\,\\mathbf{F}(\\theta)&#39; \\bigl[\\mathbf{Y} - \\mathbf{f}(\\theta)\\bigr]. \\] Using the Gauss-Newton update rule from iteration \\(j\\) to \\(j+1\\): \\[ \\begin{aligned} \\hat{\\theta}^{(j+1)} &amp;= \\hat{\\theta}^{(j)} + \\hat{\\delta}^{(j+1)} \\\\ &amp;= \\hat{\\theta}^{(j)} + \\bigl[\\mathbf{F}(\\hat{\\theta}^{(j)})&#39; \\,\\mathbf{F}(\\hat{\\theta}^{(j)})\\bigr]^{-1} \\,\\mathbf{F}(\\hat{\\theta}^{(j)})&#39; \\bigl[\\mathbf{Y} - \\mathbf{f}(\\hat{\\theta}^{(j)})\\bigr] \\\\ &amp;= \\hat{\\theta}^{(j)} - \\frac{1}{2} \\bigl[\\mathbf{F}(\\hat{\\theta}^{(j)})&#39; \\,\\mathbf{F}(\\hat{\\theta}^{(j)})\\bigr]^{-1} \\, \\frac{\\partial SSE(\\hat{\\theta}^{(j)})}{\\partial \\theta}, \\end{aligned} \\] where: \\(\\frac{\\partial SSE(\\hat{\\theta}^{(j)})}{\\partial \\theta}\\) is the gradient vector, pointing in the direction of steepest ascent of SSE. \\(\\bigl[\\mathbf{F}(\\hat{\\theta}^{(j)})&#39;\\mathbf{F}(\\hat{\\theta}^{(j)})\\bigr]^{-1}\\) determines the step size, controlling how far to move in the direction of improvement. The factor \\(-\\tfrac{1}{2}\\) ensures movement in the direction of steepest descent, helping to minimize the SSE. The Gauss-Newton method works well when the nonlinear model can be approximated accurately by a first-order Taylor expansion near the solution. If the assumption of near-linearity in the residual function \\(\\mathbf{r}(\\theta) = \\mathbf{Y} - \\mathbf{f}(\\theta)\\) is violated, convergence may be slow or fail altogether. In such cases, more robust methods like Levenberg-Marquardt Algorithm (which modifies Gauss-Newton with a damping parameter) are often preferred. # Load necessary libraries library(minpack.lm) # Provides nonlinear least squares functions # Define a nonlinear function (exponential model) nonlinear_model &lt;- function(theta, x) { # theta is a vector of parameters: theta[1] = A, theta[2] = B # x is the independent variable # The model is A * exp(B * x) theta[1] * exp(theta[2] * x) } # Define SSE function for clarity sse &lt;- function(theta, x, y) { # SSE = sum of squared errors between actual y and model predictions sum((y - nonlinear_model(theta, x)) ^ 2) } # Generate synthetic data set.seed(123) # for reproducibility x &lt;- seq(0, 10, length.out = 100) # 100 points from 0 to 10 true_theta &lt;- c(2, 0.3) # true parameter values y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.5) # Display the first few data points head(data.frame(x, y)) #&gt; x y #&gt; 1 0.0000000 1.719762 #&gt; 2 0.1010101 1.946445 #&gt; 3 0.2020202 2.904315 #&gt; 4 0.3030303 2.225593 #&gt; 5 0.4040404 2.322373 #&gt; 6 0.5050505 3.184724 # Gauss-Newton optimization using nls.lm (Levenberg-Marquardt as extension). # Initial guess for theta: c(1, 0.1) fit &lt;- nls.lm( par = c(1, 0.1), fn = function(theta) y - nonlinear_model(theta, x) ) # Display estimated parameters cat(&quot;Estimated parameters (A, B):\\n&quot;) #&gt; Estimated parameters (A, B): print(fit$par) #&gt; [1] 1.9934188 0.3008742 We defined the model “nonlinear_model(theta, x)” which returns Aexp(Bx). We generated synthetic data using the “true_theta” values and added random noise. We used nls.lm(...) from the minpack.lm package to fit the data: par = c(1, 0.1) is our initial parameter guess. fn = function(theta) y - nonlinear_model(theta, x) is the residual function, i.e., observed minus predicted. The fit$par provides the estimated parameters after the algorithm converges. # Visualize the data and the fitted model plot( x, y, main = &quot;Data and Fitted Curve (Gauss-Newton/Levenberg-Marquardt)&quot;, xlab = &quot;x&quot;, ylab = &quot;y&quot;, pch = 19, cex = 0.5 ) curve( nonlinear_model(fit$par, x), from = 0, to = 10, add = TRUE, col = &quot;red&quot;, lwd = 2 ) legend( &quot;topleft&quot;, legend = c(&quot;Data&quot;, &quot;Fitted Curve&quot;), pch = c(19, NA), lty = c(NA, 1), col = c(&quot;black&quot;, &quot;red&quot;) ) 6.2.1.2 Modified Gauss-Newton Algorithm The Modified Gauss-Newton Algorithm introduces a learning rate \\(\\alpha_j\\) to control step size and prevent overshooting the local minimum. The standard Gauss-Newton Algorithm assumes that the full step direction \\(\\hat{\\delta}^{(j+1)}\\) is optimal, but in practice, especially for highly nonlinear problems, it can overstep the minimum or cause numerical instability. The modification introduces a step size reduction, making it more robust. We redefine the update step as: \\[ \\hat{\\theta}^{(j+1)} = \\hat{\\theta}^{(j)} + \\alpha_j \\hat{\\delta}^{(j+1)}, \\quad 0 &lt; \\alpha_j &lt; 1, \\] where: \\(\\alpha_j\\) is a learning rate, controlling how much of the step \\(\\hat{\\delta}^{(j+1)}\\) is taken. If \\(\\alpha_j = 1\\), we recover the standard Gauss-Newton method. If \\(\\alpha_j\\) is too small, convergence is slow; if too large, the algorithm may diverge. This learning rate \\(\\alpha_j\\) allows for adaptive step size adjustments, helping prevent excessive parameter jumps and ensuring that SSE decreases at each iteration. A common approach to determine \\(\\alpha_j\\) is step halving, ensuring that each iteration moves in a direction that reduces SSE. Instead of using a fixed \\(\\alpha_j\\), we iteratively reduce the step size until SSE decreases: \\[ \\hat{\\theta}^{(j+1)} = \\hat{\\theta}^{(j)} + \\frac{1}{2^k}\\hat{\\delta}^{(j+1)}, \\] where: \\(k\\) is the smallest non-negative integer such that \\[ SSE(\\hat{\\theta}^{(j)} + \\frac{1}{2^k} \\hat{\\delta}^{(j+1)}) &lt; SSE(\\hat{\\theta}^{(j)}). \\] This means we start with the full step \\(\\hat{\\delta}^{(j+1)}\\), then try \\(\\hat{\\delta}^{(j+1)}/2\\), then \\(\\hat{\\delta}^{(j+1)}/4\\), and so on, until SSE is reduced. Algorithm for Step Halving: Compute the Gauss-Newton step \\(\\hat{\\delta}^{(j+1)}\\). Set an initial \\(\\alpha_j = 1\\). If the updated parameters \\(\\hat{\\theta}^{(j)} + \\alpha_j \\hat{\\delta}^{(j+1)}\\) increase SSE, divide \\(\\alpha_j\\) by 2. Repeat until SSE decreases. This ensures monotonic SSE reduction, preventing divergence due to an overly aggressive step. Generalized Form of the Modified Algorithm A more general form of the update rule, incorporating step size control and a matrix \\(\\mathbf{A}_j\\), is: \\[ \\hat{\\theta}^{(j+1)} = \\hat{\\theta}^{(j)} - \\alpha_j \\mathbf{A}_j \\frac{\\partial Q(\\hat{\\theta}^{(j)})}{\\partial \\theta}, \\] where: \\(\\mathbf{A}_j\\) is a positive definite matrix that preconditions the update direction. \\(\\alpha_j\\) is the learning rate. \\(\\frac{\\partial Q(\\hat{\\theta}^{(j)})}{\\partial \\theta}\\) is the gradient of the objective function \\(Q(\\theta)\\), typically SSE in nonlinear regression. Connection to the Modified Gauss-Newton Algorithm The Modified Gauss-Newton Algorithm fits this framework: \\[ \\hat{\\theta}^{(j+1)} = \\hat{\\theta}^{(j)} - \\alpha_j [\\mathbf{F}(\\hat{\\theta}^{(j)})&#39; \\mathbf{F}(\\hat{\\theta}^{(j)})]^{-1} \\frac{\\partial SSE(\\hat{\\theta}^{(j)})}{\\partial \\theta}. \\] Here, we recognize: Objective function: \\(Q = SSE\\). Preconditioner matrix: \\([\\mathbf{F}(\\hat{\\theta}^{(j)})&#39; \\mathbf{F}(\\hat{\\theta}^{(j)})]^{-1} = \\mathbf{A}\\). Thus, the standard Gauss-Newton method can be interpreted as a special case of this broader optimization framework, with a preconditioned gradient descent approach. # Load required library library(minpack.lm) # Define a nonlinear function (exponential model) nonlinear_model &lt;- function(theta, x) { theta[1] * exp(theta[2] * x) } # Define the Sum of Squared Errors function sse &lt;- function(theta, x, y) { sum((y - nonlinear_model(theta, x)) ^ 2) } # Generate synthetic data set.seed(123) x &lt;- seq(0, 10, length.out = 100) true_theta &lt;- c(2, 0.3) y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.5) # Gauss-Newton with Step Halving gauss_newton_modified &lt;- function(theta_init, x, y, tol = 1e-6, max_iter = 100) { theta &lt;- theta_init for (j in 1:max_iter) { # Compute Jacobian matrix numerically epsilon &lt;- 1e-6 F_matrix &lt;- matrix(0, nrow = length(y), ncol = length(theta)) for (p in 1:length(theta)) { theta_perturb &lt;- theta theta_perturb[p] &lt;- theta[p] + epsilon F_matrix[, p] &lt;- (nonlinear_model(theta_perturb, x)-nonlinear_model(theta, x))/epsilon } # Compute residuals residuals &lt;- y - nonlinear_model(theta, x) # Compute Gauss-Newton step delta &lt;- solve(t(F_matrix) %*% F_matrix) %*% t(F_matrix) %*% residuals # Step Halving Implementation alpha &lt;- 1 k &lt;- 0 while (sse(theta + alpha * delta, x, y) &gt;= sse(theta, x, y) &amp;&amp; k &lt; 10) { alpha &lt;- alpha / 2 k &lt;- k + 1 } # Update theta theta_new &lt;- theta + alpha * delta # Check for convergence if (sum(abs(theta_new - theta)) &lt; tol) { break } theta &lt;- theta_new } return(theta) } # Run Modified Gauss-Newton Algorithm theta_init &lt;- c(1, 0.1) # Initial parameter guess estimated_theta &lt;- gauss_newton_modified(theta_init, x, y) # Display estimated parameters cat(&quot;Estimated parameters (A, B) with Modified Gauss-Newton:\\n&quot;) #&gt; Estimated parameters (A, B) with Modified Gauss-Newton: print(estimated_theta) #&gt; [,1] #&gt; [1,] 1.9934188 #&gt; [2,] 0.3008742 # Plot data and fitted curve plot( x, y, main = &quot;Modified Gauss-Newton: Data &amp; Fitted Curve&quot;, pch = 19, cex = 0.5, xlab = &quot;x&quot;, ylab = &quot;y&quot; ) curve( nonlinear_model(estimated_theta, x), from = 0, to = 10, add = TRUE, col = &quot;red&quot;, lwd = 2 ) legend( &quot;topleft&quot;, legend = c(&quot;Data&quot;, &quot;Fitted Curve&quot;), pch = c(19, NA), lty = c(NA, 1), col = c(&quot;black&quot;, &quot;red&quot;) ) 6.2.1.3 Steepest Descent (Gradient Descent) The Steepest Descent Method, commonly known as Gradient Descent, is a fundamental iterative optimization technique used for finding parameter estimates that minimize an objective function \\(\\mathbf{Q}(\\theta)\\). It is a special case of the Modified Gauss-Newton Algorithm, where the preconditioning matrix \\(\\mathbf{A}_j\\) is replaced by the identity matrix. The update rule is given by: \\[ \\hat{\\theta}^{(j+1)} = \\hat{\\theta}^{(j)} - \\alpha_j \\mathbf{I}_{p \\times p}\\frac{\\partial \\mathbf{Q}(\\hat{\\theta}^{(j)})}{\\partial \\theta}, \\] where: \\(\\alpha_j\\) is the learning rate, determining the step size. \\(\\mathbf{I}_{p \\times p}\\) is the identity matrix, meaning updates occur in the direction of the negative gradient. \\(\\frac{\\partial \\mathbf{Q}(\\hat{\\theta}^{(j)})}{\\partial \\theta}\\) is the gradient vector, which provides the direction of steepest ascent; its negation ensures movement toward the minimum. Characteristics of Steepest Descent Slow to converge: The algorithm moves in the direction of the gradient but does not take into account curvature, which may result in slow convergence, especially in ill-conditioned problems. Moves rapidly initially: The method can exhibit fast initial progress, but as it approaches the minimum, step sizes become small, leading to slow convergence. Useful for initialization: Due to its simplicity and ease of implementation, it is often used to obtain starting values for more advanced methods like Newton’s method or Gauss-Newton Algorithm. Comparison with Gauss-Newton Method Update Rule Advantages Disadvantages Steepest Descent \\(\\hat{\\theta}^{(j+1)} = \\hat{\\theta}^{(j)} - \\alpha_j \\mathbf{I} \\nabla Q(\\theta)\\) Simple, requires only first derivatives Slow convergence, sensitive to \\(\\alpha_j\\) Gauss-Newton \\(\\hat{\\theta}^{(j+1)} = \\hat{\\theta}^{(j)} - \\mathbf{H}^{-1} \\nabla Q(\\theta)\\) Uses curvature, faster near solution Requires Jacobian computation, may diverge The key difference is that Steepest Descent only considers the gradient direction, while Gauss-Newton and Newton’s method incorporate curvature information. Choosing the Learning Rate \\(\\alpha_j\\) A well-chosen learning rate is crucial for the success of gradient descent: Too large: The algorithm may overshoot the minimum and diverge. Too small: Convergence is very slow. Adaptive strategies: Fixed step size: \\(\\alpha_j\\) is constant. Step size decay: \\(\\alpha_j\\) decreases over iterations (e.g., \\(\\alpha_j = \\frac{1}{j}\\)). Line search: Choose \\(\\alpha_j\\) by minimizing \\(\\mathbf{Q}(\\theta^{(j+1)})\\) along the gradient direction. A common approach is backtracking line search, where \\(\\alpha_j\\) is reduced iteratively until a decrease in \\(\\mathbf{Q}(\\theta)\\) is observed. # Load necessary libraries library(ggplot2) # Define the nonlinear function (exponential model) nonlinear_model &lt;- function(theta, x) { theta[1] * exp(theta[2] * x) } # Define the Sum of Squared Errors function sse &lt;- function(theta, x, y) { sum((y - nonlinear_model(theta, x)) ^ 2) } # Define Gradient of SSE w.r.t theta (computed numerically) gradient_sse &lt;- function(theta, x, y) { n &lt;- length(y) residuals &lt;- y - nonlinear_model(theta, x) # Partial derivative w.r.t theta_1 grad_1 &lt;- -2 * sum(residuals * exp(theta[2] * x)) # Partial derivative w.r.t theta_2 grad_2 &lt;- -2 * sum(residuals * theta[1] * x * exp(theta[2] * x)) return(c(grad_1, grad_2)) } # Generate synthetic data set.seed(123) x &lt;- seq(0, 10, length.out = 100) true_theta &lt;- c(2, 0.3) y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.5) # Safe Gradient Descent Implementation gradient_descent &lt;- function(theta_init, x, y, alpha = 0.01, tol = 1e-6, max_iter = 500) { theta &lt;- theta_init sse_values &lt;- numeric(max_iter) for (j in 1:max_iter) { grad &lt;- gradient_sse(theta, x, y) # Check for NaN or Inf values in the gradient (prevents divergence) if (any(is.na(grad)) || any(is.infinite(grad))) { cat(&quot;Numerical instability detected at iteration&quot;, j, &quot;\\n&quot;) break } # Update step theta_new &lt;- theta - alpha * grad sse_values[j] &lt;- sse(theta_new, x, y) # Check for convergence if (!is.finite(sse_values[j])) { cat(&quot;Divergence detected at iteration&quot;, j, &quot;\\n&quot;) break } if (sum(abs(theta_new - theta)) &lt; tol) { cat(&quot;Converged in&quot;, j, &quot;iterations.\\n&quot;) return(list(theta = theta_new, sse_values = sse_values[1:j])) } theta &lt;- theta_new } return(list(theta = theta, sse_values = sse_values)) } # Run Gradient Descent with a Safe Implementation theta_init &lt;- c(1, 0.1) # Initial guess alpha &lt;- 0.001 # Learning rate result &lt;- gradient_descent(theta_init, x, y, alpha) #&gt; Divergence detected at iteration 1 # Extract results estimated_theta &lt;- result$theta sse_values &lt;- result$sse_values # Display estimated parameters cat(&quot;Estimated parameters (A, B) using Gradient Descent:\\n&quot;) #&gt; Estimated parameters (A, B) using Gradient Descent: print(estimated_theta) #&gt; [1] 1.0 0.1 # Plot convergence of SSE over iterations # Ensure sse_values has valid data sse_df &lt;- data.frame( Iteration = seq_along(sse_values), SSE = sse_values ) # Generate improved plot using ggplot() ggplot(sse_df, aes(x = Iteration, y = SSE)) + geom_line(color = &quot;blue&quot;, linewidth = 1) + labs( title = &quot;Gradient Descent Convergence&quot;, x = &quot;Iteration&quot;, y = &quot;SSE&quot; ) + theme_minimal() Steepest Descent (Gradient Descent) moves in the direction of steepest descent, which can lead to zigzagging behavior. Slow convergence occurs when the curvature of the function varies significantly across dimensions. Learning rate tuning is critical: If too large, the algorithm diverges. If too small, progress is very slow. Useful for initialization: It is often used to get close to the optimal solution before switching to more advanced methods like Gauss-Newton Algorithm or Newton’s method. Several advanced techniques improve the performance of steepest descent: Momentum Gradient Descent: Adds a momentum term to smooth updates, reducing oscillations. Adaptive Learning Rates: AdaGrad: Adjusts \\(\\alpha_j\\) per parameter based on historical gradients. RMSprop: Uses a moving average of past gradients to scale updates. Adam (Adaptive Moment Estimation): Combines momentum and adaptive learning rates. In practice, Adam is widely used in machine learning and deep learning, while Newton-based methods (including Gauss-Newton) are preferred for nonlinear regression. 6.2.1.4 Levenberg-Marquardt Algorithm The Levenberg-Marquardt Algorithm is a widely used optimization method for solving nonlinear least squares problems. It is an adaptive technique that blends the Gauss-Newton Algorithm and Steepest Descent (Gradient Descent), dynamically switching between them based on problem conditions. The update rule is: \\[ \\hat{\\theta}^{(j+1)} = \\hat{\\theta}^{(j)} - \\alpha_j [\\mathbf{F}(\\hat{\\theta}^{(j)})&#39; \\mathbf{F}(\\hat{\\theta}^{(j)}) + \\tau \\mathbf{I}_{p \\times p}]\\frac{\\partial \\mathbf{Q}(\\hat{\\theta}^{(j)})}{\\partial \\theta} \\] where: \\(\\tau\\) is the damping parameter, controlling whether the step behaves like Gauss-Newton Algorithm or Steepest Descent (Gradient Descent). \\(\\mathbf{I}_{p \\times p}\\) is the identity matrix, ensuring numerical stability. \\(\\mathbf{F}(\\hat{\\theta}^{(j)})\\) is the Jacobian matrix of partial derivatives. \\(\\frac{\\partial \\mathbf{Q}(\\hat{\\theta}^{(j)})}{\\partial \\theta}\\) is the gradient vector. \\(\\alpha_j\\) is the learning rate, determining step size. The Levenberg-Marquardt algorithm is particularly useful when the Jacobian matrix \\(\\mathbf{F}(\\hat{\\theta}^{(j)})\\) is nearly singular, meaning that Gauss-Newton Algorithm alone may fail. When \\(\\tau\\) is large, the method behaves like Steepest Descent, ensuring stability. When \\(\\tau\\) is small, it behaves like Gauss-Newton, accelerating convergence. Adaptive control of \\(\\tau\\): If \\(SSE(\\hat{\\theta}^{(j+1)}) &lt; SSE(\\hat{\\theta}^{(j)})\\), reduce \\(\\tau\\): \\[ \\tau \\gets \\tau / 10 \\] Otherwise, increase \\(\\tau\\) to stabilize: \\[ \\tau \\gets 10\\tau \\] This adjustment ensures that the algorithm moves efficiently while avoiding instability. # Load required libraries library(minpack.lm) library(ggplot2) # Define a nonlinear function (exponential model) nonlinear_model &lt;- function(theta, x) { theta[1] * exp(theta[2] * x) } # Define SSE function sse &lt;- function(theta, x, y) { sum((y - nonlinear_model(theta, x)) ^ 2) } # Generate synthetic data set.seed(123) x &lt;- seq(0, 10, length.out = 100) true_theta &lt;- c(2, 0.3) y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.5) # Robust Levenberg-Marquardt Optimization Implementation levenberg_marquardt &lt;- function(theta_init, x, y, tol = 1e-6, max_iter = 500, tau_init = 1) { theta &lt;- theta_init tau &lt;- tau_init lambda &lt;- 1e-8 # Small regularization term sse_values &lt;- numeric(max_iter) for (j in 1:max_iter) { # Compute Jacobian matrix numerically epsilon &lt;- 1e-6 F_matrix &lt;- matrix(0, nrow = length(y), ncol = length(theta)) for (p in 1:length(theta)) { theta_perturb &lt;- theta theta_perturb[p] &lt;- theta[p] + epsilon F_matrix[, p] &lt;- (nonlinear_model(theta_perturb, x) - nonlinear_model(theta, x)) / epsilon } # Compute residuals residuals &lt;- y - nonlinear_model(theta, x) # Compute Levenberg-Marquardt update A &lt;- t(F_matrix) %*% F_matrix + tau * diag(length(theta)) + lambda * diag(length(theta)) # Regularized A delta &lt;- tryCatch( solve(A) %*% t(F_matrix) %*% residuals, error = function(e) { cat(&quot;Singular matrix detected at iteration&quot;, j, &quot;- Increasing tau\\n&quot;) tau &lt;&lt;- tau * 10 # Increase tau to stabilize # Return zero delta to avoid NaN updates return(rep(0, length(theta))) } ) theta_new &lt;- theta + delta # Compute new SSE sse_values[j] &lt;- sse(theta_new, x, y) # Adjust tau dynamically if (sse_values[j] &lt; sse(theta, x, y)) { # Reduce tau but prevent it from going too low tau &lt;- max(tau / 10, 1e-8) } else { tau &lt;- tau * 10 # Increase tau if SSE increases } # Check for convergence if (sum(abs(delta)) &lt; tol) { cat(&quot;Converged in&quot;, j, &quot;iterations.\\n&quot;) return(list(theta = theta_new, sse_values = sse_values[1:j])) } theta &lt;- theta_new } return(list(theta = theta, sse_values = sse_values)) } # Run Levenberg-Marquardt theta_init &lt;- c(1, 0.1) # Initial guess result &lt;- levenberg_marquardt(theta_init, x, y) #&gt; Singular matrix detected at iteration 11 - Increasing tau #&gt; Converged in 11 iterations. # Extract results estimated_theta &lt;- result$theta sse_values &lt;- result$sse_values # Display estimated parameters cat(&quot;Estimated parameters (A, B) using Levenberg-Marquardt:\\n&quot;) #&gt; Estimated parameters (A, B) using Levenberg-Marquardt: print(estimated_theta) #&gt; [,1] #&gt; [1,] -6.473440e-09 #&gt; [2,] 1.120637e+01 # Plot convergence of SSE over iterations sse_df &lt;- data.frame(Iteration = seq_along(sse_values), SSE = sse_values) ggplot(sse_df, aes(x = Iteration, y = SSE)) + geom_line(color = &quot;blue&quot;, linewidth = 1) + labs(title = &quot;Levenberg-Marquardt Convergence&quot;, x = &quot;Iteration&quot;, y = &quot;SSE&quot;) + theme_minimal() Early Stability (Flat SSE) The SSE remains near zero for the first few iterations, which suggests that the algorithm is initially behaving stably. This might indicate that the initial parameter guess is reasonable, or that the updates are too small to significantly affect SSE. Sudden Explosion in SSE (Iteration ~8-9) The sharp spike in SSE at iteration 9 indicates a numerical instability or divergence in the optimization process. This could be due to: An ill-conditioned Jacobian matrix: The step direction is poorly estimated, leading to an unstable jump. A sudden large update (delta): The damping parameter (tau) might have been reduced too aggressively, causing an uncontrolled step. Floating-point issues: If A becomes nearly singular, solving A \\ delta = residuals may produce excessively large values. Return to Stability (After Iteration 9) The SSE immediately returns to a low value after the spike, which suggests that the damping parameter (tau) might have been increased after detecting instability. This is consistent with the adaptive nature of Levenberg-Marquardt: If a step leads to a bad SSE increase, the algorithm increases tau to make the next step more conservative. If the next step stabilizes, tau may be reduced again. 6.2.1.5 Newton-Raphson Algorithm The Newton-Raphson method is a second-order optimization technique used for nonlinear least squares problems. Unlike first-order methods (such as Steepest Descent (Gradient Descent) and Gauss-Newton Algorithm), Newton-Raphson uses both first and second derivatives of the objective function for faster convergence. The update rule is: \\[ \\hat{\\theta}^{(j+1)} = \\hat{\\theta}^{(j)} - \\alpha_j \\left[\\frac{\\partial^2 Q(\\hat{\\theta}^{(j)})}{\\partial \\theta \\partial \\theta&#39;}\\right]^{-1} \\frac{\\partial Q(\\hat{\\theta}^{(j)})}{\\partial \\theta} \\] where: \\(\\frac{\\partial Q(\\hat{\\theta}^{(j)})}{\\partial \\theta}\\) is the gradient vector (first derivative of the objective function). \\(\\frac{\\partial^2 Q(\\hat{\\theta}^{(j)})}{\\partial \\theta \\partial \\theta&#39;}\\) is the Hessian matrix (second derivative of the objective function). \\(\\alpha_j\\) is the learning rate, controlling step size. The Hessian matrix in nonlinear least squares problems is: \\[ \\frac{\\partial^2 Q(\\hat{\\theta}^{(j)})}{\\partial \\theta \\partial \\theta&#39;} = 2 \\mathbf{F}(\\hat{\\theta}^{(j)})&#39; \\mathbf{F}(\\hat{\\theta}^{(j)}) - 2\\sum_{i=1}^{n} [Y_i - f(x_i;\\theta)] \\frac{\\partial^2 f(x_i;\\theta)}{\\partial \\theta \\partial \\theta&#39;} \\] where: The first term \\(2 \\mathbf{F}(\\hat{\\theta}^{(j)})&#39; \\mathbf{F}(\\hat{\\theta}^{(j)})\\) is the same as in the Gauss-Newton Algorithm. The second term \\(-2\\sum_{i=1}^{n} [Y_i - f(x_i;\\theta)] \\frac{\\partial^2 f(x_i;\\theta)}{\\partial \\theta \\partial \\theta&#39;}\\) contains second-order derivatives. Key Observations Gauss-Newton vs. Newton-Raphson: Gauss-Newton approximates the Hessian by ignoring the second term. Newton-Raphson explicitly incorporates second-order derivatives, making it more precise but computationally expensive. Challenges: The Hessian matrix may be singular, making it impossible to invert. Computing second derivatives is often difficult for complex functions. # Load required libraries library(ggplot2) # Define a nonlinear function (exponential model) nonlinear_model &lt;- function(theta, x) { theta[1] * exp(theta[2] * x) } # Define SSE function sse &lt;- function(theta, x, y) { sum((y - nonlinear_model(theta, x)) ^ 2) } # Compute Gradient (First Derivative) of SSE gradient_sse &lt;- function(theta, x, y) { residuals &lt;- y - nonlinear_model(theta, x) # Partial derivative w.r.t theta_1 grad_1 &lt;- -2 * sum(residuals * exp(theta[2] * x)) # Partial derivative w.r.t theta_2 grad_2 &lt;- -2 * sum(residuals * theta[1] * x * exp(theta[2] * x)) return(c(grad_1, grad_2)) } # Compute Hessian (Second Derivative) of SSE hessian_sse &lt;- function(theta, x, y) { residuals &lt;- y - nonlinear_model(theta, x) # Compute second derivatives H_11 &lt;- 2 * sum(exp(2 * theta[2] * x)) H_12 &lt;- 2 * sum(x * exp(2 * theta[2] * x) * theta[1]) H_21 &lt;- H_12 term1 &lt;- 2 * sum((x ^ 2) * exp(2 * theta[2] * x) * theta[1] ^ 2) term2 &lt;- 2 * sum(residuals * (x ^ 2) * exp(theta[2] * x)) H_22 &lt;- term1 - term2 return(matrix( c(H_11, H_12, H_21, H_22), nrow = 2, byrow = TRUE )) } # Generate synthetic data set.seed(123) x &lt;- seq(0, 10, length.out = 100) true_theta &lt;- c(2, 0.3) y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.5) # Newton-Raphson Optimization Implementation newton_raphson &lt;- function(theta_init, x, y, tol = 1e-6, max_iter = 500) { theta &lt;- theta_init sse_values &lt;- numeric(max_iter) for (j in 1:max_iter) { grad &lt;- gradient_sse(theta, x, y) hessian &lt;- hessian_sse(theta, x, y) # Check if Hessian is invertible if (det(hessian) == 0) { cat(&quot;Hessian is singular at iteration&quot;, j, &quot;- Using identity matrix instead.\\n&quot;) # Replace with identity matrix if singular hessian &lt;- diag(length(theta)) } # Compute Newton update delta &lt;- solve(hessian) %*% grad theta_new &lt;- theta - delta sse_values[j] &lt;- sse(theta_new, x, y) # Check for convergence if (sum(abs(delta)) &lt; tol) { cat(&quot;Converged in&quot;, j, &quot;iterations.\\n&quot;) return(list(theta = theta_new, sse_values = sse_values[1:j])) } theta &lt;- theta_new } return(list(theta = theta, sse_values = sse_values)) } # Run Newton-Raphson theta_init &lt;- c(1, 0.1) # Initial guess result &lt;- newton_raphson(theta_init, x, y) #&gt; Converged in 222 iterations. # Extract results estimated_theta &lt;- result$theta sse_values &lt;- result$sse_values # Display estimated parameters cat(&quot;Estimated parameters (A, B) using Newton-Raphson:\\n&quot;) #&gt; Estimated parameters (A, B) using Newton-Raphson: print(estimated_theta) #&gt; [,1] #&gt; [1,] 1.9934188 #&gt; [2,] 0.3008742 # Plot convergence of SSE over iterations sse_df &lt;- data.frame(Iteration = seq_along(sse_values), SSE = sse_values) ggplot(sse_df, aes(x = Iteration, y = SSE)) + geom_line(color = &quot;blue&quot;, size = 1) + labs(title = &quot;Newton-Raphson Convergence&quot;, x = &quot;Iteration&quot;, y = &quot;SSE&quot;) + theme_minimal() 6.2.1.6 Quasi-Newton Method The Quasi-Newton method is an optimization technique that approximates Newton’s method without requiring explicit computation of the Hessian matrix. Instead, it iteratively constructs an approximation \\(\\mathbf{H}_j\\) to the Hessian based on the first derivative information. The update rule is: \\[ \\hat{\\theta}^{(j+1)} = \\hat{\\theta}^{(j)} - \\alpha_j \\mathbf{H}_j^{-1}\\frac{\\partial \\mathbf{Q}(\\hat{\\theta}^{(j)})}{\\partial \\theta} \\] where: \\(\\mathbf{H}_j\\) is a symmetric positive definite approximation to the Hessian matrix. As \\(j \\to \\infty\\), \\(\\mathbf{H}_j\\) gets closer to the true Hessian. \\(\\frac{\\partial Q(\\hat{\\theta}^{(j)})}{\\partial \\theta}\\) is the gradient vector. \\(\\alpha_j\\) is the learning rate, controlling step size. Why Use Quasi-Newton Instead of Newton-Raphson Method? Newton-Raphson requires computing the Hessian matrix explicitly, which is computationally expensive and may be singular. Quasi-Newton avoids computing the Hessian directly by approximating it iteratively. Among first-order methods (which only require gradients, not Hessians), Quasi-Newton methods perform best. Hessian Approximation Instead of directly computing the Hessian \\(\\mathbf{H}_j\\), Quasi-Newton methods update an approximation \\(\\mathbf{H}_j\\) iteratively. One of the most widely used formulas is the Broyden-Fletcher-Goldfarb-Shanno (BFGS) update: \\[ \\mathbf{H}_{j+1} = \\mathbf{H}_j + \\frac{(\\mathbf{s}_j \\mathbf{s}_j&#39;)}{\\mathbf{s}_j&#39; \\mathbf{y}_j} - \\frac{\\mathbf{H}_j \\mathbf{y}_j \\mathbf{y}_j&#39; \\mathbf{H}_j}{\\mathbf{y}_j&#39; \\mathbf{H}_j \\mathbf{y}_j} \\] where: \\(\\mathbf{s}_j = \\hat{\\theta}^{(j+1)} - \\hat{\\theta}^{(j)}\\) (change in parameters). \\(\\mathbf{y}_j = \\nabla Q(\\hat{\\theta}^{(j+1)}) - \\nabla Q(\\hat{\\theta}^{(j)})\\) (change in gradient). \\(\\mathbf{H}_j\\) is the current inverse Hessian approximation. # Load required libraries library(ggplot2) # Define a nonlinear function (exponential model) nonlinear_model &lt;- function(theta, x) { theta[1] * exp(theta[2] * x) } # Define SSE function sse &lt;- function(theta, x, y) { sum((y - nonlinear_model(theta, x))^2) } # Generate synthetic data set.seed(123) x &lt;- seq(0, 10, length.out = 100) true_theta &lt;- c(2, 0.3) y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.5) # Run BFGS Optimization using `optim()` theta_init &lt;- c(1, 0.1) # Initial guess result &lt;- optim( par = theta_init, fn = function(theta) sse(theta, x, y), # Minimize SSE method = &quot;BFGS&quot;, control = list(trace = 0) # Suppress optimization progress # control = list(trace = 1, REPORT = 1) # Print optimization progress ) # Extract results estimated_theta &lt;- result$par sse_final &lt;- result$value convergence_status &lt;- result$convergence # 0 means successful convergence # Display estimated parameters cat(&quot;\\n=== Optimization Results ===\\n&quot;) #&gt; #&gt; === Optimization Results === cat(&quot;Estimated parameters (A, B) using Quasi-Newton BFGS:\\n&quot;) #&gt; Estimated parameters (A, B) using Quasi-Newton BFGS: print(estimated_theta) #&gt; [1] 1.9954216 0.3007569 # Display final SSE cat(&quot;\\nFinal SSE:&quot;, sse_final, &quot;\\n&quot;) #&gt; #&gt; Final SSE: 20.3227 6.2.1.7 Trust-Region Reflective Algorithm The Trust-Region Reflective (TRR) algorithm is an optimization technique used for nonlinear least squares problems. Unlike Newton’s method and gradient-based approaches, TRR dynamically restricts updates to a trust region, ensuring stability and preventing overshooting. The goal is to minimize the objective function \\(Q(\\theta)\\) (e.g., Sum of Squared Errors, SSE): \\[ \\hat{\\theta} = \\arg\\min_{\\theta} Q(\\theta) \\] Instead of taking a full Newton step, TRR solves the following quadratic subproblem: \\[ \\min_{\\delta} m_j(\\delta) = Q(\\hat{\\theta}^{(j)}) + \\nabla Q(\\hat{\\theta}^{(j)})&#39; \\delta + \\frac{1}{2} \\delta&#39; \\mathbf{H}_j \\delta \\] subject to: \\[ \\|\\delta\\| \\leq \\Delta_j \\] where: \\(\\mathbf{H}_j\\) is an approximation of the Hessian matrix. \\(\\nabla Q(\\hat{\\theta}^{(j)})\\) is the gradient vector. \\(\\Delta_j\\) is the trust-region radius, which is adjusted dynamically. Trust-Region Adjustments The algorithm modifies the step size dynamically based on the ratio \\(\\rho_j\\): \\[ \\rho_j = \\frac{Q(\\hat{\\theta}^{(j)}) - Q(\\hat{\\theta}^{(j)} + \\delta)}{m_j(0) - m_j(\\delta)} \\] If \\(\\rho_j &gt; 0.75\\) and \\(\\|\\delta\\| = \\Delta_j\\), then expand the trust region: \\[ \\Delta_{j+1} = 2 \\Delta_j \\] If \\(\\rho_j &lt; 0.25\\), shrink the trust region: \\[ \\Delta_{j+1} = \\frac{1}{2} \\Delta_j \\] If \\(\\rho_j &gt; 0\\), accept the step; otherwise, reject it. If a step violates a constraint, it is reflected back into the feasible region: \\[ \\hat{\\theta}^{(j+1)} = \\max(\\hat{\\theta}^{(j)} + \\delta, \\theta_{\\min}) \\] This ensures that the optimization respects parameter bounds. # Load required libraries library(ggplot2) # Define a nonlinear function (exponential model) nonlinear_model &lt;- function(theta, x) { theta[1] * exp(theta[2] * x) } # Define SSE function sse &lt;- function(theta, x, y) { sum((y - nonlinear_model(theta, x)) ^ 2) } # Compute Gradient (First Derivative) of SSE gradient_sse &lt;- function(theta, x, y) { residuals &lt;- y - nonlinear_model(theta, x) # Partial derivative w.r.t theta_1 grad_1 &lt;- -2 * sum(residuals * exp(theta[2] * x)) # Partial derivative w.r.t theta_2 grad_2 &lt;- -2 * sum(residuals * theta[1] * x * exp(theta[2] * x)) return(c(grad_1, grad_2)) } # Compute Hessian Approximation of SSE hessian_sse &lt;- function(theta, x, y) { residuals &lt;- y - nonlinear_model(theta, x) # Compute second derivatives H_11 &lt;- 2 * sum(exp(2 * theta[2] * x)) H_12 &lt;- 2 * sum(x * exp(2 * theta[2] * x) * theta[1]) H_21 &lt;- H_12 term1 &lt;- 2 * sum((x ^ 2) * exp(2 * theta[2] * x) * theta[1] ^ 2) term2 &lt;- 2 * sum(residuals * (x ^ 2) * exp(theta[2] * x)) H_22 &lt;- term1 - term2 return(matrix( c(H_11, H_12, H_21, H_22), nrow = 2, byrow = TRUE )) } # Generate synthetic data set.seed(123) x &lt;- seq(0, 10, length.out = 100) true_theta &lt;- c(2, 0.3) y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.5) # Manual Trust-Region Reflective Optimization Implementation trust_region_reflective &lt;- function(theta_init, x, y, tol = 1e-6, max_iter = 500, delta_max = 1.0) { theta &lt;- theta_init delta_j &lt;- 0.5 # Initial trust-region size n &lt;- length(theta) sse_values &lt;- numeric(max_iter) for (j in 1:max_iter) { grad &lt;- gradient_sse(theta, x, y) hessian &lt;- hessian_sse(theta, x, y) # Check if Hessian is invertible if (det(hessian) == 0) { cat(&quot;Hessian is singular at iteration&quot;, j, &quot;- Using identity matrix instead.\\n&quot;) hessian &lt;- diag(n) # Replace with identity matrix if singular } # Compute Newton step delta_full &lt;- -solve(hessian) %*% grad # Apply trust-region constraint if (sqrt(sum(delta_full ^ 2)) &gt; delta_j) { delta &lt;- (delta_j / sqrt(sum(delta_full ^ 2))) * delta_full # Scale step } else { delta &lt;- delta_full } # Compute new theta and ensure it respects constraints theta_new &lt;- pmax(theta + delta, c(0,-Inf)) # Reflect to lower bound sse_new &lt;- sse(theta_new, x, y) # Compute agreement ratio (rho_j) predicted_reduction &lt;- -t(grad) %*% delta - 0.5 * t(delta) %*% hessian %*% delta actual_reduction &lt;- sse(theta, x, y) - sse_new rho_j &lt;- actual_reduction / predicted_reduction # Adjust trust region size if (rho_j &lt; 0.25) { delta_j &lt;- max(delta_j / 2, 1e-4) # Shrink } else if (rho_j &gt; 0.75 &amp;&amp; sqrt(sum(delta ^ 2)) == delta_j) { delta_j &lt;- min(2 * delta_j, delta_max) # Expand } # Accept or reject step if (rho_j &gt; 0) { theta &lt;- theta_new # Accept step } else { cat(&quot;Step rejected at iteration&quot;, j, &quot;\\n&quot;) } sse_values[j] &lt;- sse(theta, x, y) # Check for convergence if (sum(abs(delta)) &lt; tol) { cat(&quot;Converged in&quot;, j, &quot;iterations.\\n&quot;) return(list(theta = theta, sse_values = sse_values[1:j])) } } return(list(theta = theta, sse_values = sse_values)) } # Run Manual Trust-Region Reflective Algorithm theta_init &lt;- c(1, 0.1) # Initial guess result &lt;- trust_region_reflective(theta_init, x, y) # Extract results estimated_theta &lt;- result$theta sse_values &lt;- result$sse_values # Plot convergence of SSE over iterations sse_df &lt;- data.frame(Iteration = seq_along(sse_values), SSE = sse_values) ggplot(sse_df, aes(x = Iteration, y = SSE)) + geom_line(color = &quot;blue&quot;, size = 1) + labs(title = &quot;Trust-Region Reflective Convergence&quot;, x = &quot;Iteration&quot;, y = &quot;SSE&quot;) + theme_minimal() 6.2.2 Derivative-Free 6.2.2.1 Secant Method The Secant Method is a root-finding algorithm that approximates the derivative using finite differences, making it a derivative-free alternative to Newton’s method. It is particularly useful when the exact gradient (or Jacobian in the case of optimization problems) is unavailable or expensive to compute. In nonlinear optimization, we apply the Secant Method to iteratively refine parameter estimates without explicitly computing second-order derivatives. In one dimension, the Secant Method approximates the derivative as: \\[ f&#39;(\\theta) \\approx \\frac{f(\\theta_{j}) - f(\\theta_{j-1})}{\\theta_{j} - \\theta_{j-1}}. \\] Using this approximation, the update step in the Secant Method follows: \\[ \\theta_{j+1} = \\theta_j - f(\\theta_j) \\frac{\\theta_j - \\theta_{j-1}}{f(\\theta_j) - f(\\theta_{j-1})}. \\] Instead of computing the exact derivative (as in Newton’s method), we use the difference between the last two iterates to approximate it. This makes the Secant Method more efficient in cases where gradient computation is expensive or infeasible. In higher dimensions, the Secant Method extends to an approximate Quasi-Newton Method, often referred to as Broyden’s Method. We iteratively approximate the inverse Hessian matrix using past updates. The update formula for a vector-valued function \\(F(\\theta)\\) is: \\[ \\theta^{(j+1)} = \\theta^{(j)} - \\mathbf{B}^{(j)} F(\\theta^{(j)}), \\] where \\(\\mathbf{B}^{(j)}\\) is an approximation of the inverse Jacobian matrix, updated at each step using: \\[ \\mathbf{B}^{(j+1)} = \\mathbf{B}^{(j)} + \\frac{(\\Delta \\theta^{(j)} - \\mathbf{B}^{(j)} \\Delta F^{(j)}) (\\Delta \\theta^{(j)})&#39;}{(\\Delta \\theta^{(j)})&#39; \\Delta F^{(j)}}, \\] where: \\(\\Delta \\theta^{(j)} = \\theta^{(j+1)} - \\theta^{(j)}\\), \\(\\Delta F^{(j)} = F(\\theta^{(j+1)}) - F(\\theta^{(j)})\\). This secant-based update approximates the behavior of the true Jacobian inverse, reducing computational cost compared to full Newton’s method. Algorithm: Secant Method for Nonlinear Optimization The Secant Method for nonlinear optimization follows these steps: Initialize parameters \\(\\theta^{(0)}\\) and \\(\\theta^{(1)}\\) (two starting points). Compute the function values \\(F(\\theta^{(0)})\\) and \\(F(\\theta^{(1)})\\). Use the Secant update formula to compute the next iterate \\(\\theta^{(j+1)}\\). Update the approximate inverse Jacobian \\(\\mathbf{B}^{(j)}\\). Repeat until convergence. # Load required libraries library(numDeriv) # Define a nonlinear function (logistic model) nonlinear_model &lt;- function(theta, x) { return(theta[1] / (1 + exp(-theta[2] * (x - theta[3])))) } # Define the Sum of Squared Errors (SSE) function sse &lt;- function(theta, x, y) { return(sum((y - nonlinear_model(theta, x)) ^ 2)) } # Generate synthetic data set.seed(123) x &lt;- seq(-5, 5, length.out = 100) true_theta &lt;- c(4, 1.5, 0) # True parameters (A, B, C) y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.3) # Improved Secant Method with Line Search secant_method_improved &lt;- function(theta0, theta1, x, y, tol = 1e-6, max_iter = 100) { theta_prev &lt;- as.matrix(theta0) # Convert to column vector theta_curr &lt;- as.matrix(theta1) alpha &lt;- 1 # Initial step size step_reduction_factor &lt;- 0.5 # Reduce step if SSE increases B_inv &lt;- diag(length(theta0)) # Identity matrix initialization for (j in 1:max_iter) { # Compute function values using numerical gradient F_prev &lt;- as.matrix(grad(function(theta) sse(theta, x, y), theta_prev)) F_curr &lt;- as.matrix(grad(function(theta) sse(theta, x, y), theta_curr)) # Compute secant step update (convert to column vectors) delta_theta &lt;- as.matrix(theta_curr - theta_prev) delta_F &lt;- as.matrix(F_curr - F_prev) # Prevent division by zero if (sum(abs(delta_F)) &lt; 1e-8) { cat(&quot;Gradient difference is too small, stopping optimization.\\n&quot;) break } # Ensure correct dimensions for Broyden update numerator &lt;- (delta_theta - B_inv %*% delta_F) %*% t(delta_theta) denominator &lt;- as.numeric(t(delta_theta) %*% delta_F) # Convert scalar to numeric # Updated inverse Jacobian approximation B_inv &lt;- B_inv + numerator / denominator # Compute next theta using secant update theta_next &lt;- theta_curr - alpha * B_inv %*% F_curr # Line search: Reduce step size if SSE increases while (sse(as.vector(theta_next), x, y) &gt; sse(as.vector(theta_curr), x, y)) { alpha &lt;- alpha * step_reduction_factor theta_next &lt;- theta_curr - alpha * B_inv %*% F_curr # Print progress # cat(&quot;Reducing step size to&quot;, alpha, &quot;\\n&quot;) } # Print intermediate results for debugging cat( sprintf( &quot;Iteration %d: Theta = (%.4f, %.4f, %.4f), Alpha = %.4f\\n&quot;, j, theta_next[1], theta_next[2], theta_next[3], alpha ) ) # Check convergence if (sum(abs(theta_next - theta_curr)) &lt; tol) { cat(&quot;Converged successfully.\\n&quot;) break } # Update iterates theta_prev &lt;- theta_curr theta_curr &lt;- theta_next } return(as.vector(theta_curr)) # Convert back to numeric vector } # Adjusted initial parameter guesses theta0 &lt;- c(2, 0.8,-1) # Closer to true parameters theta1 &lt;- c(4, 1.2,-0.5) # Slightly refined # Run Improved Secant Method estimated_theta &lt;- secant_method_improved(theta0, theta1, x, y) #&gt; Iteration 1: Theta = (3.8521, 1.3054, 0.0057), Alpha = 0.0156 #&gt; Iteration 2: Theta = (3.8521, 1.3054, 0.0057), Alpha = 0.0000 #&gt; Converged successfully. # Display estimated parameters cat(&quot;Estimated parameters (A, B, C) using Secant Method:\\n&quot;) #&gt; Estimated parameters (A, B, C) using Secant Method: print(estimated_theta) #&gt; [1] 3.85213912 1.30538435 0.00566417 # Plot data and fitted curve plot( x, y, main = &quot;Secant Method: Data &amp; Fitted Curve&quot;, pch = 19, cex = 0.5, xlab = &quot;x&quot;, ylab = &quot;y&quot; ) curve( nonlinear_model(estimated_theta, x), from = -5, to = 5, add = TRUE, col = &quot;red&quot;, lwd = 2 ) legend( &quot;topleft&quot;, legend = c(&quot;Data&quot;, &quot;Fitted Curve&quot;), pch = c(19, NA), lty = c(NA, 1), col = c(&quot;black&quot;, &quot;red&quot;) ) 6.2.2.2 Grid Search Grid Search (GS) is a brute-force optimization method that systematically explores a grid of possible parameter values to identify the combination that minimizes the residual sum of squares (RSS). Unlike gradient-based optimization, which moves iteratively towards a minimum, grid search evaluates all predefined parameter combinations, making it robust but computationally expensive. Grid search is particularly useful when: The function is highly nonlinear, making gradient methods unreliable. The parameter space is small, allowing exhaustive search. A global minimum is needed, and prior knowledge about parameter ranges exists. The goal of Grid Search is to find an optimal parameter set \\(\\hat{\\theta}\\) that minimizes the Sum of Squared Errors (SSE): \\[ \\hat{\\theta} = \\arg\\min_{\\theta \\in \\Theta} SSE(\\theta), \\] where: \\[ SSE(\\theta) = \\sum_{i=1}^{n} (y_i - f(x_i; \\theta))^2. \\] Grid search discretizes the search space \\(\\Theta\\) into a finite set of candidate values for each parameter: \\[ \\Theta = \\theta_1 \\times \\theta_2 \\times \\dots \\times \\theta_p. \\] The accuracy of the solution depends on the grid resolution—a finer grid leads to better accuracy but higher computational cost. Grid Search Algorithm Define a grid of possible values for each parameter. Evaluate SSE for each combination of parameters. Select the parameter set that minimizes SSE. # Define a numerically stable logistic function safe_exp &lt;- function(x) { return(ifelse(x &gt; 700, Inf, exp(pmin(x, 700)))) # Prevent overflow } # Define the logistic growth model nonlinear_model &lt;- function(theta, x) { return(theta[1] / (1 + safe_exp(-theta[2] * (x - theta[3])))) } # Define the Sum of Squared Errors (SSE) function sse &lt;- function(theta, x, y) { predictions &lt;- nonlinear_model(theta, x) return(sum((y - predictions)^2)) } # Grid Search Optimization grid_search_optimization &lt;- function(x, y, grid_size = 10) { # Define grid of parameter values A_values &lt;- seq(2, 6, length.out = grid_size) B_values &lt;- seq(0.5, 3, length.out = grid_size) C_values &lt;- seq(-2, 2, length.out = grid_size) # Generate all combinations of parameters param_grid &lt;- expand.grid(A = A_values, B = B_values, C = C_values) # Evaluate SSE for each parameter combination param_grid$SSE &lt;- apply(param_grid, 1, function(theta) { sse(as.numeric(theta[1:3]), x, y) }) # Select the best parameter set best_params &lt;- param_grid[which.min(param_grid$SSE), 1:3] return(as.numeric(best_params)) } # Generate synthetic data set.seed(123) x &lt;- seq(-5, 5, length.out = 100) true_theta &lt;- c(4, 1.5, 0) # True parameters (A, B, C) y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.3) # Run Grid Search estimated_theta &lt;- grid_search_optimization(x, y, grid_size = 20) # Display results cat(&quot;Estimated parameters (A, B, C) using Grid Search:\\n&quot;) #&gt; Estimated parameters (A, B, C) using Grid Search: print(estimated_theta) #&gt; [1] 4.1052632 1.4210526 0.1052632 # Plot data and fitted curve plot( x, y, main = &quot;Grid Search: Nonlinear Regression Optimization&quot;, pch = 19, cex = 0.5, xlab = &quot;x&quot;, ylab = &quot;y&quot; ) curve( nonlinear_model(estimated_theta, x), from = min(x), to = max(x), add = TRUE, col = &quot;red&quot;, lwd = 2 ) legend( &quot;topleft&quot;, legend = c(&quot;Data&quot;, &quot;Fitted Curve&quot;), pch = c(19, NA), lty = c(NA, 1), col = c(&quot;black&quot;, &quot;red&quot;) ) 6.2.2.3 Nelder-Mead (Simplex) The Nelder-Mead algorithm, also known as the Simplex method, is a derivative-free optimization algorithm that iteratively adjusts a geometric shape (simplex) to find the minimum of an objective function. It is particularly useful for nonlinear regression when gradient-based methods fail due to non-differentiability or noisy function evaluations. Nelder-Mead is particularly useful when: The function is non-differentiable or noisy. Gradient-based methods are unreliable. The parameter space is low-dimensional. The goal of Nelder-Mead is to find an optimal parameter set \\(\\hat{\\theta}\\) that minimizes the Sum of Squared Errors (SSE): \\[ \\hat{\\theta} = \\arg\\min_{\\theta} SSE(\\theta), \\] where: \\[ SSE(\\theta) = \\sum_{i=1}^{n} (y_i - f(x_i; \\theta))^2. \\] 1. Simplex Representation The algorithm maintains a simplex, a geometric shape with \\(p+1\\) vertices for a \\(p\\)-dimensional parameter space. Each vertex represents a parameter vector: \\[ S = \\{ \\theta_1, \\theta_2, \\dots, \\theta_{p+1} \\}. \\] 2. Simplex Operations At each iteration, the algorithm updates the simplex based on the objective function values at each vertex: Reflection: Reflect the worst point \\(\\theta_h\\) across the centroid. \\[ \\theta_r = \\theta_c + \\alpha (\\theta_c - \\theta_h) \\] Expansion: If reflection improves the objective, expand the step. \\[ \\theta_e = \\theta_c + \\gamma (\\theta_r - \\theta_c) \\] Contraction: If reflection worsens the objective, contract towards the centroid. \\[ \\theta_c = \\theta_c + \\rho (\\theta_h - \\theta_c) \\] Shrink: If contraction fails, shrink the simplex. \\[ \\theta_i = \\theta_1 + \\sigma (\\theta_i - \\theta_1), \\quad \\forall i &gt; 1 \\] where: \\(\\alpha = 1\\) (reflection coefficient), \\(\\gamma = 2\\) (expansion coefficient), \\(\\rho = 0.5\\) (contraction coefficient), \\(\\sigma = 0.5\\) (shrink coefficient). The process continues until convergence. Nelder-Mead Algorithm Initialize a simplex with \\(p+1\\) vertices. Evaluate SSE at each vertex. Perform reflection, expansion, contraction, or shrink operations. Repeat until convergence. # Load required library library(stats) # Define a numerically stable logistic function safe_exp &lt;- function(x) { return(ifelse(x &gt; 700, Inf, exp(pmin(x, 700)))) # Prevent overflow } # Define the logistic growth model nonlinear_model &lt;- function(theta, x) { return(theta[1] / (1 + safe_exp(-theta[2] * (x - theta[3])))) } # Define the Sum of Squared Errors (SSE) function sse &lt;- function(theta, x, y) { predictions &lt;- nonlinear_model(theta, x) return(sum((y - predictions) ^ 2)) } # Nelder-Mead Optimization nelder_mead_optimization &lt;- function(x, y) { # Initial guess for parameters initial_guess &lt;- c(2, 1, 0) # Run Nelder-Mead optimization result &lt;- optim( par = initial_guess, fn = sse, x = x, y = y, method = &quot;Nelder-Mead&quot;, control = list(maxit = 500) ) return(result$par) # Return optimized parameters } # Generate synthetic data set.seed(123) x &lt;- seq(-5, 5, length.out = 100) true_theta &lt;- c(4, 1.5, 0) # True parameters (A, B, C) y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.3) # Run Nelder-Mead Optimization estimated_theta &lt;- nelder_mead_optimization(x, y) # Display results cat(&quot;Estimated parameters (A, B, C) using Nelder-Mead:\\n&quot;) #&gt; Estimated parameters (A, B, C) using Nelder-Mead: print(estimated_theta) #&gt; [1] 4.06873116 1.42759898 0.01119379 # Plot data and fitted curve plot( x, y, main = &quot;Nelder-Mead: Nonlinear Regression Optimization&quot;, pch = 19, cex = 0.5, xlab = &quot;x&quot;, ylab = &quot;y&quot; ) curve( nonlinear_model(estimated_theta, x), from = min(x), to = max(x), add = TRUE, col = &quot;red&quot;, lwd = 2 ) legend( &quot;topleft&quot;, legend = c(&quot;Data&quot;, &quot;Fitted Curve&quot;), pch = c(19, NA), lty = c(NA, 1), col = c(&quot;black&quot;, &quot;red&quot;) ) 6.2.2.4 Powell’s Method Powell’s Method is a derivative-free optimization algorithm that minimizes a function without using gradients. It works by iteratively refining a set of search directions to efficiently navigate the parameter space. Unlike Nelder-Mead (Simplex), which adapts a simplex, Powell’s method builds an orthogonal basis of search directions. Powell’s method is particularly useful when: The function is non-differentiable or noisy. Gradient-based methods are unreliable. The parameter space is low-to-moderate dimensional. The goal of Powell’s Method is to find an optimal parameter set \\(\\hat{\\theta}\\) that minimizes the Sum of Squared Errors (SSE): \\[ \\hat{\\theta} = \\arg\\min_{\\theta} SSE(\\theta), \\] where: \\[ SSE(\\theta) = \\sum_{i=1}^{n} (y_i - f(x_i; \\theta))^2. \\] 1. Search Directions Powell’s method maintains a set of search directions \\(\\mathbf{d}_1, \\mathbf{d}_2, \\dots, \\mathbf{d}_p\\): \\[ D = \\{ \\mathbf{d}_1, \\mathbf{d}_2, ..., \\mathbf{d}_p \\}. \\] Initially, these directions are chosen as unit basis vectors (each optimizing a single parameter independently). 2. Line Minimization For each direction \\(\\mathbf{d}_j\\), Powell’s method performs a 1D optimization: \\[ \\theta&#39; = \\theta + \\lambda \\mathbf{d}_j, \\] where \\(\\lambda\\) is chosen to minimize \\(SSE(\\theta&#39;)\\). 3. Updating Search Directions After optimizing along all directions: The largest improvement direction \\(\\mathbf{d}_{\\max}\\) is replaced with: \\[ \\mathbf{d}_{\\text{new}} = \\theta_{\\text{final}} - \\theta_{\\text{initial}}. \\] The new direction set is orthogonalized using Gram-Schmidt. This ensures efficient exploration of the parameter space. 4. Convergence Criteria Powell’s method stops when function improvement is below a tolerance level: \\[ |SSE(\\theta_{t+1}) - SSE(\\theta_t)| &lt; \\epsilon. \\] Powell’s Method Algorithm Initialize search directions (standard basis vectors). Perform 1D line searches along each direction. Update the search directions based on the largest improvement. Repeat until convergence. # Load required library library(stats) # Define a numerically stable logistic function safe_exp &lt;- function(x) { return(ifelse(x &gt; 700, Inf, exp(pmin(x, 700)))) # Prevent overflow } # Define the logistic growth model nonlinear_model &lt;- function(theta, x) { return(theta[1] / (1 + safe_exp(-theta[2] * (x - theta[3])))) } # Define the Sum of Squared Errors (SSE) function sse &lt;- function(theta, x, y) { predictions &lt;- nonlinear_model(theta, x) return(sum((y - predictions) ^ 2)) } # Powell&#39;s Method Optimization powell_optimization &lt;- function(x, y) { # Initial guess for parameters initial_guess &lt;- c(2, 1, 0) # Run Powell’s optimization (via BFGS without gradient) result &lt;- optim( par = initial_guess, fn = sse, x = x, y = y, method = &quot;BFGS&quot;, control = list(maxit = 500), gr = NULL # No gradient used ) return(result$par) # Return optimized parameters } # Generate synthetic data set.seed(123) x &lt;- seq(-5, 5, length.out = 100) true_theta &lt;- c(4, 1.5, 0) # True parameters (A, B, C) y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.3) # Run Powell&#39;s Method Optimization estimated_theta &lt;- powell_optimization(x, y) # Display results cat(&quot;Estimated parameters (A, B, C) using Powell’s Method:\\n&quot;) #&gt; Estimated parameters (A, B, C) using Powell’s Method: print(estimated_theta) #&gt; [1] 4.06876538 1.42765687 0.01128753 # Plot data and fitted curve plot( x, y, main = &quot;Powell&#39;s Method: Nonlinear Regression Optimization&quot;, pch = 19, cex = 0.5, xlab = &quot;x&quot;, ylab = &quot;y&quot; ) curve( nonlinear_model(estimated_theta, x), from = min(x), to = max(x), add = TRUE, col = &quot;red&quot;, lwd = 2 ) legend( &quot;topleft&quot;, legend = c(&quot;Data&quot;, &quot;Fitted Curve&quot;), pch = c(19, NA), lty = c(NA, 1), col = c(&quot;black&quot;, &quot;red&quot;) ) 6.2.2.5 Random Search Random Search (RS) is a simple yet effective optimization algorithm that explores the search space by randomly sampling candidate solutions. Unlike grid search, which evaluates all predefined parameter combinations, random search selects a random subset, reducing computational cost. Random search is particularly useful when: The search space is large, making grid search impractical. Gradient-based methods fail due to non-differentiability or noisy data. The optimal region is unknown, making global exploration essential. The goal of Random Search is to find an optimal parameter set \\(\\hat{\\theta}\\) that minimizes the Sum of Squared Errors (SSE): \\[ \\hat{\\theta} = \\arg\\min_{\\theta \\in \\Theta} SSE(\\theta), \\] where: \\[ SSE(\\theta) = \\sum_{i=1}^{n} (y_i - f(x_i; \\theta))^2. \\] Unlike grid search, random search does not evaluate all parameter combinations but instead randomly samples a subset: \\[ \\Theta_{\\text{sampled}} \\subset \\Theta. \\] The accuracy of the solution depends on the number of random samples—a higher number increases the likelihood of finding a good solution. Random Search Algorithm Define a random sampling range for each parameter. Randomly sample \\(N\\) parameter sets. Evaluate SSE for each sampled set. Select the parameter set that minimizes SSE. # Load required library library(stats) # Define a numerically stable logistic function safe_exp &lt;- function(x) { return(ifelse(x &gt; 700, Inf, exp(pmin(x, 700)))) # Prevent overflow } # Define the logistic growth model nonlinear_model &lt;- function(theta, x) { return(theta[1] / (1 + safe_exp(-theta[2] * (x - theta[3])))) } # Define the Sum of Squared Errors (SSE) function sse &lt;- function(theta, x, y) { predictions &lt;- nonlinear_model(theta, x) return(sum((y - predictions) ^ 2)) } # Random Search Optimization random_search_optimization &lt;- function(x, y, num_samples = 100) { # Define parameter ranges A_range &lt;- runif(num_samples, 2, 6) # Random values between 2 and 6 B_range &lt;- runif(num_samples, 0.5, 3) # Random values between 0.5 and 3 C_range &lt;- runif(num_samples,-2, 2) # Random values between -2 and 2 # Initialize best parameters best_theta &lt;- NULL best_sse &lt;- Inf # Evaluate randomly sampled parameter sets for (i in 1:num_samples) { theta &lt;- c(A_range[i], B_range[i], C_range[i]) current_sse &lt;- sse(theta, x, y) if (current_sse &lt; best_sse) { best_sse &lt;- current_sse best_theta &lt;- theta } } return(best_theta) } # Generate synthetic data set.seed(123) x &lt;- seq(-5, 5, length.out = 100) true_theta &lt;- c(4, 1.5, 0) # True parameters (A, B, C) y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.3) # Run Random Search estimated_theta &lt;- random_search_optimization(x, y, num_samples = 500) # Display results cat(&quot;Estimated parameters (A, B, C) using Random Search:\\n&quot;) #&gt; Estimated parameters (A, B, C) using Random Search: print(estimated_theta) #&gt; [1] 4.0893431 1.4687456 0.1024474 # Plot data and fitted curve plot( x, y, main = &quot;Random Search: Nonlinear Regression Optimization&quot;, pch = 19, cex = 0.5, xlab = &quot;x&quot;, ylab = &quot;y&quot; ) curve( nonlinear_model(estimated_theta, x), from = min(x), to = max(x), add = TRUE, col = &quot;red&quot;, lwd = 2 ) legend( &quot;topleft&quot;, legend = c(&quot;Data&quot;, &quot;Fitted Curve&quot;), pch = c(19, NA), lty = c(NA, 1), col = c(&quot;black&quot;, &quot;red&quot;) ) 6.2.2.6 Hooke-Jeeves Pattern Search Hooke-Jeeves Pattern Search is a derivative-free optimization algorithm that searches for an optimal solution by exploring and adjusting parameter values iteratively. Unlike gradient-based methods, it does not require differentiability, making it effective for non-smooth and noisy functions. Hooke-Jeeves is particularly useful when: The function is non-differentiable or noisy. Gradient-based methods are unreliable. The parameter space is low-to-moderate dimensional. The goal of Hooke-Jeeves Pattern Search is to find an optimal parameter set \\(\\hat{\\theta}\\) that minimizes the Sum of Squared Errors (SSE): \\[ \\hat{\\theta} = \\arg\\min_{\\theta} SSE(\\theta), \\] where: \\[ SSE(\\theta) = \\sum_{i=1}^{n} (y_i - f(x_i; \\theta))^2. \\] 1. Exploratory Moves At each iteration, the algorithm perturbs each parameter to find a lower SSE: \\[ \\theta&#39; = \\theta \\pm \\delta. \\] If a new parameter \\(\\theta&#39;\\) reduces SSE, it becomes the new base point. 2. Pattern Moves After an improvement, the algorithm accelerates movement in the promising direction: \\[ \\theta_{\\text{new}} = \\theta_{\\text{old}} + (\\theta_{\\text{old}} - \\theta_{\\text{prev}}). \\] This speeds up convergence towards an optimum. 3. Step Size Adaptation If no improvement is found, the step size \\(\\delta\\) is reduced: \\[ \\delta_{\\text{new}} = \\beta \\cdot \\delta. \\] where \\(\\beta &lt; 1\\) is a reduction factor. 4. Convergence Criteria The algorithm stops when step size is sufficiently small: \\[ \\delta &lt; \\epsilon. \\] Hooke-Jeeves Algorithm Initialize a starting point \\(\\theta\\) and step size \\(\\delta\\). Perform exploratory moves in each parameter direction. If improvement is found, perform pattern moves. Reduce step size if no improvement is found. Repeat until convergence. # Load required library library(stats) # Define a numerically stable logistic function safe_exp &lt;- function(x) { return(ifelse(x &gt; 700, Inf, exp(pmin(x, 700)))) # Prevent overflow } # Define the logistic growth model nonlinear_model &lt;- function(theta, x) { return(theta[1] / (1 + safe_exp(-theta[2] * (x - theta[3])))) } # Define the Sum of Squared Errors (SSE) function sse &lt;- function(theta, x, y) { predictions &lt;- nonlinear_model(theta, x) return(sum((y - predictions) ^ 2)) } # Hooke-Jeeves Pattern Search Optimization hooke_jeeves_optimization &lt;- function(x, y, step_size = 0.5, tol = 1e-6, max_iter = 500) { # Initial guess for parameters theta &lt;- c(2, 1, 0) best_sse &lt;- sse(theta, x, y) step &lt;- step_size iter &lt;- 0 while (step &gt; tol &amp; iter &lt; max_iter) { iter &lt;- iter + 1 improved &lt;- FALSE new_theta &lt;- theta # Exploratory move in each parameter direction for (i in 1:length(theta)) { for (delta in c(step,-step)) { theta_test &lt;- new_theta theta_test[i] &lt;- theta_test[i] + delta sse_test &lt;- sse(theta_test, x, y) if (sse_test &lt; best_sse) { best_sse &lt;- sse_test new_theta &lt;- theta_test improved &lt;- TRUE } } } # Pattern move if improvement found if (improved) { theta &lt;- 2 * new_theta - theta best_sse &lt;- sse(theta, x, y) } else { step &lt;- step / 2 # Reduce step size } } return(theta) } # Generate synthetic data set.seed(123) x &lt;- seq(-5, 5, length.out = 100) true_theta &lt;- c(4, 1.5, 0) # True parameters (A, B, C) y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.3) # Run Hooke-Jeeves Optimization estimated_theta &lt;- hooke_jeeves_optimization(x, y) # Display results cat(&quot;Estimated parameters (A, B, C) using Hooke-Jeeves:\\n&quot;) #&gt; Estimated parameters (A, B, C) using Hooke-Jeeves: print(estimated_theta) #&gt; [1] 4 1 0 # Plot data and fitted curve plot( x, y, main = &quot;Hooke-Jeeves: Nonlinear Regression Optimization&quot;, pch = 19, cex = 0.5, xlab = &quot;x&quot;, ylab = &quot;y&quot; ) curve( nonlinear_model(estimated_theta, x), from = min(x), to = max(x), add = TRUE, col = &quot;red&quot;, lwd = 2 ) legend( &quot;topleft&quot;, legend = c(&quot;Data&quot;, &quot;Fitted Curve&quot;), pch = c(19, NA), lty = c(NA, 1), col = c(&quot;black&quot;, &quot;red&quot;) ) 6.2.2.7 Bisection Method The Bisection Method is a fundamental numerical technique primarily used for root finding, but it can also be adapted for optimization problems where the goal is to minimize or maximize a nonlinear function. In nonlinear regression, optimization often involves finding the parameter values that minimize the sum of squared errors (SSE): \\[ \\hat{\\theta} = \\arg\\min_{\\theta} SSE(\\theta) \\] where: \\[ SSE(\\theta) = \\sum_{i=1}^{n} \\left( y_i - f(x_i; \\theta) \\right)^2. \\] Since the minimum of a function occurs where the derivative equals zero, we apply the Bisection Method to the derivative of the SSE function: \\[ \\frac{d}{d\\theta} SSE(\\theta) = 0. \\] This transforms the optimization problem into a root-finding problem. The Bisection Method is based on the Intermediate Value Theorem, which states: If a continuous function \\(f(\\theta)\\) satisfies \\(f(\\theta_a) \\cdot f(\\theta_b) &lt; 0\\), then there exists at least one root in the interval \\((\\theta_a, \\theta_b)\\). For optimization, we apply this principle to the first derivative of the objective function \\(Q(\\theta)\\): \\[ Q&#39;(\\theta) = 0. \\] Step-by-Step Algorithm for Optimization Choose an interval \\([\\theta_a, \\theta_b]\\) such that: \\[ Q&#39;(\\theta_a) \\cdot Q&#39;(\\theta_b) &lt; 0. \\] Compute the midpoint: \\[ \\theta_m = \\frac{\\theta_a + \\theta_b}{2}. \\] Evaluate \\(Q&#39;(\\theta_m)\\): If \\(Q&#39;(\\theta_m) = 0\\), then \\(\\theta_m\\) is the optimal point. If \\(Q&#39;(\\theta_a) \\cdot Q&#39;(\\theta_m) &lt; 0\\), set \\(\\theta_b = \\theta_m\\). Otherwise, set \\(\\theta_a = \\theta_m\\). Repeat until convergence: \\[ |\\theta_b - \\theta_a| &lt; \\epsilon. \\] Determining the Nature of the Critical Point Since the Bisection Method finds a stationary point, we use the second derivative test to classify it: If \\(Q&#39;&#39;(\\theta) &gt; 0\\), the point is a local minimum. If \\(Q&#39;&#39;(\\theta) &lt; 0\\), the point is a local maximum. For nonlinear regression, we expect \\(Q(\\theta) = SSE(\\theta)\\), so the solution found by Bisection should be a minimum. # Load required library library(stats) # Define a numerically stable logistic function safe_exp &lt;- function(x) { return(ifelse(x &gt; 700, Inf, exp(pmin(x, 700)))) # Prevent overflow } # Define the logistic growth model nonlinear_model &lt;- function(theta, x) { return(theta[1] / (1 + safe_exp(-theta[2] * (x - theta[3])))) } # Define the Sum of Squared Errors (SSE) function for optimization sse &lt;- function(theta, x, y) { predictions &lt;- nonlinear_model(theta, x) return(sum((y - predictions)^2)) } # Optimize all three parameters simultaneously find_optimal_parameters &lt;- function(x, y) { # Initial guess for parameters (based on data) initial_guess &lt;- c(max(y), 1, median(x)) # Bounds for parameters lower_bounds &lt;- c(0.1, 0.01, min(x)) # Ensure positive scaling upper_bounds &lt;- c(max(y) * 2, 10, max(x)) # Run optim() with L-BFGS-B (bounded optimization) result &lt;- optim( par = initial_guess, fn = sse, x = x, y = y, method = &quot;L-BFGS-B&quot;, lower = lower_bounds, upper = upper_bounds ) return(result$par) # Extract optimized parameters } # Generate synthetic data set.seed(123) x &lt;- seq(-5, 5, length.out = 100) true_theta &lt;- c(4, 1.5, 0) # True parameters (A, B, C) y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.3) # Find optimal parameters using optim() estimated_theta &lt;- find_optimal_parameters(x, y) # Display results cat(&quot;Estimated parameters (A, B, C) using optim():\\n&quot;) #&gt; Estimated parameters (A, B, C) using optim(): print(estimated_theta) #&gt; [1] 4.06876536 1.42765688 0.01128756 # Plot data and fitted curve plot( x, y, main = &quot;Optim(): Nonlinear Regression Optimization&quot;, pch = 19, cex = 0.5, xlab = &quot;x&quot;, ylab = &quot;y&quot; ) curve( nonlinear_model(estimated_theta, x), from = min(x), to = max(x), add = TRUE, col = &quot;red&quot;, lwd = 2 ) legend( &quot;topleft&quot;, legend = c(&quot;Data&quot;, &quot;Fitted Curve&quot;), pch = c(19, NA), lty = c(NA, 1), col = c(&quot;black&quot;, &quot;red&quot;) ) 6.2.3 Stochastic Heuristic 6.2.3.1 Differential Evolution Algorithm The Differential Evolution (DE) Algorithm is a stochastic, population-based optimization algorithm that is widely used for solving complex global optimization problems. Unlike gradient-based methods such as Newton’s method or the Secant method, DE does not require derivatives and is well-suited for optimizing non-differentiable, nonlinear, and multimodal functions. Key Features of Differential Evolution Population-based approach: Maintains a population of candidate solutions instead of a single point. Mutation and crossover: Introduces variations to explore the search space. Selection mechanism: Retains the best candidates for the next generation. Global optimization: Avoids local minima by using stochastic search strategies. Mathematical Formulation of Differential Evolution Differential Evolution operates on a population of candidate solutions \\(\\{\\theta_i\\}\\), where each \\(\\theta_i\\) is a vector of parameters. The algorithm iteratively updates the population using three main operations: 1. Mutation For each candidate solution \\(\\theta_i\\), a mutant vector \\(\\mathbf{v}_i^{(j)}\\) is generated as: \\[ \\mathbf{v}_i^{(j)} = \\mathbf{\\theta}_{r_1}^{(j)} + F \\cdot (\\mathbf{\\theta}_{r_2}^{(j)} - \\mathbf{\\theta}_{r_3}^{(j)}) \\] where: \\(\\mathbf{\\theta}_{r_1}, \\mathbf{\\theta}_{r_2}, \\mathbf{\\theta}_{r_3}\\) are randomly selected distinct vectors from the population. \\(F \\in (0,2)\\) is the mutation factor controlling the step size. 2. Crossover A trial vector \\(\\mathbf{u}_i^{(j)}\\) is generated by combining the mutant vector \\(\\mathbf{v}_i^{(j)}\\) with the original solution \\(\\mathbf{\\theta}_i^{(j)}\\): \\[ u_{i,k}^{(j)} = \\begin{cases} v_{i,k}^{(j)} &amp; \\text{if } rand_k \\leq C_r \\text{ or } k = k_{\\text{rand}}, \\\\ \\theta_{i,k}^{(j)} &amp; \\text{otherwise}. \\end{cases} \\] where: \\(C_r \\in (0,1)\\) is the crossover probability. \\(rand_k\\) is a random value between 0 and 1. \\(k_{\\text{rand}}\\) ensures at least one parameter is mutated. 3. Selection The new candidate solution is accepted only if it improves the objective function: \\[ \\mathbf{\\theta}_i^{(j+1)} = \\begin{cases} \\mathbf{u}_i^{(j)} &amp; \\text{if } Q(\\mathbf{u}_i^{(j)}) &lt; Q(\\mathbf{\\theta}_i^{(j)}), \\\\ \\mathbf{\\theta}_i^{(j)} &amp; \\text{otherwise}. \\end{cases} \\] where \\(Q(\\theta)\\) is the objective function (e.g., sum of squared errors in regression problems). Algorithm: Differential Evolution for Nonlinear Optimization Initialize a population of candidate solutions. Evaluate the objective function for each candidate. Mutate individuals using a difference strategy. Apply crossover to create trial solutions. Select individuals based on their fitness (objective function value). Repeat until convergence (or a stopping criterion is met). # Load required library library(DEoptim) # Define a nonlinear function (logistic model) nonlinear_model &lt;- function(theta, x) { return(theta[1] / (1 + exp(-theta[2] * (x - theta[3])))) } # Define the Sum of Squared Errors (SSE) function sse &lt;- function(theta, x, y) { return(sum((y - nonlinear_model(theta, x))^2)) } # Generate synthetic data set.seed(123) x &lt;- seq(-5, 5, length.out = 100) true_theta &lt;- c(4, 1.5, 0) # True parameters (A, B, C) y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.3) # Define the objective function for DEoptim objective_function &lt;- function(theta) { return(sse(theta, x, y)) } # Define parameter bounds lower_bounds &lt;- c(0, 0, -5) upper_bounds &lt;- c(10, 5, 5) # Run Differential Evolution Algorithm de_result &lt;- DEoptim( objective_function, lower_bounds, upper_bounds, DEoptim.control( NP = 50, itermax = 100, F = 0.8, CR = 0.9, trace = F ) ) # Extract optimized parameters estimated_theta &lt;- de_result$optim$bestmem # Display estimated parameters cat(&quot;Estimated parameters (A, B, C) using Differential Evolution:\\n&quot;) #&gt; Estimated parameters (A, B, C) using Differential Evolution: print(estimated_theta) #&gt; par1 par2 par3 #&gt; 4.06876562 1.42765614 0.01128768 # Plot data and fitted curve plot( x, y, main = &quot;Differential Evolution: Data &amp; Fitted Curve&quot;, pch = 19, cex = 0.5, xlab = &quot;x&quot;, ylab = &quot;y&quot; ) curve( nonlinear_model(estimated_theta, x), from = -5, to = 5, add = TRUE, col = &quot;red&quot;, lwd = 2 ) legend( &quot;topleft&quot;, legend = c(&quot;Data&quot;, &quot;Fitted Curve&quot;), pch = c(19, NA), lty = c(NA, 1), col = c(&quot;black&quot;, &quot;red&quot;) ) 6.2.3.2 Simulated Annealing Simulated Annealing (SA) is a probabilistic global optimization algorithm inspired by annealing in metallurgy, where a material is heated and slowly cooled to remove defects. In optimization, SA gradually refines a solution by exploring the search space, allowing occasional jumps to escape local minima, before converging to an optimal solution. Simulated Annealing is particularly useful when: The function is highly nonlinear and multimodal. Gradient-based methods struggle due to non-differentiability or poor initialization. A global minimum is needed, rather than a local one. 1. Energy Function (Objective Function) The goal of SA is to minimize an objective function \\(Q(\\theta)\\). For nonlinear regression, this is the Sum of Squared Errors (SSE): \\[ Q(\\theta) = SSE(\\theta) = \\sum_{i=1}^{n} (y_i - f(x_i; \\theta))^2. \\] 2. Probability of Acceptance At each step, SA randomly perturbs the parameters \\(\\theta\\) to create a new candidate solution \\(\\theta&#39;\\) and evaluates the change in SSE: \\[ \\Delta Q = Q(\\theta&#39;) - Q(\\theta). \\] The Metropolis Criterion determines whether to accept the new solution: \\[ P(\\text{accept}) = \\begin{cases} 1, &amp; \\text{if } \\Delta Q &lt; 0 \\quad \\text{(new solution improves fit)} \\\\ \\exp\\left( -\\frac{\\Delta Q}{T} \\right), &amp; \\text{if } \\Delta Q \\geq 0 \\quad \\text{(accept with probability)}. \\end{cases} \\] where: \\(T\\) is the temperature that gradually decreases over iterations. Worse solutions are accepted with small probability to escape local minima. 3. Cooling Schedule The temperature follows a cooling schedule: \\[ T_k = \\alpha T_{k-1}, \\] where \\(\\alpha \\in (0,1)\\) is a decay factor that controls cooling speed. Simulated Annealing Algorithm Initialize parameters \\(\\theta\\) randomly. Set an initial temperature \\(T_0\\) and cooling rate \\(\\alpha\\). Repeat for max iterations: Generate perturbed candidate \\(\\theta&#39;\\). Compute \\(\\Delta Q = Q(\\theta&#39;) - Q(\\theta)\\). Accept if \\(\\Delta Q &lt; 0\\) or with probability \\(\\exp(-\\Delta Q / T)\\). Reduce temperature: \\(T \\leftarrow \\alpha T\\). Return the best solution found. # Load required library library(stats) # Define a numerically stable logistic function safe_exp &lt;- function(x) { return(ifelse(x &gt; 700, Inf, exp(pmin(x, 700)))) # Prevent overflow } # Define the logistic growth model nonlinear_model &lt;- function(theta, x) { return(theta[1] / (1 + safe_exp(-theta[2] * (x - theta[3])))) } # Define the Sum of Squared Errors (SSE) function sse &lt;- function(theta, x, y) { predictions &lt;- nonlinear_model(theta, x) return(sum((y - predictions) ^ 2)) } # Simulated Annealing Algorithm simulated_annealing &lt;- function(x, y, initial_theta, T_init = 1.0, alpha = 0.99, max_iter = 5000) { # Initialize parameters theta &lt;- initial_theta best_theta &lt;- theta best_sse &lt;- sse(theta, x, y) T &lt;- T_init # Initial temperature for (iter in 1:max_iter) { # Generate new candidate solution (small random perturbation) theta_new &lt;- theta + rnorm(length(theta), mean = 0, sd = T) # Compute new SSE sse_new &lt;- sse(theta_new, x, y) # Compute change in SSE delta_Q &lt;- sse_new - best_sse # Acceptance criteria if (delta_Q &lt; 0 || runif(1) &lt; exp(-delta_Q / T)) { theta &lt;- theta_new best_sse &lt;- sse_new best_theta &lt;- theta_new } # Reduce temperature T &lt;- alpha * T # Stopping condition (very low temperature) if (T &lt; 1e-6) break } return(best_theta) } # Generate synthetic data set.seed(123) x &lt;- seq(-5, 5, length.out = 100) true_theta &lt;- c(4, 1.5, 0) # True parameters (A, B, C) y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.3) # Initial guess initial_theta &lt;- c(runif(1, 1, 5), runif(1, 0.1, 3), runif(1,-2, 2)) # Run Simulated Annealing estimated_theta &lt;- simulated_annealing(x, y, initial_theta) # Display results cat(&quot;Estimated parameters (A, B, C) using Simulated Annealing:\\n&quot;) #&gt; Estimated parameters (A, B, C) using Simulated Annealing: print(estimated_theta) #&gt; [1] 4.07180419 1.41457906 0.01422147 # Plot data and fitted curve plot( x, y, main = &quot;Simulated Annealing: Nonlinear Regression Optimization&quot;, pch = 19, cex = 0.5, xlab = &quot;x&quot;, ylab = &quot;y&quot; ) curve( nonlinear_model(estimated_theta, x), from = min(x), to = max(x), add = TRUE, col = &quot;red&quot;, lwd = 2 ) legend( &quot;topleft&quot;, legend = c(&quot;Data&quot;, &quot;Fitted Curve&quot;), pch = c(19, NA), lty = c(NA, 1), col = c(&quot;black&quot;, &quot;red&quot;) ) 6.2.3.3 Genetic Algorithm Genetic Algorithms (GA) are a class of evolutionary algorithms inspired by the principles of natural selection and genetics. Unlike deterministic optimization techniques, GA evolves a population of candidate solutions over multiple generations, using genetic operators such as selection, crossover, and mutation. GA is particularly useful when: The function is nonlinear, non-differentiable, or highly multimodal. Gradient-based methods fail due to rugged function landscapes. A global minimum is required, rather than a local one. The goal of a Genetic Algorithm is to find an optimal solution $\\hat{\\theta}$ that minimizes an objective function: \\[ \\hat{\\theta} = \\arg\\min_{\\theta} SSE(\\theta), \\] where: \\[ SSE(\\theta) = \\sum_{i=1}^{n} (y_i - f(x_i; \\theta))^2. \\] 1. Population Representation Each candidate solution (individual) is represented as a chromosome, which is simply a vector of parameters: \\[ \\theta = (\\theta_1, \\theta_2, \\theta_3) \\] An entire population consists of multiple such solutions. 2. Selection Each individual’s fitness is evaluated using: \\[ \\text{Fitness}(\\theta) = -SSE(\\theta) \\] We use Tournament Selection or Roulette Wheel Selection to choose parents for reproduction. 3. Crossover (Recombination) A new solution \\(\\theta&#39;\\) is generated by combining two parents: \\[\\theta&#39; = \\alpha \\theta_{\\text{parent1}} + (1 - \\alpha) \\theta_{\\text{parent2}}, \\quad \\alpha \\sim U(0,1).\\] 4. Mutation Random small changes are introduced to increase diversity: \\[\\theta_i&#39; = \\theta_i + \\mathcal{N}(0, \\sigma),\\] where \\(\\mathcal{N}(0, \\sigma)\\) is a small Gaussian perturbation. 5. Evolutionary Cycle The algorithm iterates through: Selection Crossover Mutation Survival of the fittest Termination when convergence is reached. # Load required library library(GA) # Define a numerically stable logistic function safe_exp &lt;- function(x) { return(ifelse(x &gt; 700, Inf, exp(pmin(x, 700)))) # Prevent overflow } # Define the logistic growth model nonlinear_model &lt;- function(theta, x) { return(theta[1] / (1 + safe_exp(-theta[2] * (x - theta[3])))) } # Define the Sum of Squared Errors (SSE) function for optimization sse &lt;- function(theta, x, y) { predictions &lt;- nonlinear_model(theta, x) return(sum((y - predictions) ^ 2)) } # Genetic Algorithm for Optimization ga_optimization &lt;- function(x, y) { # Define fitness function (negative SSE for maximization) fitness_function &lt;- function(theta) { # GA maximizes fitness, so we use negative SSE return(-sse(theta, x, y)) } # Set parameter bounds lower_bounds &lt;- c(0.1, 0.01, min(x)) # Ensure positive scaling upper_bounds &lt;- c(max(y) * 2, 10, max(x)) # Run GA optimization ga_result &lt;- ga( type = &quot;real-valued&quot;, fitness = fitness_function, lower = lower_bounds, upper = upper_bounds, popSize = 50, # Population size maxiter = 200, # Max generations pmutation = 0.1, # Mutation probability monitor = FALSE ) return(ga_result@solution) # Return optimized parameters } # Generate synthetic data set.seed(123) x &lt;- seq(-5, 5, length.out = 100) true_theta &lt;- c(4, 1.5, 0) # True parameters (A, B, C) y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.3) # Run Genetic Algorithm estimated_theta &lt;- ga_optimization(x, y) # Display results cat(&quot;Estimated parameters (A, B, C) using Genetic Algorithm:\\n&quot;) #&gt; Estimated parameters (A, B, C) using Genetic Algorithm: print(estimated_theta) #&gt; x1 x2 x3 #&gt; [1,] 4.066144 1.433886 0.00824126 # Plot data and fitted curve plot( x, y, main = &quot;Genetic Algorithm: Nonlinear Regression Optimization&quot;, pch = 19, cex = 0.5, xlab = &quot;x&quot;, ylab = &quot;y&quot; ) curve( nonlinear_model(estimated_theta, x), from = min(x), to = max(x), add = TRUE, col = &quot;red&quot;, lwd = 2 ) legend( &quot;topleft&quot;, legend = c(&quot;Data&quot;, &quot;Fitted Curve&quot;), pch = c(19, NA), lty = c(NA, 1), col = c(&quot;black&quot;, &quot;red&quot;) ) 6.2.3.4 Particle Swarm Optimization Particle Swarm Optimization (PSO) is a population-based global optimization algorithm inspired by the social behavior of birds and fish schools. Instead of using genetic operators (like in Genetic Algorithms), PSO models particles (solutions) flying through the search space, adjusting their position based on their own experience and the experience of their neighbors. PSO is particularly useful when: The function is nonlinear, noisy, or lacks smooth gradients. Gradient-based methods struggle due to non-differentiability. A global minimum is needed, rather than a local one. The goal of PSO is to find an optimal solution \\(\\hat{\\theta}\\) that minimizes an objective function: \\[ \\hat{\\theta} = \\arg\\min_{\\theta} SSE(\\theta), \\] where: \\[ SSE(\\theta) = \\sum_{i=1}^{n} (y_i - f(x_i; \\theta))^2. \\] 1. Particle Representation Each particle represents a candidate solution: \\[ \\theta_i = (\\theta_{i1}, \\theta_{i2}, \\theta_{i3}) \\] where \\(\\theta_{ij}\\) is the \\(j^{th}\\) parameter of particle \\(i\\). 2. Particle Velocity and Position Updates Each particle moves in the search space with velocity \\(v_i\\), which is updated as: \\[ v_i^{(t+1)} = \\omega v_i^{(t)} + c_1 r_1 (p_i - \\theta_i^{(t)}) + c_2 r_2 (g - \\theta_i^{(t)}) \\] where: \\(\\omega\\) is the inertia weight (controls exploration vs. exploitation), \\(c_1, c_2\\) are acceleration coefficients, \\(r_1, r_2 \\sim U(0,1)\\) are random numbers, \\(p_i\\) is the particle’s personal best position, \\(g\\) is the global best position. Then, the position update is: \\[ \\theta_i^{(t+1)} = \\theta_i^{(t)} + v_i^{(t+1)} \\] This process continues until convergence criteria (like a max number of iterations or minimum error) is met. Particle Swarm Optimization Algorithm Initialize particles randomly within search bounds. Set random initial velocities. Evaluate SSE for each particle. Update the personal and global best solutions. Update velocities and positions using the update equations. Repeat until convergence. # Load required library library(pso) # Define a numerically stable logistic function safe_exp &lt;- function(x) { return(ifelse(x &gt; 700, Inf, exp(pmin(x, 700)))) # Prevent overflow } # Define the logistic growth model nonlinear_model &lt;- function(theta, x) { return(theta[1] / (1 + safe_exp(-theta[2] * (x - theta[3])))) } # Define the Sum of Squared Errors (SSE) function for optimization sse &lt;- function(theta, x, y) { predictions &lt;- nonlinear_model(theta, x) return(sum((y - predictions) ^ 2)) } # Particle Swarm Optimization (PSO) for Nonlinear Regression pso_optimization &lt;- function(x, y) { # Define fitness function (minimize SSE) fitness_function &lt;- function(theta) { return(sse(theta, x, y)) } # Set parameter bounds lower_bounds &lt;- c(0.1, 0.01, min(x)) # Ensure positive scaling upper_bounds &lt;- c(max(y) * 2, 10, max(x)) # Run PSO optimization pso_result &lt;- psoptim( par = c(1, 1, 0), # Initial guess fn = fitness_function, lower = lower_bounds, upper = upper_bounds, control = list(maxit = 200, s = 50) # 200 iterations, 50 particles ) return(pso_result$par) # Return optimized parameters } # Generate synthetic data set.seed(123) x &lt;- seq(-5, 5, length.out = 100) true_theta &lt;- c(4, 1.5, 0) # True parameters (A, B, C) y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.3) # Run Particle Swarm Optimization estimated_theta &lt;- pso_optimization(x, y) # Display results cat(&quot;Estimated parameters (A, B, C) using Particle Swarm Optimization:\\n&quot;) #&gt; Estimated parameters (A, B, C) using Particle Swarm Optimization: print(estimated_theta) #&gt; [1] 4.06876562 1.42765613 0.01128767 # Plot data and fitted curve plot( x, y, main = &quot;Particle Swarm Optimization: Nonlinear Regression Optimization&quot;, pch = 19, cex = 0.5, xlab = &quot;x&quot;, ylab = &quot;y&quot; ) curve( nonlinear_model(estimated_theta, x), from = min(x), to = max(x), add = TRUE, col = &quot;red&quot;, lwd = 2 ) legend( &quot;topleft&quot;, legend = c(&quot;Data&quot;, &quot;Fitted Curve&quot;), pch = c(19, NA), lty = c(NA, 1), col = c(&quot;black&quot;, &quot;red&quot;) ) 6.2.3.5 Evolutionary Strategies Evolutionary Strategies (ES) are a class of evolutionary optimization algorithms that improve solutions by mutating and selecting individuals based on fitness. Unlike Genetic Algorithm, ES focuses on self-adaptive mutation rates and selection pressure rather than crossover. This makes ES particularly robust for continuous optimization problems like nonlinear regression. ES is particularly useful when: The function is complex, noisy, or lacks smooth gradients. Gradient-based methods fail due to non-differentiability. An adaptive approach to exploration and exploitation is needed. The goal of ES is to find an optimal solution \\(\\hat{\\theta}\\) that minimizes an objective function: \\[ \\hat{\\theta} = \\arg\\min_{\\theta} SSE(\\theta), \\] where: \\[ SSE(\\theta) = \\sum_{i=1}^{n} (y_i - f(x_i; \\theta))^2. \\] 1. Population Representation Each individual is a solution \\(\\theta_i\\) in the parameter space: \\[ \\theta_i = (\\theta_{i1}, \\theta_{i2}, \\theta_{i3}). \\] The population consists of multiple individuals, each representing different candidate parameters. 2. Mutation New candidate solutions are generated by adding random noise: \\[ \\theta&#39;_i = \\theta_i + \\sigma \\mathcal{N}(0, I), \\] where: \\(\\sigma\\) is the mutation step size, which adapts over time. \\(\\mathcal{N}(0, I)\\) is a standard normal distribution. 3. Selection ES employs \\((\\mu, \\lambda)\\)-selection: \\((\\mu, \\lambda)\\)-ES: Select the best \\(\\mu\\) solutions from \\(\\lambda\\) offspring. \\((\\mu + \\lambda)\\)-ES: Combine parents and offspring, selecting the top \\(\\mu\\). 4. Step-Size Adaptation Mutation strength \\(\\sigma\\) self-adapts using the 1/5 success rule: \\[ \\sigma_{t+1} = \\begin{cases} \\sigma_t / c, &amp; \\text{if success rate } &gt; 1/5 \\\\ \\sigma_t \\cdot c, &amp; \\text{if success rate } &lt; 1/5 \\end{cases} \\] where \\(c &gt; 1\\) is a scaling factor. Evolutionary Strategies Algorithm Initialize a population of \\(\\lambda\\) solutions with random parameters. Set mutation step size \\(\\sigma\\). Repeat for max iterations: Generate \\(\\lambda\\) offspring by mutating parent solutions. Evaluate fitness (SSE) of each offspring. Select the best \\(\\mu\\) solutions for the next generation. Adapt mutation step size based on success rate. Return the best solution found. # Load required library library(DEoptim) # Define a numerically stable logistic function safe_exp &lt;- function(x) { return(ifelse(x &gt; 700, Inf, exp(pmin(x, 700)))) # Prevent overflow } # Define the logistic growth model nonlinear_model &lt;- function(theta, x) { return(theta[1] / (1 + safe_exp(-theta[2] * (x - theta[3])))) } # Define the Sum of Squared Errors (SSE) function for optimization sse &lt;- function(theta, x, y) { predictions &lt;- nonlinear_model(theta, x) return(sum((y - predictions)^2)) } # Evolutionary Strategies Optimization (Using Differential Evolution) es_optimization &lt;- function(x, y) { # Define fitness function (minimize SSE) fitness_function &lt;- function(theta) { return(sse(theta, x, y)) } # Set parameter bounds lower_bounds &lt;- c(0.1, 0.01, min(x)) # Ensure positive scaling upper_bounds &lt;- c(max(y) * 2, 10, max(x)) # Run Differential Evolution (mimicking ES) es_result &lt;- DEoptim( fn = fitness_function, lower = lower_bounds, upper = upper_bounds, # 50 individuals, 200 generations, suppress iteration output DEoptim.control(NP = 50, itermax = 200, trace = F) ) return(es_result$optim$bestmem) # Return optimized parameters } # Generate synthetic data set.seed(123) x &lt;- seq(-5, 5, length.out = 100) true_theta &lt;- c(4, 1.5, 0) # True parameters (A, B, C) y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.3) # Run Evolutionary Strategies Optimization estimated_theta &lt;- es_optimization(x, y) # Display results cat(&quot;Estimated parameters (A, B, C) using Evolutionary Strategies:\\n&quot;) #&gt; Estimated parameters (A, B, C) using Evolutionary Strategies: print(estimated_theta) #&gt; par1 par2 par3 #&gt; 4.06876561 1.42765613 0.01128767 # Plot data and fitted curve plot( x, y, main = &quot;Evolutionary Strategies: Nonlinear Regression Optimization&quot;, pch = 19, cex = 0.5, xlab = &quot;x&quot;, ylab = &quot;y&quot; ) curve( nonlinear_model(estimated_theta, x), from = min(x), to = max(x), add = TRUE, col = &quot;red&quot;, lwd = 2 ) legend( &quot;topleft&quot;, legend = c(&quot;Data&quot;, &quot;Fitted Curve&quot;), pch = c(19, NA), lty = c(NA, 1), col = c(&quot;black&quot;, &quot;red&quot;) ) 6.2.4 Linearization 6.2.4.1 Taylor Series Approximation Taylor Series Approximation is a fundamental tool in nonlinear optimization, enabling local approximation of complex functions using polynomial expansions. It is widely used to linearize nonlinear models, facilitate derivative-based optimization, and derive Newton-type methods. Taylor series approximation is particularly useful when: A nonlinear function is difficult to compute directly. Optimization requires local gradient and curvature information. A simpler, polynomial-based approximation improves computational efficiency. Given a differentiable function \\(f(\\theta)\\), its Taylor series expansion around a point \\(\\theta_0\\) is: \\[ f(\\theta) = f(\\theta_0) + f&#39;(\\theta_0)(\\theta - \\theta_0) + \\frac{1}{2} f&#39;&#39;(\\theta_0)(\\theta - \\theta_0)^2 + \\mathcal{O}((\\theta - \\theta_0)^3). \\] For optimization, we often use: First-order approximation (Linear Approximation): \\[ f(\\theta) \\approx f(\\theta_0) + f&#39;(\\theta_0)(\\theta - \\theta_0). \\] Second-order approximation (Quadratic Approximation): \\[ f(\\theta) \\approx f(\\theta_0) + f&#39;(\\theta_0)(\\theta - \\theta_0) + \\frac{1}{2} f&#39;&#39;(\\theta_0)(\\theta - \\theta_0)^2. \\] For gradient-based optimization, we use the Newton-Raphson update: \\[ \\theta^{(k+1)} = \\theta^{(k)} - [H_f(\\theta^{(k)})]^{-1} \\nabla f(\\theta^{(k)}), \\] where: \\(\\nabla f(\\theta)\\) is the gradient (first derivative), \\(H_f(\\theta)\\) is the Hessian matrix (second derivative). For nonlinear regression, we approximate the Sum of Squared Errors (SSE): \\[ SSE(\\theta) = \\sum_{i=1}^{n} (y_i - f(x_i; \\theta))^2. \\] 1. First-Order Approximation (Gradient Descent) The gradient of SSE w.r.t. parameters \\(\\theta\\) is: \\[ \\nabla SSE(\\theta) = -2 \\sum_{i=1}^{n} (y_i - f(x_i; \\theta)) \\nabla f(x_i; \\theta). \\] Using first-order Taylor approximation, we update parameters via gradient descent: \\[ \\theta^{(k+1)} = \\theta^{(k)} - \\alpha \\nabla SSE(\\theta^{(k)}), \\] where \\(\\alpha\\) is the learning rate. 2. Second-Order Approximation (Newton’s Method) The Hessian matrix of SSE is: \\[ H_{SSE}(\\theta) = 2 \\sum_{i=1}^{n} \\nabla f(x_i; \\theta) \\nabla f(x_i; \\theta)^T - 2 \\sum_{i=1}^{n} (y_i - f(x_i; \\theta)) H_f(x_i; \\theta). \\] The Newton-Raphson update becomes: \\[ \\theta^{(k+1)} = \\theta^{(k)} - H_{SSE}(\\theta)^{-1} \\nabla SSE(\\theta). \\] # Load required libraries library(numDeriv) # Define a numerically stable logistic function safe_exp &lt;- function(x) { return(ifelse(is.na(x) | x &gt; 700, Inf, exp(pmin(x, 700)))) # Prevent overflow } # Define the logistic growth model nonlinear_model &lt;- function(theta, x) { return(theta[1] / (1 + safe_exp(-theta[2] * (x - theta[3])))) } # Define the Sum of Squared Errors (SSE) function sse &lt;- function(theta, x, y) { predictions &lt;- nonlinear_model(theta, x) return(sum((y - predictions) ^ 2, na.rm = TRUE)) # Avoid NA errors } # First-Order Approximation: Gradient Descent Optimization gradient_descent &lt;- function(x, y, alpha = 0.005, tol = 1e-6, max_iter = 5000) { theta &lt;- c(2, 1, 0) # Initial guess for (i in 1:max_iter) { grad_sse &lt;- grad(function(t) sse(t, x, y), theta) # Compute gradient theta_new &lt;- theta - alpha * grad_sse # Update parameters if (sum(abs(theta_new - theta)) &lt; tol) break # Check convergence theta &lt;- theta_new } return(theta) } # Second-Order Approximation: Newton&#39;s Method with Regularization newton_method &lt;- function(x, y, tol = 1e-6, max_iter = 100, lambda = 1e-4) { theta &lt;- c(2, 1, 0) # Initial guess for (i in 1:max_iter) { grad_sse &lt;- grad(function(t) sse(t, x, y), theta) # Compute gradient hessian_sse &lt;- hessian(function(t) sse(t, x, y), theta) # Compute Hessian # Regularize Hessian to avoid singularity hessian_reg &lt;- hessian_sse + lambda * diag(length(theta)) # Ensure Hessian is invertible if (is.na(det(hessian_reg)) || det(hessian_reg) &lt; 1e-10) { message(&quot;Singular Hessian encountered; increasing regularization.&quot;) lambda &lt;- lambda * 10 # Increase regularization next } # Newton update theta_new &lt;- theta - solve(hessian_reg) %*% grad_sse if (sum(abs(theta_new - theta)) &lt; tol) break # Check convergence theta &lt;- theta_new } return(theta) } # Generate synthetic data set.seed(123) x &lt;- seq(-5, 5, length.out = 100) true_theta &lt;- c(4, 1.5, 0) # True parameters (A, B, C) y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.3) # Run Gradient Descent estimated_theta_gd &lt;- gradient_descent(x, y) # Run Newton&#39;s Method with Regularization estimated_theta_newton &lt;- newton_method(x, y) # Display results cat(&quot;Estimated parameters (A, B, C) using Gradient Descent:\\n&quot;) #&gt; Estimated parameters (A, B, C) using Gradient Descent: print(estimated_theta_gd) #&gt; [1] 4.06876224 1.42766371 0.01128539 cat(&quot;Estimated parameters (A, B, C) using Newton&#39;s Method:\\n&quot;) #&gt; Estimated parameters (A, B, C) using Newton&#39;s Method: print(estimated_theta_newton) #&gt; [,1] #&gt; [1,] 4.06876368 #&gt; [2,] 1.42766047 #&gt; [3,] 0.01128636 # Plot data and fitted curve plot( x, y, main = &quot;Taylor Series Approximation: Nonlinear Regression Optimization&quot;, pch = 19, cex = 0.5, xlab = &quot;x&quot;, ylab = &quot;y&quot; ) curve( nonlinear_model(estimated_theta_gd, x), from = min(x), to = max(x), add = TRUE, col = &quot;blue&quot;, lwd = 2, lty = 2 # Dashed line to differentiate Gradient Descent ) curve( nonlinear_model(estimated_theta_newton, x), from = min(x), to = max(x), add = TRUE, col = &quot;red&quot;, lwd = 2 ) legend( &quot;topleft&quot;, legend = c(&quot;Data&quot;, &quot;Gradient Descent&quot;, &quot;Newton&#39;s Method (Regularized)&quot;), pch = c(19, NA, NA), lty = c(NA, 2, 1), col = c(&quot;black&quot;, &quot;blue&quot;, &quot;red&quot;) ) 6.2.4.2 Log-Linearization Log-Linearization is a mathematical technique used to transform nonlinear models into linear models by taking the logarithm of both sides. This transformation simplifies parameter estimation and enables the use of linear regression techniques on originally nonlinear functions. Log-linearization is particularly useful when: The model exhibits exponential, power-law, or logistic growth behavior. Linear regression methods are preferred over nonlinear optimization. A linearized version provides better interpretability and computational efficiency. A nonlinear model can often be expressed in the form: \\[ y = f(x; \\theta). \\] Applying a log transformation, we obtain: \\[ \\log y = g(x; \\theta), \\] where \\(g(x; \\theta)\\) is now linear in parameters. We then estimate \\(\\theta\\) using Ordinary Least Squares. Example 1: Exponential Model Consider an exponential growth model: \\[ y = A e^{Bx}. \\] Taking the natural logarithm: \\[ \\log y = \\log A + Bx. \\] This is now linear in \\(\\log y\\), allowing estimation via linear regression. Example 2: Power Law Model For a power law function: \\[ y = A x^B. \\] Taking logs: \\[ \\log y = \\log A + B \\log x. \\] Again, this is linearized, making it solvable via OLS regression. Log-Linearization Algorithm Apply the logarithm transformation to the dependent variable. Transform the equation into a linear form. Use linear regression (OLS) to estimate parameters. Convert parameters back to original scale if necessary. # Load required library library(stats) # Generate synthetic data for an exponential model set.seed(123) x &lt;- seq(1, 10, length.out = 100) true_A &lt;- 2 true_B &lt;- 0.3 y &lt;- true_A * exp(true_B * x) + rnorm(length(x), sd = 0.5) # Apply logarithmic transformation log_y &lt;- log(y) # Fit linear regression model log_linear_model &lt;- lm(log_y ~ x) # Extract estimated parameters estimated_B &lt;- coef(log_linear_model)[2] # Slope in log-space estimated_A &lt;- exp(coef(log_linear_model)[1]) # Intercept (back-transformed) # Display results cat(&quot;Estimated parameters (A, B) using Log-Linearization:\\n&quot;) #&gt; Estimated parameters (A, B) using Log-Linearization: print(c(estimated_A, estimated_B)) #&gt; (Intercept) x #&gt; 2.0012577 0.3001223 # Plot data and fitted curve plot( x, y, main = &quot;Log-Linearization: Nonlinear Regression Optimization&quot;, pch = 19, cex = 0.5, xlab = &quot;x&quot;, ylab = &quot;y&quot; ) curve( estimated_A * exp(estimated_B * x), from = min(x), to = max(x), add = TRUE, col = &quot;red&quot;, lwd = 2 ) legend( &quot;topleft&quot;, legend = c(&quot;Data&quot;, &quot;Fitted Log-Linear Model&quot;), pch = c(19, NA), lty = c(NA, 1), col = c(&quot;black&quot;, &quot;red&quot;) ) 6.2.5 Hybrid 6.2.5.1 Adaptive Levenberg-Marquardt The Levenberg-Marquardt Algorithm (LMA) is a powerful nonlinear least squares optimization method that adaptively combines: Gauss-Newton Algorithm for fast convergence near the solution. Steepest Descent (Gradient Descent) for stability when far from the solution. The Adaptive Levenberg-Marquardt Algorithm further adjusts the damping parameter \\(\\tau\\) dynamically, making it more efficient in practice. Given an objective function Sum of Squared Errors (SSE): \\[ SSE(\\theta) = \\sum_{i=1}^{n} (y_i - f(x_i; \\theta))^2. \\] The update rule for LMA is: \\[ \\hat{\\theta}^{(j+1)} = \\hat{\\theta}^{(j)} - \\alpha_j [\\mathbf{F}(\\hat{\\theta}^{(j)})&#39; \\mathbf{F}(\\hat{\\theta}^{(j)}) + \\tau \\mathbf{I}_{p \\times p}]\\frac{\\partial \\mathbf{Q}(\\hat{\\theta}^{(j)})}{\\partial \\theta}. \\] where: \\(\\tau\\) is the adaptive damping parameter. \\(\\mathbf{I}_{p \\times p}\\) is the identity matrix. \\(\\mathbf{F}(\\hat{\\theta}^{(j)})\\) is the Jacobian matrix of partial derivatives. \\(\\frac{\\partial \\mathbf{Q}(\\hat{\\theta}^{(j)})}{\\partial \\theta}\\) is the gradient vector. \\(\\alpha_j\\) is the learning rate. The key adaptation rule for \\(\\tau\\): If the new step decreases SSE, reduce \\(\\tau\\): \\[ \\tau \\gets \\tau / 10. \\] Otherwise, increase \\(\\tau\\) to ensure stability: \\[ \\tau \\gets 10\\tau. \\] This adjustment ensures a balance between stability and efficiency. Adaptive Levenberg-Marquardt Algorithm Initialize parameters \\(\\theta_0\\), damping factor \\(\\tau\\). Compute Jacobian \\(\\mathbf{F}(\\hat{\\theta}^{(j)})\\). Compute step direction using modified Gauss-Newton update. Adjust \\(\\tau\\) dynamically: Decrease \\(\\tau\\) if SSE improves. Increase \\(\\tau\\) if SSE worsens. Repeat until convergence. # Load required libraries library(numDeriv) # Define a numerically stable logistic function safe_exp &lt;- function(x) { return(ifelse(x &gt; 700, Inf, exp(pmin(x, 700)))) # Prevent overflow } # Define the logistic growth model nonlinear_model &lt;- function(theta, x) { return(theta[1] / (1 + safe_exp(-theta[2] * (x - theta[3])))) } # Define the Sum of Squared Errors (SSE) function sse &lt;- function(theta, x, y) { predictions &lt;- nonlinear_model(theta, x) return(sum((y - predictions) ^ 2)) } # Adaptive Levenberg-Marquardt Optimization adaptive_lm_optimization &lt;- function(x, y, tol = 1e-6, max_iter = 100) { theta &lt;- c(2, 1, 0) # Initial parameter guess tau &lt;- 1e-3 # Initial damping parameter alpha &lt;- 1 # Step size scaling iter &lt;- 0 while (iter &lt; max_iter) { iter &lt;- iter + 1 # Compute Jacobian numerically J &lt;- jacobian(function(t) nonlinear_model(t, x), theta) # Compute gradient of SSE residuals &lt;- y - nonlinear_model(theta, x) grad_sse &lt;- -2 * t(J) %*% residuals # Compute Hessian approximation H &lt;- 2 * t(J) %*% J + tau * diag(length(theta)) # Compute parameter update step delta_theta &lt;- solve(H, grad_sse) # Trial step theta_new &lt;- theta - alpha * delta_theta # Compute SSE for new parameters if (sse(theta_new, x, y) &lt; sse(theta, x, y)) { # Accept step, decrease tau theta &lt;- theta_new tau &lt;- tau / 10 } else { # Reject step, increase tau tau &lt;- tau * 10 } # Check convergence if (sum(abs(delta_theta)) &lt; tol) break } return(theta) } # Generate synthetic data set.seed(123) x &lt;- seq(-5, 5, length.out = 100) true_theta &lt;- c(4, 1.5, 0) # True parameters (A, B, C) y &lt;- nonlinear_model(true_theta, x) + rnorm(length(x), sd = 0.3) # Run Adaptive Levenberg-Marquardt Optimization estimated_theta &lt;- adaptive_lm_optimization(x, y) # Display results cat(&quot;Estimated parameters (A, B, C) using Adaptive Levenberg-Marquardt:\\n&quot;) #&gt; Estimated parameters (A, B, C) using Adaptive Levenberg-Marquardt: print(estimated_theta) #&gt; [,1] #&gt; [1,] 4.06876562 #&gt; [2,] 1.42765612 #&gt; [3,] 0.01128767 # Plot data and fitted curve plot( x, y, main = &quot;Adaptive Levenberg-Marquardt: Nonlinear Regression Optimization&quot;, pch = 19, cex = 0.5, xlab = &quot;x&quot;, ylab = &quot;y&quot; ) curve( nonlinear_model(estimated_theta, x), from = min(x), to = max(x), add = TRUE, col = &quot;red&quot;, lwd = 2 ) legend( &quot;topleft&quot;, legend = c(&quot;Data&quot;, &quot;Fitted Curve&quot;), pch = c(19, NA), lty = c(NA, 1), col = c(&quot;black&quot;, &quot;red&quot;) ) 6.2.6 Comparison of Nonlinear Optimizers # ALL-IN-ONE R SCRIPT COMPARING MULTIPLE NONLINEAR-REGRESSION OPTIMIZERS library(minpack.lm) # nlsLM (Levenberg-Marquardt) library(dfoptim) # Powell (nmk), Hooke-Jeeves library(nloptr) # trust-region reflective library(GA) # genetic algorithm library(DEoptim) # differential evolution library(GenSA) # simulated annealing library(pso) # particle swarm library(MASS) # for ginv fallback library(microbenchmark) library(ggplot2) library(dplyr) # -- 1) DEFINE MODELS (SIMPLE VS COMPLEX) --- # 3-parameter logistic f_logistic &lt;- function(theta, x) { A &lt;- theta[1] B &lt;- theta[2] C &lt;- theta[3] A / (1 + exp(-B * (x - C))) } sse_logistic &lt;- function(theta, x, y) sum((y - f_logistic(theta, x)) ^ 2) # 4-parameter &quot;extended&quot; model f_complex &lt;- function(theta, x) { A &lt;- theta[1] B &lt;- theta[2] C &lt;- theta[3] D &lt;- theta[4] A / (1 + exp(-B * (x - C))) + D * exp(-0.5 * x) } sse_complex &lt;- function(theta, x, y) sum((y - f_complex(theta, x)) ^ 2) # Generate synthetic data set.seed(123) n &lt;- 100 x_data &lt;- seq(-5, 5, length.out = n) # &quot;simple&quot; scenario true_theta_simple &lt;- c(4, 1.5, 0) y_data_simple &lt;- f_logistic(true_theta_simple, x_data) + rnorm(n, sd = 0.3) # &quot;complex&quot; scenario true_theta_complex &lt;- c(4, 1.2, -1, 0.5) y_data_complex &lt;- f_complex(true_theta_complex, x_data) + rnorm(n, sd = 0.3) # -- 2) OPTIMIZERS (EXCEPT BISECTION) ---- # # All methods share signature: # FUN(par, x, y, sse_fn, model_fn, lower=NULL, upper=NULL, ...) # Some do not strictly use lower/upper if unconstrained. # 2.1 Gauss–Newton gauss_newton_fit &lt;- function(par, x, y, sse_fn, model_fn, lower = NULL, upper = NULL, max_iter = 100, tol = 1e-6) { theta &lt;- par for (iter in seq_len(max_iter)) { eps &lt;- 1e-6 nP &lt;- length(theta) Fmat &lt;- matrix(0, nrow = length(x), ncol = nP) for (p in seq_len(nP)) { pert &lt;- theta pert[p] &lt;- pert[p] + eps Fmat[, p] &lt;- (model_fn(pert, x) - model_fn(theta, x)) / eps } r &lt;- y - model_fn(theta, x) delta &lt;- tryCatch( solve(t(Fmat) %*% Fmat, t(Fmat) %*% r), error = function(e) { # fallback to pseudoinverse MASS::ginv(t(Fmat) %*% Fmat) %*% (t(Fmat) %*% r) } ) theta_new &lt;- theta + delta if (sum(abs(theta_new - theta)) &lt; tol) break theta &lt;- theta_new } theta } # 2.2 Modified Gauss-Newton (with step halving) modified_gauss_newton_fit &lt;- function(par, x, y, sse_fn, model_fn, lower = NULL, upper = NULL, max_iter = 100, tol = 1e-6) { theta &lt;- par for (iter in seq_len(max_iter)) { eps &lt;- 1e-6 nP &lt;- length(theta) Fmat &lt;- matrix(0, nrow = length(x), ncol = nP) for (p in seq_len(nP)) { pert &lt;- theta pert[p] &lt;- pert[p] + eps Fmat[, p] &lt;- (model_fn(pert, x) - model_fn(theta, x)) / eps } r &lt;- y - model_fn(theta, x) lhs &lt;- t(Fmat) %*% Fmat rhs &lt;- t(Fmat) %*% r delta &lt;- tryCatch( solve(lhs, rhs), error = function(e) MASS::ginv(lhs) %*% rhs ) sse_old &lt;- sse_fn(theta, x, y) alpha &lt;- 1 for (k in 1:10) { new_sse &lt;- sse_fn(theta + alpha * delta, x, y) if (new_sse &lt; sse_old) break alpha &lt;- alpha / 2 } theta_new &lt;- theta + alpha * delta if (sum(abs(theta_new - theta)) &lt; tol) break theta &lt;- theta_new } theta } # 2.3 Steepest Descent (Gradient Descent) steepest_descent_fit &lt;- function(par, x, y, sse_fn, model_fn, lower = NULL, upper = NULL, lr = 0.001, max_iter = 5000, tol = 1e-6) { theta &lt;- par for (iter in seq_len(max_iter)) { eps &lt;- 1e-6 f0 &lt;- sse_fn(theta, x, y) grad &lt;- numeric(length(theta)) for (p in seq_along(theta)) { pert &lt;- theta pert[p] &lt;- pert[p] + eps grad[p] &lt;- (sse_fn(pert, x, y) - f0) / eps } theta_new &lt;- theta - lr * grad if (sum(abs(theta_new - theta)) &lt; tol) break theta &lt;- theta_new } theta } # 2.4 Levenberg–Marquardt (nlsLM) lm_fit &lt;- function(par, x, y, sse_fn, model_fn, lower = NULL, upper = NULL, form = c(&quot;simple&quot;, &quot;complex&quot;)) { form &lt;- match.arg(form) if (form == &quot;simple&quot;) { fit &lt;- nlsLM(y ~ A / (1 + exp(-B * (x - C))), start = list(A = par[1], B = par[2], C = par[3])) } else { fit &lt;- nlsLM(y ~ A / (1 + exp(-B * (x - C))) + D * exp(-0.5 * x), start = list( A = par[1], B = par[2], C = par[3], D = par[4] )) } coef(fit) } # 2.5 Newton–Raphson (with numeric Hessian, fallback if singular) newton_raphson_fit &lt;- function(par, x, y, sse_fn, model_fn, lower = NULL, upper = NULL, max_iter = 50, tol = 1e-6) { theta &lt;- par for (i in seq_len(max_iter)) { eps &lt;- 1e-6 f0 &lt;- sse_fn(theta, x, y) grad &lt;- numeric(length(theta)) for (p in seq_along(theta)) { pert &lt;- theta pert[p] &lt;- pert[p] + eps grad[p] &lt;- (sse_fn(pert, x, y) - f0) / eps } Hess &lt;- matrix(0, length(theta), length(theta)) for (p in seq_along(theta)) { pert_p &lt;- theta pert_p[p] &lt;- pert_p[p] + eps f_p &lt;- sse_fn(pert_p, x, y) for (q in seq_along(theta)) { pert_q &lt;- pert_p pert_q[q] &lt;- pert_q[q] + eps Hess[p, q] &lt;- (sse_fn(pert_q, x, y) - f_p - (f0 - sse_fn(theta, x, y))) / (eps ^ 2) } } delta &lt;- tryCatch( solve(Hess, grad), error = function(e) MASS::ginv(Hess) %*% grad ) theta_new &lt;- theta - delta if (sum(abs(theta_new - theta)) &lt; tol) break theta &lt;- theta_new } theta } # 2.6 Quasi–Newton (BFGS via optim) quasi_newton_fit &lt;- function(par, x, y, sse_fn, model_fn, lower = NULL, upper = NULL) { fn &lt;- function(pp) sse_fn(pp, x, y) res &lt;- optim(par, fn, method = &quot;BFGS&quot;) res$par } # 2.7 Trust-region reflective (nloptr) trust_region_fit &lt;- function(par, x, y, sse_fn, model_fn, lower = NULL, upper = NULL) { # numeric gradient grad_numeric &lt;- function(pp, eps = 1e-6) { g &lt;- numeric(length(pp)) f0 &lt;- sse_fn(pp, x, y) for (i in seq_along(pp)) { p2 &lt;- pp p2[i] &lt;- p2[i] + eps g[i] &lt;- (sse_fn(p2, x, y) - f0) / eps } g } eval_f &lt;- function(pp) { val &lt;- sse_fn(pp, x, y) gr &lt;- grad_numeric(pp) list(objective = val, gradient = gr) } lb &lt;- if (is.null(lower)) rep(-Inf, length(par)) else lower ub &lt;- if (is.null(upper)) rep(Inf, length(par)) else upper res &lt;- nloptr( x0 = par, eval_f = eval_f, lb = lb, ub = ub, opts = list( algorithm = &quot;NLOPT_LD_TNEWTON&quot;, maxeval = 500, xtol_rel = 1e-6 ) ) res$solution } # 2.8 Grid search grid_search_fit &lt;- function(par, x, y, sse_fn, model_fn, lower = NULL, upper = NULL, grid_defs = NULL) { if (is.null(grid_defs)) stop(&quot;Must provide grid_defs for multi-parameter grid search.&quot;) g &lt;- expand.grid(grid_defs) g$SSE &lt;- apply(g, 1, function(rowp) sse_fn(as.numeric(rowp), x, y)) best_idx &lt;- which.min(g$SSE) as.numeric(g[best_idx, seq_along(grid_defs)]) } # 2.9 Nelder-Mead nelder_mead_fit &lt;- function(par, x, y, sse_fn, model_fn, lower = NULL, upper = NULL) { fn &lt;- function(pp) sse_fn(pp, x, y) res &lt;- optim(par, fn, method = &quot;Nelder-Mead&quot;) res$par } # 2.10 Powell’s method (dfoptim::nmk for unconstrained) powell_fit &lt;- function(par, x, y, sse_fn, model_fn, lower = NULL, upper = NULL) { fn &lt;- function(pp) sse_fn(pp, x, y) dfoptim::nmk(par, fn)$par } # 2.11 Hooke-Jeeves (dfoptim::hjkb) hooke_jeeves_fit &lt;- function(par, x, y, sse_fn, model_fn, lower = NULL, upper = NULL) { fn &lt;- function(pp) sse_fn(pp, x, y) dfoptim::hjkb(par, fn)$par } # 2.12 Random Search random_search_fit &lt;- function(par, x, y, sse_fn, model_fn, lower, upper, max_iter = 2000, ...) { best_par &lt;- NULL best_sse &lt;- Inf dimp &lt;- length(lower) for (i in seq_len(max_iter)) { candidate &lt;- runif(dimp, min = lower, max = upper) val &lt;- sse_fn(candidate, x, y) if (val &lt; best_sse) { best_sse &lt;- val best_par &lt;- candidate } } best_par } # 2.13 Differential Evolution (DEoptim) diff_evo_fit &lt;- function(par, x, y, sse_fn, model_fn, lower, upper, max_iter = 100, ...) { fn &lt;- function(v) sse_fn(v, x, y) out &lt;- DEoptim(fn, lower = lower, upper = upper, DEoptim.control(NP = 50, itermax = max_iter, trace = F)) out$optim$bestmem } # 2.14 Simulated Annealing (GenSA) sim_anneal_fit &lt;- function(par, x, y, sse_fn, model_fn, lower = NULL, upper = NULL, ...) { fn &lt;- function(pp) sse_fn(pp, x, y) lb &lt;- if (is.null(lower)) rep(-Inf, length(par)) else lower ub &lt;- if (is.null(upper)) rep(Inf, length(par)) else upper # GenSA requires: GenSA(par, fn, lower, upper, control=list(...)) out &lt;- GenSA( par, fn, lower = lb, upper = ub, control = list(max.call = 10000) ) out$par } # 2.15 Genetic Algorithm (GA) genetic_fit &lt;- function(par, x, y, sse_fn, model_fn, lower, upper, max_iter = 100, ...) { fitness_fun &lt;- function(pp) - sse_fn(pp, x, y) gares &lt;- ga( type = &quot;real-valued&quot;, fitness = fitness_fun, lower = lower, upper = upper, popSize = 50, maxiter = max_iter, run = 50 ) gares@solution[1,] } # 2.16 Particle Swarm (pso) particle_swarm_fit &lt;- function(par, x, y, sse_fn, model_fn, lower, upper, max_iter = 100, ...) { fn &lt;- function(pp) sse_fn(pp, x, y) res &lt;- psoptim( par = (lower + upper) / 2, fn = fn, lower = lower, upper = upper, control = list(maxit = max_iter) ) res$par } # -- 3) RUN METHOD WRAPPER --- run_method &lt;- function(method_name, FUN, par_init, x, y, sse_fn, model_fn, lower = NULL, upper = NULL, ...) { mb &lt;- microbenchmark(result = { out &lt;- FUN(par_init, x, y, sse_fn, model_fn, lower, upper, ...) out }, times = 1) final_par &lt;- FUN(par_init, x, y, sse_fn, model_fn, lower, upper, ...) if (is.null(final_par)) { # e.g. placeholders that return NULL return(data.frame( Method = method_name, Parameters = &quot;N/A&quot;, SSE = NA, Time_ms = NA )) } data.frame( Method = method_name, Parameters = paste(round(final_par, 4), collapse = &quot;, &quot;), SSE = round(sse_fn(final_par, x, y), 6), Time_ms = median(mb$time) / 1e6 ) } # -- 4) MASTER FUNCTION TO COMPARE ALL METHODS (SIMPLE / COMPLEX) --- compare_all_methods &lt;- function(is_complex = FALSE) { if (!is_complex) { # SIMPLE (3-param logistic) x &lt;- x_data y &lt;- y_data_simple sse_fn &lt;- sse_logistic model_fn &lt;- f_logistic init_par &lt;- c(3, 1, 0.5) grid_defs &lt;- list( A = seq(2, 6, length.out = 10), B = seq(0.5, 2, length.out = 10), C = seq(-1, 1, length.out = 10) ) lower &lt;- c(1, 0.1,-3) upper &lt;- c(6, 3, 3) lm_form &lt;- &quot;simple&quot; } else { # COMPLEX (4-param model) x &lt;- x_data y &lt;- y_data_complex sse_fn &lt;- sse_complex model_fn &lt;- f_complex init_par &lt;- c(3, 1,-0.5, 0.2) grid_defs &lt;- list( A = seq(2, 6, length.out = 8), B = seq(0.5, 2, length.out = 8), C = seq(-2, 2, length.out = 8), D = seq(0, 2, length.out = 8) ) lower &lt;- c(1, 0.1,-3, 0) upper &lt;- c(6, 3, 3, 2) lm_form &lt;- &quot;complex&quot; } # RUN each method out &lt;- bind_rows( run_method( &quot;Gauss-Newton&quot;, gauss_newton_fit, init_par, x, y, sse_fn, model_fn ), run_method( &quot;Modified Gauss-Newton&quot;, modified_gauss_newton_fit, init_par, x, y, sse_fn, model_fn ), run_method( &quot;Steepest Descent&quot;, steepest_descent_fit, init_par, x, y, sse_fn, model_fn ), run_method( &quot;Levenberg-Marquardt (nlsLM)&quot;, lm_fit, init_par, x, y, sse_fn, model_fn, form = lm_form ), run_method( &quot;Newton-Raphson&quot;, newton_raphson_fit, init_par, x, y, sse_fn, model_fn ), run_method( &quot;Quasi-Newton (BFGS)&quot;, quasi_newton_fit, init_par, x, y, sse_fn, model_fn ), run_method( &quot;Trust-region Reflective&quot;, trust_region_fit, init_par, x, y, sse_fn, model_fn, lower, upper ), run_method( &quot;Grid Search&quot;, grid_search_fit, NULL, x, y, sse_fn, model_fn, grid_defs = grid_defs ), run_method( &quot;Nelder-Mead&quot;, nelder_mead_fit, init_par, x, y, sse_fn, model_fn ), run_method(&quot;Powell&#39;s method&quot;, powell_fit, init_par, x, y, sse_fn, model_fn), run_method( &quot;Hooke-Jeeves&quot;, hooke_jeeves_fit, init_par, x, y, sse_fn, model_fn ), run_method( &quot;Random Search&quot;, random_search_fit, NULL, x, y, sse_fn, model_fn, lower, upper, max_iter = 1000 ), run_method( &quot;Differential Evolution&quot;, diff_evo_fit, NULL, x, y, sse_fn, model_fn, lower, upper, max_iter = 50 ), run_method( &quot;Simulated Annealing&quot;, sim_anneal_fit, init_par, x, y, sse_fn, model_fn, lower, upper ), run_method( &quot;Genetic Algorithm&quot;, genetic_fit, NULL, x, y, sse_fn, model_fn, lower, upper, max_iter = 50 ), run_method( &quot;Particle Swarm&quot;, particle_swarm_fit, NULL, x, y, sse_fn, model_fn, lower, upper, max_iter = 50 ) ) out } # -- 5) RUN &amp; VISUALIZE ---- # Compare &quot;simple&quot; logistic (3 params) results_simple &lt;- compare_all_methods(is_complex = FALSE) results_simple$Problem &lt;- &quot;Simple&quot; # Compare &quot;complex&quot; (4 params) results_complex &lt;- compare_all_methods(is_complex = TRUE) results_complex$Problem &lt;- &quot;Complex&quot; # Combine all_results &lt;- rbind(results_simple, results_complex) # print(all_results) # DT::datatable(all_results) # Example: SSE by method &amp; problem ggplot(all_results, aes(x = Method, y = log(SSE), fill = Problem)) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) + theme_minimal(base_size = 11) + labs(title = &quot;Comparison of SSE by Method &amp; Problem Complexity&quot;, x = &quot;&quot;, y = &quot;Log(Sum of Squared Errors)&quot;) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Example: Time (ms) by method &amp; problem ggplot(all_results, aes(x = Method, y = Time_ms, fill = Problem)) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) + theme_minimal(base_size = 11) + labs(title = &quot;Comparison of Computation Time by Method &amp; Problem Complexity&quot;, x = &quot;&quot;, y = &quot;Time (ms)&quot;) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) References "],["practical-considerations-2.html", "6.3 Practical Considerations", " 6.3 Practical Considerations For optimization algorithms to converge, they require good initial estimates of the parameters. The choice of starting values, constraints, and the complexity of the model all play a role in whether an optimization algorithm successfully finds a suitable solution. 6.3.1 Selecting Starting Values Choosing good starting values can significantly impact the efficiency and success of optimization algorithms. Several approaches can be used: Prior or theoretical information: If prior knowledge about the parameters is available, it should be incorporated into the choice of initial values. Grid search or graphical inspection of \\(SSE(\\theta)\\): Evaluating the sum of squared errors (SSE) across a grid of possible values can help identify promising starting points. Ordinary Least Squares estimates: If a linear approximation of the model exists, using OLS to obtain initial estimates can be effective. Model interpretation: Understanding the structure and behavior of the model can provide intuition for reasonable starting values. Expected Value Parameterization: Reformulating the model based on expected values may improve the interpretability and numerical stability of the estimation. 6.3.1.1 Grid Search for Optimal Starting Values # Set seed for reproducibility set.seed(123) # Generate x as 100 integers using seq function x &lt;- seq(0, 100, 1) # Generate coefficients for exponential function a &lt;- runif(1, 0, 20) # Random coefficient a b &lt;- runif(1, 0.005, 0.075) # Random coefficient b c &lt;- runif(101, 0, 5) # Random noise # Generate y as a * e^(b*x) + c y &lt;- a * exp(b * x) + c # Print the generated parameters cat(&quot;Generated coefficients:\\n&quot;) #&gt; Generated coefficients: cat(&quot;a =&quot;, a, &quot;\\n&quot;) #&gt; a = 5.75155 cat(&quot;b =&quot;, b, &quot;\\n&quot;) #&gt; b = 0.06018136 # Define our data frame datf &lt;- data.frame(x, y) # Define our model function mod &lt;- function(a, b, x) { a * exp(b * x) } # Ensure all y values are positive (avoid log issues) y_adj &lt;- ifelse(y &gt; 0, y, min(y[y &gt; 0]) + 1e-3) # Shift small values slightly # Create adjusted dataframe datf_adj &lt;- data.frame(x, y_adj) # Linearize by taking log(y) lin_mod &lt;- lm(log(y_adj) ~ x, data = datf_adj) # Extract starting values astrt &lt;- exp(coef(lin_mod)[1]) # Convert intercept back from log scale bstrt &lt;- coef(lin_mod)[2] # Slope remains the same cat(&quot;Starting values for non-linear fit:\\n&quot;) print(c(astrt, bstrt)) # Fit nonlinear model with these starting values nlin_mod &lt;- nls(y ~ mod(a, b, x), start = list(a = astrt, b = bstrt), data = datf) # Model summary summary(nlin_mod) # Plot original data plot( x, y, main = &quot;Exponential Growth Fit&quot;, col = &quot;blue&quot;, pch = 16, xlab = &quot;x&quot;, ylab = &quot;y&quot; ) # Add fitted curve in red lines(x, predict(nlin_mod), col = &quot;red&quot;, lwd = 2) # Add legend legend( &quot;topleft&quot;, legend = c(&quot;Original Data&quot;, &quot;Fitted Model&quot;), col = c(&quot;blue&quot;, &quot;red&quot;), pch = c(16, NA), lwd = c(NA, 2) ) # Define grid of possible parameter values aseq &lt;- seq(10, 18, 0.2) bseq &lt;- seq(0.001, 0.075, 0.001) na &lt;- length(aseq) nb &lt;- length(bseq) SSout &lt;- matrix(0, na * nb, 3) # Matrix to store SSE values cnt &lt;- 0 # Evaluate SSE across grid for (k in 1:na) { for (j in 1:nb) { cnt &lt;- cnt + 1 ypred &lt;- # Evaluate model at these parameter values mod(aseq[k], bseq[j], x) # Compute SSE ss &lt;- sum((y - ypred) ^ 2) SSout[cnt, 1] &lt;- aseq[k] SSout[cnt, 2] &lt;- bseq[j] SSout[cnt, 3] &lt;- ss } } # Identify optimal starting values mn_indx &lt;- which.min(SSout[, 3]) astrt &lt;- SSout[mn_indx, 1] bstrt &lt;- SSout[mn_indx, 2] # Fit nonlinear model using optimal starting values nlin_modG &lt;- nls(y ~ mod(a, b, x), start = list(a = astrt, b = bstrt)) # Display model results summary(nlin_modG) #&gt; #&gt; Formula: y ~ mod(a, b, x) #&gt; #&gt; Parameters: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; a 5.889e+00 1.986e-02 296.6 &lt;2e-16 *** #&gt; b 5.995e-02 3.644e-05 1645.0 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 2.135 on 99 degrees of freedom #&gt; #&gt; Number of iterations to convergence: 4 #&gt; Achieved convergence tolerance: 7.204e-06 Note: The nls_multstart package can perform a grid search more efficiently without requiring manual looping. Visualizing Prediction Intervals Once the model is fitted, it is useful to visualize prediction intervals to assess model uncertainty. # Load necessary package library(nlstools) # Plot fitted model with confidence and prediction intervals plotFit( nlin_modG, interval = &quot;both&quot;, pch = 19, shade = TRUE, col.conf = &quot;skyblue4&quot;, col.pred = &quot;lightskyblue2&quot;, data = datf ) 6.3.1.2 Using Programmed Starting Values in nls Many nonlinear models have well-established functional forms, allowing for programmed starting values in the nls function. For example, models such as logistic growth and asymptotic regression have built-in self-starting functions. To explore available self-starting models in R, use: apropos(&quot;^SS&quot;) #&gt; [1] &quot;ss&quot; &quot;SSasymp&quot; &quot;SSasympOff&quot; &quot;SSasympOrig&quot; &quot;SSbiexp&quot; #&gt; [6] &quot;SSD&quot; &quot;sse&quot; &quot;sse_complex&quot; &quot;sse_df&quot; &quot;sse_final&quot; #&gt; [11] &quot;sse_logistic&quot; &quot;sse_values&quot; &quot;SSfol&quot; &quot;SSfpl&quot; &quot;SSgompertz&quot; #&gt; [16] &quot;SSlogis&quot; &quot;SSmicmen&quot; &quot;SSout&quot; &quot;SSweibull&quot; This command lists functions with names starting with SS, which typically denote self-starting functions for nonlinear regression. 6.3.1.3 Custom Self-Starting Functions If your model does not match any built-in nls functions, you can define your own self-starting function. Self-starting functions in R automate the process of estimating initial values, which helps in fitting nonlinear models more efficiently. If needed, a self-starting function should: Define the nonlinear equation. Implement a method for computing starting values. Return the function structure in an appropriate format. 6.3.2 Handling Constrained Parameters In some cases, parameters must satisfy constraints (e.g., \\(\\theta_i &gt; a\\) or \\(a &lt; \\theta_i &lt; b\\)). The following strategies help address constrained parameter estimation: Fit the model without constraints first: If the unconstrained parameter estimates satisfy the desired constraints, no further action is needed. Re-parameterization: If the estimated parameters violate constraints, consider re-parameterizing the model to naturally enforce the required bounds. 6.3.3 Failure to Converge Several factors can cause an algorithm to fail to converge: A “flat” SSE function: If the sum of squared errors \\(SSE(\\theta)\\) is relatively constant in the neighborhood of the minimum, the algorithm may struggle to locate an optimal solution. Poor starting values: Trying different or better initial values can help. Overly complex models: If the model is too complex relative to the data, consider simplifying it. 6.3.4 Convergence to a Local Minimum Linear least squares models have a well-defined, unique minimum because the SSE function is quadratic: \\[ SSE(\\theta) = (Y - X\\beta)&#39;(Y - X\\beta) \\] Nonlinear least squares models may have multiple local minima. Testing different starting values can help identify a global minimum. Graphing \\(SSE(\\theta)\\) as a function of individual parameters (if feasible) can provide insights. Alternative optimization algorithms such as Genetic Algorithm or particle swarm optimization may be useful in non-convex problems. 6.3.5 Model Adequacy and Estimation Considerations Assessing the adequacy of a nonlinear model involves checking its nonlinearity, goodness of fit, and residual behavior. Unlike linear models, nonlinear models do not always have a direct equivalent of \\(R^2\\), and issues such as collinearity, leverage, and residual heteroscedasticity must be carefully evaluated. 6.3.5.1 Components of Nonlinearity Bates and Watts (1980) defines two key aspects of nonlinearity in statistical modeling: Intrinsic Nonlinearity Measures the bending and twisting in the function \\(f(\\theta)\\). Assumes that the function is relatively flat (planar) in the neighborhood of \\(\\hat{\\theta}\\). If severe, the distribution of residuals will be distorted. Leads to: Slow convergence of optimization algorithms. Difficulties in identifying parameter estimates. Solution approaches: Higher-order Taylor expansions for estimation. Bayesian methods for parameter estimation. # Check intrinsic curvature modD &lt;- deriv3(~ a * exp(b * x), c(&quot;a&quot;, &quot;b&quot;), function(a, b, x) NULL) nlin_modD &lt;- nls(y ~ modD(a, b, x), start = list(a = astrt, b = bstrt), data = datf) rms.curv(nlin_modD) # Function from the MASS package to assess curvature #&gt; Parameter effects: c^theta x sqrt(F) = 0.0564 #&gt; Intrinsic: c^iota x sqrt(F) = 9e-04 Parameter-Effects Nonlinearity Measures how the curvature (nonlinearity) depends on the parameterization. Strong parameter effects nonlinearity can cause problems with inference on \\(\\hat{\\theta}\\). Can be assessed using: rms.curv function from MASS. Bootstrap-based inference. Solution: Try reparameterization to stabilize the function. 6.3.5.2 Goodness of Fit in Nonlinear Models In linear regression, we use the standard coefficient of determination ($R^2$): \\[ R^2 = \\frac{SSR}{SSTO} = 1 - \\frac{SSE}{SSTO} \\]​where: \\(SSR\\) = Regression Sum of Squares \\(SSE\\) = Error Sum of Squares \\(SSTO\\) = Total Sum of Squares However, in nonlinear models, the error and model sum of squares do not necessarily add up to the total corrected sum of squares: \\[ SSR + SSE \\neq SST \\] Thus, \\(R^2\\) is not directly valid in the nonlinear case. Instead, we use a pseudo-\\(R^2\\): \\[ R^2_{pseudo} = 1 - \\frac{\\sum_{i=1}^n ({Y}_i- \\hat{Y})^2}{\\sum_{i=1}^n (Y_i- \\bar{Y})^2} \\] Unlike true \\(R^2\\), this cannot be interpreted as the proportion of variability explained by the model. Should be used only for relative model comparison (e.g., comparing different nonlinear models). 6.3.5.3 Residual Analysis in Nonlinear Models Residual plots help assess model adequacy, particularly when intrinsic curvature is small. In nonlinear models, the studentized residuals are: \\[ r_i = \\frac{e_i}{s \\sqrt{1-\\hat{c}_i}} \\] where: \\(e_i\\) = residual for observation \\(i\\) \\(\\hat{c}_i\\) = \\(i\\)th diagonal element of the tangent-plane hat matrix: \\[ \\mathbf{\\hat{H} = F(\\hat{\\theta})[F(\\hat{\\theta})&#39;F(\\hat{\\theta})]^{-1}F(\\hat{\\theta})&#39;} \\] # Residual diagnostics for nonlinear models library(nlstools) resid_nls &lt;- nlsResiduals(nlin_modD) # Generate residual plots plot(resid_nls) 6.3.5.4 Potential Issues in Nonlinear Regression Models 6.3.5.4.1 Collinearity Measures how correlated the model’s predictors are. In nonlinear models, collinearity is assessed using the condition number of: \\[ \\mathbf{[F(\\hat{\\theta})&#39;F(\\hat{\\theta})]^{-1}} \\] If condition number &gt; 30, collinearity is a concern. Solution: Consider reparameterization (Magel and Hertsgaard 1987). 6.3.5.4.2 Leverage Similar to leverage in Ordinary Least Squares. In nonlinear models, leverage is assessed using the tangent-plane hat matrix: \\[ \\mathbf{\\hat{H} = F(\\hat{\\theta})[F(\\hat{\\theta})&#39;F(\\hat{\\theta})]^{-1}F(\\hat{\\theta})&#39;} \\] Solution: Identify influential points and assess their impact on parameter estimates (St Laurent and Cook 1992). 6.3.5.4.3 Heterogeneous Errors Non-constant variance across observations. Solution: Use Weighted Nonlinear Least Squares (WNLS). 6.3.5.4.4 Correlated Errors Residuals may be autocorrelated. Solution approaches: Generalized Nonlinear Least Squares (GNLS) Nonlinear Mixed Models (NLMEM) Bayesian Methods Issue Description Solution Intrinsic Nonlinearity Function curvature independent of parameterization Bayesian estimation, Taylor expansion Parameter-Effects Nonlinearity Curvature influenced by parameterization Reparameterization, bootstrap Collinearity High correlation among predictors Reparameterization, condition number check Leverage Influential points affecting model fit Assess tangent-plane hat matrix Heterogeneous Errors Unequal variance in residuals Weighted Nonlinear Least Squares Correlated Errors Autocorrelated residuals GNLS, Nonlinear Mixed Models, Bayesian Methods References "],["application.html", "6.4 Application", " 6.4 Application 6.4.1 Nonlinear Estimation Using Gauss-Newton Algorithm This section demonstrates nonlinear parameter estimation using the Gauss-Newton algorithm and compares results with nls(). The model is given by: \\[ y_i = \\frac{\\theta_0 + \\theta_1 x_i}{1 + \\theta_2 \\exp(0.4 x_i)} + \\epsilon_i \\] where \\(i = 1, \\dots ,n\\) \\(\\theta_0\\), \\(\\theta_1\\), \\(\\theta_2\\) are the unknown parameters. \\(\\epsilon_i\\) represents errors. Loading and Visualizing the Data library(dplyr) library(ggplot2) # Load the dataset my_data &lt;- read.delim(&quot;images/S21hw1pr4.txt&quot;, header = FALSE, sep = &quot;&quot;) %&gt;% dplyr::rename(x = V1, y = V2) # Plot data ggplot(my_data, aes(x = x, y = y)) + geom_point(color = &quot;blue&quot;) + labs(title = &quot;Observed Data&quot;, x = &quot;X&quot;, y = &quot;Y&quot;) + theme_minimal() Deriving Starting Values for Parameters Since nonlinear optimization is sensitive to starting values, we estimate reasonable initial values based on model interpretation. Finding the Maximum \\(Y\\) Value max(my_data$y) #&gt; [1] 2.6722 my_data$x[which.max(my_data$y)] #&gt; [1] 0.0094 When \\(y = 2.6722\\), the corresponding \\(x = 0.0094\\). From the model equation: \\(\\theta_0 + 0.0094 \\theta_1 = 2.6722\\) Estimating \\(\\theta_2\\) from the Median \\(y\\) Value The equation simplifies to: \\(1 + \\theta_2 \\exp(0.4 x) = 2\\) # find mean y mean(my_data$y) #&gt; [1] -0.0747864 # find y closest to its mean my_data$y[which.min(abs(my_data$y - (mean(my_data$y))))] #&gt; [1] -0.0773 # find x closest to the mean y my_data$x[which.min(abs(my_data$y - (mean(my_data$y))))] #&gt; [1] 11.0648 This yields the equation: \\(83.58967 \\theta_2 = 1\\) Finding the Value of \\(\\theta_0\\) and \\(\\theta_1\\) # find value of x closet to 1 my_data$x[which.min(abs(my_data$x - 1))] #&gt; [1] 0.9895 # find index of x closest to 1 match(my_data$x[which.min(abs(my_data$x - 1))], my_data$x) #&gt; [1] 14 # find y value my_data$y[match(my_data$x[which.min(abs(my_data$x - 1))], my_data$x)] #&gt; [1] 1.4577 This provides another equation: \\(\\theta_0 + \\theta_1 \\times 0.9895 - 2.164479 \\theta_2 = 1.457\\) Solving for \\(\\theta_0, \\theta_1, \\theta_2\\) library(matlib) # Define coefficient matrix A = matrix( c(0, 0.0094, 0, 0, 0, 83.58967, 1, 0.9895, -2.164479), nrow = 3, ncol = 3, byrow = T ) # Define constant vector b &lt;- c(2.6722, 1, 1.457) # Display system of equations showEqn(A, b) #&gt; 0*x1 + 0.0094*x2 + 0*x3 = 2.6722 #&gt; 0*x1 + 0*x2 + 83.58967*x3 = 1 #&gt; 1*x1 + 0.9895*x2 - 2.164479*x3 = 1.457 # Solve for parameters theta_start &lt;- Solve(A, b, fractions = FALSE) #&gt; x1 = -279.80879739 #&gt; x2 = 284.27659574 #&gt; x3 = 0.0119632 theta_start #&gt; [1] &quot;x1 = -279.80879739&quot; &quot; x2 = 284.27659574&quot; #&gt; [3] &quot; x3 = 0.0119632&quot; Implementing the Gauss-Newton Algorithm Using these estimates, we manually implement the Gauss-Newton optimization. Defining the Model and Its Derivatives # Starting values theta_0_strt &lt;- as.numeric(gsub(&quot;.*=\\\\s*&quot;, &quot;&quot;, theta_start[1])) theta_1_strt &lt;- as.numeric(gsub(&quot;.*=\\\\s*&quot;, &quot;&quot;, theta_start[2])) theta_2_strt &lt;- as.numeric(gsub(&quot;.*=\\\\s*&quot;, &quot;&quot;, theta_start[3])) # Model function mod_4 &lt;- function(theta_0, theta_1, theta_2, x) { (theta_0 + theta_1 * x) / (1 + theta_2 * exp(0.4 * x)) } # Define function expression f_4 = expression((theta_0 + theta_1 * x) / (1 + theta_2 * exp(0.4 * x))) # First derivatives df_4.d_theta_0 &lt;- D(f_4, &#39;theta_0&#39;) df_4.d_theta_1 &lt;- D(f_4, &#39;theta_1&#39;) df_4.d_theta_2 &lt;- D(f_4, &#39;theta_2&#39;) Iterative Gauss-Newton Optimization # Initialize theta_vec &lt;- matrix(c(theta_0_strt, theta_1_strt, theta_2_strt)) delta &lt;- matrix(NA, nrow = 3, ncol = 1) i &lt;- 1 # Evaluate function at initial estimates f_theta &lt;- as.matrix(eval(f_4, list( x = my_data$x, theta_0 = theta_vec[1, 1], theta_1 = theta_vec[2, 1], theta_2 = theta_vec[3, 1] ))) repeat { # Compute Jacobian matrix F_theta_0 &lt;- as.matrix(cbind( eval(df_4.d_theta_0, list( x = my_data$x, theta_0 = theta_vec[1, i], theta_1 = theta_vec[2, i], theta_2 = theta_vec[3, i] )), eval(df_4.d_theta_1, list( x = my_data$x, theta_0 = theta_vec[1, i], theta_1 = theta_vec[2, i], theta_2 = theta_vec[3, i] )), eval(df_4.d_theta_2, list( x = my_data$x, theta_0 = theta_vec[1, i], theta_1 = theta_vec[2, i], theta_2 = theta_vec[3, i] )) )) # Compute parameter updates delta[, i] = (solve(t(F_theta_0)%*%F_theta_0))%*%t(F_theta_0)%*%(my_data$y-f_theta[,i]) # Update parameter estimates theta_vec &lt;- cbind(theta_vec, theta_vec[, i] + delta[, i]) theta_vec[, i + 1] = theta_vec[, i] + delta[, i] # Increment iteration counter i &lt;- i + 1 # Compute new function values f_theta &lt;- cbind(f_theta, as.matrix(eval(f_4, list( x = my_data$x, theta_0 = theta_vec[1, i], theta_1 = theta_vec[2, i], theta_2 = theta_vec[3, i] )))) delta = cbind(delta, matrix(NA, nrow = 3, ncol = 1)) # Convergence criteria based on SSE if (abs(sum((my_data$y - f_theta[, i])^2) - sum((my_data$y - f_theta[, i - 1])^2)) / sum((my_data$y - f_theta[, i - 1])^2) &lt; 0.001) { break } } # Final parameter estimates theta_vec[, ncol(theta_vec)] #&gt; [1] 3.6335135 -1.3055166 0.5043502 Checking Convergence and Variance # Final objective function value (SSE) sum((my_data$y - f_theta[, i])^2) #&gt; [1] 19.80165 sigma2 &lt;- 1 / (nrow(my_data) - 3) * (t(my_data$y - f_theta[, ncol(f_theta)]) %*% (my_data$y - f_theta[, ncol(f_theta)])) # p = 3 # Asymptotic variance-covariance matrix as.numeric(sigma2)*as.matrix(solve(crossprod(F_theta_0))) #&gt; [,1] [,2] [,3] #&gt; [1,] 0.11552571 -0.04817428 0.02685848 #&gt; [2,] -0.04817428 0.02100861 -0.01158212 #&gt; [3,] 0.02685848 -0.01158212 0.00703916 Validating with nls() nlin_4 &lt;- nls( y ~ mod_4(theta_0, theta_1, theta_2, x), start = list( theta_0 = as.numeric(gsub(&quot;.*=\\\\s*&quot;, &quot;&quot;, theta_start[1])), theta_1 = as.numeric(gsub(&quot;.*=\\\\s*&quot;, &quot;&quot;, theta_start[2])), theta_2 = as.numeric(gsub(&quot;.*=\\\\s*&quot;, &quot;&quot;, theta_start[3])) ), data = my_data ) summary(nlin_4) #&gt; #&gt; Formula: y ~ mod_4(theta_0, theta_1, theta_2, x) #&gt; #&gt; Parameters: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; theta_0 3.63591 0.36528 9.954 &lt; 2e-16 *** #&gt; theta_1 -1.30639 0.15561 -8.395 3.65e-15 *** #&gt; theta_2 0.50528 0.09215 5.483 1.03e-07 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 0.2831 on 247 degrees of freedom #&gt; #&gt; Number of iterations to convergence: 9 #&gt; Achieved convergence tolerance: 2.294e-07 6.4.2 Logistic Growth Model A classic logistic growth model follows the equation: \\[ P = \\frac{K}{1 + \\exp(P_0 + r t)} + \\epsilon \\] where: \\(P\\) = population at time \\(t\\) \\(K\\) = carrying capacity (maximum population) \\(r\\) = population growth rate \\(P_0\\) = initial population log-ratio However, R’s built-in SSlogis function uses a slightly different parameterization: \\[ P = \\frac{asym}{1 + \\exp\\left(\\frac{xmid - t}{scal}\\right)} \\] where: \\(asym\\) = carrying capacity (\\(K\\)) \\(xmid\\) = the \\(x\\)-value at the inflection point of the curve \\(scal\\) = scaling parameter This gives the parameter relationships: \\(K = asym\\) \\(r = -1 / scal\\) \\(P_0 = -r \\cdot xmid\\) # Simulated time-series data time &lt;- c(1, 2, 3, 5, 10, 15, 20, 25, 30, 35) population &lt;- c(2.8, 4.2, 3.5, 6.3, 15.7, 21.3, 23.7, 25.1, 25.8, 25.9) # Plot data points plot(time, population, las = 1, pch = 16, main = &quot;Logistic Growth Model&quot;) # Fit the logistic growth model using programmed starting values logisticModelSS &lt;- nls(population ~ SSlogis(time, Asym, xmid, scal)) # Model summary summary(logisticModelSS) #&gt; #&gt; Formula: population ~ SSlogis(time, Asym, xmid, scal) #&gt; #&gt; Parameters: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; Asym 25.5029 0.3666 69.56 3.34e-11 *** #&gt; xmid 8.7347 0.3007 29.05 1.48e-08 *** #&gt; scal 3.6353 0.2186 16.63 6.96e-07 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 0.6528 on 7 degrees of freedom #&gt; #&gt; Number of iterations to convergence: 1 #&gt; Achieved convergence tolerance: 1.908e-06 # Extract parameter estimates coef(logisticModelSS) #&gt; Asym xmid scal #&gt; 25.502890 8.734698 3.635333 To fit the model using an alternative parameterization (\\(K, r, P_0\\)), we convert the estimated coefficients: # Convert parameter estimates to alternative logistic model parameters Ks &lt;- as.numeric(coef(logisticModelSS)[1]) # Carrying capacity (K) rs &lt;- -1 / as.numeric(coef(logisticModelSS)[3]) # Growth rate (r) Pos &lt;- -rs * as.numeric(coef(logisticModelSS)[2]) # P_0 # Fit the logistic model with the alternative parameterization logisticModel &lt;- nls( population ~ K / (1 + exp(Po + r * time)), start = list(Po = Pos, r = rs, K = Ks) ) # Model summary summary(logisticModel) #&gt; #&gt; Formula: population ~ K/(1 + exp(Po + r * time)) #&gt; #&gt; Parameters: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; Po 2.40272 0.12702 18.92 2.87e-07 *** #&gt; r -0.27508 0.01654 -16.63 6.96e-07 *** #&gt; K 25.50289 0.36665 69.56 3.34e-11 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 0.6528 on 7 degrees of freedom #&gt; #&gt; Number of iterations to convergence: 0 #&gt; Achieved convergence tolerance: 1.924e-06 Visualizing the Logistic Model Fit # Plot original data plot(time, population, las = 1, pch = 16, main = &quot;Logistic Growth Model Fit&quot;) # Overlay the fitted logistic curve lines(time, predict(logisticModel), col = &quot;red&quot;, lwd = 2) 6.4.3 Nonlinear Plateau Model This example is based on (Schabenberger and Pierce 2001) and demonstrates the use of a plateau model to estimate the relationship between soil nitrate (\\(NO_3\\)) concentration and relative yield percent (RYP) at two different depths (30 cm and 60 cm). # Load data dat &lt;- read.table(&quot;images/dat.txt&quot;, header = TRUE) # Plot NO3 concentration vs. relative yield percent, colored by depth library(ggplot2) dat.plot &lt;- ggplot(dat) + geom_point(aes(x = no3, y = ryp, color = as.factor(depth))) + labs(color = &#39;Depth (cm)&#39;) + xlab(&#39;Soil NO3 Concentration&#39;) + ylab(&#39;Relative Yield Percent&#39;) + theme_minimal() # Display plot dat.plot The suggested nonlinear plateau model is given by: \\[ E(Y_{ij}) = (\\beta_{0j} + \\beta_{1j}N_{ij})I_{N_{ij}\\le \\alpha_j} + (\\beta_{0j} + \\beta_{1j}\\alpha_j)I_{N_{ij} &gt; \\alpha_j} \\] where: \\(N_{ij}\\) represents the soil nitrate (\\(NO_3\\)) concentration for observation \\(i\\) at depth \\(j\\). \\(i\\) indexes individual observations. \\(j = 1, 2\\) corresponds to depths 30 cm and 60 cm. This model assumes a linear increase up to a threshold (\\(\\alpha_j\\)), beyond which the response levels off (plateaus). Defining the Plateau Model as a Function # Define the nonlinear plateau model function nonlinModel &lt;- function(predictor, b0, b1, alpha) { ifelse(predictor &lt;= alpha, b0 + b1 * predictor, # Linear growth below threshold b0 + b1 * alpha) # Plateau beyond threshold } Creating a Self-Starting Function for nls Since the model is piecewise linear, we can estimate starting values using: A linear regression on the first half of sorted predictor values to estimate \\(b_0\\) and \\(b_1\\). The last predictor value used in the regression as the plateau threshold (\\(\\alpha\\)) # Define initialization function for self-starting plateau model nonlinModelInit &lt;- function(mCall, LHS, data) { # Sort data by increasing predictor value xy &lt;- sortedXyData(mCall[[&#39;predictor&#39;]], LHS, data) n &lt;- nrow(xy) # Fit a simple linear model using the first half of the sorted data lmFit &lt;- lm(xy[1:(n / 2), &#39;y&#39;] ~ xy[1:(n / 2), &#39;x&#39;]) # Extract initial estimates b0 &lt;- coef(lmFit)[1] # Intercept b1 &lt;- coef(lmFit)[2] # Slope alpha &lt;- xy[(n / 2), &#39;x&#39;] # Last x-value in the fitted linear range # Return initial parameter estimates value &lt;- c(b0, b1, alpha) names(value) &lt;- mCall[c(&#39;b0&#39;, &#39;b1&#39;, &#39;alpha&#39;)] value } Combining Model and Self-Start Function # Define a self-starting nonlinear model for nls SS_nonlinModel &lt;- selfStart(nonlinModel, nonlinModelInit, c(&#39;b0&#39;, &#39;b1&#39;, &#39;alpha&#39;)) The nls function is used to estimate parameters separately for each soil depth (30 cm and 60 cm). # Fit the model for depth = 30 cm sep30_nls &lt;- nls(ryp ~ SS_nonlinModel(predictor = no3, b0, b1, alpha), data = dat[dat$depth == 30,]) # Fit the model for depth = 60 cm sep60_nls &lt;- nls(ryp ~ SS_nonlinModel(predictor = no3, b0, b1, alpha), data = dat[dat$depth == 60,]) We generate separate plots for 30 cm and 60 cm depths, showing both confidence and prediction intervals. # Set plotting layout par(mfrow = c(1, 2)) # Plot model fit for 30 cm depth plotFit( sep30_nls, interval = &quot;both&quot;, pch = 19, shade = TRUE, col.conf = &quot;skyblue4&quot;, col.pred = &quot;lightskyblue2&quot;, data = dat[dat$depth == 30,], main = &quot;Results at 30 cm Depth&quot;, ylab = &quot;Relative Yield Percent&quot;, xlab = &quot;Soil NO3 Concentration&quot;, xlim = c(0, 120) ) # Plot model fit for 60 cm depth plotFit( sep60_nls, interval = &quot;both&quot;, pch = 19, shade = TRUE, col.conf = &quot;lightpink4&quot;, col.pred = &quot;lightpink2&quot;, data = dat[dat$depth == 60,], main = &quot;Results at 60 cm Depth&quot;, ylab = &quot;Relative Yield Percent&quot;, xlab = &quot;Soil NO3 Concentration&quot;, xlim = c(0, 120) ) summary(sep30_nls) #&gt; #&gt; Formula: ryp ~ SS_nonlinModel(predictor = no3, b0, b1, alpha) #&gt; #&gt; Parameters: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; b0 15.1943 2.9781 5.102 6.89e-07 *** #&gt; b1 3.5760 0.1853 19.297 &lt; 2e-16 *** #&gt; alpha 23.1324 0.5098 45.373 &lt; 2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 8.258 on 237 degrees of freedom #&gt; #&gt; Number of iterations to convergence: 6 #&gt; Achieved convergence tolerance: 3.608e-09 summary(sep60_nls) #&gt; #&gt; Formula: ryp ~ SS_nonlinModel(predictor = no3, b0, b1, alpha) #&gt; #&gt; Parameters: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; b0 5.4519 2.9785 1.83 0.0684 . #&gt; b1 5.6820 0.2529 22.46 &lt;2e-16 *** #&gt; alpha 16.2863 0.2818 57.80 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 7.427 on 237 degrees of freedom #&gt; #&gt; Number of iterations to convergence: 5 #&gt; Achieved convergence tolerance: 8.571e-09 Modeling Soil Depths Together and Comparing Models Instead of fitting separate models for different soil depths, we first fit a combined model where all observations share a common slope, intercept, and plateau. We then test whether modeling the two depths separately provides a significantly better fit. Fitting a Reduced (Combined) Model The reduced model assumes that all soil depths follow the same nonlinear relationship. # Fit the combined model (common parameters across all depths) red_nls &lt;- nls( ryp ~ SS_nonlinModel(predictor = no3, b0, b1, alpha), data = dat ) # Display model summary summary(red_nls) #&gt; #&gt; Formula: ryp ~ SS_nonlinModel(predictor = no3, b0, b1, alpha) #&gt; #&gt; Parameters: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; b0 8.7901 2.7688 3.175 0.0016 ** #&gt; b1 4.8995 0.2207 22.203 &lt;2e-16 *** #&gt; alpha 18.0333 0.3242 55.630 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 9.13 on 477 degrees of freedom #&gt; #&gt; Number of iterations to convergence: 7 #&gt; Achieved convergence tolerance: 7.126e-09 # Visualizing the combined model fit par(mfrow = c(1, 1)) plotFit( red_nls, interval = &quot;both&quot;, pch = 19, shade = TRUE, col.conf = &quot;lightblue4&quot;, col.pred = &quot;lightblue2&quot;, data = dat, main = &#39;Results for Combined Model&#39;, ylab = &#39;Relative Yield Percent&#39;, xlab = &#39;Soil NO3 Concentration&#39; ) Examining Residuals for the Combined Model Checking residuals helps diagnose potential lack of fit. library(nlstools) # Residual diagnostics using nlstools resid &lt;- nlsResiduals(red_nls) # Plot residuals plot(resid) If there is a pattern in the residuals (e.g., systematic deviations based on soil depth), this suggests that a separate model for each depth may be necessary. Testing Whether Depths Require Separate Models To formally test whether soil depth significantly affects the model parameters, we introduce a parameterization where depth-specific parameters are increments from a baseline model (30 cm depth): \\[ \\begin{aligned} \\beta_{02} &amp;= \\beta_{01} + d_0 \\\\ \\beta_{12} &amp;= \\beta_{11} + d_1 \\\\ \\alpha_{2} &amp;= \\alpha_{1} + d_a \\end{aligned} \\] where: \\(\\beta_{01}, \\beta_{11}, \\alpha_1\\) are parameters for 30 cm depth. \\(d_0, d_1, d_a\\) represent depth-specific differences for 60 cm depth. If \\(d_0, d_1, d_a\\) are significantly different from 0, the two depths should be modeled separately. Defining the Full (Depth-Specific) Model nonlinModelF &lt;- function(predictor, soildep, b01, b11, a1, d0, d1, da) { # Define parameters for 60 cm depth as increments from 30 cm parameters b02 &lt;- b01 + d0 b12 &lt;- b11 + d1 a2 &lt;- a1 + da # Compute model output for 30 cm depth y1 &lt;- ifelse( predictor &lt;= a1, b01 + b11 * predictor, b01 + b11 * a1 ) # Compute model output for 60 cm depth y2 &lt;- ifelse( predictor &lt;= a2, b02 + b12 * predictor, b02 + b12 * a2 ) # Assign correct model output based on depth y &lt;- y1 * (soildep == 30) + y2 * (soildep == 60) return(y) } Fitting the Full (Depth-Specific) Model The starting values are taken from the separately fitted models for each depth. Soil_full &lt;- nls( ryp ~ nonlinModelF( predictor = no3, soildep = depth, b01, b11, a1, d0, d1, da ), data = dat, start = list( b01 = 15.2, # Intercept for 30 cm depth b11 = 3.58, # Slope for 30 cm depth a1 = 23.13, # Plateau cutoff for 30 cm depth d0 = -9.74, # Intercept difference (60 cm - 30 cm) d1 = 2.11, # Slope difference (60 cm - 30 cm) da = -6.85 # Plateau cutoff difference (60 cm - 30 cm) ) ) # Display model summary summary(Soil_full) #&gt; #&gt; Formula: ryp ~ nonlinModelF(predictor = no3, soildep = depth, b01, b11, #&gt; a1, d0, d1, da) #&gt; #&gt; Parameters: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; b01 15.1943 2.8322 5.365 1.27e-07 *** #&gt; b11 3.5760 0.1762 20.291 &lt; 2e-16 *** #&gt; a1 23.1324 0.4848 47.711 &lt; 2e-16 *** #&gt; d0 -9.7424 4.2357 -2.300 0.0219 * #&gt; d1 2.1060 0.3203 6.575 1.29e-10 *** #&gt; da -6.8461 0.5691 -12.030 &lt; 2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 7.854 on 474 degrees of freedom #&gt; #&gt; Number of iterations to convergence: 1 #&gt; Achieved convergence tolerance: 3.742e-06 Model Comparison: Does Depth Matter? If \\(d_0, d_1, d_a\\) are significantly different from 0, the depths should be modeled separately. The p-values for these parameters indicate whether depth-specific modeling is necessary. References "],["generalized-linear-models.html", "Chapter 7 Generalized Linear Models", " Chapter 7 Generalized Linear Models Even though we call it generalized linear model, it is still under the paradigm of non-linear regression, because the form of the regression model is non-linear. The name generalized linear model derived from the fact that we have \\(\\mathbf{x&#39;_i \\beta}\\) (which is linear form) in the model. "],["logistic-regression-1.html", "7.1 Logistic Regression", " 7.1 Logistic Regression \\[ p_i = f(\\mathbf{x}_i ; \\beta) = \\frac{exp(\\mathbf{x_i&#39;\\beta})}{1 + exp(\\mathbf{x_i&#39;\\beta})} \\] Equivalently, \\[ logit(p_i) = log(\\frac{p_i}{1+p_i}) = \\mathbf{x_i&#39;\\beta} \\] where \\(\\frac{p_i}{1+p_i}\\)is the odds. In this form, the model is specified such that a function of the mean response is linear. Hence, Generalized Linear Models The likelihood function \\[ L(p_i) = \\prod_{i=1}^{n} p_i^{Y_i}(1-p_i)^{1-Y_i} \\] where \\(p_i = \\frac{\\mathbf{x&#39;_i \\beta}}{1+\\mathbf{x&#39;_i \\beta}}\\) and \\(1-p_i = (1+ exp(\\mathbf{x&#39;_i \\beta}))^{-1}\\) Hence, our objective function is \\[ Q(\\beta) = log(L(\\beta)) = \\sum_{i=1}^n Y_i \\mathbf{x&#39;_i \\beta} - \\sum_{i=1}^n log(1+ exp(\\mathbf{x&#39;_i \\beta})) \\] we could maximize this function numerically using the optimization method above, which allows us to find numerical MLE for \\(\\hat{\\beta}\\). Then we can use the standard asymptotic properties of MLEs to make inference. Property of MLEs is that parameters are asymptotically unbiased with sample variance-covariance matrix given by the inverse Fisher information matrix \\[ \\hat{\\beta} \\dot{\\sim} AN(\\beta,[\\mathbf{I}(\\beta)]^{-1}) \\] where the Fisher Information matrix, \\(\\mathbf{I}(\\beta)\\) is \\[ \\begin{aligned} \\mathbf{I}(\\beta) &amp;= E[\\frac{\\partial \\log(L(\\beta))}{\\partial (\\beta)}\\frac{\\partial \\log(L(\\beta))}{\\partial \\beta&#39;}] \\\\ &amp;= E[(\\frac{\\partial \\log(L(\\beta))}{\\partial \\beta_i} \\frac{\\partial \\log(L(\\beta))}{\\partial \\beta_j})_{ij}] \\end{aligned} \\] Under regularity conditions, this is equivalent to the negative of the expected value of the Hessian Matrix \\[ \\begin{aligned} \\mathbf{I}(\\beta) &amp;= -E[\\frac{\\partial^2 \\log(L(\\beta))}{\\partial \\beta \\partial \\beta&#39;}] \\\\ &amp;= -E[(\\frac{\\partial^2 \\log(L(\\beta))}{\\partial \\beta_i \\partial \\beta_j})_{ij}] \\end{aligned} \\] Example: \\[ x_i&#39; \\beta = \\beta_0 + \\beta_1 x_i \\] \\[ \\begin{aligned} - \\frac{\\partial^2 \\ln(L(\\beta))}{\\partial \\beta^2_0} &amp;= \\sum_{i=1}^n \\frac{\\exp(x&#39;_i \\beta)}{1 + \\exp(x&#39;_i \\beta)} - [\\frac{\\exp(x_i&#39; \\beta)}{1+ \\exp(x&#39;_i \\beta)}]^2 = \\sum_{i=1}^n p_i (1-p_i) \\\\ - \\frac{\\partial^2 \\ln(L(\\beta))}{\\partial \\beta^2_1} &amp;= \\sum_{i=1}^n \\frac{x_i^2\\exp(x&#39;_i \\beta)}{1 + \\exp(x&#39;_i \\beta)} - [\\frac{x_i\\exp(x_i&#39; \\beta)}{1+ \\exp(x&#39;_i \\beta)}]^2 = \\sum_{i=1}^n x_i^2p_i (1-p_i) \\\\ - \\frac{\\partial^2 \\ln(L(\\beta))}{\\partial \\beta_0 \\partial \\beta_1} &amp;= \\sum_{i=1}^n \\frac{x_i\\exp(x&#39;_i \\beta)}{1 + \\exp(x&#39;_i \\beta)} - x_i[\\frac{\\exp(x_i&#39; \\beta)}{1+ \\exp(x&#39;_i \\beta)}]^2 = \\sum_{i=1}^n x_ip_i (1-p_i) \\end{aligned} \\] Hence, \\[ \\mathbf{I} (\\beta) = \\left[ \\begin{array} {cc} \\sum_i p_i(1-p_i) &amp; \\sum_i x_i p_i(1-p_i) \\\\ \\sum_i x_i p_i(1-p_i) &amp; \\sum_i x_i^2 p_i(1-p_i) \\end{array} \\right] \\] Inference Likelihood Ratio Tests To formulate the test, let \\(\\beta = [\\beta_1&#39;, \\beta_2&#39;]&#39;\\). If you are interested in testing a hypothesis about \\(\\beta_1\\), then we leave \\(\\beta_2\\) unspecified (called nuisance parameters). \\(\\beta_1\\) and \\(\\beta_2\\) can either a vector or scalar, or \\(\\beta_2\\) can be null. Example: \\(H_0: \\beta_1 = \\beta_{1,0}\\) (where \\(\\beta_{1,0}\\) is specified) and \\(\\hat{\\beta}_{2,0}\\) be the MLE of \\(\\beta_2\\) under the restriction that \\(\\beta_1 = \\beta_{1,0}\\). The likelihood ratio test statistic is \\[ -2\\log\\Lambda = -2[\\log(L(\\beta_{1,0},\\hat{\\beta}_{2,0})) - \\log(L(\\hat{\\beta}_1,\\hat{\\beta}_2))] \\] where the first term is the value fo the likelihood for the fitted restricted model the second term is the likelihood value of the fitted unrestricted model Under the null, \\[ -2 \\log \\Lambda \\sim \\chi^2_{\\upsilon} \\] where \\(\\upsilon\\) is the dimension of \\(\\beta_1\\) We reject the null when \\(-2\\log \\Lambda &gt; \\chi_{\\upsilon,1-\\alpha}^2\\) Wald Statistics Based on \\[ \\hat{\\beta} \\sim AN (\\beta, [\\mathbf{I}(\\beta)^{-1}]) \\] \\[ H_0: \\mathbf{L}\\hat{\\beta} = 0 \\] where \\(\\mathbf{L}\\) is a \\(q \\times p\\) matrix with \\(q\\) linearly independent rows. Then \\[ W = (\\mathbf{L\\hat{\\beta}})&#39;(\\mathbf{L[I(\\hat{\\beta})]^{-1}L&#39;})^{-1}(\\mathbf{L\\hat{\\beta}}) \\] under the null hypothesis Confidence interval \\[ \\hat{\\beta}_i \\pm 1.96 \\hat{s}_{ii}^2 \\] where \\(\\hat{s}_{ii}^2\\) is the i-th diagonal of \\(\\mathbf{[I(\\hat{\\beta})]}^{-1}\\) If you have large sample size, the likelihood ratio and Wald tests have similar results. small sample size, the likelihood ratio test is better. Logistic Regression: Interpretation of \\(\\beta\\) For single regressor, the model is \\[ logit\\{\\hat{p}_{x_i}\\} \\equiv logit (\\hat{p}_i) = \\log(\\frac{\\hat{p}_i}{1 - \\hat{p}_i}) = \\hat{\\beta}_0 + \\hat{\\beta}_1 x_i \\] When \\(x= x_i + 1\\) \\[ logit\\{\\hat{p}_{x_i +1}\\} = \\hat{\\beta}_0 + \\hat{\\beta}(x_i + 1) = logit\\{\\hat{p}_{x_i}\\} + \\hat{\\beta}_1 \\] Then, \\[ \\begin{aligned} logit\\{\\hat{p}_{x_i +1}\\} - logit\\{\\hat{p}_{x_i}\\} &amp;= log\\{odds[\\hat{p}_{x_i +1}]\\} - log\\{odds[\\hat{p}_{x_i}]\\} \\\\ &amp;= log(\\frac{odds[\\hat{p}_{x_i + 1}]}{odds[\\hat{p}_{x_i}]}) = \\hat{\\beta}_1 \\end{aligned} \\] and \\[ exp(\\hat{\\beta}_1) = \\frac{odds[\\hat{p}_{x_i + 1}]}{odds[\\hat{p}_{x_i}]} \\] the estimated odds ratio the estimated odds ratio, when there is a difference of c units in the regressor x, is \\(exp(c\\hat{\\beta}_1)\\). When there are multiple covariates, \\(exp(\\hat{\\beta}_k)\\) is the estimated odds ratio for the variable \\(x_k\\), assuming that all of the other variables are held constant. Inference on the Mean Response Let \\(x_h = (1, x_{h1}, ...,x_{h,p-1})&#39;\\). Then \\[ \\hat{p}_h = \\frac{exp(\\mathbf{x&#39;_h \\hat{\\beta}})}{1 + exp(\\mathbf{x&#39;_h \\hat{\\beta}})} \\] and \\(s^2(\\hat{p}_h) = \\mathbf{x&#39;_h[I(\\hat{\\beta})]^{-1}x_h}\\) For new observation, we can have a cutoff point to decide whether y = 0 or 1. 7.1.1 Application library(kableExtra) library(dplyr) library(pscl) library(ggplot2) library(faraway) library(nnet) library(agridat) library(nlstools) Logistic Regression \\(x \\sim Unif(-0.5,2.5)\\). Then \\(\\eta = 0.5 + 0.75 x\\) set.seed(23) #set seed for reproducibility x &lt;- runif(1000, min = -0.5, max = 2.5) eta1 &lt;- 0.5 + 0.75 * x Passing \\(\\eta\\)’s into the inverse-logit function, we get \\[ p = \\frac{\\exp(\\eta)}{1+ \\exp(\\eta)} \\] where \\(p \\in [0,1]\\) Then, we generate \\(y \\sim Bernoulli(p)\\) p &lt;- exp(eta1) / (1 + exp(eta1)) y &lt;- rbinom(1000, 1, p) BinData &lt;- data.frame(X = x, Y = y) Model Fit Logistic_Model &lt;- glm(formula = Y ~ X, family = binomial, # family = specifies the response distribution data = BinData) summary(Logistic_Model) #&gt; #&gt; Call: #&gt; glm(formula = Y ~ X, family = binomial, data = BinData) #&gt; #&gt; Deviance Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -2.2317 0.4153 0.5574 0.7922 1.1469 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; (Intercept) 0.46205 0.10201 4.530 5.91e-06 *** #&gt; X 0.78527 0.09296 8.447 &lt; 2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; (Dispersion parameter for binomial family taken to be 1) #&gt; #&gt; Null deviance: 1106.7 on 999 degrees of freedom #&gt; Residual deviance: 1027.4 on 998 degrees of freedom #&gt; AIC: 1031.4 #&gt; #&gt; Number of Fisher Scoring iterations: 4 nlstools::confint2(Logistic_Model) #&gt; 2.5 % 97.5 % #&gt; (Intercept) 0.2618709 0.6622204 #&gt; X 0.6028433 0.9676934 OddsRatio &lt;- coef(Logistic_Model) %&gt;% exp OddsRatio #&gt; (Intercept) X #&gt; 1.587318 2.192995 Based on the odds ratio, when \\(x = 0\\) , the odds of success of 1.59 \\(x = 1\\), the odds of success increase by a factor of 2.19 (i.e., 119.29% increase). Deviance Tests \\(H_0\\): No variables are related to the response (i.e., model with just the intercept) \\(H_1\\): At least one variable is related to the response Test_Dev &lt;- Logistic_Model$null.deviance - Logistic_Model$deviance p_val_dev &lt;- 1 - pchisq(q = Test_Dev, df = 1) Since we see the p-value of 0, we reject the null that no variables are related to the response Deviance residuals Logistic_Resids &lt;- residuals(Logistic_Model, type = &quot;deviance&quot;) plot( y = Logistic_Resids, x = BinData$X, xlab = &#39;X&#39;, ylab = &#39;Deviance Resids&#39; ) However, this plot is not informative. Hence, we can can see the residuals plots that are grouped into bins based on prediction values. plot_bin &lt;- function(Y, X, bins = 100, return.DF = FALSE) { Y_Name &lt;- deparse(substitute(Y)) X_Name &lt;- deparse(substitute(X)) Binned_Plot &lt;- data.frame(Plot_Y = Y, Plot_X = X) Binned_Plot$bin &lt;- cut(Binned_Plot$Plot_X, breaks = bins) %&gt;% as.numeric Binned_Plot_summary &lt;- Binned_Plot %&gt;% group_by(bin) %&gt;% summarise( Y_ave = mean(Plot_Y), X_ave = mean(Plot_X), Count = n() ) %&gt;% as.data.frame plot( y = Binned_Plot_summary$Y_ave, x = Binned_Plot_summary$X_ave, ylab = Y_Name, xlab = X_Name ) if (return.DF) return(Binned_Plot_summary) } plot_bin(Y = Logistic_Resids, X = BinData$X, bins = 100) We can also see the predicted value against the residuals. Logistic_Predictions &lt;- predict(Logistic_Model, type = &quot;response&quot;) plot_bin(Y = Logistic_Resids, X = Logistic_Predictions, bins = 100) We can also look at a binned plot of the logistic prediction versus the true category NumBins &lt;- 10 Binned_Data &lt;- plot_bin( Y = BinData$Y, X = Logistic_Predictions, bins = NumBins, return.DF = TRUE ) Binned_Data #&gt; bin Y_ave X_ave Count #&gt; 1 1 0.5833333 0.5382095 72 #&gt; 2 2 0.5200000 0.5795887 75 #&gt; 3 3 0.6567164 0.6156540 67 #&gt; 4 4 0.7014925 0.6579674 67 #&gt; 5 5 0.6373626 0.6984765 91 #&gt; 6 6 0.7500000 0.7373341 72 #&gt; 7 7 0.7096774 0.7786747 93 #&gt; 8 8 0.8503937 0.8203819 127 #&gt; 9 9 0.8947368 0.8601232 133 #&gt; 10 10 0.8916256 0.9004734 203 abline(0, 1, lty = 2, col = &#39;blue&#39;) Formal deviance test Hosmer-Lemeshow test Null hypothesis: the observed events match the expected evens \\[ X^2_{HL} = \\sum_{j=1}^{J} \\frac{(y_j - m_j \\hat{p}_j)^2}{m_j \\hat{p}_j(1-\\hat{p}_j)} \\] where within the j-th bin, \\(y_j\\) is the number of successes \\(m_j\\) = number of observations \\(\\hat{p}_j\\) = predicted probability Under the null hypothesis, \\(X^2_{HLL} \\sim \\chi^2_{J-1}\\) HL_BinVals &lt;- (Binned_Data$Count * Binned_Data$Y_ave - Binned_Data$Count * Binned_Data$X_ave) ^ 2 / Binned_Data$Count * Binned_Data$X_ave * (1 - Binned_Data$X_ave) HLpval &lt;- pchisq(q = sum(HL_BinVals), df = NumBins, lower.tail = FALSE) HLpval #&gt; [1] 0.9999989 Since \\(p\\)-value = 0.99, we do not reject the null hypothesis (i.e., the model is fitting well). "],["probit-regression.html", "7.2 Probit Regression", " 7.2 Probit Regression \\[ E(Y_i) = p_i = \\Phi(\\mathbf{x_i&#39;\\theta}) \\] where \\(\\Phi()\\) is the CDF of a \\(N(0,1)\\) random variable. Other models (e..g, t–distribution; log-log; I complimentary log-log) We let \\(Y_i = 1\\) success, \\(Y_i =0\\) no success. assume \\(Y \\sim Ber\\) and \\(p_i = P(Y_i =1)\\), the success probability. consider a logistic regression with the response function \\(logit(p_i) = x&#39;_i \\beta\\) Confusion matrix Predicted Truth 1 0 1 True Positive (TP) False Negative (FN) 0 False Positive (FP) True Negative (TN) Sensitivity: ability to identify positive results \\[ \\text{Sensitivity} = \\frac{TP}{TP + FN} \\] Specificity: ability to identify negative results \\[ \\text{Specificity} = \\frac{TN}{TN + FP} \\] False positive rate: Type I error (1- specificity) \\[ \\text{ False Positive Rate} = \\frac{FP}{TN+ FP} \\] False Negative Rate: Type II error (1-sensitivity) \\[ \\text{False Negative Rate} = \\frac{FN}{TP + FN} \\] Predicted Truth 1 0 1 Sensitivity False Negative Rate 0 False Positive Rate Specificity "],["binomial-regression.html", "7.3 Binomial Regression", " 7.3 Binomial Regression Binomial Here, cancer case = successes, and control case = failures. data(&quot;esoph&quot;) head(esoph, n = 3) #&gt; agegp alcgp tobgp ncases ncontrols #&gt; 1 25-34 0-39g/day 0-9g/day 0 40 #&gt; 2 25-34 0-39g/day 10-19 0 10 #&gt; 3 25-34 0-39g/day 20-29 0 6 plot( esoph$ncases / (esoph$ncases + esoph$ncontrols) ~ esoph$alcgp, ylab = &quot;Proportion&quot;, xlab = &#39;Alcohol consumption&#39;, main = &#39;Esophageal Cancer data&#39; ) class(esoph$agegp) &lt;- &quot;factor&quot; class(esoph$alcgp) &lt;- &quot;factor&quot; class(esoph$tobgp) &lt;- &quot;factor&quot; # only the alcohol consumption as a predictor model &lt;- glm(cbind(ncases, ncontrols) ~ alcgp, data = esoph, family = binomial) summary(model) #&gt; #&gt; Call: #&gt; glm(formula = cbind(ncases, ncontrols) ~ alcgp, family = binomial, #&gt; data = esoph) #&gt; #&gt; Deviance Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -4.0759 -1.2037 -0.0183 1.0928 3.7336 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; (Intercept) -2.5885 0.1925 -13.444 &lt; 2e-16 *** #&gt; alcgp40-79 1.2712 0.2323 5.472 4.46e-08 *** #&gt; alcgp80-119 2.0545 0.2611 7.868 3.59e-15 *** #&gt; alcgp120+ 3.3042 0.3237 10.209 &lt; 2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; (Dispersion parameter for binomial family taken to be 1) #&gt; #&gt; Null deviance: 367.95 on 87 degrees of freedom #&gt; Residual deviance: 221.46 on 84 degrees of freedom #&gt; AIC: 344.51 #&gt; #&gt; Number of Fisher Scoring iterations: 5 #Coefficient Odds coefficients(model) %&gt;% exp #&gt; (Intercept) alcgp40-79 alcgp80-119 alcgp120+ #&gt; 0.07512953 3.56527094 7.80261593 27.22570533 deviance(model)/df.residual(model) #&gt; [1] 2.63638 model$aic #&gt; [1] 344.5109 # alcohol consumption and age as predictors better_model &lt;- glm(cbind(ncases, ncontrols) ~ agegp + alcgp, data = esoph, family = binomial) summary(better_model) #&gt; #&gt; Call: #&gt; glm(formula = cbind(ncases, ncontrols) ~ agegp + alcgp, family = binomial, #&gt; data = esoph) #&gt; #&gt; Deviance Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -2.2395 -0.7186 -0.2324 0.7930 3.3538 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; (Intercept) -6.1472 1.0419 -5.900 3.63e-09 *** #&gt; agegp35-44 1.6311 1.0800 1.510 0.130973 #&gt; agegp45-54 3.4258 1.0389 3.297 0.000976 *** #&gt; agegp55-64 3.9435 1.0346 3.811 0.000138 *** #&gt; agegp65-74 4.3568 1.0413 4.184 2.87e-05 *** #&gt; agegp75+ 4.4242 1.0914 4.054 5.04e-05 *** #&gt; alcgp40-79 1.4343 0.2448 5.859 4.64e-09 *** #&gt; alcgp80-119 2.0071 0.2776 7.230 4.84e-13 *** #&gt; alcgp120+ 3.6800 0.3763 9.778 &lt; 2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; (Dispersion parameter for binomial family taken to be 1) #&gt; #&gt; Null deviance: 367.95 on 87 degrees of freedom #&gt; Residual deviance: 105.88 on 79 degrees of freedom #&gt; AIC: 238.94 #&gt; #&gt; Number of Fisher Scoring iterations: 6 better_model$aic #smaller AIC is better #&gt; [1] 238.9361 coefficients(better_model) %&gt;% exp #&gt; (Intercept) agegp35-44 agegp45-54 agegp55-64 agegp65-74 agegp75+ #&gt; 0.002139482 5.109601844 30.748594216 51.596634690 78.005283850 83.448437749 #&gt; alcgp40-79 alcgp80-119 alcgp120+ #&gt; 4.196747169 7.441782227 39.646885126 pchisq( q = model$deviance - better_model$deviance, df = model$df.residual - better_model$df.residual, lower = FALSE ) #&gt; [1] 2.713923e-23 # specify link function as probit Prob_better_model &lt;- glm( cbind(ncases, ncontrols) ~ agegp + alcgp, data = esoph, family = binomial(link = probit) ) summary(Prob_better_model) #&gt; #&gt; Call: #&gt; glm(formula = cbind(ncases, ncontrols) ~ agegp + alcgp, family = binomial(link = probit), #&gt; data = esoph) #&gt; #&gt; Deviance Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -2.1325 -0.6877 -0.1661 0.7654 3.3258 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; (Intercept) -3.3741 0.4922 -6.855 7.13e-12 *** #&gt; agegp35-44 0.8562 0.5081 1.685 0.092003 . #&gt; agegp45-54 1.7829 0.4904 3.636 0.000277 *** #&gt; agegp55-64 2.1034 0.4876 4.314 1.61e-05 *** #&gt; agegp65-74 2.3374 0.4930 4.741 2.13e-06 *** #&gt; agegp75+ 2.3694 0.5275 4.491 7.08e-06 *** #&gt; alcgp40-79 0.8080 0.1330 6.076 1.23e-09 *** #&gt; alcgp80-119 1.1399 0.1558 7.318 2.52e-13 *** #&gt; alcgp120+ 2.1204 0.2060 10.295 &lt; 2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; (Dispersion parameter for binomial family taken to be 1) #&gt; #&gt; Null deviance: 367.95 on 87 degrees of freedom #&gt; Residual deviance: 104.48 on 79 degrees of freedom #&gt; AIC: 237.53 #&gt; #&gt; Number of Fisher Scoring iterations: 6 "],["poisson-regression.html", "7.4 Poisson Regression", " 7.4 Poisson Regression From the Poisson distribution \\[ \\begin{aligned} f(Y_i) &amp;= \\frac{\\mu_i^{Y_i}exp(-\\mu_i)}{Y_i!}, Y_i = 0,1,.. \\\\ E(Y_i) &amp;= \\mu_i \\\\ var(Y_i) &amp;= \\mu_i \\end{aligned} \\] which is a natural distribution for counts. We can see that the variance is a function of the mean. If we let \\(\\mu_i = f(\\mathbf{x_i; \\theta})\\), it would be similar to Logistic Regression since we can choose \\(f()\\) as \\(\\mu_i = \\mathbf{x_i&#39;\\theta}, \\mu_i = \\exp(\\mathbf{x_i&#39;\\theta}), \\mu_i = \\log(\\mathbf{x_i&#39;\\theta})\\) 7.4.1 Application Count Data and Poisson regression data(bioChemists, package = &quot;pscl&quot;) bioChemists &lt;- bioChemists %&gt;% rename( Num_Article = art, #articles in last 3 years of PhD Sex = fem, #coded 1 if female Married = mar, #coded 1 if married Num_Kid5 = kid5, #number of childeren under age 6 PhD_Quality = phd, #prestige of PhD program Num_MentArticle = ment #articles by mentor in last 3 years ) hist(bioChemists$Num_Article, breaks = 25, main = &#39;Number of Articles&#39;) Poisson_Mod &lt;- glm(Num_Article ~ ., family=poisson, bioChemists) summary(Poisson_Mod) #&gt; #&gt; Call: #&gt; glm(formula = Num_Article ~ ., family = poisson, data = bioChemists) #&gt; #&gt; Deviance Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -3.5672 -1.5398 -0.3660 0.5722 5.4467 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; (Intercept) 0.304617 0.102981 2.958 0.0031 ** #&gt; SexWomen -0.224594 0.054613 -4.112 3.92e-05 *** #&gt; MarriedMarried 0.155243 0.061374 2.529 0.0114 * #&gt; Num_Kid5 -0.184883 0.040127 -4.607 4.08e-06 *** #&gt; PhD_Quality 0.012823 0.026397 0.486 0.6271 #&gt; Num_MentArticle 0.025543 0.002006 12.733 &lt; 2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; (Dispersion parameter for poisson family taken to be 1) #&gt; #&gt; Null deviance: 1817.4 on 914 degrees of freedom #&gt; Residual deviance: 1634.4 on 909 degrees of freedom #&gt; AIC: 3314.1 #&gt; #&gt; Number of Fisher Scoring iterations: 5 Residual of 1634 with 909 df isn’t great. We see Pearson \\(\\chi^2\\) Predicted_Means &lt;- predict(Poisson_Mod,type = &quot;response&quot;) X2 &lt;- sum((bioChemists$Num_Article - Predicted_Means)^2/Predicted_Means) X2 #&gt; [1] 1662.547 pchisq(X2,Poisson_Mod$df.residual, lower.tail = FALSE) #&gt; [1] 7.849882e-47 With interaction terms, there are some improvements Poisson_Mod_All2way &lt;- glm(Num_Article ~ .^2, family=poisson, bioChemists) Poisson_Mod_All3way &lt;- glm(Num_Article ~ .^3, family=poisson, bioChemists) Consider the \\(\\hat{\\phi} = \\frac{\\text{deviance}}{df}\\) Poisson_Mod$deviance / Poisson_Mod$df.residual #&gt; [1] 1.797988 This is evidence for over-dispersion. Likely cause is missing variables. And remedies could either be to include more variables or consider random effects. A quick fix is to force the Poisson Regression to include this value of \\(\\phi\\), and this model is called “Quasi-Poisson”. phi_hat = Poisson_Mod$deviance/Poisson_Mod$df.residual summary(Poisson_Mod,dispersion = phi_hat) #&gt; #&gt; Call: #&gt; glm(formula = Num_Article ~ ., family = poisson, data = bioChemists) #&gt; #&gt; Deviance Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -3.5672 -1.5398 -0.3660 0.5722 5.4467 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; (Intercept) 0.30462 0.13809 2.206 0.02739 * #&gt; SexWomen -0.22459 0.07323 -3.067 0.00216 ** #&gt; MarriedMarried 0.15524 0.08230 1.886 0.05924 . #&gt; Num_Kid5 -0.18488 0.05381 -3.436 0.00059 *** #&gt; PhD_Quality 0.01282 0.03540 0.362 0.71715 #&gt; Num_MentArticle 0.02554 0.00269 9.496 &lt; 2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; (Dispersion parameter for poisson family taken to be 1.797988) #&gt; #&gt; Null deviance: 1817.4 on 914 degrees of freedom #&gt; Residual deviance: 1634.4 on 909 degrees of freedom #&gt; AIC: 3314.1 #&gt; #&gt; Number of Fisher Scoring iterations: 5 Or directly rerun the model as quasiPoisson_Mod &lt;- glm(Num_Article ~ ., family=quasipoisson, bioChemists) Quasi-Poisson is not recommended, but Negative Binomial Regression that has an extra parameter to account for over-dispersion is. "],["negative-binomial-regression.html", "7.5 Negative Binomial Regression", " 7.5 Negative Binomial Regression library(MASS) NegBinom_Mod &lt;- MASS::glm.nb(Num_Article ~ .,bioChemists) summary(NegBinom_Mod) #&gt; #&gt; Call: #&gt; MASS::glm.nb(formula = Num_Article ~ ., data = bioChemists, init.theta = 2.264387695, #&gt; link = log) #&gt; #&gt; Deviance Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -2.1678 -1.3617 -0.2806 0.4476 3.4524 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; (Intercept) 0.256144 0.137348 1.865 0.062191 . #&gt; SexWomen -0.216418 0.072636 -2.979 0.002887 ** #&gt; MarriedMarried 0.150489 0.082097 1.833 0.066791 . #&gt; Num_Kid5 -0.176415 0.052813 -3.340 0.000837 *** #&gt; PhD_Quality 0.015271 0.035873 0.426 0.670326 #&gt; Num_MentArticle 0.029082 0.003214 9.048 &lt; 2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; (Dispersion parameter for Negative Binomial(2.2644) family taken to be 1) #&gt; #&gt; Null deviance: 1109.0 on 914 degrees of freedom #&gt; Residual deviance: 1004.3 on 909 degrees of freedom #&gt; AIC: 3135.9 #&gt; #&gt; Number of Fisher Scoring iterations: 1 #&gt; #&gt; #&gt; Theta: 2.264 #&gt; Std. Err.: 0.271 #&gt; #&gt; 2 x log-likelihood: -3121.917 We can see the dispersion is 2.264 with SE = 0.271, which is significantly different from 1, indicating over-dispersion. Check Over-Dispersion for more detail "],["multinomial.html", "7.6 Multinomial", " 7.6 Multinomial If we have more than two categories or groups that we want to model relative to covariates (e.g., we have observations \\(i = 1,…,n\\) and groups/ covariates \\(j = 1,2,…,J\\)), multinomial is our candidate model Let \\(p_{ij}\\) be the probability that the i-th observation belongs to the j-th group \\(Y_{ij}\\) be the number of observations for individual i in group j; An individual will have observations \\(Y_{i1},Y_{i2},…Y_{iJ}\\) assume the probability of observing this response is given by a multinomial distribution in terms of probabilities \\(p_{ij}\\), where \\(\\sum_{j = 1}^J p_{ij} = 1\\) . For interpretation, we have a baseline category \\(p_{i1} = 1 - \\sum_{j = 2}^J p_{ij}\\) The link between the mean response (probability) \\(p_{ij}\\) and a linear function of the covariates \\[ \\eta_{ij} = \\mathbf{x&#39;_i \\beta_j} = \\log \\frac{p_{ij}}{p_{i1}}, j = 2,..,J \\] We compare \\(p_{ij}\\) to the baseline \\(p_{i1}\\), suggesting \\[ p_{ij} = \\frac{\\exp(\\eta_{ij})}{1 + \\sum_{i=2}^J \\exp(\\eta_{ij})} \\] which is known as multinomial logistic model. Note: Softmax coding for multinomial logistic regression: rather than selecting a baseline class, we treat all \\(K\\) class symmetrically - equally important (no baseline). \\[ P(Y = k | X = x) = \\frac{exp(\\beta_{k1} + \\dots + \\beta_{k_p x_p})}{\\sum_{l = 1}^K exp(\\beta_{l0} + \\dots + \\beta_{l_p x_p})} \\] then the log odds ratio between k-th and k’-th classes is \\[ \\log (\\frac{P(Y=k|X=x)}{P(Y = k&#39; | X=x)}) = (\\beta_{k0} - \\beta_{k&#39;0}) + \\dots + (\\beta_{kp} - \\beta_{k&#39;p}) x_p \\] library(faraway) library(dplyr) data(nes96, package=&quot;faraway&quot;) head(nes96,3) #&gt; popul TVnews selfLR ClinLR DoleLR PID age educ income vote #&gt; 1 0 7 extCon extLib Con strRep 36 HS $3Kminus Dole #&gt; 2 190 1 sliLib sliLib sliCon weakDem 20 Coll $3Kminus Clinton #&gt; 3 31 7 Lib Lib Con weakDem 24 BAdeg $3Kminus Clinton We try to understand their political strength table(nes96$PID) #&gt; #&gt; strDem weakDem indDem indind indRep weakRep strRep #&gt; 200 180 108 37 94 150 175 nes96$Political_Strength &lt;- NA nes96$Political_Strength[nes96$PID %in% c(&quot;strDem&quot;, &quot;strRep&quot;)] &lt;- &quot;Strong&quot; nes96$Political_Strength[nes96$PID %in% c(&quot;weakDem&quot;, &quot;weakRep&quot;)] &lt;- &quot;Weak&quot; nes96$Political_Strength[nes96$PID %in% c(&quot;indDem&quot;, &quot;indind&quot;, &quot;indRep&quot;)] &lt;- &quot;Neutral&quot; nes96 %&gt;% group_by(Political_Strength) %&gt;% summarise(Count = n()) #&gt; # A tibble: 3 × 2 #&gt; Political_Strength Count #&gt; &lt;chr&gt; &lt;int&gt; #&gt; 1 Neutral 239 #&gt; 2 Strong 375 #&gt; 3 Weak 330 visualize the political strength variable library(ggplot2) Plot_DF &lt;- nes96 %&gt;% mutate(Age_Grp = cut_number(age, 4)) %&gt;% group_by(Age_Grp, Political_Strength) %&gt;% summarise(count = n()) %&gt;% group_by(Age_Grp) %&gt;% mutate(etotal = sum(count), proportion = count / etotal) Age_Plot &lt;- ggplot( Plot_DF, aes( x = Age_Grp, y = proportion, group = Political_Strength, linetype = Political_Strength, color = Political_Strength ) ) + geom_line(size = 2) Age_Plot Fit the multinomial logistic model: model political strength as a function of age and education library(nnet) Multinomial_Model &lt;- multinom(Political_Strength ~ age + educ, nes96, trace = F) summary(Multinomial_Model) #&gt; Call: #&gt; multinom(formula = Political_Strength ~ age + educ, data = nes96, #&gt; trace = F) #&gt; #&gt; Coefficients: #&gt; (Intercept) age educ.L educ.Q educ.C educ^4 #&gt; Strong -0.08788729 0.010700364 -0.1098951 -0.2016197 -0.1757739 -0.02116307 #&gt; Weak 0.51976285 -0.004868771 -0.1431104 -0.2405395 -0.2411795 0.18353634 #&gt; educ^5 educ^6 #&gt; Strong -0.1664377 -0.1359449 #&gt; Weak -0.1489030 -0.2173144 #&gt; #&gt; Std. Errors: #&gt; (Intercept) age educ.L educ.Q educ.C educ^4 #&gt; Strong 0.3017034 0.005280743 0.4586041 0.4318830 0.3628837 0.2964776 #&gt; Weak 0.3097923 0.005537561 0.4920736 0.4616446 0.3881003 0.3169149 #&gt; educ^5 educ^6 #&gt; Strong 0.2515012 0.2166774 #&gt; Weak 0.2643747 0.2199186 #&gt; #&gt; Residual Deviance: 2024.596 #&gt; AIC: 2056.596 Alternatively, stepwise model selection based AIC Multinomial_Step &lt;- step(Multinomial_Model,trace = 0) #&gt; trying - age #&gt; trying - educ #&gt; trying - age Multinomial_Step #&gt; Call: #&gt; multinom(formula = Political_Strength ~ age, data = nes96, trace = F) #&gt; #&gt; Coefficients: #&gt; (Intercept) age #&gt; Strong -0.01988977 0.009832916 #&gt; Weak 0.59497046 -0.005954348 #&gt; #&gt; Residual Deviance: 2030.756 #&gt; AIC: 2038.756 compare the best model to the full model based on deviance pchisq(q = deviance(Multinomial_Step) - deviance(Multinomial_Model), df = Multinomial_Model$edf-Multinomial_Step$edf,lower=F) #&gt; [1] 0.9078172 We see no significant difference Plot of the fitted model PlotData &lt;- data.frame(age = seq(from = 19, to = 91)) Preds &lt;- PlotData %&gt;% bind_cols(data.frame(predict( object = Multinomial_Step, PlotData, type = &quot;probs&quot; ))) plot( x = Preds$age, y = Preds$Neutral, type = &quot;l&quot;, ylim = c(0.2, 0.6), col = &quot;black&quot;, ylab = &quot;Proportion&quot;, xlab = &quot;Age&quot; ) lines(x = Preds$age, y = Preds$Weak, col = &quot;blue&quot;) lines(x = Preds$age, y = Preds$Strong, col = &quot;red&quot;) legend( &#39;topleft&#39;, legend = c(&#39;Neutral&#39;, &#39;Weak&#39;, &#39;Strong&#39;), col = c(&#39;black&#39;, &#39;blue&#39;, &#39;red&#39;), lty = 1 ) predict(Multinomial_Step,data.frame(age = 34)) # predicted result (categoriy of political strength) of 34 year old #&gt; [1] Weak #&gt; Levels: Neutral Strong Weak predict(Multinomial_Step,data.frame(age = c(34,35)),type=&quot;probs&quot;) # predicted result of the probabilities of each level of political strength for a 34 and 35 #&gt; Neutral Strong Weak #&gt; 1 0.2597275 0.3556910 0.3845815 #&gt; 2 0.2594080 0.3587639 0.3818281 If categories are ordered (i.e., ordinal data), we must use another approach (still multinomial, but use cumulative probabilities). Another example library(agridat) dat &lt;- agridat::streibig.competition # See Schaberger and Pierce, pages 370+ # Consider only the mono-species barley data (no competition from Sinapis) gammaDat &lt;- subset(dat, sseeds &lt; 1) gammaDat &lt;- transform(gammaDat, x = bseeds, y = bdwt, block = factor(block)) # Inverse yield looks like it will be a good fit for Gamma&#39;s inverse link ggplot(gammaDat, aes(x = x, y = 1 / y)) + geom_point(aes(color = block, shape = block)) + xlab(&#39;Seeding Rate&#39;) + ylab(&#39;Inverse yield&#39;) + ggtitle(&#39;Streibig Competion - Barley only&#39;) \\[ Y \\sim Gamma \\] because Gamma is non-negative as opposed to Normal. The canonical Gamma link function is the inverse (or reciprocal) link \\[ \\begin{aligned} \\eta_{ij} &amp;= \\beta_{0j} + \\beta_{1j}x_{ij} + \\beta_2x_{ij}^2 \\\\ Y_{ij} &amp;= \\eta_{ij}^{-1} \\end{aligned} \\] The linear predictor is a quadratic model fit to each of the j-th blocks. A different model (not fitted) could be one with common slopes: glm(y ~ x + I(x^2),…) # linear predictor is quadratic, with separate intercept and slope per block m1 &lt;- glm(y ~ block + block * x + block * I(x ^ 2), data = gammaDat, family = Gamma(link = &quot;inverse&quot;)) summary(m1) #&gt; #&gt; Call: #&gt; glm(formula = y ~ block + block * x + block * I(x^2), family = Gamma(link = &quot;inverse&quot;), #&gt; data = gammaDat) #&gt; #&gt; Deviance Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -1.21708 -0.44148 0.02479 0.17999 0.80745 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 1.115e-01 2.870e-02 3.886 0.000854 *** #&gt; blockB2 -1.208e-02 3.880e-02 -0.311 0.758630 #&gt; blockB3 -2.386e-02 3.683e-02 -0.648 0.524029 #&gt; x -2.075e-03 1.099e-03 -1.888 0.072884 . #&gt; I(x^2) 1.372e-05 9.109e-06 1.506 0.146849 #&gt; blockB2:x 5.198e-04 1.468e-03 0.354 0.726814 #&gt; blockB3:x 7.475e-04 1.393e-03 0.537 0.597103 #&gt; blockB2:I(x^2) -5.076e-06 1.184e-05 -0.429 0.672475 #&gt; blockB3:I(x^2) -6.651e-06 1.123e-05 -0.592 0.560012 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; (Dispersion parameter for Gamma family taken to be 0.3232083) #&gt; #&gt; Null deviance: 13.1677 on 29 degrees of freedom #&gt; Residual deviance: 7.8605 on 21 degrees of freedom #&gt; AIC: 225.32 #&gt; #&gt; Number of Fisher Scoring iterations: 5 For predict new value of \\(x\\) newdf &lt;- expand.grid(x = seq(0, 120, length = 50), block = factor(c(&#39;B1&#39;, &#39;B2&#39;, &#39;B3&#39;))) newdf$pred &lt;- predict(m1, new = newdf, type = &#39;response&#39;) ggplot(gammaDat, aes(x = x, y = y)) + geom_point(aes(color = block, shape = block)) + xlab(&#39;Seeding Rate&#39;) + ylab(&#39;Inverse yield&#39;) + ggtitle(&#39;Streibig Competion - Barley only Predictions&#39;) + geom_line(data = newdf, aes( x = x, y = pred, color = block, linetype = block )) "],["generalization.html", "7.7 Generalization", " 7.7 Generalization We can see that Poisson regression looks similar to logistic regression. Hence, we can generalize to a class of modeling. Thanks to Nelder and Wedderburn (1972), we have the generalized linear models (GLMs). Estimation is generalize in these models. Exponential Family The theory of GLMs is developed for data with distribution given y the exponential family. The form of the data distribution that is useful for GLMs is \\[ f(y;\\theta, \\phi) = \\exp(\\frac{\\theta y - b(\\theta)}{a(\\phi)} + c(y, \\phi)) \\] where \\(\\theta\\) is called the natural parameter \\(\\phi\\) is called the dispersion parameter Note: This family includes the [Gamma], [Normal], [Poisson], and other. For all parameterization of the exponential family, check this link Example if we have \\(Y \\sim N(\\mu, \\sigma^2)\\) \\[ \\begin{aligned} f(y; \\mu, \\sigma^2) &amp;= \\frac{1}{(2\\pi \\sigma^2)^{1/2}}\\exp(-\\frac{1}{2\\sigma^2}(y- \\mu)^2) \\\\ &amp;= \\exp(-\\frac{1}{2\\sigma^2}(y^2 - 2y \\mu +\\mu^2)- \\frac{1}{2}\\log(2\\pi \\sigma^2)) \\\\ &amp;= \\exp(\\frac{y \\mu - \\mu^2/2}{\\sigma^2} - \\frac{y^2}{2\\sigma^2} - \\frac{1}{2}\\log(2\\pi \\sigma^2)) \\\\ &amp;= \\exp(\\frac{\\theta y - b(\\theta)}{a(\\phi)} + c(y , \\phi)) \\end{aligned} \\] where \\(\\theta = \\mu\\) \\(b(\\theta) = \\frac{\\mu^2}{2}\\) \\(a(\\phi) = \\sigma^2 = \\phi\\) \\(c(y , \\phi) = - \\frac{1}{2}(\\frac{y^2}{\\phi}+\\log(2\\pi \\sigma^2))\\) Properties of GLM exponential families \\(E(Y) = b&#39; (\\theta)\\) where \\(b&#39;(\\theta) = \\frac{\\partial b(\\theta)}{\\partial \\theta}\\) (here ' is “prime”, not transpose) \\(var(Y) = a(\\phi)b&#39;&#39;(\\theta)= a(\\phi)V(\\mu)\\). \\(V(\\mu)\\) is the variance function; however, it is only the variance in the case that \\(a(\\phi) =1\\) If \\(a(), b(), c()\\) are identifiable, we will derive expected value and variance of Y. Example Normal distribution \\[ \\begin{aligned} b&#39;(\\theta) &amp;= \\frac{\\partial b(\\mu^2/2)}{\\partial \\mu} = \\mu \\\\ V(\\mu) &amp;= \\frac{\\partial^2 (\\mu^2/2)}{\\partial \\mu^2} = 1 \\\\ \\to var(Y) &amp;= a(\\phi) = \\sigma^2 \\end{aligned} \\] Poisson distribution \\[ \\begin{aligned} f(y, \\theta, \\phi) &amp;= \\frac{\\mu^y \\exp(-\\mu)}{y!} \\\\ &amp;= \\exp(y\\log(\\mu) - \\mu - \\log(y!)) \\\\ &amp;= \\exp(y\\theta - \\exp(\\theta) - \\log(y!)) \\end{aligned} \\] where \\(\\theta = \\log(\\mu)\\) \\(a(\\phi) = 1\\) \\(b(\\theta) = \\exp(\\theta)\\) \\(c(y, \\phi) = \\log(y!)\\) Hence, \\[ \\begin{aligned} E(Y) = \\frac{\\partial b(\\theta)}{\\partial \\theta} = \\exp(\\theta) &amp;= \\mu \\\\ var(Y) = \\frac{\\partial^2 b(\\theta)}{\\partial \\theta^2} &amp;= \\mu \\end{aligned} \\] Since \\(\\mu = E(Y) = b&#39;(\\theta)\\) In GLM, we take some monotone function (typically nonlinear) of \\(\\mu\\) to be linear in the set of covariates \\[ g(\\mu) = g(b&#39;(\\theta)) = \\mathbf{x&#39;\\beta} \\] Equivalently, \\[ \\mu = g^{-1}(\\mathbf{x&#39;\\beta}) \\] where \\(g(.)\\) is the link function since it links mean response (\\(\\mu = E(Y)\\)) and a linear expression of the covariates Some people use \\(\\eta = \\mathbf{x&#39;\\beta}\\) where \\(\\eta\\) = the “linear predictor” GLM is composed of 2 components The random component: is the distribution chosen to model the response variables \\(Y_1,...,Y_n\\) is specified by the choice fo \\(a(), b(), c()\\) in the exponential form Notation: Assume that there are n independent response variables \\(Y_1,...,Y_n\\) with densities \\[ f(y_i ; \\theta_i, \\phi) = \\exp(\\frac{\\theta_i y_i - b(\\theta_i)}{a(\\phi)}+ c(y_i, \\phi)) \\] notice each observation might have different densities Assume that \\(\\phi\\) is constant for all \\(i = 1,...,n\\), but \\(\\theta_i\\) will vary. \\(\\mu_i = E(Y_i)\\) for all i. The systematic component is the portion of the model that gives the relation between \\(\\mu\\) and the covariates \\(\\mathbf{x}\\) consists of 2 parts: the link function, \\(g(.)\\) the linear predictor, \\(\\eta = \\mathbf{x&#39;\\beta}\\) Notation: assume \\(g(\\mu_i) = \\mathbf{x&#39;\\beta} = \\eta_i\\) where \\(\\mathbf{\\beta} = (\\beta_1,..., \\beta_p)&#39;\\) The parameters to be estimated are \\(\\beta_1,...\\beta_p , \\phi\\) The Canonical Link To choose \\(g(.)\\), we can use canonical link function (Remember: Canonical link is just a special case of the link function) If the link function \\(g(.)\\) is such \\(g(\\mu_i) = \\eta_i = \\theta_i\\), the natural parameter, then \\(g(.)\\) is the canonical link. \\(b(\\theta)\\) = cumulant moment generating function \\(g(\\mu)\\) is the link function, which relates the linear predictor to the mean and is required to be monotone increasing, continuously differentiable and invertible. Equivalently, we can think of canonical link function as \\[ \\gamma^{-1} \\circ g^{-1} = I \\] which is the identity. Hence, \\[ \\theta = \\eta \\] The inverse link \\(g^{-1}(.)\\) is also known as the mean function, take linear predictor output (ranging from \\(-\\infty\\) to \\(\\infty\\)) and transform it into a different scale. Exponential: converts \\(\\mathbf{\\beta X}\\) into a curve that is restricted between 0 and \\(\\infty\\) (which you can see that is useful in case you want to convert a linear predictor into a non-negative value). \\(\\lambda = \\exp(y) = \\mathbf{\\beta X}\\) Inverse Logit (also known as logistic): converts \\(\\mathbf{\\beta X}\\) into a curve that is restricted between 0 and 1, which is useful in case you want to convert a linear predictor to a probability. \\(\\theta = \\frac{1}{1 + \\exp(-y)} = \\frac{1}{1 + \\exp(- \\mathbf{\\beta X})}\\) \\(y\\) = linear predictor value \\(\\theta\\) = transformed value The identity link is that \\[ \\begin{aligned} \\eta_i &amp;= g(\\mu_i) = \\mu_i \\\\ \\mu_i &amp;= g^{-1}(\\eta_i) = \\eta_i \\end{aligned} \\] Table 15.1 Generalized Linear Models 15.1 the Structure of Generalized Linear Models More example on the link functions and their inverses can be found on page 380 Example Normal random component Mean Response: \\(\\mu_i = \\theta_i\\) Canonical Link: \\(g( \\mu_i) = \\mu_i\\) (the identity link) Binomial random component Mean Response: \\(\\mu_i = \\frac{n_i \\exp( \\theta)}{1+\\exp (\\theta_i)}\\) and \\(\\theta(\\mu_i) = \\log(\\frac{p_i }{1-p_i}) = \\log (\\frac{\\mu_i} {n_i - \\mu_i})\\) Canonical link: \\(g(\\mu_i) = \\log(\\frac{\\mu_i} {n_i - \\mu_i})\\) (logit link) Poisson random component Mean Response: \\(\\mu_i = \\exp(\\theta_i)\\) Canonical Link: \\(g(\\mu_i) = \\log(\\mu_i)\\) Gamma random component: Mean response: \\(\\mu_i = -\\frac{1}{\\theta_i}\\) and \\(\\theta(\\mu_i) = - \\mu_i^{-1}\\) Canonical Link: \\(g(\\mu\\_i) = - \\frac{1}{\\mu_i}\\) Inverse Gaussian random Canonical Link: \\(g(\\mu_i) = \\frac{1}{\\mu_i^2}\\) 7.7.1 Estimation MLE for parameters of the systematic component (\\(\\beta\\)) Unification of derivation and computation (thanks to the exponential forms) No unification for estimation of the dispersion parameter (\\(\\phi\\)) 7.7.1.1 Estimation of \\(\\beta\\) We have \\[ \\begin{aligned} f(y_i ; \\theta_i, \\phi) &amp;= \\exp(\\frac{\\theta_i y_i - b(\\theta_i)}{a(\\phi)}+ c(y_i, \\phi)) \\\\ E(Y_i) &amp;= \\mu_i = b&#39;(\\theta) \\\\ var(Y_i) &amp;= b&#39;&#39;(\\theta)a(\\phi) = V(\\mu_i)a(\\phi) \\\\ g(\\mu_i) &amp;= \\mathbf{x}_i&#39;\\beta = \\eta_i \\end{aligned} \\] If the log-likelihood for a single observation is \\(l_i (\\beta,\\phi)\\). The log-likelihood for all n observations is \\[ \\begin{aligned} l(\\beta,\\phi) &amp;= \\sum_{i=1}^n l_i (\\beta,\\phi) \\\\ &amp;= \\sum_{i=1}^n (\\frac{\\theta_i y_i - b(\\theta_i)}{a(\\phi)}+ c(y_i, \\phi)) \\end{aligned} \\] Using MLE to find \\(\\beta\\), we use the chain rule to get the derivatives \\[ \\begin{aligned} \\frac{\\partial l_i (\\beta,\\phi)}{\\partial \\beta_j} &amp;= \\frac{\\partial l_i (\\beta, \\phi)}{\\partial \\theta_i} \\times \\frac{\\partial \\theta_i}{\\partial \\mu_i} \\times \\frac{\\partial \\mu_i}{\\partial \\eta_i}\\times \\frac{\\partial \\eta_i}{\\partial \\beta_j} \\\\ &amp;= \\sum_{i=1}^{n}(\\frac{ y_i - \\mu_i}{a(\\phi)} \\times \\frac{1}{V(\\mu_i)} \\times \\frac{\\partial \\mu_i}{\\partial \\eta_i} \\times x_{ij}) \\end{aligned} \\] If we let \\[ w_i \\equiv ((\\frac{\\partial \\eta_i}{\\partial \\mu_i})^2 V(\\mu_i))^{-1} \\] Then, \\[ \\frac{\\partial l_i (\\beta,\\phi)}{\\partial \\beta_j} = \\sum_{i=1}^n (\\frac{y_i \\mu_i}{a(\\phi)} \\times w_i \\times \\frac{\\partial \\eta_i}{\\partial \\mu_i} \\times x_{ij}) \\] We can also get the second derivatives using the chain rule. Example: For the \\[Newton-Raphson\\] algorithm, we need \\[ - E(\\frac{\\partial^2 l(\\beta,\\phi)}{\\partial \\beta_j \\partial \\beta_k}) \\] where \\((j,k)\\)-th element of the Fisher information matrix \\(\\mathbf{I}(\\beta)\\) Hence, \\[ - E(\\frac{\\partial^2 l(\\beta,\\phi)}{\\partial \\beta_j \\partial \\beta_k}) = \\sum_{i=1}^n \\frac{w_i}{a(\\phi)}x_{ij}x_{ik} \\] for the (j,k)th element If Bernoulli model with logit link function (which is the canonical link) \\[ \\begin{aligned} b(\\theta) &amp;= \\log(1 + \\exp(\\theta)) = \\log(1 + \\exp(\\mathbf{x&#39;\\beta})) \\\\ a(\\phi) &amp;= 1 \\\\ c(y_i, \\phi) &amp;= 0 \\\\ E(Y) = b&#39;(\\theta) &amp;= \\frac{\\exp(\\theta)}{1 + \\exp(\\theta)} = \\mu = p \\\\ \\eta = g(\\mu) &amp;= \\log(\\frac{\\mu}{1-\\mu}) = \\theta = \\log(\\frac{p}{1-p}) = \\mathbf{x&#39;\\beta} \\end{aligned} \\] For \\(Y_i\\), i = 1,.., the log-likelihood is \\[ l_i (\\beta, \\phi) = \\frac{y_i \\theta_i - b(\\theta_i)}{a(\\phi)} + c(y_i, \\phi) = y_i \\mathbf{x}&#39;_i \\beta - \\log(1+ \\exp(\\mathbf{x&#39;\\beta})) \\] Additionally, \\[ \\begin{aligned} V(\\mu_i) &amp;= \\mu_i(1-\\mu_i)= p_i (1-p_i) \\\\ \\frac{\\partial \\mu_i}{\\partial \\eta_i} &amp;= p_i(1-p_i) \\end{aligned} \\] Hence, \\[ \\begin{aligned} \\frac{\\partial l(\\beta, \\phi)}{\\partial \\beta_j} &amp;= \\sum_{i=1}^n[\\frac{y_i - \\mu_i}{a(\\phi)} \\times \\frac{1}{V(\\mu_i)}\\times \\frac{\\partial \\mu_i}{\\partial \\eta_i} \\times x_{ij}] \\\\ &amp;= \\sum_{i=1}^n (y_i - p_i) \\times \\frac{1}{p_i(1-p_i)} \\times p_i(1-p_i) \\times x_{ij} \\\\ &amp;= \\sum_{i=1}^n (y_i - p_i) x_{ij} \\\\ &amp;= \\sum_{i=1}^n (y_i - \\frac{\\exp(\\mathbf{x&#39;_i\\beta})}{1+ \\exp(\\mathbf{x&#39;_i\\beta})})x_{ij} \\end{aligned} \\] then \\[ w_i = ((\\frac{\\partial \\eta_i}{\\partial \\mu_i})^2 V(\\mu_i))^{-1} = p_i (1-p_i) \\] \\[ \\mathbf{I}_{jk}(\\mathbf{\\beta}) = \\sum_{i=1}^n \\frac{w_i}{a(\\phi)} x_{ij}x_{ik} = \\sum_{i=1}^n p_i (1-p_i)x_{ij}x_{ik} \\] The Fisher-scoring algorithm for the MLE of \\(\\mathbf{\\beta}\\) is \\[ \\left( \\begin{array} {c} \\beta_1 \\\\ \\beta_2 \\\\ . \\\\ . \\\\ . \\\\ \\beta_p \\\\ \\end{array} \\right)^{(m+1)} = \\left( \\begin{array} {c} \\beta_1 \\\\ \\beta_2 \\\\ . \\\\ . \\\\ . \\\\ \\beta_p \\\\ \\end{array} \\right)^{(m)} + \\mathbf{I}^{-1}(\\mathbf{\\beta}) \\left( \\begin{array} {c} \\frac{\\partial l (\\beta, \\phi)}{\\partial \\beta_1} \\\\ \\frac{\\partial l (\\beta, \\phi)}{\\partial \\beta_2} \\\\ . \\\\ . \\\\ . \\\\ \\frac{\\partial l (\\beta, \\phi)}{\\partial \\beta_p} \\\\ \\end{array} \\right)|_{\\beta = \\beta^{(m)}} \\] Similar to \\[Newton-Raphson\\] expect the matrix of second derivatives by the expected value of the second derivative matrix. In matrix notation, \\[ \\begin{aligned} \\frac{\\partial l }{\\partial \\beta} &amp;= \\frac{1}{a(\\phi)}\\mathbf{X&#39;W\\Delta(y - \\mu)} \\\\ &amp;= \\frac{1}{a(\\phi)}\\mathbf{F&#39;V^{-1}(y - \\mu)} \\\\ \\end{aligned} \\] \\[ \\mathbf{I}(\\beta) = \\frac{1}{a(\\phi)}\\mathbf{X&#39;WX} = \\frac{1}{a(\\phi)}\\mathbf{F&#39;V^{-1}F} \\] where \\(\\mathbf{X}\\) is an \\(n \\times p\\) matrix of covariates \\(\\mathbf{W}\\) is an \\(n \\times n\\) diagonal matrix with \\((i,i)\\)-th element given by \\(w_i\\) \\(\\mathbf{\\Delta}\\) an \\(n \\times n\\) diagonal matrix with \\((i,i)\\)-th element given by \\(\\frac{\\partial \\eta_i}{\\partial \\mu_i}\\) \\(\\mathbf{F} = \\mathbf{\\frac{\\partial \\mu}{\\partial \\beta}}\\) an \\(n \\times p\\) matrix with \\(i\\)-th row \\(\\frac{\\partial \\mu_i}{\\partial \\beta} = (\\frac{\\partial \\mu_i}{\\partial \\eta_i})\\mathbf{x}&#39;_i\\) \\(\\mathbf{V}\\) an \\(n \\times n\\) diagonal matrix with \\((i,i)\\)-th element given by \\(V(\\mu_i)\\) Setting the derivative of the log-likelihood equal to 0, ML estimating equations are \\[ \\mathbf{F&#39;V^{-1}y= F&#39;V^{-1}\\mu} \\] where all components of this equation expect y depends on the parameters \\(\\beta\\) Special Cases If one has a canonical link, the estimating equations reduce to \\[ \\mathbf{X&#39;y= X&#39;\\mu} \\] If one has an identity link, then \\[ \\mathbf{X&#39;V^{-1}y = X&#39;V^{-1}X\\hat{\\beta}} \\] which gives the generalized least squares estimator Generally, we can rewrite the Fisher-scoring algorithm as \\[ \\beta^{(m+1)} = \\beta^{(m)} + \\mathbf{(\\hat{F}&#39;\\hat{V}^{-1}\\hat{F})^{-1}\\hat{F}&#39;\\hat{V}^{-1}(y- \\hat{\\mu})} \\] Since \\(\\hat{F},\\hat{V}, \\hat{\\mu}\\) depend on \\(\\beta\\), we evaluate at \\(\\beta^{(m)}\\) From starting values \\(\\beta^{(0)}\\), we can iterate until convergence. Notes: if \\(a(\\phi)\\) is a constant or of the form \\(m_i \\phi\\) with known \\(m_i\\), then \\(\\phi\\) cancels. 7.7.1.2 Estimation of \\(\\phi\\) 2 approaches: MLE \\[ \\frac{\\partial l_i}{\\partial \\phi} = \\frac{(\\theta_i y_i - b(\\theta_i)a&#39;(\\phi))}{a^2(\\phi)} + \\frac{\\partial c(y_i,\\phi)}{\\partial \\phi} \\] the MLE of \\(\\phi\\) solves \\[ \\frac{a^2(\\phi)}{a&#39;(\\phi)}\\sum_{i=1}^n \\frac{\\partial c(y_i, \\phi)}{\\partial \\phi} = \\sum_{i=1}^n(\\theta_i y_i - b(\\theta_i)) \\] Situation others than normal error case, expression for \\(\\frac{\\partial c(y,\\phi)}{\\partial \\phi}\\) are not simple Even for the canonical link and \\(a(\\phi)\\) constant, there is no nice general expression for \\(-E(\\frac{\\partial^2 l}{\\partial \\phi^2})\\), so the unification GLMs provide for estimation of \\(\\beta\\) breaks down for \\(\\phi\\) Moment Estimation (“Bias Corrected \\(\\chi^2\\)”) The MLE is not conventional approach to estimation of \\(\\phi\\) in GLMS. For the exponential family \\(var(Y) =V(\\mu)a(\\phi)\\). This implies \\[ \\begin{aligned} a(\\phi) &amp;= \\frac{var(Y)}{V(\\mu)} = \\frac{E(Y- \\mu)^2}{V(\\mu)} \\\\ a(\\hat{\\phi}) &amp;= \\frac{1}{n-p} \\sum_{i=1}^n \\frac{(y_i -\\hat{\\mu}_i)^2}{V(\\hat{\\mu})} \\end{aligned} \\] where \\(p\\) is the dimension of \\(\\beta\\) GLM with canonical link function \\(g(.)= (b&#39;(.))^{-1}\\) \\[ \\begin{aligned} g(\\mu) &amp;= \\theta = \\eta = \\mathbf{x&#39;\\beta} \\\\ \\mu &amp;= g^{-1}(\\eta)= b&#39;(\\eta) \\end{aligned} \\] so the method estimator for \\(a(\\phi)=\\phi\\) is \\[ \\hat{\\phi} = \\frac{1}{n-p} \\sum_{i=1}^n \\frac{(y_i - g^{-1}(\\hat{\\eta}_i))^2}{V(g^{-1}(\\hat{\\eta}_i))} \\] 7.7.2 Inference We have \\[ \\hat{var}(\\beta) = a(\\phi)(\\mathbf{\\hat{F}&#39;\\hat{V}\\hat{F}})^{-1} \\] where \\(\\mathbf{V}\\) is an \\(n \\times n\\) diagonal matrix with diagonal elements given by \\(V(\\mu_i)\\) \\(\\mathbf{F}\\) is an \\(n \\times p\\) matrix given by \\(\\mathbf{F} = \\frac{\\partial \\mu}{\\partial \\beta}\\) Both \\(\\mathbf{V,F}\\) are dependent on the mean \\(\\mu\\), and thus \\(\\beta\\). Hence, their estimates (\\(\\mathbf{\\hat{V},\\hat{F}}\\)) depend on \\(\\hat{\\beta}\\). \\[ H_0: \\mathbf{L\\beta = d} \\] where \\(\\mathbf{L}\\) is a q x p matrix with a Wald test \\[ W = \\mathbf{(L \\hat{\\beta}-d)&#39;(a(\\phi)L(\\hat{F}&#39;\\hat{V}^{-1}\\hat{F})L&#39;)^{-1}(L \\hat{\\beta}-d)} \\] which follows \\(\\chi_q^2\\) distribution (asymptotically), where \\(q\\) is the rank of \\(\\mathbf{L}\\) In the simple case \\(H_0: \\beta_j = 0\\) gives \\(W = \\frac{\\hat{\\beta}^2_j}{\\hat{var}(\\hat{\\beta}_j)} \\sim \\chi^2_1\\) asymptotically Likelihood ratio test \\[ \\Lambda = 2 (l(\\hat{\\beta}_f)-l(\\hat{\\beta}_r)) \\sim \\chi^2_q \\] where \\(q\\) is the number of constraints used to fit the reduced model \\(\\hat{\\beta}_r\\), and \\(\\hat{\\beta}_r\\) is the fit under the full model. Wald test is easier to implement, but likelihood ratio test is better (especially for small samples). 7.7.3 Deviance Deviance is necessary for goodness of fit, inference and for alternative estimation of the dispersion parameter. We define and consider Deviance from a likelihood ratio perspective. Assume that \\(\\phi\\) is known. Let \\(\\tilde{\\theta}\\) denote the full and \\(\\hat{\\theta}\\) denote the reduced model MLEs. Then, the likelihood ratio (2 times the difference in log-likelihoods) is \\[ 2\\sum_{i=1}^{n} \\frac{y_i (\\tilde{\\theta}_i- \\hat{\\theta}_i)-b(\\tilde{\\theta}_i) + b(\\hat{\\theta}_i)}{a_i(\\phi)} \\] For exponential families, \\(\\mu = E(y) = b&#39;(\\theta)\\), so the natural parameter is a function of \\(\\mu: \\theta = \\theta(\\mu) = b&#39;^{-1}(\\mu)\\), and the likelihood ratio turns into \\[ 2 \\sum_{i=1}^m \\frac{y_i\\{\\theta(\\tilde{\\mu}_i - \\theta(\\hat{\\mu}_i)\\} - b(\\theta(\\tilde{\\mu}_i)) + b(\\theta(\\hat{\\mu}_i))}{a_i(\\phi)} \\] Comparing a fitted model to “the fullest possible model”, which is the saturated model: \\(\\tilde{\\mu}_i = y_i\\), i = 1,..,n. If \\(\\tilde{\\theta}_i^* = \\theta(y_i), \\hat{\\theta}_i^* = \\theta (\\hat{\\mu})\\), the likelihood ratio is \\[ 2 \\sum_{i=1}^{n} \\frac{y_i (\\tilde{\\theta}_i^* - \\hat{\\theta}_i^* + b(\\hat{\\theta}_i^*))}{a_i(\\phi)} \\] (McCullagh 2019) specify \\(a(\\phi) = \\phi\\), then the likelihood ratio can be written as \\[ D^*(\\mathbf{y, \\hat{\\mu}}) = \\frac{2}{\\phi}\\sum_{i=1}^n\\{y_i (\\tilde{\\theta}_i^*- \\hat{\\theta}_i^*)- b(\\tilde{\\theta}_i^*) +b(\\hat{\\theta}_i^*) \\} \\] where \\(D^*(\\mathbf{y, \\hat{\\mu}})\\) = scaled deviance \\(D(\\mathbf{y, \\hat{\\mu}}) = \\phi D^*(\\mathbf{y, \\hat{\\mu}})\\) = deviance Note: in some random component distributions, we can write \\(a_i(\\phi) = \\phi m_i\\), where \\(m_i\\) is some known scalar that may change with the observations. Then, the scaled deviance components are divided by \\(m_i\\): \\[ D^*(\\mathbf{y, \\hat{\\mu}}) \\equiv 2\\sum_{i=1}^n\\{y_i (\\tilde{\\theta}_i^*- \\hat{\\theta}_i^*)- b(\\tilde{\\theta}_i^*) +b(\\hat{\\theta}_i^*)\\} / (\\phi m_i) \\] \\(D^*(\\mathbf{y, \\hat{\\mu}}) = \\sum_{i=1}^n d_i\\)m where \\(d_i\\) is the deviance contribution from the \\(i\\)-th observation. \\(D\\) is used in model selection \\(D^*\\) is used in goodness of fit tests (as it is a likelihood ratio statistic). \\[ D^*(\\mathbf{y, \\hat{\\mu}}) = 2\\{l(\\mathbf{y,\\tilde{\\mu}})-l(\\mathbf{y,\\hat{\\mu}})\\} \\] \\(d_i\\) are used to form deviance residuals Normal We have \\[ \\begin{aligned} \\theta &amp;= \\mu \\\\ \\phi &amp;= \\sigma^2 \\\\ b(\\theta) &amp;= \\frac{1}{2} \\theta^2 \\\\ a(\\phi) &amp;= \\phi \\end{aligned} \\] Hence, \\[ \\begin{aligned} \\tilde{\\theta}_i &amp;= y_i \\\\ \\hat{\\theta}_i &amp;= \\hat{\\mu}_i = g^{-1}(\\hat{\\eta}_i) \\end{aligned} \\] And \\[ \\begin{aligned} D &amp;= 2 \\sum_{1=1}^n Y^2_i - y_i \\hat{\\mu}_i - \\frac{1}{2}y^2_i + \\frac{1}{2} \\hat{\\mu}_i^2 \\\\ &amp;= \\sum_{i=1}^n y_i^2 - 2y_i \\hat{\\mu}_i + \\hat{\\mu}_i^2 \\\\ &amp;= \\sum_{i=1}^n (y_i - \\hat{\\mu}_i)^2 \\end{aligned} \\] which is the residual sum of squares Poisson \\[ \\begin{aligned} f(y) &amp;= \\exp\\{y\\log(\\mu) - \\mu - \\log(y!)\\} \\\\ \\theta &amp;= \\log(\\mu) \\\\ b(\\theta) &amp;= \\exp(\\theta) \\\\ a(\\phi) &amp;= 1 \\\\ \\tilde{\\theta}_i &amp;= \\log(y_i) \\\\ \\hat{\\theta}_i &amp;= \\log(\\hat{\\mu}_i) \\\\ \\hat{\\mu}_i &amp;= g^{-1}(\\hat{\\eta}_i) \\end{aligned} \\] Then, \\[ \\begin{aligned} D &amp;= 2 \\sum_{i = 1}^n y_i \\log(y_i) - y_i \\log(\\hat{\\mu}_i) - y_i + \\hat{\\mu}_i \\\\ &amp;= 2 \\sum_{i = 1}^n y_i \\log(\\frac{y_i}{\\hat{\\mu}_i}) - (y_i - \\hat{\\mu}_i) \\end{aligned} \\] and \\[ d_i = 2\\{y_i \\log(\\frac{y_i}{\\hat{\\mu}})- (y_i - \\hat{\\mu}_i)\\} \\] 7.7.3.1 Analysis of Deviance The difference in deviance between a reduced and full model, where q is the difference in the number of free parameters, has an asymptotic \\(\\chi^2_q\\). The likelihood ratio test \\[ D^*(\\mathbf{y;\\hat{\\mu}_r}) - D^*(\\mathbf{y;\\hat{\\mu}_f}) = 2\\{l(\\mathbf{y;\\hat{\\mu}_f})-l(\\mathbf{y;\\hat{\\mu}_r})\\} \\] this comparison of models is Analysis of Deviance. GLM uses this analysis for model selection. An estimation of \\(\\phi\\) is \\[ \\hat{\\phi} = \\frac{D(\\mathbf{y, \\hat{\\mu}})}{n - p} \\] where \\(p\\) = number of parameters fit. Excessive use of \\(\\chi^2\\) test could be problematic since it is asymptotic (McCullagh 2019) 7.7.3.2 Deviance Residuals We have \\(D = \\sum_{i=1}^{n}d_i\\). Then, we define deviance residuals \\[ r_{D_i} = \\text{sign}(y_i -\\hat{\\mu}_i)\\sqrt{d_i} \\] Standardized version of deviance residuals is \\[ r_{s,i} = \\frac{y_i -\\hat{\\mu}}{\\hat{\\sigma}(1-h_{ii})^{1/2}} \\] Let \\(\\mathbf{H^{GLM} = W^{1/2}X(X&#39;WX)^{-1}X&#39;W^{-1/2}}\\), where \\(\\mathbf{W}\\) is an \\(n \\times n\\) diagonal matrix with \\((i,i)\\)-th element given by \\(w_i\\) (see Estimation of \\(\\beta\\)). Then Standardized deviance residuals is equivalently \\[ r_{s, D_i} = \\frac{r_{D_i}}{\\{\\hat{\\phi}(1-h_{ii}^{glm}\\}^{1/2}} \\] where \\(h_{ii}^{glm}\\) is the \\(i\\)-th diagonal of \\(\\mathbf{H}^{GLM}\\) 7.7.3.3 Pearson Chi-square Residuals Another \\(\\chi^2\\) statistic is Pearson \\(\\chi^2\\) statistics: (assume \\(m_i = 1\\)) \\[ X^2 = \\sum_{i=1}^{n} \\frac{(y_i - \\hat{\\mu}_i)^2}{V(\\hat{\\mu}_i)} \\] where \\(\\hat{\\mu}_i\\) is the fitted mean response fo the model of interest. The Scaled Pearson \\(\\chi^2\\) statistic is given by \\(\\frac{X^2}{\\phi} \\sim \\chi^2_{n-p}\\) where p is the number of parameters estimated. Hence, the Pearson \\(\\chi^2\\) residuals are \\[ X^2_i = \\frac{(y_i - \\hat{\\mu}_i)^2}{V(\\hat{\\mu}_i)} \\] If we have the following assumptions: Independent samples No over-dispersion: If \\(\\phi = 1\\), \\(\\frac{D(\\mathbf{y;\\hat{\\mu}})}{n-p}\\) and \\(\\frac{X^2}{n-p}\\) have a value substantially larger 1 indicates improperly specified model or overdispersion Multiple groups then \\(\\frac{X^2}{\\phi}\\) and \\(D^*(\\mathbf{y; \\hat{\\mu}})\\) both follow \\(\\chi^2_{n-p}\\) 7.7.4 Diagnostic Plots Standardized residual Plots: plot(\\(r_{s, D_i}\\), \\(\\hat{\\mu}_i\\)) or plot(\\(r_{s, D_i}\\), \\(T(\\hat{\\mu}_i)\\)) where \\(T(\\hat{\\mu}_i)\\) is transformation(\\(\\hat{\\mu}_i\\)) called constant information scale: plot(\\(r_{s, D_i}\\), \\(\\hat{\\eta}_i\\)) Random Component \\(T(\\hat{\\mu}_i)\\) Normal \\(\\hat{\\mu}\\) Poisson \\(2\\sqrt{\\mu}\\) Binomial \\(2 \\sin^{-1}(\\sqrt{\\hat{\\mu}})\\) Gamma \\(2 \\log(\\hat{\\mu})\\) Inverse Gaussian \\(-2\\hat{\\mu}^{-1/2}\\) If we see: Trend, it means we might have a wrong link function, or choice of scale Systematic change in range of residuals with a change in \\(T(\\hat{\\mu})\\) (incorrect random component) (systematic \\(\\neq\\) random) plot(\\(|r_{D_i}|,\\hat{\\mu}_i\\)) to check Variance Function. 7.7.5 Goodness of Fit To assess goodness of fit, we can use Deviance Pearson Chi-square Residuals In nested model, we could use likelihood-based information measures: \\[ \\begin{aligned} AIC &amp;= -2l(\\mathbf{\\hat{\\mu}}) + 2p \\\\ AICC &amp;= -2l(\\mathbf{\\hat{\\mu}}) + 2p(\\frac{n}{n-p-1}) \\\\ BIC &amp;= 2l(\\hat{\\mu}) + p \\log(n) \\end{aligned} \\] where \\(l(\\hat{\\mu})\\) is the log-likelihood evaluated at the parameter estimates \\(p\\) is the number of parameters \\(n\\) is the number of observations. Note: you have to use the same data with the same model (i.e., same link function, same random underlying random distribution). but you can have different number of parameters. Even though statisticians try to come up with measures that are similar to \\(R^2\\), in practice, it is not so appropriate. For example, they compare the log-likelihood of the fitted model against the that of a model with just the intercept: \\[ R^2_p = 1 - \\frac{l(\\hat{\\mu})}{l(\\hat{\\mu}_0)} \\] For certain specific random components such as binary response model, we have rescaled generalized \\(R^2\\) \\[ \\bar{R}^2 = \\frac{R^2_*}{\\max(R^2_*)} = \\frac{1-\\exp\\{-\\frac{2}{n}(l(\\hat{\\mu}) - l(\\hat{\\mu}_0) \\}}{1 - \\exp\\{\\frac{2}{n}l(\\hat{\\mu}_0)\\}} \\] 7.7.6 Over-Dispersion Random Components \\(var(Y)\\) \\(V(\\mu)\\) Binomial \\(var(Y) = n \\mu (1- \\mu)\\) \\(V(\\mu) = \\phi n \\mu(1- \\mu)\\) where \\(m_i =n\\) Poisson \\(var(Y) = \\mu\\) \\(V(\\mu) = \\phi \\mu\\) In both cases \\(\\phi = 1\\). Recall \\(b&#39;&#39;(\\theta)= V(\\mu)\\) check Estimation of \\(\\phi\\). If we find \\(\\phi &gt;1\\): over-dispersion (i.e., too much variation for an independent binomial or Poisson distribution). \\(\\phi&lt;1\\): under-dispersion (i.e., too little variation for an independent binomial or Poisson distribution). If we have either over or under-dispersion, it means we might have unspecified random component, we could Select a different random component distribution that can accommodate over or under-dispersion (e.g., negative binomial, Conway-Maxwell Poisson) use Nonlinear and Generalized Linear Mixed Models to handle random effects in generalized linear models. References "],["linear-mixed-models.html", "Chapter 8 Linear Mixed Models ", " Chapter 8 Linear Mixed Models "],["dependent-data.html", "8.1 Dependent Data", " 8.1 Dependent Data Forms of dependent data: Multivariate measurements on different individuals: (e.g., a person’s blood pressure, fat, etc are correlated) Clustered measurements: (e.g., blood pressure measurements of people in the same family can be correlated). Repeated measurements: (e.g., measurement of cholesterol over time can be correlated) “If data are collected repeatedly on experimental material to which treatments were applied initially, the data is a repeated measure.” (Schabenberger and Pierce 2001) Longitudinal data: (e.g., individual’s cholesterol tracked over time are correlated): “data collected repeatedly over time in an observational study are termed longitudinal.” (Schabenberger and Pierce 2001) Spatial data: (e.g., measurement of individuals living in the same neighborhood are correlated) Hence, we like to account for these correlations. Linear Mixed Model (LMM), also known as Mixed Linear Model has 2 components: Fixed effect (e.g, gender, age, diet, time) Random effects representing individual variation or auto correlation/spatial effects that imply dependent (correlated) errors Review Two-Way Mixed Effects ANOVA We choose to model the random subject-specific effect instead of including dummy subject covariates in our model because: reduction in the number of parameters to estimate when you do inference, it would make more sense that you can infer from a population (i.e., random effect). LLM Motivation In a repeated measurements analysis where \\(Y_{ij}\\) is the response for the \\(i\\)-th individual measured at the \\(j\\)-th time, \\(i =1,…,N\\) ; \\(j = 1,…,n_i\\) \\[ \\mathbf{Y}_i = \\left( \\begin{array} {c} Y_{i1} \\\\ . \\\\ .\\\\ .\\\\ Y_{in_i} \\end{array} \\right) \\] is all measurements for subject \\(i\\). Stage 1: (Regression Model) how the response changes over time for the \\(i\\)-th subject \\[ \\mathbf{Y_i = Z_i \\beta_i + \\epsilon_i} \\] where \\(Z_i\\) is an \\(n_i \\times q\\) matrix of known covariates \\(\\beta_i\\) is an unknown \\(q \\times 1\\) vector of subjective -specific coefficients (regression coefficients different for each subject) \\(\\epsilon_i\\) are the random errors (typically \\(\\sim N(0, \\sigma^2 I)\\)) We notice that there are two many \\(\\beta\\) to estimate here. Hence, this is the motivation for the second stage Stage 2: (Parameter Model) \\[ \\mathbf{\\beta_i = K_i \\beta + b_i} \\] where \\(K_i\\) is a \\(q \\times p\\) matrix of known covariates \\(\\beta\\) is a \\(p \\times 1\\) vector of unknown parameter \\(\\mathbf{b}_i\\) are independent \\(N(0,D)\\) random variables This model explain the observed variability between subjects with respect to the subject-specific regression coefficients, \\(\\beta_i\\). We model our different coefficient (\\(\\beta_i\\)) with respect to \\(\\beta\\). Example: Stage 1: \\[ Y_{ij} = \\beta_{1i} + \\beta_{2i}t_{ij} + \\epsilon_{ij} \\] where \\(j = 1,..,n_i\\) In the matrix notation, \\[ \\mathbf{Y_i} = \\left( \\begin{array} {c} Y_{i1} \\\\ .\\\\ Y_{in_i} \\end{array} \\right); \\mathbf{Z}_i = \\left( \\begin{array} {cc} 1 &amp; t_{i1} \\\\ . &amp; . \\\\ 1 &amp; t_{in_i} \\end{array} \\right) \\] \\[ \\beta_i = \\left( \\begin{array} {c} \\beta_{1i} \\\\ \\beta_{2i} \\end{array} \\right); \\epsilon_i = \\left( \\begin{array} {c} \\epsilon_{i1} \\\\ . \\\\ \\epsilon_{in_i} \\end{array} \\right) \\] Thus, \\[ \\mathbf{Y_i = Z_i \\beta_i + \\epsilon_i} \\] Stage 2: \\[ \\begin{aligned} \\beta_{1i} &amp;= \\beta_0 + b_{1i} \\\\ \\beta_{2i} &amp;= \\beta_1 L_i + \\beta_2 H_i + \\beta_3 C_i + b_{2i} \\end{aligned} \\] where \\(L_i, H_i, C_i\\) are indicator variables defined to 1 as the subject falls into different categories. Subject specific intercepts do not depend upon treatment, with \\(\\beta_0\\) (the average response at the start of treatment), and \\(\\beta_1 , \\beta_2, \\beta_3\\) (the average time effects for each of three treatment groups). \\[ \\begin{aligned} \\mathbf{K}_i &amp;= \\left( \\begin{array} {cccc} 1 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; L_i &amp; H_i &amp; C_i \\end{array} \\right) \\\\ \\beta &amp;= (\\beta_0 , \\beta_1, \\beta_2, \\beta_3)&#39; \\\\ \\mathbf{b}_i &amp;= \\left( \\begin{array} {c} b_{1i} \\\\ b_{2i} \\\\ \\end{array} \\right) \\\\ \\beta_i &amp;= \\mathbf{K_i \\beta + b_i} \\end{aligned} \\] To get \\(\\hat{\\beta}\\), we can fit the model sequentially: Estimate \\(\\hat{\\beta_i}\\) in the first stage Estimate \\(\\hat{\\beta}\\) in the second stage by replacing \\(\\beta_i\\) with \\(\\hat{\\beta}_i\\) However, problems arise from this method: information is lost by summarizing the vector \\(\\mathbf{Y}_i\\) solely by \\(\\hat{\\beta}_i\\) we need to account for variability when replacing \\(\\beta_i\\) with its estimate different subjects might have different number of observations. To address these problems, we can use Linear Mixed Model (Laird and Ware 1982) Substituting stage 2 into stage 1: \\[ \\mathbf{Y}_i = \\mathbf{Z}_i \\mathbf{K}_i \\beta + \\mathbf{Z}_i \\mathbf{b}_i + \\mathbf{\\epsilon}_i \\] Let \\(\\mathbf{X}_i = \\mathbf{Z}_i \\mathbf{K}_i\\) be an \\(n_i \\times p\\) matrix . Then, the LMM is \\[ \\mathbf{Y}_i = \\mathbf{X}_i \\beta + \\mathbf{Z}_i \\mathbf{b}_i + \\mathbf{\\epsilon}_i \\] where \\(i = 1,..,N\\) \\(\\beta\\) are the fixed effects, which are common to all subjects \\(\\mathbf{b}_i\\) are the subject specific random effects. \\(\\mathbf{b}_i \\sim N_q (\\mathbf{0,D})\\) \\(\\mathbf{\\epsilon}_i \\sim N_{n_i}(\\mathbf{0,\\Sigma_i})\\) \\(\\mathbf{b}_i\\) and \\(\\epsilon_i\\) are independent \\(\\mathbf{Z}_{i(n_i \\times q})\\) and \\(\\mathbf{X}_{i(n_i \\times p})\\) are matrices of known covariates. Equivalently, in the hierarchical form, we call conditional or hierarchical formulation of the linear mixed model \\[ \\begin{aligned} \\mathbf{Y}_i | \\mathbf{b}_i &amp;\\sim N(\\mathbf{X}_i \\beta+ \\mathbf{Z}_i \\mathbf{b}_i, \\mathbf{\\Sigma}_i) \\\\ \\mathbf{b}_i &amp;\\sim N(\\mathbf{0,D}) \\end{aligned} \\] for \\(i = 1,..,N\\). denote the respective functions by \\(f(\\mathbf{Y}_i |\\mathbf{b}_i)\\) and \\(f(\\mathbf{b}_i)\\) In general, \\[ \\begin{aligned} f(A,B) &amp;= f(A|B)f(B) \\\\ f(A) &amp;= \\int f(A,B)dB = \\int f(A|B) f(B) dB \\end{aligned} \\] In the LMM, the marginal density of \\(\\mathbf{Y}_i\\) is \\[ f(\\mathbf{Y}_i) = \\int f(\\mathbf{Y}_i | \\mathbf{b}_i) f(\\mathbf{b}_i) d\\mathbf{b}_i \\] which can be shown \\[ \\mathbf{Y}_i \\sim N(\\mathbf{X_i \\beta, Z_i DZ&#39;_i + \\Sigma_i}) \\] This is the marginal formulation of the linear mixed model Notes: We no longer have \\(Z_i b_i\\) in the mean, but add error in the variance (marginal dependence in Y). kinda of averaging out the common effect. Technically, we shouldn’t call it averaging the error b (adding it to the variance covariance matrix), it should be called adding random effect Continue with our example \\[ Y_{ij} = (\\beta_0 + b_{1i}) + (\\beta_1L_i + \\beta_2 H_i + \\beta_3 C_i + b_{2i})t_{ij} + \\epsilon_{ij} \\] for each treatment group \\[ Y_{ik}= \\begin{cases} \\beta_0 + b_{1i} + (\\beta_1 + \\ b_{2i})t_{ij} + \\epsilon_{ij} &amp; L \\\\ \\beta_0 + b_{1i} + (\\beta_2 + \\ b_{2i})t_{ij} + \\epsilon_{ij} &amp; H\\\\ \\beta_0 + b_{1i} + (\\beta_3 + \\ b_{2i})t_{ij} + \\epsilon_{ij} &amp; C \\end{cases} \\] Intercepts and slopes are all subject specific Different treatment groups have different slops, but the same intercept. In the hierarchical model form \\[ \\begin{aligned} \\mathbf{Y}_i | \\mathbf{b}_i &amp;\\sim N(\\mathbf{X}_i \\beta + \\mathbf{Z}_i \\mathbf{b}_i, \\mathbf{\\Sigma}_i)\\\\ \\mathbf{b}_i &amp;\\sim N(\\mathbf{0,D}) \\end{aligned} \\] X will be in the form of \\[ \\beta = (\\beta_0, \\beta_1, \\beta_2, \\beta_3)&#39; \\] \\[ \\begin{aligned} \\mathbf{X}_i &amp;= \\mathbf{Z}_i \\mathbf{K}_i \\\\ &amp;= \\left[ \\begin{array} {cc} 1 &amp; t_{i1} \\\\ 1 &amp; t_{i2} \\\\ . &amp; . \\\\ 1 &amp; t_{in_i} \\end{array} \\right] \\times \\left[ \\begin{array} {cccc} 1 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; L_i &amp; H_i &amp; C_i \\\\ \\end{array} \\right] \\\\ &amp;= \\left[ \\begin{array} {cccc} 1 &amp; t_{i1}L_i &amp; t_{i1}H_i &amp; T_{i1}C_i \\\\ 1 &amp; t_{i2}L_i &amp; t_{i2}H_i &amp; T_{i2}C_i \\\\ . &amp;. &amp;. &amp;. \\\\ 1 &amp; t_{in_i}L_i &amp; t_{in_i}H_i &amp; T_{in_i}C_i \\\\ \\end{array} \\right]\\end{aligned} \\] \\[ \\mathbf{b}_i = \\left( \\begin{array} {c} b_{1i} \\\\ b_{2i} \\end{array} \\right) \\] \\[ D = \\left( \\begin{array} {cc} d_{11} &amp; d_{12}\\\\ d_{12} &amp; d_{22} \\end{array} \\right) \\] Assuming \\(\\mathbf{\\Sigma}_i = \\sigma^2 \\mathbf{I}_{n_i}\\), which is called conditional independence, meaning the response on subject i are independent conditional on \\(\\mathbf{b}_i\\) and \\(\\beta\\) In the marginal model form \\[ Y_{ij} = \\beta_0 + \\beta_1 L_i t_{ij} + \\beta_2 H_i t_{ij} + \\beta_3 C_i t_{ij} + \\eta_{ij} \\] where \\(\\eta_i \\sim N(\\mathbf{0},\\mathbf{Z}_i\\mathbf{DZ}_i&#39;+ \\mathbf{\\Sigma}_i)\\) Equivalently, \\[ \\mathbf{Y_i \\sim N(X_i \\beta, Z_i DZ_i&#39; + \\Sigma_i}) \\] In this case that \\(n_i = 2\\) \\[ \\begin{aligned} \\mathbf{Z_iDZ_i&#39;} &amp;= \\left( \\begin{array} {cc} 1 &amp; t_{i1} \\\\ 1 &amp; t_{i2} \\end{array} \\right) \\left( \\begin{array} {cc} d_{11} &amp; d_{12} \\\\ d_{12} &amp; d_{22} \\end{array} \\right) \\left( \\begin{array} {cc} 1 &amp; 1 \\\\ t_{i1} &amp; t_{i2} \\end{array} \\right) \\\\ &amp;= \\left( \\begin{array} {cc} d_{11} + 2d_{12}t_{i1} + d_{22}t_{i1}^2 &amp; d_{11} + d_{12}(t_{i1} + t_{i2}) + d_{22}t_{i1}t_{i2} \\\\ d_{11} + d_{12}(t_{i1} + t_{i2}) + d_{22} t_{i1} t_{i2} &amp; d_{11} + 2d_{12}t_{i2} + d_{22}t_{i2}^2 \\end{array} \\right) \\end{aligned} \\] \\[ var(Y_{i1}) = d_{11} + 2d_{12}t_{i1} + d_{22} t_{i1}^2 + \\sigma^2 \\] On top of correlation in the errors, the marginal implies that the variance function of the response is quadratic over time, with positive curvature \\(d_{22}\\) 8.1.1 Random-Intercepts Model If we remove the random slopes, the assumption is that all variability in subject-specific slopes can be attributed to treatment differences the model is random-intercepts model. This has subject specific intercepts, but the same slopes within each treatment group. \\[ \\begin{aligned} \\mathbf{Y}_i | b_i &amp;\\sim N(\\mathbf{X}_i \\beta + 1 b_i , \\Sigma_i) \\\\ b_i &amp;\\sim N(0,d_{11}) \\end{aligned} \\] The marginal model is then (\\(\\mathbf{\\Sigma}_i = \\sigma^2 \\mathbf{I}\\)) \\[ \\mathbf{Y}_i \\sim N(\\mathbf{X}_i \\beta, 11&#39;d_{11} + \\sigma^2 \\mathbf{I}) \\] The marginal covariance matrix is \\[ \\begin{aligned} cov(\\mathbf{Y}_i) &amp;= 11&#39;d_{11} + \\sigma^2I \\\\ &amp;= \\left( \\begin{array} {cccc} d_{11}+ \\sigma^2 &amp; d_{11} &amp; ... &amp; d_{11} \\\\ d_{11} &amp; d_{11} + \\sigma^2 &amp; d_{11} &amp; ... \\\\ . &amp; . &amp; . &amp; . \\\\ d_{11} &amp; ... &amp; ... &amp; d_{11} + \\sigma^2 \\end{array} \\right) \\end{aligned} \\] the associated correlation matrix is \\[ corr(\\mathbf{Y}_i) = \\left( \\begin{array} {cccc} 1 &amp; \\rho &amp; ... &amp; \\rho \\\\ \\rho &amp; 1 &amp; \\rho &amp; ... \\\\ . &amp; . &amp; . &amp; . \\\\ \\rho &amp; ... &amp; ... &amp; 1 \\\\ \\end{array} \\right) \\] where \\(\\rho \\equiv \\frac{d_{11}}{d_{11} + \\sigma^2}\\) Thu, we have constant variance over time equal, positive correlation between any two measurements from the same subject a covariance structure that is called compound symmetry, and \\(\\rho\\) is called the intra-class correlation that when \\(\\rho\\) is large, the inter-subject variability (\\(d_{11}\\)) is large relative to the intra-subject variability (\\(\\sigma^2\\)) 8.1.2 Covariance Models If the conditional independence assumption, (\\(\\mathbf{\\Sigma_i= \\sigma^2 I_{n_i}}\\)). Consider, \\(\\epsilon_i = \\epsilon_{(1)i} + \\epsilon_{(2)i}\\), where \\(\\epsilon_{(1)i}\\) is a “serial correlation” component. That is, part of the individual’s profile is a response to time-varying stochastic processes. \\(\\epsilon_{(2)i}\\) is the measurement error component, and is independent of \\(\\epsilon_{(1)i}\\) Then \\[ \\mathbf{Y_i = X_i \\beta + Z_i b_i + \\epsilon_{(1)i} + \\epsilon_{(2)i}} \\] where \\(\\mathbf{b_i} \\sim N(\\mathbf{0,D})\\) \\(\\epsilon_{(2)i} \\sim N(\\mathbf{0,\\sigma^2 I_{n_i}})\\) \\(\\epsilon_{(1)i} \\sim N(\\mathbf{0,\\tau^2H_i})\\) \\(\\mathbf{b}_i\\) and \\(\\epsilon_i\\) are mutually independent To model the structure of the \\(n_i \\times n_i\\) correlation (or covariance ) matrix \\(\\mathbf{H}_i\\). Let the (j,k)th element of \\(\\mathbf{H}_i\\) be \\(h_{ijk}= g(t_{ij}t_{ik})\\). that is a function of the times \\(t_{ij}\\) and \\(t_{ik}\\) , which is assumed to be some function of the “distance’ between the times. \\[ h_{ijk} = g(|t_{ij}-t_{ik}|) \\] for some decreasing function \\(g(.)\\) with \\(g(0)=1\\) (for correlation matrices). Examples of this type of function: Exponential function: \\(g(|t_{ij}-t_{ik}|) = \\exp(-\\phi|t_{ij} - t_{ik}|)\\) Gaussian function: \\(g(|t_{ij} - t_{ik}|) = \\exp(-\\phi(t_{ij} - t_{ik})^2)\\) Similar structures could also be used for \\(\\mathbf{D}\\) matrix (of \\(\\mathbf{b}\\)) Example: Autoregressive Covariance Structure A first order Autoregressive Model (AR(1)) has the form \\[ \\alpha_t = \\phi \\alpha_{t-1} + \\eta_t \\] where \\(\\eta_t \\sim iid N (0,\\sigma^2_\\eta)\\) Then, the covariance between two observations is \\[ cov(\\alpha_t, \\alpha_{t+h}) = \\frac{\\sigma^2_\\eta \\phi^{|h|}}{1- \\phi^2} \\] for \\(h = 0, \\pm 1, \\pm 2, ...; |\\phi|&lt;1\\) Hence, \\[ corr(\\alpha_t, \\alpha_{t+h}) = \\phi^{|h|} \\] If we let \\(\\alpha_T = (\\alpha_1,...\\alpha_T)&#39;\\), then \\[ corr(\\alpha_T) = \\left[ \\begin{array} {ccccc} 1 &amp; \\phi^1 &amp; \\phi^2 &amp; ... &amp; \\phi^2 \\\\ \\phi^1 &amp; 1 &amp; \\phi^1 &amp; ... &amp; \\phi^{T-1} \\\\ \\phi^2 &amp; \\phi^1 &amp; 1 &amp; ... &amp; \\phi^{T-2} \\\\ . &amp; . &amp; . &amp; . &amp;. \\\\ \\phi^T &amp; \\phi^{T-1} &amp; \\phi^{T-2} &amp; ... &amp; 1 \\end{array} \\right] \\] Notes: The correlation decreases as time lag increases This matrix structure is known as a Toeplitz structure More complicated covariance structures are possible, which is critical component of spatial random effects models and time series models. Often, we don’t need both random effects \\(\\mathbf{b}\\) and \\(\\epsilon_{(1)i}\\) More in the Time Series section References "],["estimation-1.html", "8.2 Estimation", " 8.2 Estimation \\[ \\mathbf{Y}_i = \\mathbf{X}_i \\beta + \\mathbf{Z}_i \\mathbf{b}_i + \\epsilon_i \\] where \\(\\beta, \\mathbf{b}_i, \\mathbf{D}, \\mathbf{\\Sigma}_i\\) we must obtain estimation from the data \\(\\mathbf{\\beta}, \\mathbf{D}, \\mathbf{\\Sigma}_i\\) are unknown, but fixed, parameters, and must be estimated from the data \\(\\mathbf{b}_i\\) is a random variable. Thus, we can’t estimate these values, but we can predict them. (i.e., you can’t estimate a random thing). If we have \\(\\hat{\\beta}\\) as an estimator of \\(\\beta\\) \\(\\hat{\\mathbf{b}}_i\\) as a predictor of \\(\\mathbf{b}_i\\) Then, The population average estimate of \\(\\mathbf{Y}_i\\) is \\(\\hat{\\mathbf{Y}_i} = \\mathbf{X}_i \\hat{\\beta}\\) The subject-specific prediction is \\(\\hat{\\mathbf{Y}_i} = \\mathbf{X}_i \\hat{\\beta} + \\mathbf{Z}_i \\hat{b}_i\\) According to (Henderson 1975), estimating equations known as the mixed model equations: \\[ \\left[ \\begin{array} {c} \\hat{\\beta} \\\\ \\hat{\\mathbf{b}} \\end{array} \\right] = \\left[ \\begin{array} {cc} \\mathbf{X&#39;\\Sigma^{-1}X} &amp; \\mathbf{X&#39;\\Sigma^{-1}Z} \\\\ \\mathbf{Z&#39;\\Sigma^{-1}X} &amp; \\mathbf{Z&#39;\\Sigma^{-1}Z +B^{-1}} \\end{array} \\right] \\left[ \\begin{array} {cc} \\mathbf{X&#39;\\Sigma^{-1}Y} \\\\ \\mathbf{Z&#39;\\Sigma^{-1}Y} \\end{array} \\right] \\] where \\[ \\begin{aligned} \\mathbf{Y} &amp;= \\left[ \\begin{array} {c} \\mathbf{y}_1 \\\\ . \\\\ \\mathbf{y}_N \\end{array} \\right] ; \\mathbf{X} = \\left[ \\begin{array} {c} \\mathbf{X}_1 \\\\ . \\\\ \\mathbf{X}_N \\end{array} \\right]; \\mathbf{b} = \\left[ \\begin{array} {c} \\mathbf{b}_1 \\\\ . \\\\ \\mathbf{b}_N \\end{array} \\right] ; \\epsilon = \\left[ \\begin{array} {c} \\epsilon_1 \\\\ . \\\\ \\epsilon_N \\end{array} \\right] \\\\ cov(\\epsilon) &amp;= \\mathbf{\\Sigma}, \\mathbf{Z} = \\left[ \\begin{array} {cccc} \\mathbf{Z}_1 &amp; 0 &amp; ... &amp; 0 \\\\ 0 &amp; \\mathbf{Z}_2 &amp; ... &amp; 0 \\\\ . &amp; . &amp; . &amp; . \\\\ 0 &amp; 0 &amp; ... &amp; \\mathbf{Z}_n \\end{array} \\right], \\mathbf{B} = \\left[ \\begin{array} {cccc} \\mathbf{D} &amp; 0 &amp; ... &amp; 0 \\\\ 0 &amp; \\mathbf{D} &amp; ... &amp; 0 \\\\ . &amp; . &amp; . &amp; . \\\\ 0 &amp; 0 &amp; ... &amp; \\mathbf{D} \\end{array} \\right] \\end{aligned} \\] The model has the form \\[ \\begin{aligned} \\mathbf{Y} &amp;= \\mathbf{X \\beta + Z b + \\epsilon} \\\\ \\mathbf{Y} &amp;\\sim N(\\mathbf{X \\beta, ZBZ&#39; + \\Sigma}) \\end{aligned} \\] If \\(\\mathbf{V = ZBZ&#39; + \\Sigma}\\), then the solutions to the estimating equations can be \\[ \\begin{aligned} \\hat{\\beta} &amp;= \\mathbf{(X&#39;V^{-1}X)^{-1}X&#39;V^{-1}Y} \\\\ \\hat{\\mathbf{b}} &amp;= \\mathbf{BZ&#39;V^{-1}(Y-X\\hat{\\beta}}) \\end{aligned} \\] The estimate \\(\\hat{\\beta}\\) is a generalized least squares estimate. The predictor, \\(\\hat{\\mathbf{b}}\\) is the best linear unbiased predictor (BLUP), for \\(\\mathbf{b}\\) \\[ \\begin{aligned} E(\\hat{\\beta}) &amp;= \\beta \\\\ var(\\hat{\\beta}) &amp;= (\\mathbf{X&#39;V^{-1}X})^{-1} \\\\ E(\\hat{\\mathbf{b}}) &amp;= 0 \\end{aligned} \\] \\[ var(\\mathbf{\\hat{b}-b}) = \\mathbf{B-BZ&#39;V^{-1}ZB + BZ&#39;V^{-1}X(X&#39;V^{-1}X)^{-1}X&#39;V^{-1}B} \\] The variance here is the variance of the prediction error (mean squared prediction error, MSPE), which is more meaningful than \\(var(\\hat{\\mathbf{b}})\\), since MSPE accounts for both variance and bias in the prediction. To derive the mixed model equations, consider \\[ \\mathbf{\\epsilon = Y - X\\beta - Zb} \\] Let \\(T = \\sum_{i=1}^N n_i\\) be the total number of observations (i.e., the length of \\(\\mathbf{Y},\\epsilon\\)) and \\(Nq\\) the length of \\(\\mathbf{b}\\). The joint distribution of \\(\\mathbf{b, \\epsilon}\\) is \\[ f(\\mathbf{b,\\epsilon})= \\frac{1}{(2\\pi)^{(T+ Nq)/2}} \\left| \\begin{array} {cc} \\mathbf{B} &amp; 0 \\\\ 0 &amp; \\mathbf{\\Sigma} \\end{array} \\right| ^{-1/2} \\exp \\left( -\\frac{1}{2} \\left[ \\begin{array} {c} \\mathbf{b} \\\\ \\mathbf{Y - X \\beta - Zb} \\end{array} \\right]&#39; \\left[ \\begin{array} {cc} \\mathbf{B} &amp; 0 \\\\ 0 &amp; \\mathbf{\\Sigma} \\end{array} \\right]^{-1} \\left[ \\begin{array} {c} \\mathbf{b} \\\\ \\mathbf{Y - X \\beta - Zb} \\end{array} \\right] \\right) \\] Maximization of \\(f(\\mathbf{b},\\epsilon)\\) with respect to \\(\\mathbf{b}\\) and \\(\\beta\\) requires minimization of \\[ \\begin{aligned} Q &amp;= \\left[ \\begin{array} {c} \\mathbf{b} \\\\ \\mathbf{Y - X \\beta - Zb} \\end{array} \\right]&#39; \\left[ \\begin{array} {cc} \\mathbf{B} &amp; 0 \\\\ 0 &amp; \\mathbf{\\Sigma} \\end{array} \\right]^{-1} \\left[ \\begin{array} {c} \\mathbf{b} \\\\ \\mathbf{Y - X \\beta - Zb} \\end{array} \\right] \\\\ &amp;= \\mathbf{b&#39;B^{-1}b+(Y-X \\beta-Zb)&#39;\\Sigma^{-1}(Y-X \\beta-Zb)} \\end{aligned} \\] Setting the derivatives of Q with respect to \\(\\mathbf{b}\\) and \\(\\mathbf{\\beta}\\) to zero leads to the system of equations: \\[ \\begin{aligned} \\mathbf{X&#39;\\Sigma^{-1}X\\beta + X&#39;\\Sigma^{-1}Zb} &amp;= \\mathbf{X&#39;\\Sigma^{-1}Y}\\\\ \\mathbf{(Z&#39;\\Sigma^{-1}Z + B^{-1})b + Z&#39;\\Sigma^{-1}X\\beta} &amp;= \\mathbf{Z&#39;\\Sigma^{-1}Y} \\end{aligned} \\] Rearranging \\[ \\left[ \\begin{array} {cc} \\mathbf{X&#39;\\Sigma^{-1}X} &amp; \\mathbf{X&#39;\\Sigma^{-1}Z} \\\\ \\mathbf{Z&#39;\\Sigma^{-1}X} &amp; \\mathbf{Z&#39;\\Sigma^{-1}Z + B^{-1}} \\end{array} \\right] \\left[ \\begin{array} {c} \\beta \\\\ \\mathbf{b} \\end{array} \\right] = \\left[ \\begin{array} {c} \\mathbf{X&#39;\\Sigma^{-1}Y} \\\\ \\mathbf{Z&#39;\\Sigma^{-1}Y} \\end{array} \\right] \\] Thus, the solution to the mixed model equations give: \\[ \\left[ \\begin{array} {c} \\hat{\\beta} \\\\ \\hat{\\mathbf{b}} \\end{array} \\right] = \\left[ \\begin{array} {cc} \\mathbf{X&#39;\\Sigma^{-1}X} &amp; \\mathbf{X&#39;\\Sigma^{-1}Z} \\\\ \\mathbf{Z&#39;\\Sigma^{-1}X} &amp; \\mathbf{Z&#39;\\Sigma^{-1}Z + B^{-1}} \\end{array} \\right] ^{-1} \\left[ \\begin{array} {c} \\mathbf{X&#39;\\Sigma^{-1}Y} \\\\ \\mathbf{Z&#39;\\Sigma^{-1}Y} \\end{array} \\right] \\] Equivalently, Bayes’ theorem \\[ f(\\mathbf{b}| \\mathbf{Y}) = \\frac{f(\\mathbf{Y}|\\mathbf{b})f(\\mathbf{b})}{\\int f(\\mathbf{Y}|\\mathbf{b})f(\\mathbf{b}) d\\mathbf{b}} \\] where \\(f(\\mathbf{Y}|\\mathbf{b})\\) is the “likelihood” \\(f(\\mathbf{b})\\) is the prior the denominator is the “normalizing constant” \\(f(\\mathbf{b}|\\mathbf{Y})\\) is the posterior distribution In this case \\[ \\begin{aligned} \\mathbf{Y} | \\mathbf{b} &amp;\\sim N(\\mathbf{X\\beta+Zb,\\Sigma}) \\\\ \\mathbf{b} &amp;\\sim N(\\mathbf{0,B}) \\end{aligned} \\] The posterior distribution has the form \\[ \\mathbf{b}|\\mathbf{Y} \\sim N(\\mathbf{BZ&#39;V^{-1}(Y-X\\beta),(Z&#39;\\Sigma^{-1}Z + B^{-1})^{-1}}) \\] Hence, the best predictor (based on squared error loss) \\[ E(\\mathbf{b}|\\mathbf{Y}) = \\mathbf{BZ&#39;V^{-1}(Y-X\\beta)} \\] 8.2.1 Estimating \\(\\mathbf{V}\\) If we have \\(\\tilde{\\mathbf{V}}\\) (estimate of \\(\\mathbf{V}\\)), then we can estimate: \\[ \\begin{aligned} \\hat{\\beta} &amp;= \\mathbf{(X&#39;\\tilde{V}^{-1}X)^{-1}X&#39;\\tilde{V}^{-1}Y} \\\\ \\hat{\\mathbf{b}} &amp;= \\mathbf{BZ&#39;\\tilde{V}^{-1}(Y-X\\hat{\\beta})} \\end{aligned} \\] where \\({\\mathbf{b}}\\) is EBLUP (estimated BLUP) or empirical Bayes estimate Note: \\(\\hat{var}(\\hat{\\beta})\\) is a consistent estimator of \\(var(\\hat{\\beta})\\) if \\(\\tilde{\\mathbf{V}}\\) is a consistent estimator of \\(\\mathbf{V}\\) However, \\(\\hat{var}(\\hat{\\beta})\\) is biased since the variability arises from estimating \\(\\mathbf{V}\\) is not accounted for in the estimate. Hence, \\(\\hat{var}(\\hat{\\beta})\\) underestimates the true variability Ways to estimate \\(\\mathbf{V}\\) Maximum Likelihood Estimation (MLE) Restricted Maximum Likelihood (REML) Estimated Generalized Least Squares Bayesian Hierarchical Models (BHM) 8.2.1.1 Maximum Likelihood Estimation (MLE) Grouping unknown parameters in \\(\\Sigma\\) and \\(B\\) under a parameter vector \\(\\theta\\). Under MLE, \\(\\hat{\\theta}\\) and \\(\\hat{\\beta}\\) maximize the likelihood \\(\\mathbf{y} \\sim N(\\mathbf{X\\beta, V(\\theta))}\\). Synonymously, \\(-2\\log L(\\mathbf{y;\\theta,\\beta})\\): \\[ -2l(\\mathbf{\\beta,\\theta,y}) = \\log |\\mathbf{V(\\theta)}| + \\mathbf{(y-X\\beta)&#39;V(\\theta)^{-1}(y-X\\beta)} + N \\log(2\\pi) \\] Step 1: Replace \\(\\beta\\) with its maximum likelihood (where \\(\\theta\\) is known \\(\\hat{\\beta}= (\\mathbf{X&#39;V(\\theta)^{-1}X)^{-1}X&#39;V(\\theta)^{-1}y}\\) Step 2: Minimize the above equation with respect to \\(\\theta\\) to get the estimator \\(\\hat{\\theta}_{MLE}\\) Step 3: Substitute \\(\\hat{\\theta}_{MLE}\\) back to get \\(\\hat{\\beta}_{MLE} = (\\mathbf{X&#39;V(\\theta_{MLE})^{-1}X)^{-1}X&#39;V(\\theta_{MLE})^{-1}y}\\) Step 4: Get \\(\\hat{\\mathbf{b}}_{MLE} = \\mathbf{B(\\hat{\\theta}_{MLE})Z&#39;V(\\hat{\\theta}_{MLE})^{-1}(y-X\\hat{\\beta}_{MLE})}\\) Note: \\(\\hat{\\theta}\\) are typically negatively biased due to unaccounted fixed effects being estimated, which we could try to account for. 8.2.1.2 Restricted Maximum Likelihood (REML) REML accounts for the number of estimated mean parameters by adjusting the objective function. Specifically, the likelihood of linear combination of the elements of \\(\\mathbf{y}\\) is accounted for. We have \\(\\mathbf{K&#39;y}\\), where \\(\\mathbf{K}\\) is any \\(N \\times (N - p)\\) full-rank contrast matrix, which has columns orthogonal to the \\(\\mathbf{X}\\) matrix (that is \\(\\mathbf{K&#39;X} = 0\\)). Then, \\[ \\mathbf{K&#39;y} \\sim N(0,\\mathbf{K&#39;V(\\theta)K}) \\] where \\(\\beta\\) is no longer in the distribution We can proceed to maximize this likelihood for the contrasts to get \\(\\hat{\\theta}_{REML}\\), which does not depend on the choice of \\(\\mathbf{K}\\). And \\(\\hat{\\beta}\\) are based on \\(\\hat{\\theta}\\) Comparison REML and MLE Both methods are based upon the likelihood principle, and have desired properties for the estimates: consistency asymptotic normality efficiency ML estimation provides estimates for fixed effects, while REML can’t In balanced models, REML is identical to ANOVA REML accounts for df for the fixed effects int eh model, which is important when \\(\\mathbf{X}\\) is large relative to the sample size Changing \\(\\mathbf{\\beta}\\) has no effect on the REML estimates of \\(\\theta\\) REML is less sensitive to outliers than MLE MLE is better than REML regarding model comparisons (e.g., AIC or BIC) 8.2.1.3 Estimated Generalized Least Squares MLE and REML rely upon the Gaussian assumption. To overcome this issue, EGLS uses the first and second moments. \\[ \\mathbf{Y}_i = \\mathbf{X}_i \\beta + \\mathbf{Z}_i \\mathbf{b}_i + \\epsilon_i \\] where \\(\\epsilon_i \\sim (\\mathbf{0,\\Sigma_i})\\) \\(\\mathbf{b}_i \\sim (\\mathbf{0,D})\\) \\(cov(\\epsilon_i, \\mathbf{b}_i) = 0\\) Then the EGLS estimator is \\[ \\begin{aligned} \\hat{\\beta}_{GLS} &amp;= \\{\\sum_{i=1}^n \\mathbf{X&#39;_iV_i(\\theta)^{-1}X_i} \\}^{-1} \\sum_{i=1}^n \\mathbf{X&#39;_iV_i(\\theta)^{-1}Y_i} \\\\ &amp;=\\{\\mathbf{X&#39;V(\\theta)^{-1}X} \\}^{-1} \\mathbf{X&#39;V(\\theta)^{-1}Y} \\end{aligned} \\] depends on the first two moments \\(E(\\mathbf{Y}_i) = \\mathbf{X}_i \\beta\\) \\(var(\\mathbf{Y}_i)= \\mathbf{V}_i\\) EGLS use \\(\\hat{\\mathbf{V}}\\) for \\(\\mathbf{V(\\theta)}\\) \\[ \\hat{\\beta}_{EGLS} = \\{ \\mathbf{X&#39;\\hat{V}^{-1}X} \\}^{-1} \\mathbf{X&#39;\\hat{V}^{-1}Y} \\] Hence, the fixed effects estimators for the MLE, REML, and EGLS are of the same form, except for the estimate of \\(\\mathbf{V}\\) In case of non-iterative approach, EGLS can be appealing when \\(\\mathbf{V}\\) can be estimated without much computational burden. 8.2.1.4 Bayesian Hierarchical Models (BHM) Joint distribution cane be decomposed hierarchically in terms of the product of conditional distributions and a marginal distribution \\[ f(A,B,C) = f(A|B,C) f(B|C)f(C) \\] Applying to estimate \\(\\mathbf{V}\\) \\[ \\begin{aligned} f(\\mathbf{Y, \\beta, b, \\theta}) &amp;= f(\\mathbf{Y|\\beta,b, \\theta})f(\\mathbf{b|\\theta,\\beta})f(\\mathbf{\\beta|\\theta})f(\\mathbf{\\theta}) &amp; \\text{based on probability decomposition} \\\\ &amp;= f(\\mathbf{Y|\\beta,b, \\theta})f(\\mathbf{b|\\theta})f(\\mathbf{\\beta})f(\\mathbf{\\theta}) &amp; \\text{based on simplifying modeling assumptions} \\end{aligned} \\] elaborate on the second equality, if we assume conditional independence (e.g., given \\(\\theta\\), no additional info about \\(\\mathbf{b}\\) is given by knowing \\(\\beta\\)), then we can simply from the first equality Using Bayes’ rule \\[ f(\\mathbf{\\beta, b, \\theta|Y}) \\propto f(\\mathbf{Y|\\beta,b, \\theta})f(\\mathbf{b|\\theta})f(\\mathbf{\\beta})f(\\mathbf{\\theta}) \\] where \\[ \\begin{aligned} \\mathbf{Y| \\beta, b, \\theta} &amp;\\sim \\mathbf{N(X\\beta+ Zb, \\Sigma(\\theta))} \\\\ \\mathbf{b | \\theta} &amp;\\sim \\mathbf{N(0, B(\\theta))} \\end{aligned} \\] and we also have to have prior distributions for \\(f(\\beta), f(\\theta)\\) With normalizing constant, we can obtain the posterior distribution. Typically, we can’t get analytical solution right away. Hence, we can use Markov Chain Monte Carlo (MCMC) to obtain samples from the posterior distribution. Bayesian Methods: account for the uncertainty in parameters estimates and accommodate the propagation of that uncertainty through the model can adjust prior information (i.e., priori) in parameters Can extend beyond Gaussian distributions but hard to implement algorithms and might have problem converging References "],["inference-2.html", "8.3 Inference", " 8.3 Inference 8.3.1 Parameters \\(\\beta\\) 8.3.1.1 Wald test We have \\[ \\begin{aligned} \\mathbf{\\hat{\\beta}(\\theta)} &amp;= \\mathbf{\\{X&#39;V^{-1}(\\theta) X\\}^{-1}X&#39;V^{-1}(\\theta) Y} \\\\ var(\\hat{\\beta}(\\theta)) &amp;= \\mathbf{\\{X&#39;V^{-1}(\\theta) X\\}^{-1}} \\end{aligned} \\] We can use \\(\\hat{\\theta}\\) in place of \\(\\theta\\) to approximate Wald test \\[ H_0: \\mathbf{A \\beta =d} \\] With \\[ W = \\mathbf{(A\\hat{\\beta} - d)&#39;[A(X&#39;\\hat{V}^{-1}X)^{-1}A&#39;]^{-1}(A\\hat{\\beta} - d)} \\] where \\(W \\sim \\chi^2_{rank(A)}\\) under \\(H_0\\) is true. However, it does not take into account variability from using \\(\\hat{\\theta}\\) in place of \\(\\theta\\), hence the standard errors are underestimated 8.3.1.2 F-test Alternatively, we can use the modified F-test, suppose we have \\(var(\\mathbf{Y}) = \\sigma^2 \\mathbf{V}(\\theta)\\), then \\[ F^* = \\frac{\\mathbf{(A\\hat{\\beta} - d)&#39;[A(X&#39;\\hat{V}^{-1}X)^{-1}A&#39;]^{-1}(A\\hat{\\beta} - d)}}{\\hat{\\sigma}^2 \\text{rank}(A)} \\] where \\(F^* \\sim f_{rank(A), den(df)}\\) under the null hypothesis. And den(df) needs to be approximated from the data by either: Satterthwaite method Kenward-Roger approximation Under balanced cases, the Wald and F tests are similar. But for small sample sizes, they can differ in p-values. And both can be reduced to t-test for a single \\(\\beta\\) 8.3.1.3 Likelihood Ratio Test \\[ H_0: \\beta \\in \\Theta_{\\beta,0} \\] where \\(\\Theta_{\\beta, 0}\\) is a subspace of the parameter space, \\(\\Theta_{\\beta}\\) of the fixed effects \\(\\beta\\) . Then \\[ -2\\log \\lambda_N = -2\\log\\{\\frac{\\hat{L}_{ML,0}}{\\hat{L}_{ML}}\\} \\] where \\(\\hat{L}_{ML,0}\\) , \\(\\hat{L}_{ML}\\) are the maximized likelihood obtained from maximizing over \\(\\Theta_{\\beta,0}\\) and \\(\\Theta_{\\beta}\\) \\(-2 \\log \\lambda_N \\dot{\\sim} \\chi^2_{df}\\) where df is the difference in the dimension (i.e., number of parameters) of \\(\\Theta_{\\beta,0}\\) and \\(\\Theta_{\\beta}\\) This method is not applicable for REML. But REML can still be used to test for covariance parameters between nested models. 8.3.2 Variance Components For ML and REML estimator, \\(\\hat{\\theta} \\sim N(\\theta, I(\\theta))\\) for large samples Wald test in variance components is analogous to the fixed effects case (see 8.3.1.1 ) However, the normal approximation depends largely on the true value of \\(\\theta\\). It will fail if the true value of \\(\\theta\\) is close to the boundary of the parameter space \\(\\Theta_{\\theta}\\) (i.e., \\(\\sigma^2 \\approx 0\\)) Typically works better for covariance parameter, than variance parameters. The likelihood ratio tests can also be used with ML or REML estimates. However, the same problem of parameters "],["information-criteria-1.html", "8.4 Information Criteria", " 8.4 Information Criteria account for the likelihood and the number of parameters to assess model comparison. 8.4.1 Akaike’s Information Criteria (AIC) Derived as an estimator of the expected Kullback discrepancy between the true model and a fitted candidate model \\[ AIC = -2l(\\hat{\\theta}, \\hat{\\beta}) + 2q \\] where \\(l(\\hat{\\theta}, \\hat{\\beta})\\) is the log-likelihood q = the effective number of parameters; total of fixed and those associated with random effects (variance/covariance; those not estimated to be on a boundary constraint) Note: In comparing models that differ in their random effects, this method is not advised to due the inability to get the correct number of effective parameters). We prefer smaller AIC values. If your program uses \\(l-q\\) then we prefer larger AIC values (but rarely). can be used for mixed model section, (e.g., selection of the covariance structure), but the sample size must be very large to have adequate comparison based on the criterion Can have a large negative bias (e.g., when sample size is small but the number of parameters is large) due to the penalty term can’t approximate the bias adjustment adequately 8.4.2 Corrected AIC (AICC) developed by (Hurvich and Tsai 1989) correct small-sample adjustment depends on the candidate model class Only if you have fixed covariance structure, then AICC is justified, but not general covariance structure 8.4.3 Bayesian Information Criteria (BIC) \\[ BIC = -2l(\\hat{\\theta}, \\hat{\\beta}) + q \\log n \\] where n = number of observations. we prefer smaller BIC value BIC and AIC are used for both REML and MLE if we have the same mean structure. Otherwise, in general, we should prefer MLE With our example presented at the beginning of Linear Mixed Models, \\[ Y_{ik}= \\begin{cases} \\beta_0 + b_{1i} + (\\beta_1 + \\ b_{2i})t_{ij} + \\epsilon_{ij} &amp; L \\\\ \\beta_0 + b_{1i} + (\\beta_2 + \\ b_{2i})t_{ij} + \\epsilon_{ij} &amp; H\\\\ \\beta_0 + b_{1i} + (\\beta_3 + \\ b_{2i})t_{ij} + \\epsilon_{ij} &amp; C \\end{cases} \\] where \\(i = 1,..,N\\) \\(j = 1,..,n_i\\) (measures at time \\(t_{ij}\\)) Note: we have subject-specific intercepts, \\[ \\begin{aligned} \\mathbf{Y}_i |b_i &amp;\\sim N(\\mathbf{X}_i \\beta + 1 b_i, \\sigma^2 \\mathbf{I}) \\\\ b_i &amp;\\sim N(0,d_{11}) \\end{aligned} \\] here, we want to estimate \\(\\beta, \\sigma^2, d_{11}\\) and predict \\(b_i\\) References "],["split-plot-designs.html", "8.5 Split-Plot Designs", " 8.5 Split-Plot Designs Typically used in the case that you have two factors where one needs much larger units than the other. Example: A: 3 levels (large units) B: 2 levels (small units) A and B levels are randomized into 4 blocks. But it differs from Randomized Block Designs. In each block, both have one of the 6 (3x2) treatment combinations. But Randomized Block Designs assign in each block randomly, while split-plot does not randomize this step. Moreover, because A needs to be applied in large units, factor A is applied only once in each block while B can be applied multiple times. Hence, we have our model If A is our factor of interest \\[ Y_{ij} = \\mu + \\rho_i + \\alpha_j + e_{ij} \\] where \\(i\\) = replication (block or subject) \\(j\\) = level of Factor A \\(\\mu\\) = overall mean \\(\\rho_i\\) = variation due to the \\(i\\)-th block \\(e_{ij} \\sim N(0, \\sigma^2_e)\\) = whole plot error If B is our factor of interest \\[ Y_{ijk} = \\mu + \\phi_{ij} + \\beta_k + \\epsilon_{ijk} \\] where \\(\\phi_{ij}\\) = variation due to the \\(ij\\)-th main plot \\(\\beta_k\\) = Factor B effect \\(\\epsilon_{ijk} \\sim N(0, \\sigma^2_\\epsilon)\\) = subplot error \\(\\phi_{ij} = \\rho_i + \\alpha_j + e_{ij}\\) Together, the split-plot model \\[ Y_{ijk} = \\mu + \\rho_i + \\alpha_j + e_{ij} + \\beta_k + (\\alpha \\beta)_{jk} + \\epsilon_{ijk} \\] where \\(i\\) = replicate (blocks or subjects) \\(j\\) = level of factor A \\(k\\) = level of factor B \\(\\mu\\) = overall mean \\(\\rho_i\\) = effect of the block \\(\\alpha_j\\) = main effect of factor A (fixed) \\(e_{ij} = (\\rho \\alpha)_{ij}\\) = block by factor A interaction (the whole plot error, random) \\(\\beta_k\\) = main effect of factor B (fixed) \\((\\alpha \\beta)_{jk}\\) = interaction between factors A and B (fixed) \\(\\epsilon_{ijk}\\) = subplot error (random) We can approach sub-plot analysis based on the ANOVA perspective Whole plot comparisons Compare factor A to the whole plot error (i.e., \\(\\alpha_j\\) to \\(e_{ij}\\)) Compare the block to the whole plot error (i.e., \\(\\rho_i\\) to \\(e_{ij}\\)) Sub-plot comparisons: Compare factor B to the subplot error (\\(\\beta\\) to \\(\\epsilon_{ijk}\\)) Compare the AB interaction to the subplot error (\\((\\alpha \\beta)_{jk}\\) to \\(\\epsilon_{ijk}\\)) the mixed model perspective \\[ \\mathbf{Y = X \\beta + Zb + \\epsilon} \\] 8.5.1 Application 8.5.1.1 Example 1 \\[ y_{ijk} = \\mu + i_i + v_j + (iv)_{ij} + f_k + \\epsilon_{ijk} \\] where \\(y_{ijk}\\) = observed yield \\(\\mu\\) = overall average yield \\(i_i\\) = irrigation effect \\(v_j\\) = variety effect \\((iv)_{ij}\\) = irrigation by variety interaction \\(f_k\\) = random field (block) effect \\(\\epsilon_{ijk}\\) = residual because variety-field combination is only observed once, we can’t have the random interaction effects between variety and field library(ggplot2) data(irrigation, package = &quot;faraway&quot;) summary(irrigation) #&gt; field irrigation variety yield #&gt; f1 :2 i1:4 v1:8 Min. :34.80 #&gt; f2 :2 i2:4 v2:8 1st Qu.:37.60 #&gt; f3 :2 i3:4 Median :40.15 #&gt; f4 :2 i4:4 Mean :40.23 #&gt; f5 :2 3rd Qu.:42.73 #&gt; f6 :2 Max. :47.60 #&gt; (Other):4 head(irrigation, 4) #&gt; field irrigation variety yield #&gt; 1 f1 i1 v1 35.4 #&gt; 2 f1 i1 v2 37.9 #&gt; 3 f2 i2 v1 36.7 #&gt; 4 f2 i2 v2 38.2 ggplot(irrigation, aes( x = field, y = yield, shape = irrigation, color = variety )) + geom_point(size = 3) sp_model &lt;- lmerTest::lmer(yield ~ irrigation * variety + (1 |field), irrigation) summary(sp_model) #&gt; Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [ #&gt; lmerModLmerTest] #&gt; Formula: yield ~ irrigation * variety + (1 | field) #&gt; Data: irrigation #&gt; #&gt; REML criterion at convergence: 45.4 #&gt; #&gt; Scaled residuals: #&gt; Min 1Q Median 3Q Max #&gt; -0.7448 -0.5509 0.0000 0.5509 0.7448 #&gt; #&gt; Random effects: #&gt; Groups Name Variance Std.Dev. #&gt; field (Intercept) 16.200 4.025 #&gt; Residual 2.107 1.452 #&gt; Number of obs: 16, groups: field, 8 #&gt; #&gt; Fixed effects: #&gt; Estimate Std. Error df t value Pr(&gt;|t|) #&gt; (Intercept) 38.500 3.026 4.487 12.725 0.000109 *** #&gt; irrigationi2 1.200 4.279 4.487 0.280 0.791591 #&gt; irrigationi3 0.700 4.279 4.487 0.164 0.877156 #&gt; irrigationi4 3.500 4.279 4.487 0.818 0.454584 #&gt; varietyv2 0.600 1.452 4.000 0.413 0.700582 #&gt; irrigationi2:varietyv2 -0.400 2.053 4.000 -0.195 0.855020 #&gt; irrigationi3:varietyv2 -0.200 2.053 4.000 -0.097 0.927082 #&gt; irrigationi4:varietyv2 1.200 2.053 4.000 0.584 0.590265 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Correlation of Fixed Effects: #&gt; (Intr) irrgt2 irrgt3 irrgt4 vrtyv2 irr2:2 irr3:2 #&gt; irrigation2 -0.707 #&gt; irrigation3 -0.707 0.500 #&gt; irrigation4 -0.707 0.500 0.500 #&gt; varietyv2 -0.240 0.170 0.170 0.170 #&gt; irrgtn2:vr2 0.170 -0.240 -0.120 -0.120 -0.707 #&gt; irrgtn3:vr2 0.170 -0.120 -0.240 -0.120 -0.707 0.500 #&gt; irrgtn4:vr2 0.170 -0.120 -0.120 -0.240 -0.707 0.500 0.500 anova(sp_model, ddf = c(&quot;Kenward-Roger&quot;)) #&gt; Type III Analysis of Variance Table with Kenward-Roger&#39;s method #&gt; Sum Sq Mean Sq NumDF DenDF F value Pr(&gt;F) #&gt; irrigation 2.4545 0.81818 3 4 0.3882 0.7685 #&gt; variety 2.2500 2.25000 1 4 1.0676 0.3599 #&gt; irrigation:variety 1.5500 0.51667 3 4 0.2452 0.8612 Since p-value of the interaction term is insignificant, we consider fitting without it. library(lme4) sp_model_additive &lt;- lmer(yield ~ irrigation + variety + (1 | field), irrigation) anova(sp_model_additive,sp_model,ddf = &quot;Kenward-Roger&quot;) #&gt; Data: irrigation #&gt; Models: #&gt; sp_model_additive: yield ~ irrigation + variety + (1 | field) #&gt; sp_model: yield ~ irrigation * variety + (1 | field) #&gt; npar AIC BIC logLik deviance Chisq Df Pr(&gt;Chisq) #&gt; sp_model_additive 7 83.959 89.368 -34.980 69.959 #&gt; sp_model 10 88.609 96.335 -34.305 68.609 1.3503 3 0.7172 Since \\(p\\)-value of \\(\\chi^2\\) test is insignificant, we can’t reject the additive model is already sufficient. Looking at AIC and BIC, we can also see that we would prefer the additive model Random Effect Examination exactRLRT test \\(H_0\\): Var(random effect) (i.e., \\(\\sigma^2\\))= 0 \\(H_a\\): Var(random effect) (i.e., \\(\\sigma^2\\)) &gt; 0 sp_model &lt;- lme4::lmer(yield ~ irrigation * variety + (1 | field), irrigation) library(RLRsim) exactRLRT(sp_model) #&gt; #&gt; simulated finite sample distribution of RLRT. #&gt; #&gt; (p-value based on 10000 simulated values) #&gt; #&gt; data: #&gt; RLRT = 6.1118, p-value = 0.0087 Since the p-value is significant, we reject \\(H_0\\) "],["repeated-measures-in-mixed-models.html", "8.6 Repeated Measures in Mixed Models", " 8.6 Repeated Measures in Mixed Models \\[ Y_{ijk} = \\mu + \\alpha_i + \\beta_j + (\\alpha \\beta)_{ij} + \\delta_{i(k)}+ \\epsilon_{ijk} \\] where \\(i\\)-th group (fixed) \\(j\\)-th (repeated measure) time effect (fixed) \\(k\\)-th subject \\(\\delta_{i(k)} \\sim N(0,\\sigma^2_\\delta)\\) (k-th subject in the \\(i\\)-th group) and \\(\\epsilon_{ijk} \\sim N(0,\\sigma^2)\\) (independent error) are random effects (\\(i = 1,..,n_A, j = 1,..,n_B, k = 1,...,n_i\\)) hence, the variance-covariance matrix of the repeated observations on the k-th subject of the i-th group, \\(\\mathbf{Y}_{ik} = (Y_{i1k},..,Y_{in_Bk})&#39;\\), will be \\[ \\begin{aligned} \\mathbf{\\Sigma}_{subject} &amp;= \\left( \\begin{array} {cccc} \\sigma^2_\\delta + \\sigma^2 &amp; \\sigma^2_\\delta &amp; ... &amp; \\sigma^2_\\delta \\\\ \\sigma^2_\\delta &amp; \\sigma^2_\\delta +\\sigma^2 &amp; ... &amp; \\sigma^2_\\delta \\\\ . &amp; . &amp; . &amp; . \\\\ \\sigma^2_\\delta &amp; \\sigma^2_\\delta &amp; ... &amp; \\sigma^2_\\delta + \\sigma^2 \\\\ \\end{array} \\right) \\\\ &amp;= (\\sigma^2_\\delta + \\sigma^2) \\left( \\begin{array} {cccc} 1 &amp; \\rho &amp; ... &amp; \\rho \\\\ \\rho &amp; 1 &amp; ... &amp; \\rho \\\\ . &amp; . &amp; . &amp; . \\\\ \\rho &amp; \\rho &amp; ... &amp; 1 \\\\ \\end{array} \\right) &amp; \\text{product of a scalar and a correlation matrix} \\end{aligned} \\] where \\(\\rho = \\frac{\\sigma^2_\\delta}{\\sigma^2_\\delta + \\sigma^2}\\), which is the compound symmetry structure that we discussed in Random-Intercepts Model But if you only have repeated measurements on the subject over time, AR(1) structure might be more appropriate Mixed model for a repeated measure \\[ Y_{ijk} = \\mu + \\alpha_i + \\beta_j + (\\alpha \\beta)_{ij} + \\epsilon_{ijk} \\] where \\(\\epsilon_{ijk}\\) combines random error of both the whole and subplots. In general, \\[ \\mathbf{Y = X \\beta + \\epsilon} \\] where \\(\\epsilon \\sim N(0, \\sigma^2 \\mathbf{\\Sigma})\\) where \\(\\mathbf{\\Sigma}\\) is block diagonal if the random error covariance is the same for each subject The variance covariance matrix with AR(1) structure is \\[ \\mathbf{\\Sigma}_{subject} = \\sigma^2 \\left( \\begin{array} {ccccc} 1 &amp; \\rho &amp; \\rho^2 &amp; ... &amp; \\rho^{n_B-1} \\\\ \\rho &amp; 1 &amp; \\rho &amp; ... &amp; \\rho^{n_B-2} \\\\ . &amp; . &amp; . &amp; . &amp; . \\\\ \\rho^{n_B-1} &amp; \\rho^{n_B-2} &amp; \\rho^{n_B-3} &amp; ... &amp; 1 \\\\ \\end{array} \\right) \\] Hence, the mixed model for a repeated measure can be written as \\[ Y_{ijk} = \\mu + \\alpha_i + \\beta_j + (\\alpha \\beta)_{ij} + \\epsilon_{ijk} \\] where \\(\\epsilon_{ijk}\\) = random error of whole and subplots Generally, \\[ \\mathbf{Y = X \\beta + \\epsilon} \\] where \\(\\epsilon \\sim N(0, \\mathbf{\\sigma^2 \\Sigma})\\) and \\(\\Sigma\\) = block diagonal if the random error covariance is the same for each subject. "],["unbalanced-or-unequally-spaced-data.html", "8.7 Unbalanced or Unequally Spaced Data", " 8.7 Unbalanced or Unequally Spaced Data Consider the model \\[ Y_{ikt} = \\beta_0 + \\beta_{0i} + \\beta_{1}t + \\beta_{1i}t + \\beta_{2} t^2 + \\beta_{2i} t^2 + \\epsilon_{ikt} \\] where \\(i = 1,2\\) (groups) \\(k = 1,…, n_i\\) ( individuals) \\(t = (t_1,t_2,t_3,t_4)\\) (times) \\(\\beta_{2i}\\) = common quadratic term \\(\\beta_{1i}\\) = common linear time trends \\(\\beta_{0i}\\) = common intercepts Then, we assume the variance-covariance matrix of the repeated measurements collected on a particular subject over time has the form \\[ \\mathbf{\\Sigma}_{ik} = \\sigma^2 \\left( \\begin{array} {cccc} 1 &amp; \\rho^{t_2-t_1} &amp; \\rho^{t_3-t_1} &amp; \\rho^{t_4-t_1} \\\\ \\rho^{t_2-t_1} &amp; 1 &amp; \\rho^{t_3-t_2} &amp; \\rho^{t_4-t_2} \\\\ \\rho^{t_3-t_1} &amp; \\rho^{t_3-t_2} &amp; 1 &amp; \\rho^{t_4-t_3} \\\\ \\rho^{t_4-t_1} &amp; \\rho^{t_4-t_2} &amp; \\rho^{t_4-t_3} &amp; 1 \\end{array} \\right) \\] which is called “power” covariance model We can consider \\(\\beta_{2i} , \\beta_{1i}, \\beta_{0i}\\) accordingly to see whether these terms are needed in the final model "],["application-4.html", "8.8 Application", " 8.8 Application R Packages for mixed models nlme has nested structure flexible for complex design not user-friendly lme4 computationally efficient user-friendly can handle non-normal response for more detailed application, check Fitting Linear Mixed-Effects Models Using lme4 Others Bayesian setting: MCMCglmm, brms For genetics: ASReml 8.8.1 Example 1 (Pulps) Model: \\[ y_{ij} = \\mu + \\alpha_i + \\epsilon_{ij} \\] where \\(i = 1,..,a\\) groups for random effect \\(\\alpha_i\\) \\(j = 1,...,n\\) individuals in each group \\(\\alpha_i \\sim N(0, \\sigma^2_\\alpha)\\) is random effects \\(\\epsilon_{ij} \\sim N(0, \\sigma^2_\\epsilon)\\) is random effects Imply compound symmetry model where the intraclass correlation coefficient is: \\(\\rho = \\frac{\\sigma^2_\\alpha}{\\sigma^2_\\alpha + \\sigma^2_\\epsilon}\\) If factor \\(a\\) does not explain much variation, low correlation within the levels: \\(\\sigma^2_\\alpha \\to 0\\) then \\(\\rho \\to 0\\) If factor \\(a\\) explain much variation, high correlation within the levels \\(\\sigma^2_\\alpha \\to \\infty\\) hence, \\(\\rho \\to 1\\) data(pulp, package = &quot;faraway&quot;) plot( y = pulp$bright, x = pulp$operator, xlab = &quot;Operator&quot;, ylab = &quot;Brightness&quot; ) pulp %&gt;% dplyr::group_by(operator) %&gt;% dplyr::summarise(average = mean(bright)) #&gt; # A tibble: 4 × 2 #&gt; operator average #&gt; &lt;fct&gt; &lt;dbl&gt; #&gt; 1 a 60.2 #&gt; 2 b 60.1 #&gt; 3 c 60.6 #&gt; 4 d 60.7 lmer application library(lme4) mixed_model &lt;- lmer( # pipe (i..e, | ) denotes random-effect terms formula = bright ~ 1 + (1 |operator), data = pulp) summary(mixed_model) #&gt; Linear mixed model fit by REML [&#39;lmerMod&#39;] #&gt; Formula: bright ~ 1 + (1 | operator) #&gt; Data: pulp #&gt; #&gt; REML criterion at convergence: 18.6 #&gt; #&gt; Scaled residuals: #&gt; Min 1Q Median 3Q Max #&gt; -1.4666 -0.7595 -0.1244 0.6281 1.6012 #&gt; #&gt; Random effects: #&gt; Groups Name Variance Std.Dev. #&gt; operator (Intercept) 0.06808 0.2609 #&gt; Residual 0.10625 0.3260 #&gt; Number of obs: 20, groups: operator, 4 #&gt; #&gt; Fixed effects: #&gt; Estimate Std. Error t value #&gt; (Intercept) 60.4000 0.1494 404.2 coef(mixed_model) #&gt; $operator #&gt; (Intercept) #&gt; a 60.27806 #&gt; b 60.14088 #&gt; c 60.56767 #&gt; d 60.61340 #&gt; #&gt; attr(,&quot;class&quot;) #&gt; [1] &quot;coef.mer&quot; fixef(mixed_model) # fixed effects #&gt; (Intercept) #&gt; 60.4 confint(mixed_model) # confidence interval #&gt; 2.5 % 97.5 % #&gt; .sig01 0.000000 0.6178987 #&gt; .sigma 0.238912 0.4821845 #&gt; (Intercept) 60.071299 60.7287012 ranef(mixed_model) # random effects #&gt; $operator #&gt; (Intercept) #&gt; a -0.1219403 #&gt; b -0.2591231 #&gt; c 0.1676679 #&gt; d 0.2133955 #&gt; #&gt; with conditional variances for &quot;operator&quot; VarCorr(mixed_model) # random effects standard deviation #&gt; Groups Name Std.Dev. #&gt; operator (Intercept) 0.26093 #&gt; Residual 0.32596 re_dat = as.data.frame(VarCorr(mixed_model)) # rho based on the above formula rho = re_dat[1, &#39;vcov&#39;] / (re_dat[1, &#39;vcov&#39;] + re_dat[2, &#39;vcov&#39;]) rho #&gt; [1] 0.3905354 To Satterthwaite approximation for the denominator df, we use lmerTest library(lmerTest) summary(lmerTest::lmer(bright ~ 1 + (1 | operator), pulp))$coefficients #&gt; Estimate Std. Error df t value Pr(&gt;|t|) #&gt; (Intercept) 60.4 0.1494434 3 404.1664 3.340265e-08 confint(mixed_model)[3, ] #&gt; 2.5 % 97.5 % #&gt; 60.0713 60.7287 In this example, we can see that the confidence interval computed by confint in lmer package is very close is confint in lmerTest model. MCMglmm application under the Bayesian framework library(MCMCglmm) mixed_model_bayes &lt;- MCMCglmm( bright ~ 1, random = ~ operator, data = pulp, verbose = FALSE ) summary(mixed_model_bayes)$solutions #&gt; post.mean l-95% CI u-95% CI eff.samp pMCMC #&gt; (Intercept) 60.40449 60.2055 60.66595 1000 0.001 this method offers the confidence interval slightly more positive than lmer and lmerTest 8.8.1.1 Prediction # random effects prediction (BLUPs) ranef(mixed_model)$operator #&gt; (Intercept) #&gt; a -0.1219403 #&gt; b -0.2591231 #&gt; c 0.1676679 #&gt; d 0.2133955 # prediction for each categories fixef(mixed_model) + ranef(mixed_model)$operator #&gt; (Intercept) #&gt; a 60.27806 #&gt; b 60.14088 #&gt; c 60.56767 #&gt; d 60.61340 # equivalent to the above method predict(mixed_model, newdata = data.frame(operator = c(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;))) #&gt; 1 2 3 4 #&gt; 60.27806 60.14088 60.56767 60.61340 use bootMer() to get bootstrap-based confidence intervals for predictions. Another example using GLMM in the context of blocking Penicillin data data(penicillin, package = &quot;faraway&quot;) summary(penicillin) #&gt; treat blend yield #&gt; A:5 Blend1:4 Min. :77 #&gt; B:5 Blend2:4 1st Qu.:81 #&gt; C:5 Blend3:4 Median :87 #&gt; D:5 Blend4:4 Mean :86 #&gt; Blend5:4 3rd Qu.:89 #&gt; Max. :97 library(ggplot2) ggplot(penicillin, aes( y = yield, x = treat, shape = blend, color = blend )) + # treatment = fixed effect # blend = random effects geom_point(size = 3) + xlab(&quot;Treatment&quot;) library(lmerTest) # for p-values mixed_model &lt;- lmerTest::lmer(yield ~ treat + (1 | blend), data = penicillin) summary(mixed_model) #&gt; Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [ #&gt; lmerModLmerTest] #&gt; Formula: yield ~ treat + (1 | blend) #&gt; Data: penicillin #&gt; #&gt; REML criterion at convergence: 103.8 #&gt; #&gt; Scaled residuals: #&gt; Min 1Q Median 3Q Max #&gt; -1.4152 -0.5017 -0.1644 0.6830 1.2836 #&gt; #&gt; Random effects: #&gt; Groups Name Variance Std.Dev. #&gt; blend (Intercept) 11.79 3.434 #&gt; Residual 18.83 4.340 #&gt; Number of obs: 20, groups: blend, 5 #&gt; #&gt; Fixed effects: #&gt; Estimate Std. Error df t value Pr(&gt;|t|) #&gt; (Intercept) 84.000 2.475 11.075 33.941 1.51e-12 *** #&gt; treatB 1.000 2.745 12.000 0.364 0.7219 #&gt; treatC 5.000 2.745 12.000 1.822 0.0935 . #&gt; treatD 2.000 2.745 12.000 0.729 0.4802 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Correlation of Fixed Effects: #&gt; (Intr) treatB treatC #&gt; treatB -0.555 #&gt; treatC -0.555 0.500 #&gt; treatD -0.555 0.500 0.500 #The BLUPs for the each blend ranef(mixed_model)$blend #&gt; (Intercept) #&gt; Blend1 4.2878788 #&gt; Blend2 -2.1439394 #&gt; Blend3 -0.7146465 #&gt; Blend4 1.4292929 #&gt; Blend5 -2.8585859 Examine treatment effect anova(mixed_model) # p-value based on lmerTest #&gt; Type III Analysis of Variance Table with Satterthwaite&#39;s method #&gt; Sum Sq Mean Sq NumDF DenDF F value Pr(&gt;F) #&gt; treat 70 23.333 3 12 1.2389 0.3387 Since the p-value is greater than 0.05, we can’t reject the null hypothesis that there is no treatment effect. library(pbkrtest) # REML is not appropriate for testing fixed effects, it should be ML full_model &lt;- lmer(yield ~ treat + (1 | blend), penicillin, REML = FALSE) null_model &lt;- lmer(yield ~ 1 + (1 | blend), penicillin, REML = FALSE) # use Kenward-Roger approximation for df KRmodcomp(full_model, null_model) #&gt; large : yield ~ treat + (1 | blend) #&gt; small : yield ~ 1 + (1 | blend) #&gt; stat ndf ddf F.scaling p.value #&gt; Ftest 1.2389 3.0000 12.0000 1 0.3387 Since the p-value is greater than 0.05, and consistent with our previous observation, we conclude that we can’t reject the null hypothesis that there is no treatment effect. 8.8.2 Example 2 (Rats) rats &lt;- read.csv( &quot;images/rats.dat&quot;, header = F, sep = &#39; &#39;, col.names = c(&#39;Treatment&#39;, &#39;rat&#39;, &#39;age&#39;, &#39;y&#39;) ) # log transformed age rats$t &lt;- log(1 + (rats$age - 45) / 10) We are interested in whether treatment effect induces changes over time. rat_model &lt;- # treatment = fixed effect, rat = random effects lmerTest::lmer(y ~ t:Treatment + (1 | rat), data = rats) summary(rat_model) #&gt; Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [ #&gt; lmerModLmerTest] #&gt; Formula: y ~ t:Treatment + (1 | rat) #&gt; Data: rats #&gt; #&gt; REML criterion at convergence: 932.4 #&gt; #&gt; Scaled residuals: #&gt; Min 1Q Median 3Q Max #&gt; -2.25574 -0.65898 -0.01163 0.58356 2.88309 #&gt; #&gt; Random effects: #&gt; Groups Name Variance Std.Dev. #&gt; rat (Intercept) 3.565 1.888 #&gt; Residual 1.445 1.202 #&gt; Number of obs: 252, groups: rat, 50 #&gt; #&gt; Fixed effects: #&gt; Estimate Std. Error df t value Pr(&gt;|t|) #&gt; (Intercept) 68.6074 0.3312 89.0275 207.13 &lt;2e-16 *** #&gt; t:Treatmentcon 7.3138 0.2808 247.2762 26.05 &lt;2e-16 *** #&gt; t:Treatmenthig 6.8711 0.2276 247.7097 30.19 &lt;2e-16 *** #&gt; t:Treatmentlow 7.5069 0.2252 247.5196 33.34 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Correlation of Fixed Effects: #&gt; (Intr) t:Trtmntc t:Trtmnth #&gt; t:Tretmntcn -0.327 #&gt; t:Tretmnthg -0.340 0.111 #&gt; t:Tretmntlw -0.351 0.115 0.119 anova(rat_model) #&gt; Type III Analysis of Variance Table with Satterthwaite&#39;s method #&gt; Sum Sq Mean Sq NumDF DenDF F value Pr(&gt;F) #&gt; t:Treatment 3181.9 1060.6 3 223.21 734.11 &lt; 2.2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Since the p-value is significant, we can be confident concluding that there is a treatment effect 8.8.3 Example 3 (Agridat) library(agridat) library(latticeExtra) dat &lt;- harris.wateruse # Compare to Schabenberger &amp; Pierce, fig 7.23 useOuterStrips( xyplot( water ~ day | species * age, dat, as.table = TRUE, group = tree, type = c(&#39;p&#39;, &#39;smooth&#39;), main = &quot;harris.wateruse 2 species, 2 ages (10 trees each)&quot; ) ) Remove outliers dat &lt;- subset(dat, day!=268) Plot between age and species xyplot( water ~ day | tree, dat, subset = age == &quot;A2&quot; &amp; species == &quot;S2&quot;, as.table = TRUE, type = c(&#39;p&#39;, &#39;smooth&#39;), ylab = &quot;Water use profiles of individual trees&quot;, main = &quot;harris.wateruse (Age 2, Species 2)&quot; ) # Rescale day for nicer output, # and convergence issues, add quadratic term dat &lt;- transform(dat, ti = day / 100) dat &lt;- transform(dat, ti2 = ti * ti) # Start with a subgroup: age 2, species 2 d22 &lt;- droplevels(subset(dat, age == &quot;A2&quot; &amp; species == &quot;S2&quot;)) lme function from nlme package library(nlme) ## We use pdDiag() to get uncorrelated random effects m1n &lt;- lme( water ~ 1 + ti + ti2, #intercept, time and time-squared = fixed effects data = d22, na.action = na.omit, random = list(tree = pdDiag(~ 1 + ti + ti2)) # random intercept, time # and time squared per tree = random effects ) ranef(m1n) #&gt; (Intercept) ti ti2 #&gt; T04 0.1985796 1.609864e-09 4.990101e-10 #&gt; T05 0.3492827 2.487690e-10 -4.845287e-11 #&gt; T19 -0.1978989 -7.681202e-10 -1.961453e-10 #&gt; T23 0.4519003 -3.270426e-10 -2.413583e-10 #&gt; T38 -0.6457494 -1.608770e-09 -3.298010e-10 #&gt; T40 0.3739432 3.264705e-10 -2.543109e-11 #&gt; T49 0.8620648 9.021831e-10 -5.402247e-12 #&gt; T53 -0.5655049 -8.279040e-10 -4.579291e-11 #&gt; T67 -0.4394623 -3.485113e-10 2.147434e-11 #&gt; T71 -0.3871552 7.930610e-10 3.718993e-10 fixef(m1n) #&gt; (Intercept) ti ti2 #&gt; -10.798799 12.346704 -2.838503 summary(m1n) #&gt; Linear mixed-effects model fit by REML #&gt; Data: d22 #&gt; AIC BIC logLik #&gt; 276.5142 300.761 -131.2571 #&gt; #&gt; Random effects: #&gt; Formula: ~1 + ti + ti2 | tree #&gt; Structure: Diagonal #&gt; (Intercept) ti ti2 Residual #&gt; StdDev: 0.5187869 1.438333e-05 3.864019e-06 0.3836614 #&gt; #&gt; Fixed effects: water ~ 1 + ti + ti2 #&gt; Value Std.Error DF t-value p-value #&gt; (Intercept) -10.798799 0.8814666 227 -12.25094 0 #&gt; ti 12.346704 0.7827112 227 15.77428 0 #&gt; ti2 -2.838503 0.1720614 227 -16.49704 0 #&gt; Correlation: #&gt; (Intr) ti #&gt; ti -0.979 #&gt; ti2 0.970 -0.997 #&gt; #&gt; Standardized Within-Group Residuals: #&gt; Min Q1 Med Q3 Max #&gt; -3.07588246 -0.58531056 0.01210209 0.65402695 3.88777402 #&gt; #&gt; Number of Observations: 239 #&gt; Number of Groups: 10 lmer function from lme4 package m1lmer &lt;- lmer(water ~ 1 + ti + ti2 + (ti + ti2 || tree), data = d22, na.action = na.omit) ranef(m1lmer) #&gt; $tree #&gt; (Intercept) ti ti2 #&gt; T04 0.1985796 0 0 #&gt; T05 0.3492827 0 0 #&gt; T19 -0.1978989 0 0 #&gt; T23 0.4519003 0 0 #&gt; T38 -0.6457494 0 0 #&gt; T40 0.3739432 0 0 #&gt; T49 0.8620648 0 0 #&gt; T53 -0.5655049 0 0 #&gt; T67 -0.4394623 0 0 #&gt; T71 -0.3871552 0 0 #&gt; #&gt; with conditional variances for &quot;tree&quot; Notes: || double pipes= uncorrelated random effects To remove the intercept term: (0+ti|tree) (ti-1|tree) fixef(m1lmer) #&gt; (Intercept) ti ti2 #&gt; -10.798799 12.346704 -2.838503 m1l &lt;- lmer(water ~ 1 + ti + ti2 + (1 | tree) + (0 + ti | tree) + (0 + ti2 | tree), data = d22) ranef(m1l) #&gt; $tree #&gt; (Intercept) ti ti2 #&gt; T04 0.1985796 0 0 #&gt; T05 0.3492827 0 0 #&gt; T19 -0.1978989 0 0 #&gt; T23 0.4519003 0 0 #&gt; T38 -0.6457494 0 0 #&gt; T40 0.3739432 0 0 #&gt; T49 0.8620648 0 0 #&gt; T53 -0.5655049 0 0 #&gt; T67 -0.4394623 0 0 #&gt; T71 -0.3871552 0 0 #&gt; #&gt; with conditional variances for &quot;tree&quot; fixef(m1l) #&gt; (Intercept) ti ti2 #&gt; -10.798799 12.346704 -2.838503 To include structured covariance terms, we can use the following way m2n &lt;- lme( water ~ 1 + ti + ti2, data = d22, random = ~ 1 | tree, cor = corExp(form = ~ day | tree), na.action = na.omit ) ranef(m2n) #&gt; (Intercept) #&gt; T04 0.1929971 #&gt; T05 0.3424631 #&gt; T19 -0.1988495 #&gt; T23 0.4538660 #&gt; T38 -0.6413664 #&gt; T40 0.3769378 #&gt; T49 0.8410043 #&gt; T53 -0.5528236 #&gt; T67 -0.4452930 #&gt; T71 -0.3689358 fixef(m2n) #&gt; (Intercept) ti ti2 #&gt; -11.223310 12.712094 -2.913682 summary(m2n) #&gt; Linear mixed-effects model fit by REML #&gt; Data: d22 #&gt; AIC BIC logLik #&gt; 263.3081 284.0911 -125.654 #&gt; #&gt; Random effects: #&gt; Formula: ~1 | tree #&gt; (Intercept) Residual #&gt; StdDev: 0.5154042 0.3925777 #&gt; #&gt; Correlation Structure: Exponential spatial correlation #&gt; Formula: ~day | tree #&gt; Parameter estimate(s): #&gt; range #&gt; 3.794624 #&gt; Fixed effects: water ~ 1 + ti + ti2 #&gt; Value Std.Error DF t-value p-value #&gt; (Intercept) -11.223310 1.0988725 227 -10.21348 0 #&gt; ti 12.712094 0.9794235 227 12.97916 0 #&gt; ti2 -2.913682 0.2148551 227 -13.56115 0 #&gt; Correlation: #&gt; (Intr) ti #&gt; ti -0.985 #&gt; ti2 0.976 -0.997 #&gt; #&gt; Standardized Within-Group Residuals: #&gt; Min Q1 Med Q3 Max #&gt; -3.04861039 -0.55703950 0.00278101 0.62558762 3.80676991 #&gt; #&gt; Number of Observations: 239 #&gt; Number of Groups: 10 "],["nonlinear-and-generalized-linear-mixed-models.html", "Chapter 9 Nonlinear and Generalized Linear Mixed Models", " Chapter 9 Nonlinear and Generalized Linear Mixed Models NLMMs extend the nonlinear model to include both fixed effects and random effects GLMMs extend the generalized linear model to include both fixed effects and random effects. A nonlinear mixed model has the form of \\[ Y_{ij} = f(\\mathbf{x_{ij} , \\theta, \\alpha_i}) + \\epsilon_{ij} \\] for the j-th response from cluster (or subject) i (\\(i = 1,...,n\\)), where \\(j = 1,...,n_i\\) \\(\\mathbf{\\theta}\\) are the fixed effects \\(\\mathbf{\\alpha}_i\\) are the random effects for cluster i \\(\\mathbf{x}_{ij}\\) are the regressors or design variables \\(f(.)\\) is nonlinear mean response function A GLMM can be written as: we assume \\[ y_i |\\alpha_i \\sim \\text{indep } f(y_i | \\alpha) \\] and \\(f(y_i | \\mathbf{\\alpha})\\) is an exponential family distribution, \\[ f(y_i | \\alpha) = \\exp [\\frac{y_i \\theta_i - b(\\theta_i)}{a(\\phi)} - c(y_i, \\phi)] \\] The conditional mean of \\(y_i\\) is related to \\(\\theta_i\\) \\[ \\mu_i = \\frac{\\partial b(\\theta_i)}{\\partial \\theta_i} \\] The transformation of this mean will give us the desired linear model to model both the fixed and random effects. \\[ \\begin{aligned} E(y_i |\\alpha) &amp;= \\mu_i \\\\ g(\\mu_i) &amp;= \\mathbf{x_i&#39; \\beta + z&#39;_i \\alpha} \\end{aligned} \\] where \\(g()\\) is a known link function and \\(\\mu_i\\) is the conditional mean. We can see similarity to GLM We also have to specify the random effects distribution \\[ \\alpha \\sim f(\\alpha) \\] which is similar to the specification for mixed models. Moreover, law of large number applies to fixed effects so that you know it is a normal distribution. But here, you can specify \\(\\alpha\\) subjectively. Hence, we can show NLMM is a special case of the GLMM \\[ \\begin{aligned} \\mathbf{Y}_i &amp;= \\mathbf{f}(\\mathbf{x}_i, \\mathbf{\\theta, \\alpha}_i) + \\mathbf{\\epsilon}_i \\\\ \\mathbf{Y}_i &amp;= \\mathbf{g}^{-1} (\\mathbf{x}_i&#39; \\beta + \\mathbf{z}_i&#39; \\mathbf{\\alpha}_i) + \\mathbf{\\epsilon}_i \\end{aligned} \\] where the inverse link function corresponds to a nonlinear transformation of the fixed and random effects. Note: we can’t derive the analytical formulation of the marginal distribution because nonlinear combination of normal variables is not normally distributed, even in the case of additive error (\\(e_i\\)) and random effects (\\(\\alpha_i\\)) are both normal. Consequences of having random effects The marginal mean of \\(y_i\\) is \\[ E(y_i) = E_\\alpha(E(y_i | \\alpha)) = E_\\alpha (\\mu_i) = E(g^{-1}(\\mathbf{x_i&#39; \\beta + z_i&#39; \\alpha})) \\] Because \\(g^{-1}()\\) is nonlinear, this is the most simplified version we can go for. In special cases such as log link (\\(g(\\mu) = \\log \\mu\\) or \\(g^{-1}() = \\exp()\\)) then \\[ E(y_i) = E(\\exp(\\mathbf{x_i&#39; \\beta + z_i&#39; \\alpha})) = \\exp(\\mathbf{x&#39;_i \\beta})E(\\exp(\\mathbf{z}_i&#39;\\alpha)) \\] which is the moment generating function of \\(\\alpha\\) evaluated at \\(\\mathbf{z}_i\\) Marginal variance of \\(y_i\\) \\[ \\begin{aligned} var(y_i) &amp;= var_\\alpha (E(y_i | \\alpha)) + E_\\alpha (var(y_i | \\alpha)) \\\\ &amp;= var(\\mu_i) + E(a(\\phi) V(\\mu_i)) \\\\ &amp;= var(g^{-1} (\\mathbf{x&#39;_i \\beta + z&#39;_i \\alpha})) + E(a(\\phi)V(g^{-1} (\\mathbf{x&#39;_i \\beta + z&#39;_i \\alpha}))) \\end{aligned} \\] Without specific assumption about \\(g()\\) and/or the conditional distribution of \\(\\mathbf{y}\\), this is the most simplified version. Marginal covariance of \\(\\mathbf{y}\\) In a linear mixed model, random effects introduce a dependence among observations which share any random effect in common \\[ \\begin{aligned} cov(y_i, y_j) &amp;= cov_{\\alpha}(E(y_i | \\mathbf{\\alpha}),E(y_j | \\mathbf{\\alpha})) + E_{\\alpha}(cov(y_i, y_j | \\mathbf{\\alpha})) \\\\ &amp;= cov(\\mu_i, \\mu_j) + E(0) \\\\ &amp;= cov(g^{-1}(\\mathbf{x}_i&#39; \\beta + \\mathbf{z}_i&#39; \\mathbf{\\alpha}), g^{-1}(\\mathbf{x}&#39;_j \\beta + \\mathbf{z}_j&#39; \\mathbf{\\alpha})) \\end{aligned} \\] Important: conditioning to induce the covariability Example: Repeated measurements on the subjects. Let \\(y_{ij}\\) be the j-th count taken on the \\(i\\)-th subject. then, the model is \\(y_{ij} | \\mathbf{\\alpha} \\sim \\text{indep } Pois(\\mu_{ij})\\). Here \\[ \\log(\\mu_{ij}) = \\mathbf{x}_{ij}&#39; \\beta + \\alpha_i \\] where \\(\\alpha_i \\sim iid N(0,\\sigma^2_{\\alpha})\\) which is a log-link with a random patient effect. "],["estimation-2.html", "9.1 Estimation", " 9.1 Estimation In linear mixed models, the marginal likelihood for \\(\\mathbf{y}\\) is the integration of the random effects from the hierarchical formulation \\[ f(\\mathbf{y}) = \\int f(\\mathbf{y}| \\alpha) f(\\alpha) d \\alpha \\] For linear mixed models, we assumed that the 2 component distributions were Gaussian with linear relationships, which implied the marginal distribution was also linear and Gaussian and allows us to solve this integral analytically. On the other hand, GLMMs, the distribution for \\(f(\\mathbf{y} | \\alpha)\\) is not Gaussian in general, and for NLMMs, the functional form between the mean response and the random (and fixed) effects is nonlinear. In both cases, we can’t perform the integral analytically, which means we have to solve it numerically and/or linearize the inverse link function. 9.1.1 Estimation by Numerical Integration The marginal likelihood is \\[ L(\\beta; \\mathbf{y}) = \\int f(\\mathbf{y} | \\alpha) f(\\alpha) d \\alpha \\] Estimation fo the fixed effects requires \\(\\frac{\\partial l}{\\partial \\beta}\\), where \\(l\\) is the log-likelihood One way to obtain the marginal inference is to numerically integrate out the random effects through numerical quadrature Laplace approximation Monte Carlo methods When the dimension of \\(\\mathbf{\\alpha}\\) is relatively low, this is easy. But when the dimension of \\(\\alpha\\) is high, additional approximation is required. 9.1.2 Estimation by Linearization Idea: Linearized version of the response (known as working response, or pseudo-response) called \\(\\tilde{y}_i\\) and then the conditional mean is \\[ E(\\tilde{y}_i | \\alpha) = \\mathbf{x}_i&#39; \\beta + \\mathbf{z}_i&#39; \\alpha \\] and also estimate \\(var(\\tilde{y}_i | \\alpha)\\). then, apply Linear Mixed Models estimation as usual. The difference is only in how the linearization is done (i.e., how to expand \\(f(\\mathbf{x, \\theta, \\alpha})\\) or the inverse link function 9.1.2.1 Penalized quasi-likelihood (PQL) This is the more popular method \\[ \\tilde{y}_i^{(k)} = \\hat{\\eta}_i^{(k-1)} + ( y_i - \\hat{\\mu}_i^{(k-1)})\\frac{d \\eta}{d \\mu}| \\hat{\\eta}_i^{(k-1)} \\] where \\(\\eta_i = g(\\mu_i)\\) is the linear predictor \\(k\\) = iteration of the optimization algorithm The algorithm updates \\(\\tilde{y}_i\\) after each linear mixed model fit using \\(E(\\tilde{y}_i | \\alpha)\\) and \\(var(\\tilde{y}_i | \\alpha)\\) Comments: Easy to implement Inference is only asymptotically correct due to the linearizaton Biased estimates are likely for binomial response with small groups and worst for Bernoulli response. Similarly for Poisson models with small counts. (Faraway 2016) Hypothesis testing and confidence intervals also have problems. 9.1.2.2 Generalized Estimating Equations (GEE) Let a marginal generalized linear model for the mean of y as a function of the predictors, which means we linearize the mean response function and assume a dependent error structure Example Binary data: \\[ logit (E(\\mathbf{y})) = \\mathbf{X} \\beta \\] If we assume a “working covariance matrix”, \\(\\mathbf{V}\\) the the elements of \\(\\mathbf{y}\\), then the maximum likelihood equations for estimating \\(\\beta\\) is \\[ \\mathbf{X&#39;V^{-1}y} = \\mathbf{X&#39;V^{-1}} E(\\mathbf{y}) \\] If \\(\\mathbf{V}\\) is correct, then unbiased estimating equations We typically define \\(\\mathbf{V} = \\mathbf{I}\\). Solutions to unbiased estimating equation give consistent estimators. In practice, we assume a covariance structure, and then do a logistic regression, and calculate its large sample variance Let \\(y_{ij} , j = 1,..,n_i, i = 1,..,K\\) be the j-th measurement on the \\(i\\)-th subject. \\[ \\mathbf{y}_i = \\left( \\begin{array} {c} y_{i1} \\\\ . \\\\ y_{in_i} \\end{array} \\right) \\] with mean \\[ \\mathbf{\\mu}_i = \\left( \\begin{array} {c} \\mu_{i1} \\\\ . \\\\ \\mu_{in_i} \\end{array} \\right) \\] and \\[ \\mathbf{x}_{ij} = \\left( \\begin{array} {c} X_{ij1} \\\\ . \\\\ X_{ijp} \\end{array} \\right) \\] Let \\(\\mathbf{V}_i = cov(\\mathbf{y}_i)\\), then based on(Liang and Zeger 1986) GEE estimates for \\(\\beta\\) can be obtained from solving the equation: \\[ S(\\beta) = \\sum_{i=1}^K \\frac{\\partial \\mathbf{\\mu}_i&#39;}{\\partial \\beta} \\mathbf{V}^{-1}(\\mathbf{y}_i - \\mathbf{\\mu}_i) = 0 \\] Let \\(\\mathbf{R}_i (\\mathbf{c})\\) be an \\(n_i \\times n_i\\) “working” correlation matrix specified up to some parameters \\(\\mathbf{c}\\). Then, \\(\\mathbf{V}_i = a(\\phi) \\mathbf{B}_i^{1/2}\\mathbf{R}(\\mathbf{c}) \\mathbf{B}_i^{1/2}\\), where \\(\\mathbf{B}_i\\) is an \\(n_i \\times n_i\\) diagonal matrix with \\(V(\\mu_{ij})\\) on the j-th diagonal If \\(\\mathbf{R}(\\mathbf{c})\\) is the true correlation matrix of \\(\\mathbf{y}_i\\), then \\(\\mathbf{V}_i\\) is the true covariance matrix The working correlation matrix must be estimated iteratively by a fitting algorithm: Compute the initial estimate of \\(\\beta\\) (using GLM under the independence assumption) Compute the working correlation matrix \\(\\mathbf{R}\\) based upon studentized residuals Compute the estimate covariance \\(\\hat{\\mathbf{V}}_i\\) Update \\(\\beta\\) according to \\[ \\beta_{r+1} = \\beta_r + (\\sum_{i=1}^K \\frac{\\partial \\mathbf{\\mu}&#39;_i}{\\partial \\beta} \\hat{\\mathbf{V}}_i^{-1} \\frac{\\partial \\mathbf{\\mu}_i}{\\partial \\beta}) \\] Iterate until the algorithm converges Note: Inference based on likelihoods is not appropriate because this is not a likelihood estimator 9.1.3 Estimation by Bayesian Hierarchical Models Bayesian Estimation \\[ f(\\mathbf{\\alpha}, \\mathbf{\\beta} | \\mathbf{y}) \\propto f(\\mathbf{y} | \\mathbf{\\alpha}, \\mathbf{\\beta}) f(\\mathbf{\\alpha})f(\\mathbf{\\beta}) \\] Numerical techniques (e.g., MCMC) can be used to find posterior distribution. This method is best in terms of not having to make simplifying approximation and fully accounting for uncertainty in estimation and prediction, but it could be complex, time-consuming, and computationally intensive. Implementation Issues: No valid joint distribution can be constructed from the given conditional model and random parameters The mean/ variance relationship and the random effects lead to constraints on the marginal covariance model Difficult to fit computationally 2 types of estimation approaches: Approximate the objective function (marginal likelihood) through integral approximation Laplace methods Quadrature methods Monte Carlo integration Approximate the model (based on Taylor series linearization) Packages in R GLMM: MASS:glmmPQL lme4::glmer glmmTMB NLMM: nlme::nlme; lme4::nlmer brms::brm Bayesian: MCMCglmm ; brms:brm Example: Non-Gaussian Repeated measurements When the data are Gaussian, then Linear Mixed Models When the data are non-Gaussian, then Nonlinear and Generalized Linear Mixed Models References "],["application-5.html", "9.2 Application", " 9.2 Application 9.2.1 Binomial (CBPP Data) data(cbpp,package = &quot;lme4&quot;) head(cbpp) #&gt; herd incidence size period #&gt; 1 1 2 14 1 #&gt; 2 1 3 12 2 #&gt; 3 1 4 9 3 #&gt; 4 1 0 5 4 #&gt; 5 2 3 22 1 #&gt; 6 2 1 18 2 PQL Pro: Linearizes the response to have a pseudo-response as the mean response (like LMM) computationally efficient Cons: biased for binary, Poisson data with small counts random effects have to be interpreted on the link scale can’t interpret AIC/BIC value library(MASS) pql_cbpp &lt;- glmmPQL( cbind(incidence, size - incidence) ~ period, random = ~ 1 | herd, data = cbpp, family = binomial(link = &quot;logit&quot;), verbose = F ) summary(pql_cbpp) #&gt; Linear mixed-effects model fit by maximum likelihood #&gt; Data: cbpp #&gt; AIC BIC logLik #&gt; NA NA NA #&gt; #&gt; Random effects: #&gt; Formula: ~1 | herd #&gt; (Intercept) Residual #&gt; StdDev: 0.5563535 1.184527 #&gt; #&gt; Variance function: #&gt; Structure: fixed weights #&gt; Formula: ~invwt #&gt; Fixed effects: cbind(incidence, size - incidence) ~ period #&gt; Value Std.Error DF t-value p-value #&gt; (Intercept) -1.327364 0.2390194 38 -5.553372 0.0000 #&gt; period2 -1.016126 0.3684079 38 -2.758156 0.0089 #&gt; period3 -1.149984 0.3937029 38 -2.920944 0.0058 #&gt; period4 -1.605217 0.5178388 38 -3.099839 0.0036 #&gt; Correlation: #&gt; (Intr) perid2 perid3 #&gt; period2 -0.399 #&gt; period3 -0.373 0.260 #&gt; period4 -0.282 0.196 0.182 #&gt; #&gt; Standardized Within-Group Residuals: #&gt; Min Q1 Med Q3 Max #&gt; -2.0591168 -0.6493095 -0.2747620 0.5170492 2.6187632 #&gt; #&gt; Number of Observations: 56 #&gt; Number of Groups: 15 exp(0.556) #&gt; [1] 1.743684 is how the herd specific outcome odds varies. We can interpret the fixed effect coefficients just like in GLM. Because we use logit link function here, we can say that the log odds of the probability of having a case in period 2 is -1.016 less than period 1 (baseline). summary(pql_cbpp)$tTable #&gt; Value Std.Error DF t-value p-value #&gt; (Intercept) -1.327364 0.2390194 38 -5.553372 2.333216e-06 #&gt; period2 -1.016126 0.3684079 38 -2.758156 8.888179e-03 #&gt; period3 -1.149984 0.3937029 38 -2.920944 5.843007e-03 #&gt; period4 -1.605217 0.5178388 38 -3.099839 3.637000e-03 Numerical Integration Pro: more accurate Con: computationally expensive won’t work for complex models. library(lme4) numint_cbpp &lt;- glmer( cbind(incidence, size - incidence) ~ period + (1 | herd), data = cbpp, family = binomial(link = &quot;logit&quot;) ) summary(numint_cbpp) #&gt; Generalized linear mixed model fit by maximum likelihood (Laplace #&gt; Approximation) [glmerMod] #&gt; Family: binomial ( logit ) #&gt; Formula: cbind(incidence, size - incidence) ~ period + (1 | herd) #&gt; Data: cbpp #&gt; #&gt; AIC BIC logLik deviance df.resid #&gt; 194.1 204.2 -92.0 184.1 51 #&gt; #&gt; Scaled residuals: #&gt; Min 1Q Median 3Q Max #&gt; -2.3816 -0.7889 -0.2026 0.5142 2.8791 #&gt; #&gt; Random effects: #&gt; Groups Name Variance Std.Dev. #&gt; herd (Intercept) 0.4123 0.6421 #&gt; Number of obs: 56, groups: herd, 15 #&gt; #&gt; Fixed effects: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; (Intercept) -1.3983 0.2312 -6.048 1.47e-09 *** #&gt; period2 -0.9919 0.3032 -3.272 0.001068 ** #&gt; period3 -1.1282 0.3228 -3.495 0.000474 *** #&gt; period4 -1.5797 0.4220 -3.743 0.000182 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Correlation of Fixed Effects: #&gt; (Intr) perid2 perid3 #&gt; period2 -0.363 #&gt; period3 -0.340 0.280 #&gt; period4 -0.260 0.213 0.198 For small data set, the difference between two approaches are minimal library(rbenchmark) benchmark( &quot;MASS&quot; = { pql_cbpp &lt;- glmmPQL( cbind(incidence, size - incidence) ~ period, random = ~ 1 | herd, data = cbpp, family = binomial(link = &quot;logit&quot;), verbose = F ) }, &quot;lme4&quot; = { glmer( cbind(incidence, size - incidence) ~ period + (1 | herd), data = cbpp, family = binomial(link = &quot;logit&quot;) ) }, replications = 50, columns = c(&quot;test&quot;, &quot;replications&quot;, &quot;elapsed&quot;, &quot;relative&quot;), order = &quot;relative&quot; ) #&gt; test replications elapsed relative #&gt; 1 MASS 50 3.79 1.000 #&gt; 2 lme4 50 7.79 2.055 In numerical integration, we can set nAGQ &gt; 1 to switch the method of likelihood evaluation, which might increase accuracy library(lme4) numint_cbpp_GH &lt;- glmer( cbind(incidence, size - incidence) ~ period + (1 | herd), data = cbpp, family = binomial(link = &quot;logit&quot;), nAGQ = 20 ) summary(numint_cbpp_GH)$coefficients[, 1] - summary(numint_cbpp)$coefficients[, 1] #&gt; (Intercept) period2 period3 period4 #&gt; -0.0008808634 0.0005160912 0.0004066218 0.0002644629 Bayesian approach to GLMMs assume the fixed effects parameters have distribution can handle models with intractable result under traditional methods computationally expensive library(MCMCglmm) Bayes_cbpp &lt;- MCMCglmm( cbind(incidence, size - incidence) ~ period, random = ~ herd, data = cbpp, family = &quot;multinomial2&quot;, verbose = FALSE ) summary(Bayes_cbpp) #&gt; #&gt; Iterations = 3001:12991 #&gt; Thinning interval = 10 #&gt; Sample size = 1000 #&gt; #&gt; DIC: 537.9598 #&gt; #&gt; G-structure: ~herd #&gt; #&gt; post.mean l-95% CI u-95% CI eff.samp #&gt; herd 0.03246 1.03e-16 0.2073 105.7 #&gt; #&gt; R-structure: ~units #&gt; #&gt; post.mean l-95% CI u-95% CI eff.samp #&gt; units 1.095 0.3017 2.281 306.9 #&gt; #&gt; Location effects: cbind(incidence, size - incidence) ~ period #&gt; #&gt; post.mean l-95% CI u-95% CI eff.samp pMCMC #&gt; (Intercept) -1.5247 -2.1732 -0.9248 717.5 &lt;0.001 *** #&gt; period2 -1.2812 -2.3489 -0.3661 821.7 0.012 * #&gt; period3 -1.4152 -2.3443 -0.3088 691.5 0.004 ** #&gt; period4 -1.9335 -3.2407 -0.8315 554.9 &lt;0.001 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 MCMCglmm fits a residual variance component (useful with dispersion issues) # explains less variability apply(Bayes_cbpp$VCV,2,sd) #&gt; herd units #&gt; 0.1031743 0.5423514 summary(Bayes_cbpp)$solutions #&gt; post.mean l-95% CI u-95% CI eff.samp pMCMC #&gt; (Intercept) -1.524731 -2.173223 -0.9247605 717.5157 0.001 #&gt; period2 -1.281212 -2.348887 -0.3660568 821.6596 0.012 #&gt; period3 -1.415170 -2.344293 -0.3087640 691.5463 0.004 #&gt; period4 -1.933501 -3.240745 -0.8314840 554.9365 0.001 interpret Bayesian “credible intervals” similarly to confidence intervals Make sure you make post-hoc diagnoses library(lattice) xyplot(as.mcmc(Bayes_cbpp$Sol), layout = c(2, 2)) There is no trend, well-mixed xyplot(as.mcmc(Bayes_cbpp$VCV),layout=c(2,1)) For the herd variable, a lot of them are 0, which suggests problem. To fix the instability in the herd effect sampling, we can either modify the prior distribution on the herd variation increases the number of iteration library(MCMCglmm) Bayes_cbpp2 &lt;- MCMCglmm( cbind(incidence, size - incidence) ~ period, random = ~ herd, data = cbpp, family = &quot;multinomial2&quot;, nitt = 20000, burnin = 10000, prior = list(G = list(list( V = 1, nu = .1 ))), verbose = FALSE ) xyplot(as.mcmc(Bayes_cbpp2$VCV), layout = c(2, 1)) To change the shape of priors, in MCMCglmm use: V controls for the location of the distribution (default = 1) nu controls for the concentration around V (default = 0) 9.2.2 Count (Owl Data) library(glmmTMB) library(dplyr) data(Owls, package = &quot;glmmTMB&quot;) Owls &lt;- Owls %&gt;% rename(Ncalls = SiblingNegotiation) In a typical Poisson model, \\(\\lambda\\) (Poisson mean), is model as \\(\\log(\\lambda) = \\mathbf{x&#39;\\beta}\\) But if the response is the rate (e.g., counts per BroodSize), we could model it as \\(\\log(\\lambda / b) = \\mathbf{x&#39;\\beta}\\) , equivalently \\(\\log(\\lambda) = \\log(b) + \\mathbf{x&#39;\\beta}\\) where \\(b\\) is BroodSize. Hence, we “offset” the mean by the log of this variable. owls_glmer &lt;- glmer( Ncalls ~ offset(log(BroodSize)) + FoodTreatment * SexParent + (1 | Nest), family = poisson, data = Owls ) summary(owls_glmer) #&gt; Generalized linear mixed model fit by maximum likelihood (Laplace #&gt; Approximation) [glmerMod] #&gt; Family: poisson ( log ) #&gt; Formula: Ncalls ~ offset(log(BroodSize)) + FoodTreatment * SexParent + #&gt; (1 | Nest) #&gt; Data: Owls #&gt; #&gt; AIC BIC logLik deviance df.resid #&gt; 5212.8 5234.8 -2601.4 5202.8 594 #&gt; #&gt; Scaled residuals: #&gt; Min 1Q Median 3Q Max #&gt; -3.5529 -1.7971 -0.6842 1.2689 11.4312 #&gt; #&gt; Random effects: #&gt; Groups Name Variance Std.Dev. #&gt; Nest (Intercept) 0.2063 0.4542 #&gt; Number of obs: 599, groups: Nest, 27 #&gt; #&gt; Fixed effects: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; (Intercept) 0.65585 0.09567 6.855 7.12e-12 *** #&gt; FoodTreatmentSatiated -0.65612 0.05606 -11.705 &lt; 2e-16 *** #&gt; SexParentMale -0.03705 0.04501 -0.823 0.4104 #&gt; FoodTreatmentSatiated:SexParentMale 0.13135 0.07036 1.867 0.0619 . #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Correlation of Fixed Effects: #&gt; (Intr) FdTrtS SxPrnM #&gt; FdTrtmntStt -0.225 #&gt; SexParentMl -0.292 0.491 #&gt; FdTrtmS:SPM 0.170 -0.768 -0.605 nest explains a relatively large proportion of the variability (its standard deviation is larger than some coefficients) the model fit isn’t great (deviance of 5202 on 594 df) # Negative binomial model owls_glmerNB &lt;- glmer.nb(Ncalls ~ offset(log(BroodSize)) + FoodTreatment * SexParent + (1 | Nest), data = Owls) c(Deviance = round(summary(owls_glmerNB)$AICtab[&quot;deviance&quot;], 3), df = summary(owls_glmerNB)$AICtab[&quot;df.resid&quot;]) #&gt; Deviance.deviance df.df.resid #&gt; 3483.616 593.000 There is an improvement using negative binomial considering over-dispersion hist(Owls$Ncalls,breaks=30) To account for too many 0s in these data, we can use zero-inflated Poisson (ZIP) model. glmmTMB can handle ZIP GLMMs since it adds automatic differentiation to existing estimation strategies. library(glmmTMB) owls_glmm &lt;- glmmTMB( Ncalls ~ FoodTreatment * SexParent + offset(log(BroodSize)) + (1 | Nest), ziformula = ~ 0, family = nbinom2(link = &quot;log&quot;), data = Owls ) owls_glmm_zi &lt;- glmmTMB( Ncalls ~ FoodTreatment * SexParent + offset(log(BroodSize)) + (1 | Nest), ziformula = ~ 1, family = nbinom2(link = &quot;log&quot;), data = Owls ) # Scale Arrival time to use as a covariate for zero-inflation parameter Owls$ArrivalTime &lt;- scale(Owls$ArrivalTime) owls_glmm_zi_cov &lt;- glmmTMB( Ncalls ~ FoodTreatment * SexParent + offset(log(BroodSize)) + (1 | Nest), ziformula = ~ ArrivalTime, family = nbinom2(link = &quot;log&quot;), data = Owls ) as.matrix(anova(owls_glmm, owls_glmm_zi)) #&gt; Df AIC BIC logLik deviance Chisq Chi Df #&gt; owls_glmm 6 3495.610 3521.981 -1741.805 3483.610 NA NA #&gt; owls_glmm_zi 7 3431.646 3462.413 -1708.823 3417.646 65.96373 1 #&gt; Pr(&gt;Chisq) #&gt; owls_glmm NA #&gt; owls_glmm_zi 4.592983e-16 as.matrix(anova(owls_glmm_zi, owls_glmm_zi_cov)) #&gt; Df AIC BIC logLik deviance Chisq Chi Df #&gt; owls_glmm_zi 7 3431.646 3462.413 -1708.823 3417.646 NA NA #&gt; owls_glmm_zi_cov 8 3422.532 3457.694 -1703.266 3406.532 11.11411 1 #&gt; Pr(&gt;Chisq) #&gt; owls_glmm_zi NA #&gt; owls_glmm_zi_cov 0.0008567362 summary(owls_glmm_zi_cov) #&gt; Family: nbinom2 ( log ) #&gt; Formula: #&gt; Ncalls ~ FoodTreatment * SexParent + offset(log(BroodSize)) + (1 | Nest) #&gt; Zero inflation: ~ArrivalTime #&gt; Data: Owls #&gt; #&gt; AIC BIC logLik deviance df.resid #&gt; 3422.5 3457.7 -1703.3 3406.5 591 #&gt; #&gt; Random effects: #&gt; #&gt; Conditional model: #&gt; Groups Name Variance Std.Dev. #&gt; Nest (Intercept) 0.07487 0.2736 #&gt; Number of obs: 599, groups: Nest, 27 #&gt; #&gt; Dispersion parameter for nbinom2 family (): 2.22 #&gt; #&gt; Conditional model: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; (Intercept) 0.84778 0.09961 8.511 &lt; 2e-16 *** #&gt; FoodTreatmentSatiated -0.39529 0.13742 -2.877 0.00402 ** #&gt; SexParentMale -0.07025 0.10435 -0.673 0.50079 #&gt; FoodTreatmentSatiated:SexParentMale 0.12388 0.16449 0.753 0.45138 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Zero-inflation model: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; (Intercept) -1.3018 0.1261 -10.32 &lt; 2e-16 *** #&gt; ArrivalTime 0.3545 0.1074 3.30 0.000966 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 We can see ZIP GLMM with an arrival time covariate on the zero is best. arrival time has a positive effect on observing a nonzero number of calls interactions are non significant, the food treatment is significant (fewer calls after eating) nest variability is large in magnitude (without this, the parameter estimates change) 9.2.3 Binomial library(agridat) library(ggplot2) library(lme4) library(spaMM) data(gotway.hessianfly) dat &lt;- gotway.hessianfly dat$prop &lt;- dat$y / dat$n ggplot(dat, aes(x = lat, y = long, fill = prop)) + geom_tile() + scale_fill_gradient(low = &#39;white&#39;, high = &#39;black&#39;) + geom_text(aes(label = gen, color = block)) + ggtitle(&#39;Gotway Hessian Fly&#39;) Fixed effects (\\(\\beta\\)) = genotype Random effects (\\(\\alpha\\)) = block flymodel &lt;- glmer( cbind(y, n - y) ~ gen + (1 | block), data = dat, family = binomial, nAGQ = 5 ) summary(flymodel) #&gt; Generalized linear mixed model fit by maximum likelihood (Adaptive #&gt; Gauss-Hermite Quadrature, nAGQ = 5) [glmerMod] #&gt; Family: binomial ( logit ) #&gt; Formula: cbind(y, n - y) ~ gen + (1 | block) #&gt; Data: dat #&gt; #&gt; AIC BIC logLik deviance df.resid #&gt; 162.2 198.9 -64.1 128.2 47 #&gt; #&gt; Scaled residuals: #&gt; Min 1Q Median 3Q Max #&gt; -2.38644 -1.01188 0.09631 1.03468 2.75479 #&gt; #&gt; Random effects: #&gt; Groups Name Variance Std.Dev. #&gt; block (Intercept) 0.001022 0.03196 #&gt; Number of obs: 64, groups: block, 4 #&gt; #&gt; Fixed effects: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; (Intercept) 1.5035 0.3914 3.841 0.000122 *** #&gt; genG02 -0.1939 0.5302 -0.366 0.714644 #&gt; genG03 -0.5408 0.5103 -1.060 0.289260 #&gt; genG04 -1.4342 0.4714 -3.043 0.002346 ** #&gt; genG05 -0.2037 0.5429 -0.375 0.707486 #&gt; genG06 -0.9783 0.5046 -1.939 0.052533 . #&gt; genG07 -0.6041 0.5111 -1.182 0.237235 #&gt; genG08 -1.6774 0.4907 -3.418 0.000630 *** #&gt; genG09 -1.3984 0.4725 -2.960 0.003078 ** #&gt; genG10 -0.6817 0.5333 -1.278 0.201181 #&gt; genG11 -1.4630 0.4843 -3.021 0.002522 ** #&gt; genG12 -1.4591 0.4918 -2.967 0.003010 ** #&gt; genG13 -3.5528 0.6600 -5.383 7.31e-08 *** #&gt; genG14 -2.5073 0.5264 -4.763 1.90e-06 *** #&gt; genG15 -2.0872 0.4851 -4.302 1.69e-05 *** #&gt; genG16 -2.9697 0.5383 -5.517 3.46e-08 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Equivalently, we can use MCMCglmm , for a Bayesian approach library(coda) Bayes_flymodel &lt;- MCMCglmm( cbind(y, n - y) ~ gen , random = ~ block, data = dat, family = &quot;multinomial2&quot;, verbose = FALSE ) plot(Bayes_flymodel$Sol[, 1], main = dimnames(Bayes_flymodel$Sol)[[2]][1]) autocorr.plot(Bayes_flymodel$Sol[, 1], main = dimnames(Bayes_flymodel$Sol)[[2]][1]) 9.2.4 Example from (Schabenberger and Pierce 2001) section 8.4.1 dat2 &lt;- read.table(&quot;images/YellowPoplarData_r.txt&quot;) names(dat2) &lt;- c(&#39;tn&#39;, &#39;k&#39;, &#39;dbh&#39;, &#39;totht&#39;, &#39;dob&#39;, &#39;ht&#39;, &#39;maxd&#39;, &#39;cumv&#39;) dat2$t &lt;- dat2$dob / dat2$dbh dat2$r &lt;- 1 - dat2$dob / dat2$totht The cumulative volume relates to the complementary diameter (subplots were created based on total tree height) library(ggplot2) library(dplyr) dat2 &lt;- dat2 %&gt;% group_by(tn) %&gt;% mutate( z = case_when( totht &lt; 74 &amp; totht &gt;= 0 ~ &#39;a: 0-74ft&#39;, totht &lt; 88 &amp; totht &gt;= 74 ~ &#39;b: 74-88&#39;, totht &lt; 95 &amp; totht &gt;= 88 ~ &#39;c: 88-95&#39;, totht &lt; 99 &amp; totht &gt;= 95 ~ &#39;d: 95-99&#39;, totht &lt; 104 &amp; totht &gt;= 99 ~ &#39;e: 99-104&#39;, totht &lt; 109 &amp; totht &gt;= 104 ~ &#39;f: 104-109&#39;, totht &lt; 115 &amp; totht &gt;= 109 ~ &#39;g: 109-115&#39;, totht &lt; 120 &amp; totht &gt;= 115 ~ &#39;h: 115-120&#39;, totht &lt; 140 &amp; totht &gt;= 120 ~ &#39;i: 120-150&#39;, ) ) ggplot(dat2, aes(x = r, y = cumv)) + geom_point(size = 0.5) + facet_wrap(vars(z)) The proposed non-linear model: \\[ V_{id_j} = (\\beta_0 + (\\beta_1 + b_{1i})\\frac{D^2_i H_i}{1000})(\\exp[-(\\beta_2 + b_{2i})t_{ij} \\exp(\\beta_3 t_{ij})]) + e_{ij} \\] where \\(b_{1i}, b_{2i}\\) are random effects \\(e_{ij}\\) are random errors library(nlme) tmp &lt;- nlme( cumv ~ (b0 + (b1 + u1) * (dbh * dbh * totht / 1000)) * (exp(-(b2 + u2) * (t / 1000) * exp(b3 * t))), data = dat2, fixed = b0 + b1 + b2 + b3 ~ 1, # 1 on the right hand side of the formula indicates # a single fixed effects for the corresponding parameters random = list(pdDiag(u1 + u2 ~ 1)), #uncorrelated random effects groups = ~ tn, #group on trees so each tree w/ have u1 and u2 start = list(fixed = c( b0 = 0.25, b1 = 2.3, b2 = 2.87, b3 = 6.7 )) ) summary(tmp) #&gt; Nonlinear mixed-effects model fit by maximum likelihood #&gt; Model: cumv ~ (b0 + (b1 + u1) * (dbh * dbh * totht/1000)) * (exp(-(b2 + u2) * (t/1000) * exp(b3 * t))) #&gt; Data: dat2 #&gt; AIC BIC logLik #&gt; 31103.73 31151.33 -15544.86 #&gt; #&gt; Random effects: #&gt; Formula: list(u1 ~ 1, u2 ~ 1) #&gt; Level: tn #&gt; Structure: Diagonal #&gt; u1 u2 Residual #&gt; StdDev: 0.1508094 0.447829 2.226361 #&gt; #&gt; Fixed effects: b0 + b1 + b2 + b3 ~ 1 #&gt; Value Std.Error DF t-value p-value #&gt; b0 0.249386 0.12894687 6297 1.9340 0.0532 #&gt; b1 2.288832 0.01266804 6297 180.6776 0.0000 #&gt; b2 2.500497 0.05606685 6297 44.5985 0.0000 #&gt; b3 6.848871 0.02140677 6297 319.9395 0.0000 #&gt; Correlation: #&gt; b0 b1 b2 #&gt; b1 -0.639 #&gt; b2 0.054 0.056 #&gt; b3 -0.011 -0.066 -0.850 #&gt; #&gt; Standardized Within-Group Residuals: #&gt; Min Q1 Med Q3 Max #&gt; -6.694575e+00 -3.081861e-01 -8.904304e-05 3.469469e-01 7.855665e+00 #&gt; #&gt; Number of Observations: 6636 #&gt; Number of Groups: 336 nlme::intervals(tmp) #&gt; Approximate 95% confidence intervals #&gt; #&gt; Fixed effects: #&gt; lower est. upper #&gt; b0 -0.003318061 0.2493855 0.5020892 #&gt; b1 2.264006036 2.2888322 2.3136584 #&gt; b2 2.390620340 2.5004973 2.6103743 #&gt; b3 6.806919342 6.8488713 6.8908232 #&gt; #&gt; Random Effects: #&gt; Level: tn #&gt; lower est. upper #&gt; sd(u1) 0.1376084 0.1508094 0.1652768 #&gt; sd(u2) 0.4056209 0.4478290 0.4944291 #&gt; #&gt; Within-group standard error: #&gt; lower est. upper #&gt; 2.187258 2.226361 2.266162 Little different from the book because of different implementation of nonlinear mixed models. library(cowplot) nlmmfn &lt;- function(fixed,rand,dbh,totht,t){ b0 &lt;- fixed[1] b1 &lt;- fixed[2] b2 &lt;- fixed[3] b3 &lt;- fixed[4] u1 &lt;- rand[1] u2 &lt;- rand[2] #just made so we can predict w/o random effects return((b0+(b1+u1)*(dbh*dbh*totht/1000))*(exp(-(b2+u2)*(t/1000)*exp(b3*t)))) } #Tree 1 pred1 &lt;- data.frame(seq(1, 24, length.out = 100)) names(pred1) &lt;- &#39;dob&#39; pred1$tn &lt;- 1 pred1$dbh &lt;- unique(dat2[dat2$tn == 1, ]$dbh) pred1$t &lt;- pred1$dob / pred1$dbh pred1$totht &lt;- unique(dat2[dat2$tn == 1, ]$totht) pred1$r &lt;- 1 - pred1$dob / pred1$totht pred1$test &lt;- predict(tmp, pred1) pred1$testno &lt;- nlmmfn( fixed = tmp$coefficients$fixed, rand = c(0, 0), pred1$dbh, pred1$totht, pred1$t ) p1 &lt;- ggplot(pred1) + geom_line(aes(x = r, y = test, color = &#39;with random&#39;)) + geom_line(aes(x = r, y = testno, color = &#39;No random&#39;)) + labs(colour = &quot;&quot;) + geom_point(data = dat2[dat2$tn == 1, ], aes(x = r, y = cumv)) + ggtitle(&#39;Tree 1&#39;) + theme(legend.position = &quot;none&quot;) #Tree 151 pred151 &lt;- data.frame(seq(1, 21, length.out = 100)) names(pred151) &lt;- &#39;dob&#39; pred151$tn &lt;- 151 pred151$dbh &lt;- unique(dat2[dat2$tn == 151, ]$dbh) pred151$t &lt;- pred151$dob / pred151$dbh pred151$totht &lt;- unique(dat2[dat2$tn == 151, ]$totht) pred151$r &lt;- 1 - pred151$dob / pred151$totht pred151$test &lt;- predict(tmp, pred151) pred151$testno &lt;- nlmmfn( fixed = tmp$coefficients$fixed, rand = c(0, 0), pred151$dbh, pred151$totht, pred151$t ) p2 &lt;- ggplot(pred151) + geom_line(aes(x = r, y = test, color = &#39;with random&#39;)) + geom_line(aes(x = r, y = testno, color = &#39;No random&#39;)) + labs(colour = &quot;&quot;) + geom_point(data = dat2[dat2$tn == 151,], aes(x = r, y = cumv)) + ggtitle(&#39;Tree 151&#39;) + theme(legend.position = &quot;none&quot;) #Tree 279 pred279 &lt;- data.frame(seq(1, 9, length.out = 100)) names(pred279) &lt;- &#39;dob&#39; pred279$tn &lt;- 279 pred279$dbh &lt;- unique(dat2[dat2$tn == 279, ]$dbh) pred279$t &lt;- pred279$dob / pred279$dbh pred279$totht &lt;- unique(dat2[dat2$tn == 279, ]$totht) pred279$r &lt;- 1 - pred279$dob / pred279$totht pred279$test &lt;- predict(tmp, pred279) pred279$testno &lt;- nlmmfn( fixed = tmp$coefficients$fixed, rand = c(0, 0), pred279$dbh, pred279$totht, pred279$t ) p3 &lt;- ggplot(pred279) + geom_line(aes(x = r, y = test, color = &#39;with random&#39;)) + geom_line(aes(x = r, y = testno, color = &#39;No random&#39;)) + labs(colour = &quot;&quot;) + geom_point(data = dat2[dat2$tn == 279, ], aes(x = r, y = cumv)) + ggtitle(&#39;Tree 279&#39;) + theme(legend.position = &quot;none&quot;) plot_grid(p1, p2, p3) red line = predicted observations based on the common fixed effects teal line = tree-specific predictions with random effects References "],["summary-1.html", "9.3 Summary", " 9.3 Summary "],["model-specification.html", "Chapter 10 Model Specification", " Chapter 10 Model Specification Test whether underlying assumptions hold true Nested Model (A1/A3) Non-Nested Model (A1/A3) Heteroskedasticity (A4) "],["nested-model.html", "10.1 Nested Model", " 10.1 Nested Model \\[ \\begin{aligned} y &amp;= \\beta_0 + x_1\\beta_1 + x_2\\beta-2 + x_3\\beta_3 + \\epsilon &amp; \\text{unrestricted model} \\\\ y &amp;= \\beta_0 + x_1\\beta_1 + \\epsilon &amp; \\text{restricted model} \\end{aligned} \\] Unrestricted model is always longer than the restricted model The restricted model is “nested” within the unrestricted model To determine which variables should be included or exclude, we could use the same Wald Test Adjusted \\(R^2\\) \\(R^2\\) will always increase with more variables included Adjusted \\(R^2\\) tries to correct by penalizing inclusion of unnecessary variables. \\[ \\begin{aligned} {R}^2 &amp;= 1 - \\frac{SSR/n}{SST/n} \\\\ {R}^2_{adj} &amp;= 1 - \\frac{SSR/(n-k)}{SST/(n-1)} \\\\ &amp;= 1 - \\frac{(n-1)(1-R^2)}{(n-k)} \\end{aligned} \\] \\({R}^2_{adj}\\) increases if and only if the t-statistic on the additional variable is greater than 1 in absolute value. \\({R}^2_{adj}\\) is valid in models where there is no heteroskedasticity there fore it should not be used in determining which variables should be included in the model (the t or F-tests are more appropriate) 10.1.1 Chow test Should we run two different regressions for two groups? "],["non-nested-model.html", "10.2 Non-Nested Model", " 10.2 Non-Nested Model compare models with different non-nested specifications 10.2.1 Davidson-Mackinnon test 10.2.1.1 Independent Variable Should the independent variables be logged? (decide between non-nested alternatives) \\[ \\begin{aligned} y = \\beta_0 + x_1\\beta_1 + x_2\\beta_2 + \\epsilon &amp;&amp; \\text{(level eq)} \\\\ y = \\beta_0 + ln(x_1)\\beta_1 + x_2\\beta_2 + \\epsilon &amp;&amp; \\text{(log eq)} \\end{aligned} \\] Obtain predict outcome when estimating the model in log equation \\(\\check{y}\\) and then estimate the following auxiliary equation, \\[ y = \\beta_0 + x_1\\beta_1 + x_2\\beta_2 + \\check{y}\\gamma + error \\] and evaluate the t-statistic for the null hypothesis \\(H_0: \\gamma = 0\\) Obtain predict outcome when estimating the model in the level equation \\(\\hat{y}\\), then estimate the following auxiliary equation, \\[ y = \\beta_0 + ln(x_1)\\beta_1 + x_2\\beta_2 + \\check{y}\\gamma + error \\] and evaluate the t-statistic for the null hypothesis \\(H_0: \\gamma = 0\\) If you reject the null in the (1) step but fail to reject the null in the second step, then the log equation is preferred. If fail to reject the null in the (1) step but reject the null in the (2) step then, level equation is preferred. If reject in both steps, then you have statistical evidence that neither model should be used and should re-evaluate the functional form of your model. If fail to reject in both steps, you do not have sufficient evidence to prefer one model over the other. You can compare the \\(R^2_{adj}\\) to choose between the two models. \\[ \\begin{aligned} y &amp;= \\beta_0 + ln(x)\\beta_1 + \\epsilon \\\\ y &amp;= \\beta_0 + x(\\beta_1) + x^2\\beta_2 + \\epsilon \\end{aligned} \\] Compare which better fits the data Compare standard \\(R^2\\) is unfair because the second model is less parsimonious (more parameters to estimate) The \\(R_{adj}^2\\) will penalize the second model for being less parsimonious + Only valid when there is no heteroskedasticity (A4 holds) Should only compare after a Davidson-Mackinnon test 10.2.1.2 Dependent Variable \\[ \\begin{aligned} y &amp;= \\beta_0 + x_1\\beta_1 + \\epsilon &amp; \\text{level eq} \\\\ ln(y) &amp;= \\beta_0 + x_1\\beta_1 + \\epsilon &amp; \\text{log eq} \\\\ \\end{aligned} \\] In the level model, regardless of how big y is, x has a constant effect (i.e., one unit change in \\(x_1\\) results in a \\(\\beta_1\\) unit change in y) In the log model, the larger in y is, the effect of x is stronger (i.e., one unit change in \\(x_1\\) could increase y from 1 to \\(1+\\beta_1\\) or from 100 to 100+100x\\(\\beta_1\\)) Cannot compare \\(R^2\\) or \\(R^2_{adj}\\) because the outcomes are complement different, the scaling is different (SST is different) We need to “un-transform” the \\(ln(y)\\) back to the same scale as y and then compare, Estimate the model in the log equation to obtain the predicted outcome \\(\\hat{ln(y)}\\) “Un-transform” the predicted outcome \\[ \\hat{m} = exp(\\hat{ln(y)}) \\] Estimate the following model (without an intercept) \\[ y = \\alpha\\hat{m} + error \\] and obtain predicted outcome \\(\\hat{y}\\) Then take the square of the correlation between \\(\\hat{y}\\) and y as a scaled version of the \\(R^2\\) from the log model that can now compare with the usual \\(R^2\\) in the level model. "],["heteroskedasticity.html", "10.3 Heteroskedasticity", " 10.3 Heteroskedasticity Using roust standard errors are always valid If there is significant evidence of heteroskedasticity implying A4 does not hold Gauss-Markov Theorem no longer holds, OLS is not BLUE. Should consider using a better linear unbiased estimator (Weighted Least Squares or Generalized Least Squares) 10.3.1 Breusch-Pagan test A4 implies \\[ E(\\epsilon_i^2|\\mathbf{x_i})=\\sigma^2 \\] \\[ \\epsilon_i^2 = \\gamma_0 + x_{i1}\\gamma_1 + ... + x_{ik -1}\\gamma_{k-1} + error \\] and determining whether or not \\(\\mathbf{x}_i\\) has any predictive value if \\(\\mathbf{x}_i\\) has predictive value, then the variance changes over the levels of \\(\\mathbf{x}_i\\) which is evidence of heteroskedasticity if \\(\\mathbf{x}_i\\) does not have predictive value, the variance is constant for all levels of \\(\\mathbf{x}_i\\) The Breusch-Pagan test for heteroskedasticity would compute the F-test of total significance for the following model \\[ e_i^2 = \\gamma_0 + x_{i1}\\gamma_1 + ... + x_{ik -1}\\gamma_{k-1} + error \\] A low p-value means we reject the null of homoskedasticity However, Breusch-Pagan test cannot detect heteroskedasticity in non-linear form 10.3.2 White test test heteroskedasticity would allow for a non-linear relationship by computing the F-test of total significance for the following model (assume there are three independent random variables) \\[ \\begin{aligned} e_i^2 &amp;= \\gamma_0 + x_i \\gamma_1 + x_{i2}\\gamma_2 + x_{i3}\\gamma_3 \\\\ &amp;+ x_{i1}^2\\gamma_4 + x_{i2}^2\\gamma_5 + x_{i3}^2\\gamma_6 \\\\ &amp;+ (x_{i1} \\times x_{i2})\\gamma_7 + (x_{i1} \\times x_{i3})\\gamma_8 + (x_{i2} \\times x_{i3})\\gamma_9 + error \\end{aligned} \\] A low p-value means we reject the null of homoskedasticity Equivalently, we can compute LM as \\(LM = nR^2_{e^2}\\) where the \\(R^2_{e^2}\\) come from the regression with the squared residual as the outcome The LM statistic has a [\\(\\chi_k^2\\)][Chi-squared] distribution "],["imputation-missing-data.html", "Chapter 11 Imputation (Missing Data) ", " Chapter 11 Imputation (Missing Data) "],["introduction-to-missing-data.html", "11.1 Introduction to Missing Data", " 11.1 Introduction to Missing Data Missing data is a common problem in statistical analyses and data science, impacting the quality and reliability of insights derived from datasets. One widely used approach to address this issue is imputation, where missing data is replaced with reasonable estimates. 11.1.1 Types of Imputation Imputation can be categorized into: Unit Imputation: Replacing an entire missing observation (i.e., all features for a single data point are missing). Item Imputation: Replacing missing values for specific variables (features) within a dataset. While imputation offers a means to make use of incomplete datasets, it has historically been viewed skeptically. This skepticism arises from: Frequent misapplication of imputation techniques, which can introduce significant bias to estimates. Limited applicability, as imputation works well only under certain assumptions about the missing data mechanism and research objectives. Biases in imputation can arise from various factors, including: Imputation method: The chosen method can influence the results and introduce biases. Missing data mechanism: The nature of the missing data—whether it is Missing Completely at Random (MCAR) or Missing at Random (MAR)—affects the accuracy of imputation. Proportion of missing data: The amount of missing data significantly impacts the reliability of the imputation. Available information in the dataset: Limited information reduces the robustness of the imputed values. 11.1.2 When and Why to Use Imputation The appropriateness of imputation depends on the nature of the missing data and the research goal: Missing Data in the Outcome Variable (\\(y\\)): Imputation in such cases is generally problematic, as it can distort statistical models and lead to misleading conclusions. For example, imputing outcomes in regression or classification problems can alter the underlying relationship between the dependent and independent variables. Missing Data in Predictive Variables (\\(x\\)): Imputation is more commonly applied here, especially for non-random missing data. Properly handled, imputation can enable the use of incomplete datasets while minimizing bias. 11.1.2.1 Objectives of Imputation The utility of imputation methods differs substantially depending on whether the goal of the analysis is inference/explanation or prediction. Each goal has distinct priorities and tolerances for bias, variance, and assumptions about the missing data mechanism: 11.1.2.1.1 Inference/Explanation In causal inference or explanatory analyses, the primary objective is to ensure valid statistical inference, emphasizing unbiased estimation of parameters and accurate representation of uncertainty. The treatment of missing data must align closely with the assumptions about the mechanism behind the missing data—whether it is Missing Completely at Random (MCAR), Missing at Random (MAR), or Missing Not at Random (MNAR): Bias Sensitivity: Inference analyses require that imputed data preserve the integrity of the relationships among variables. Poorly executed imputation can introduce bias, even when it addresses missingness superficially. Variance and Confidence Intervals: For inference, the quality of the standard errors, confidence intervals, and test statistics is critical. Naive imputation methods (e.g., mean imputation) often fail to appropriately reflect the uncertainty due to missingness, leading to overconfidence in parameter estimates. Mechanism Considerations: Imputation methods, such as multiple imputation (MI), attempt to generate values consistent with the observed data distribution while accounting for missing data uncertainty. However, MI’s performance depends heavily on the validity of the MAR assumption. If the missingness mechanism is MNAR and not addressed adequately, the imputed data could yield biased parameter estimates, undermining the purpose of inference. 11.1.2.1.2 Prediction In predictive modeling, the primary goal is to maximize model accuracy (e.g., minimizing mean squared error for continuous outcomes or maximizing classification accuracy). Here, the focus shifts to optimizing predictive performance rather than ensuring unbiased parameter estimates: Loss of Information: Missing data reduces the amount of usable information in a dataset. Imputation allows the model to leverage all available data, rather than excluding incomplete cases via listwise deletion, which can significantly reduce sample size and model performance. Impact on Model Fit: In predictive contexts, imputation can reduce standard errors of the predictions and stabilize model coefficients by incorporating plausible estimates for missing values. Flexibility with Mechanism: Predictive models are less sensitive to the missing data mechanism than inferential models, as long as the imputed values help reduce variability and align with patterns in the observed data. Methods like K-Nearest Neighbors (KNN), iterative imputation, or even machine learning models (e.g., random forests for imputation) can be valuable, regardless of strict adherence to MAR or MCAR assumptions. Trade-offs: Overimputation, where too much noise or complexity is introduced in the imputation process, can harm prediction by introducing artifacts that degrade model generalizability. 11.1.2.1.3 Key Takeaways The usefulness of imputation depends on whether the goal of the analysis is inference or prediction: Inference/Explanation: The primary concern is valid statistical inference, where biased estimates are unacceptable. Imputation is often of limited value for this purpose, as it may not address the underlying missing data mechanism appropriately (Rubin 1996). Prediction: Imputation can be more useful in predictive modeling, as it reduces the loss of information from incomplete cases. By leveraging observed data, imputation can lower standard errors and improve model accuracy. 11.1.3 Importance of Missing Data Treatment in Statistical Modeling Proper handling of missing data ensures: Unbiased Estimates: Avoiding distortions in parameter estimates. Accurate Standard Errors: Ensuring valid hypothesis testing and confidence intervals. Adequate Statistical Power: Maximizing the use of available data. Ignoring or mishandling missing data can lead to: Bias: Systematic errors in parameter estimates, especially under MAR or MNAR mechanisms. Loss of Power: Reduced sample size leads to larger standard errors and weaker statistical significance. Misleading Conclusions: Over-simplistic imputation methods (e.g., mean substitution) can distort relationships among variables. 11.1.4 Prevalence of Missing Data Across Domains Missing data affects virtually all fields: Business: Non-responses in customer surveys, incomplete sales records, and transactional errors. Healthcare: Missing data in electronic health records (EHRs) due to incomplete patient histories or inconsistent data entry. Social Sciences: Non-responses or partial responses in large-scale surveys, leading to biased conclusions. 11.1.5 Practical Considerations for Imputation Diagnostic Checks: Always examine the patterns and mechanisms of missing data before applying imputation (Diagnosing the Missing Data Mechanism). Model Selection: Align the imputation method with the missing data mechanism and research goal. Validation: Assess the impact of imputation on results through sensitivity analyses or cross-validation. References "],["theoretical-foundations-of-missing-data.html", "11.2 Theoretical Foundations of Missing Data", " 11.2 Theoretical Foundations of Missing Data 11.2.1 Definition and Classification of Missing Data Missing data refers to the absence of values for some variables in a dataset. The mechanisms underlying missingness significantly impact the validity of statistical analyses and the choice of handling methods. These mechanisms are classified into three categories: Missing Not at Random (MNAR): Missingness depends on unobserved variables or the missing values themselves. 11.2.1.1 Missing Completely at Random (MCAR) MCAR occurs when the probability of missingness is entirely random and unrelated to either observed or unobserved variables. Under this mechanism, missing data do not introduce bias in parameter estimates when ignored, although statistical efficiency is reduced due to the smaller sample size. Mathematical Definition: The missingness is independent of all data, both observed and unobserved: \\[ P(Y_{\\text{missing}} | Y, X) = P(Y_{\\text{missing}}) \\] Characteristics of MCAR: Missingness is completely unrelated to both observed and unobserved data. Analyses remain unbiased even if missing data are ignored, though they may lack efficiency due to reduced sample size. The missing data points represent a random subset of the overall data. Examples: A sensor randomly fails at specific time points, unrelated to environmental or operational conditions. Survey participants randomly omit responses to certain questions without any systematic pattern. Methods for Testing MCAR: Little’s MCAR Test: A formal statistical test to assess whether data are MCAR. A significant result suggests deviation from MCAR. Mean Comparison Tests: T-tests or similar approaches compare observed and missing data groups on other variables. Significant differences indicate potential bias. Failure to reject the null hypothesis of no difference does not confirm MCAR but suggests consistency with the MCAR assumption. Handling MCAR: Since MCAR data introduce no bias, they can be handled using the following techniques: Complete Case Analysis (Listwise Deletion): Analyses are performed only on cases with complete data. While unbiased under MCAR, this method reduces sample size and efficiency. Universal Singular Value Thresholding (USVT): This technique is effective for MCAR data recovery but can only recover the mean structure, not the entire true distribution (Chatterjee 2015). SoftImpute: A matrix completion method useful for some missing data problems but less effective when missingness is not MCAR (Hastie et al. 2015). Synthetic Nearest Neighbor Imputation: A robust method for imputing missing data. While primarily designed for MCAR, it can also handle certain cases of missing not at random (MNAR) (Agarwal et al. 2023). Available on GitHub: syntheticNN. Notes: The “missingness” on one variable can be correlated with the “missingness” on another variable without violating the MCAR assumption. Absence of evidence for bias (e.g., failing to reject a t-test) does not confirm that the data are MCAR. 11.2.1.2 Missing at Random (MAR) Missing at Random (MAR) occurs when missingness depends on observed variables but not the missing values themselves. This mechanism assumes that observed data provide sufficient information to explain the missingness. In other words, there is a systematic relationship between the propensity of missing values and the observed data, but not the missing data. Mathematical Definition: The probability of missingness is conditional only on observed data: \\[ P(Y_{\\text{missing}} | Y, X) = P(Y_{\\text{missing}} | X) \\] This implies that whether an observation is missing is unrelated to the missing values themselves but is related to the observed values of other variables. Characteristics of MAR: Missingness is systematically related to observed variables. The propensity for a data point to be missing is not related to the missing data but is related to some of the observed data. Analyses must account for observed data to mitigate bias. Examples: Women are less likely to disclose their weight, but their gender is recorded. In this case, weight is MAR. Missing income data is correlated with education, which is observed. For example, individuals with higher education levels might be less likely to reveal their income. Challenges in MAR: MAR is weaker than Missing Completely at Random (MCAR). It is impossible to directly test for MAR. Evidence for MAR relies on domain expertise and indirect statistical checks rather than direct tests. Handling MAR: Common methods for handling MAR include: Multiple Imputation by Chained Equations (MICE): Iteratively imputes missing values based on observed data. Maximum Likelihood Estimation: Estimates model parameters directly while accounting for MAR assumptions. Regression-Based Imputation: Predicts missing values using observed covariates. These methods assume that observed variables fully explain the missingness. Effective handling of MAR requires careful modeling and often domain-specific knowledge to validate the assumptions underlying the analysis. 11.2.1.3 Missing Not at Random (MNAR) Missing Not at Random (MNAR) is the most complex missing data mechanism. Here, missingness depends on unobserved variables or the values of the missing data themselves. This makes MNAR particularly challenging, as ignoring this dependency introduces significant bias in analyses. Mathematical Definition: The probability of missingness depends on the missing values: \\[ P(Y_{\\text{missing}} | Y, X) \\neq P(Y_{\\text{missing}} | X) \\] Characteristics of MNAR: Missingness cannot be fully explained by observed data. The cause of missingness is directly related to the unobserved values. Ignoring MNAR introduces significant bias in parameter estimates, often leading to invalid conclusions. Examples: High-income individuals are less likely to disclose their income, and income itself is unobserved. Patients with severe symptoms drop out of a clinical study, leaving their health outcomes unrecorded. Challenges in MNAR: MNAR is the most difficult missingness mechanism to address because the missing data mechanism must be explicitly modeled. Identifying MNAR often requires domain knowledge and auxiliary information beyond the observed dataset. Handling MNAR: MNAR requires explicit modeling of the missingness mechanism. Common approaches include: Heckman Selection Models: These models explicitly account for the selection process leading to missing data, adjusting for potential bias (James J. Heckman 1976). Instrumental Variables: Variables predictive of missingness but unrelated to the outcome can be used to mitigate bias (B. Sun et al. 2018; E. J. Tchetgen Tchetgen and Wirth 2017). Pattern-Mixture Models: These models separate the data into groups (patterns) based on missingness and model each group separately. They are particularly useful when the relationship between missingness and missing values is complex. Sensitivity Analysis: Examines how conclusions change under different assumptions about the missing data mechanism. Use of Auxiliary Data Auxiliary data refers to external data sources or variables that can help explain the missingness mechanism. Surrogate Variables: Adding variables that correlate with missing data can improve imputation accuracy and mitigate the MNAR challenge. Linking External Datasets: Merging datasets from different sources can provide additional context or predictors for missingness. Applications in Business: In marketing, customer demographics or transaction histories often serve as auxiliary data to predict missing responses in surveys. Additionally, data collection strategies, such as follow-up surveys or targeted sampling, can help mitigate MNAR effects by collecting information that directly addresses the missingness mechanism. However, such approaches can be resource-intensive and require careful planning. 11.2.2 Missing Data Mechanisms Mechanism Missingness Depends On Implications Examples MCAR Neither observed nor missing data No bias; simplest to handle; decreases efficiency due to data loss. Random sensor failure. MAR Observed data only Requires observed data to explain missingness; common assumption in imputation methods. Gender-based missingness of weight. MNAR Missing data itself or unobserved variables Requires explicit modeling of the missingness mechanism; significant bias if ignored. High-income individuals not disclosing income. 11.2.3 Relationship Between Mechanisms and Ignorability The concept of ignorability is central to determining whether the missingness process must be explicitly modeled. Ignorability impacts the choice of methods for handling missing data and whether the missing data mechanism can be safely disregarded or must be explicitly accounted for. 11.2.3.1 Ignorable Missing Data Missing data is ignorable under the following conditions: The missing data mechanism is MAR or MCAR. The parameters governing the missing data process are unrelated to the parameters of interest in the analysis. In cases of ignorable missing data, there is no need to model the missingness mechanism explicitly unless you aim to improve the efficiency or precision of parameter estimates. Common imputation techniques, such as multiple imputation or maximum likelihood estimation, rely on the assumption of ignorability to produce unbiased parameter estimates. Practical Considerations for Ignorable Missingness Even though ignorable mechanisms simplify analysis, researchers must rigorously assess whether the missingness mechanism meets the MAR or MCAR criteria. Violations can lead to biased results, even if unintentionally overlooked. For example: A survey on income may assume MAR if missingness is associated with respondent age (observed variable) but not income itself (unobserved variable). However, if income directly influences nonresponse, the assumption of MAR is violated. 11.2.3.2 Non-Ignorable Missing Data Missing data is non-ignorable when: The missingness mechanism depends on the values of the missing data themselves or on unobserved variables. The missing data mechanism is related to the parameters of interest, resulting in bias if the mechanism is not modeled explicitly. This type of missingness (i.e., Missing Not at Random (MNAR) requires modeling the missing data mechanism directly to produce unbiased estimates. Characteristics of Non-Ignorable Missingness Dependence on Missing Values: The likelihood of missingness is associated with the missing values themselves. Example: In a study on health, individuals with more severe conditions are more likely to drop out, leading to an underrepresentation of the sickest individuals in the data. Bias in Complete Case Analysis: Analyses based solely on complete cases can lead to substantial bias. Example: In income surveys, if wealthier individuals are less likely to report their income, the estimated mean income will be systematically lower than the true population mean. Need for Explicit Modeling: To address MNAR, the analyst must model the missing data mechanism. This often involves specifying relationships between observed data, missing data, and the missingness process itself. 11.2.3.3 Implications of Non-Ignorable Missingness Non-ignorable mechanisms are often associated with sensitive or personal data: Examples: Individuals with lower education levels may omit their education information. Participants with controversial or stigmatized health conditions might opt out of surveys entirely. Impact on Policy and Decision-Making: Biases introduced by MNAR can have serious consequences for policymaking, such as underestimating the prevalence of poverty or mischaracterizing population health needs. By explicitly addressing non-ignorable missingness, researchers can mitigate biases and ensure that findings accurately reflect the underlying population. References "],["diagnosing-the-missing-data-mechanism.html", "11.3 Diagnosing the Missing Data Mechanism", " 11.3 Diagnosing the Missing Data Mechanism Understanding the mechanism behind missing data is critical to choosing the appropriate methods for handling it. The three main mechanisms for missing data are MCAR (Missing Completely at Random), MAR (Missing at Random), and MNAR (Missing Not at Random). This section discusses methods for diagnosing these mechanisms, including descriptive and inferential approaches. 11.3.1 Descriptive Methods 11.3.1.1 Visualizing Missing Data Patterns Visualization tools are essential for detecting patterns in missing data. Heatmaps and correlation plots can help identify systematic missingness and provide insights into the underlying mechanism. # Example: Visualizing missing data library(Amelia) missmap( airquality, main = &quot;Missing Data Heatmap&quot;, col = c(&quot;yellow&quot;, &quot;black&quot;), legend = TRUE ) Heatmaps: Highlight where missingness occurs in a dataset. Correlation Plots: Show relationships between missingness indicators of different variables. Exploring Univariate and Multivariate Missingness Univariate Analysis: Calculate the proportion of missing data for each variable. # Example: Proportion of missing values missing_proportions &lt;- colSums(is.na(airquality)) / nrow(airquality) print(missing_proportions) #&gt; Ozone Solar.R Wind Temp Month Day #&gt; 0.24183007 0.04575163 0.00000000 0.00000000 0.00000000 0.00000000 Multivariate Analysis: Examine whether missingness in one variable is related to others. This can be visualized using scatterplots of observed vs. missing values. # Example: Missingness correlation library(naniar) vis_miss(airquality) gg_miss_upset(airquality) # Displays a missingness upset plot 11.3.2 Statistical Tests for Missing Data Mechanisms 11.3.2.1 Diagnosing MCAR: Little’s Test Little’s test is a hypothesis test to determine if the missing data mechanism is MCAR. It tests whether the means of observed and missing data are significantly different. The null hypothesis is that the data are MCAR. \\[ \\chi^2 = \\sum_{i=1}^n \\frac{(O_i - E_i)^2}{E_i} \\] Where: \\(O_i\\)= Observed frequency \\(E_i\\)= Expected frequency under MCAR # Example: Little&#39;s test naniar::mcar_test(airquality) #&gt; # A tibble: 1 × 4 #&gt; statistic df p.value missing.patterns #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; #&gt; 1 35.1 14 0.00142 4 misty::na.test(airquality) #&gt; Little&#39;s MCAR Test #&gt; #&gt; n nIncomp nPattern chi2 df pval #&gt; 153 42 4 35.15 14 0.001 11.3.2.2 Diagnosing MCAR via Dummy Variables Creating a binary indicator for missingness allows you to test whether the presence of missing data is related to observed data. For instance: Create a dummy variable: 1 = Missing 0 = Observed Conduct a chi-square test or t-test: Chi-square: Compare proportions of missingness across groups. T-test: Compare means of (other) observed variables with missingness indicators. # Example: Chi-square test airquality$missing_var &lt;- as.factor(ifelse(is.na(airquality$Ozone), 1, 0)) # Across groups of months table(airquality$missing_var, airquality$Month) #&gt; #&gt; 5 6 7 8 9 #&gt; 0 26 9 26 26 29 #&gt; 1 5 21 5 5 1 chisq.test(table(airquality$missing_var, airquality$Month)) #&gt; #&gt; Pearson&#39;s Chi-squared test #&gt; #&gt; data: table(airquality$missing_var, airquality$Month) #&gt; X-squared = 44.751, df = 4, p-value = 4.48e-09 # Example: T-test (of other variable) t.test(Wind ~ missing_var, data = airquality) #&gt; #&gt; Welch Two Sample t-test #&gt; #&gt; data: Wind by missing_var #&gt; t = -0.60911, df = 63.646, p-value = 0.5446 #&gt; alternative hypothesis: true difference in means between group 0 and group 1 is not equal to 0 #&gt; 95 percent confidence interval: #&gt; -1.6893132 0.8999377 #&gt; sample estimates: #&gt; mean in group 0 mean in group 1 #&gt; 9.862069 10.256757 11.3.3 Assessing MAR and MNAR 11.3.3.1 Sensitivity Analysis Sensitivity analysis involves simulating different scenarios of missing data and assessing how the results change. For example, imputing missing values under different assumptions can provide insight into whether the data are MAR or MNAR. 11.3.3.2 Proxy Variables and External Data Using proxy variables or external data sources can help assess whether missingness depends on unobserved variables (MNAR). For example, in surveys, follow-ups with non-respondents can reveal systematic differences. 11.3.3.3 Practical Challenges in Distinguishing MAR from MNAR Distinguishing between Missing at Random (MAR) and Missing Not at Random (MNAR) is a critical and challenging task in data analysis. Properly identifying the nature of the missing data has significant implications for the choice of imputation strategies, model robustness, and the validity of conclusions. While statistical tests can sometimes aid in this determination, the process often relies heavily on domain knowledge, intuition, and exploratory analysis. Below, we discuss key considerations and examples that highlight these challenges: Sensitive Topics: Missing data related to sensitive or stigmatized topics, such as income, drug use, or health conditions, are often MNAR. For example, individuals with higher incomes might deliberately choose not to report their earnings due to privacy concerns. Similarly, participants in a health survey may avoid answering questions about smoking if they perceive social disapproval. In such cases, the probability of missingness is directly related to the unobserved value itself, making MNAR likely. Field-Specific Norms: Understanding norms and typical data collection practices in a specific field can provide insights into missingness patterns. For instance, in marketing surveys, respondents may skip questions about spending habits if they consider the questions intrusive. Prior research or historical data from the same domain can help infer whether missingness is more likely MAR (e.g., random skipping due to survey fatigue) or MNAR (e.g., deliberate omission by higher spenders). Analyzing Auxiliary Variables: Leveraging auxiliary variables—those correlated with the missing variable—can help infer the missingness mechanism. For example, if missing income data strongly correlates with employment status, this suggests a MAR mechanism, as the missingness depends on observed variables. However, if missingness persists even after accounting for observable predictors, MNAR might be at play. Experimental Design and Follow-Up: In longitudinal studies, dropout rates can signal MAR or MNAR patterns. For example, if dropouts occur disproportionately among participants reporting lower satisfaction in early surveys, this indicates an MNAR mechanism. Designing follow-up surveys to specifically investigate dropout reasons can clarify missingness patterns. Sensitivity Analysis: To account for uncertainty in the missingness mechanism, researchers can conduct sensitivity analyses by comparing results under different assumptions (e.g., imputing data using both MAR and MNAR approaches). This process helps to quantify the potential impact of misclassifying the missingness mechanism on study conclusions. Real-World Examples: In customer feedback surveys, higher ratings might be overrepresented due to non-response bias. Customers with negative experiences might be less likely to complete surveys, leading to an MNAR scenario. In financial reporting, missing audit data might correlate with companies in financial distress, a classic MNAR case where the missingness depends on unobserved financial health metrics. Summary MCAR: No pattern in missingness; use Little’s test or dummy variable analysis. MAR: Missingness related to observed data; requires modeling assumptions or proxy analysis. MNAR: Missingness depends on unobserved data; requires external validation or sensitivity analysis. "],["methods-for-handling-missing-data.html", "11.4 Methods for Handling Missing Data", " 11.4 Methods for Handling Missing Data 11.4.1 Basic Methods 11.4.1.1 Complete Case Analysis (Listwise Deletion) Listwise deletion retains only cases with complete data for all features, discarding rows with any missing values. Advantages: Universally applicable to various statistical tests (e.g., SEM, multilevel regression). When data are Missing Completely at Random (MCAR), parameter estimates and standard errors are unbiased. Under specific Missing at Random (MAR) conditions, such as when the probability of missing data depends only on independent variables, listwise deletion can still yield unbiased estimates. For instance, in the model \\(y = \\beta_{0} + \\beta_1X_1 + \\beta_2X_2 + \\epsilon\\), if missingness in \\(X_1\\) is independent of \\(y\\) but depends on \\(X_1\\) and \\(X_2\\), the estimates remain unbiased (Little 1992). This aligns with principles of stratified sampling, which does not bias estimates. In logistic regression, if missing data depend only on the dependent variable but not on independent variables, listwise deletion produces consistent slope estimates, though the intercept may be biased (Vach and Vach 1994). For regression analysis, listwise deletion is more robust than Maximum Likelihood (ML) or Multiple Imputation (MI) when the MAR assumption is violated. Disadvantages: Results in larger standard errors compared to advanced methods. If data are MAR but not MCAR, biased estimates can occur. In non-regression contexts, more sophisticated methods often outperform listwise deletion. 11.4.1.2 Available Case Analysis (Pairwise Deletion) Pairwise deletion calculates estimates using all available data for each pair of variables, without requiring complete cases. It is particularly suitable for methods like linear regression, factor analysis, and SEM, which rely on correlation or covariance matrices. Advantages: Under MCAR, pairwise deletion produces consistent and unbiased estimates in large samples. Compared to listwise deletion (Glasser 1964): When variable correlations are low, pairwise deletion provides more efficient estimates. When correlations are high, listwise deletion becomes more efficient. Disadvantages: Yields biased estimates under MAR conditions. In small samples, covariance matrices might not be positive definite, rendering coefficient estimation infeasible. Software implementation varies in how sample size is handled, potentially affecting standard errors. Note: Carefully review software documentation to understand how sample size is treated, as this influences standard error calculations. 11.4.1.3 Indicator Method (Dummy Variable Adjustment) Also known as the Missing Indicator Method, this approach introduces an additional variable to indicate missingness in the dataset. Implementation: Create an indicator variable: \\[ D = \\begin{cases} 1 &amp; \\text{if data on } X \\text{ are missing} \\\\ 0 &amp; \\text{otherwise} \\end{cases} \\] Modify the original variable to accommodate missingness: \\[ X^* = \\begin{cases} X &amp; \\text{if data are available} \\\\ c &amp; \\text{if data are missing} \\end{cases} \\] Note: A common choice for \\(c\\) is the mean of \\(X\\). Interpretation: The coefficient of \\(D\\) represents the difference in the expected value of \\(Y\\) between cases with missing data and those without. The coefficient of \\(X^*\\) reflects the effect of \\(X\\) on \\(Y\\) for cases with observed data. Disadvantages: Produces biased estimates of coefficients, even under MCAR conditions (Jones 1996). May lead to overinterpretation of the “missingness effect,” complicating model interpretation. 11.4.1.4 Advantages and Limitations of Basic Methods Method Advantages Disadvantages Listwise Deletion Simple and universally applicable; unbiased under MCAR; robust in certain MAR scenarios. Inefficient (larger standard errors); biased under MAR in many cases; discards potentially useful data. Pairwise Deletion Utilizes all available data; efficient under MCAR with low correlations; avoids discarding all cases. Biased under MAR; prone to non-positive-definite covariance matrices in small samples. Indicator Method Simple implementation; explicitly models missingness effect. Biased even under MCAR; complicates interpretation; may not reflect true underlying relationships. 11.4.2 Single Imputation Techniques Single imputation methods replace missing data with a single value, generating a complete dataset that can be analyzed using standard techniques. While convenient, single imputation generally underestimates variability and risks biasing results. 11.4.2.1 Deterministic Methods 11.4.2.1.1 Mean, Median, Mode Imputation This method replaces missing values with the mean, median, or mode of the observed data. Advantages: Simplicity and ease of implementation. Useful for quick exploratory data analysis. Disadvantages: Bias in Variances and Relationships: Mean imputation reduces variance and disrupts relationships among variables, leading to biased estimates of variances and covariances (Haitovsky 1968). Underestimated Standard Errors: Results in overly optimistic conclusions and increased risk of Type I errors. Dependency Structure Ignored: Particularly problematic in high-dimensional data, as it fails to capture dependencies among features. 11.4.2.1.2 Forward and Backward Filling (Time Series Contexts) Used in time series analysis, this method replaces missing values using the preceding (forward filling) or succeeding (backward filling) values. Advantages: Simple and preserves temporal ordering. Suitable for datasets where adjacent values are strongly correlated. Disadvantages: Biased if missingness spans long gaps or occurs systematically. Cannot capture trends or changes in the underlying process. 11.4.2.2 Statistical Prediction Models 11.4.2.2.1 Linear Regression Imputation Missing values in a variable are imputed based on a linear regression model using observed values of other variables. Advantages: Preserves relationships between variables. More sophisticated than mean or median imputation. Disadvantages: Assumes linear relationships, which may not hold in all datasets. Fails to capture variability, leading to downwardly biased standard errors. 11.4.2.2.2 Logistic Regression for Categorical Variables Similar to linear regression imputation but used for categorical variables. The missing category is predicted using a logistic regression model. Advantages: Useful for binary or multinomial categorical data. Preserves relationships with other variables. Disadvantages: Assumes the underlying logistic model is appropriate. Does not account for uncertainty in the imputed values. 11.4.2.3 Non-Parametric Methods 11.4.2.3.1 Hot Deck Imputation Hot Deck Imputation is a method of handling missing data where missing values are replaced with observed values from “donor” cases that are similar in other characteristics. This technique has been widely used in survey data, including by organizations like the U.S. Census Bureau, due to its flexibility and ability to maintain observed data distributions. Advantages of Hot Deck Imputation Retains observed data distributions: Since missing values are imputed using actual observed data, the overall distribution remains realistic. Flexible: This method is applicable to both categorical and continuous variables. Constrained imputations: Imputed values are always feasible, as they come from observed cases. Adds variability: By randomly selecting donors, this method introduces variability, which can aid in robust standard error estimation. Disadvantages of Hot Deck Imputation Sensitivity to similarity definitions: The quality of imputed values depends on the criteria used to define similarity between cases. Computational intensity: Identifying similar cases and randomly selecting donors can be computationally expensive, especially for large datasets. Subjectivity: Deciding how to define “similar” can introduce subjectivity or bias. Algorithm for Hot Deck Imputation Let \\(n_1\\) represent the number of cases with complete data on the variable \\(Y\\), and \\(n_0\\) represent the number of cases with missing data on \\(Y\\). The steps are as follows: From the \\(n_1\\) cases with complete data, take a random sample (with replacement) of \\(n_1\\) cases. From this sampled pool, take another random sample (with replacement) of size \\(n_0\\). Assign the values from the sampled \\(n_0\\) cases to the cases with missing data in \\(Y\\). Repeat this process for every variable in the dataset. For multiple imputation, repeat the above four steps multiple times to create multiple imputed datasets. Variations and Considerations Skipping Step 1: If Step 1 is skipped, the variability of imputed values is reduced. This approach might not fully account for the uncertainty in missing data, which can underestimate standard errors. Defining similarity: A major challenge in this method is deciding what constitutes “similarity” between cases. Common approaches include matching based on distance metrics (e.g., Euclidean distance) or grouping cases by strata or clusters. Practical Example The U.S. Census Bureau employs an approximate Bayesian bootstrap variation of Hot Deck Imputation. In this approach: Similar cases are identified based on shared characteristics or grouping variables. A randomly chosen value from a similar individual in the sample is used to replace the missing value. This method ensures imputed values are plausible while incorporating variability. Key Notes Good aspects: Imputed values are constrained to observed possibilities. Random selection introduces variability, helpful for multiple imputation scenarios. Challenges: Defining and operationalizing “similarity” remains a critical step in applying this method effectively. Below is an example code snippet illustrating Hot Deck Imputation in R: library(Hmisc) # Example dataset with missing values data &lt;- data.frame( ID = 1:10, Age = c(25, 30, NA, 40, NA, 50, 60, NA, 70, 80), Gender = c(&quot;M&quot;, &quot;F&quot;, &quot;F&quot;, &quot;M&quot;, &quot;M&quot;, &quot;F&quot;, &quot;M&quot;, &quot;F&quot;, &quot;M&quot;, &quot;F&quot;) ) # Perform Hot Deck Imputation using Hmisc::impute data$Age_imputed &lt;- impute(data$Age, &quot;random&quot;) # Display the imputed dataset print(data) #&gt; ID Age Gender Age_imputed #&gt; 1 1 25 M 25 #&gt; 2 2 30 F 30 #&gt; 3 3 NA F 25 #&gt; 4 4 40 M 40 #&gt; 5 5 NA M 70 #&gt; 6 6 50 F 50 #&gt; 7 7 60 M 60 #&gt; 8 8 NA F 25 #&gt; 9 9 70 M 70 #&gt; 10 10 80 F 80 This code randomly imputes missing values in the Age column based on observed data using the Hmisc package’s impute function. 11.4.2.3.2 Cold Deck Imputation Cold Deck Imputation is a systematic variant of Hot Deck Imputation where the donor pool is predefined. Instead of selecting donors dynamically from within the same dataset, Cold Deck Imputation relies on an external reference dataset, such as historical data or other high-quality external sources. Advantages of Cold Deck Imputation Utilizes high-quality external data: This method is particularly useful when reliable external reference datasets are available, allowing for accurate and consistent imputations. Consistency: If the same donor pool is used across multiple datasets, imputations remain consistent, which can be advantageous in longitudinal studies or standardized processes. Disadvantages of Cold Deck Imputation Lack of adaptability: External data may not adequately reflect the unique characteristics or variability of the current dataset. Potential for systematic bias: If the donor pool is significantly different from the target dataset, imputations may introduce bias. Reduces variability: Unlike Hot Deck Imputation, Cold Deck Imputation systematically selects values, which removes random variation. This can affect the estimation of standard errors and other inferential statistics. Key Characteristics Systematic Selection: Cold Deck Imputation selects donor values systematically based on predefined rules or matching criteria, rather than using random sampling. External Donor Pool: Donors are typically drawn from a separate dataset or historical records. Algorithm for Cold Deck Imputation Identify an external reference dataset or predefined donor pool. Define the matching criteria to find “similar” cases between the donor pool and the current dataset (e.g., based on covariates or stratification). Systematically assign values from the donor pool to missing values in the current dataset based on the matching criteria. Repeat the process for each variable with missing data. Practical Considerations Cold Deck Imputation works well when external data closely resemble the target dataset. However, when there are significant differences in distributions or relationships between variables, imputations may be biased or unrealistic. This method is less useful for datasets without access to reliable external reference data. Suppose we have a current dataset with missing values and a historical dataset with similar variables. The following example demonstrates how Cold Deck Imputation can be implemented: # Current dataset with missing values current_data &lt;- data.frame( ID = 1:5, Age = c(25, 30, NA, 45, NA), Gender = c(&quot;M&quot;, &quot;F&quot;, &quot;F&quot;, &quot;M&quot;, &quot;M&quot;) ) # External reference dataset (donor pool) reference_data &lt;- data.frame( Age = c(28, 35, 42, 50), Gender = c(&quot;M&quot;, &quot;F&quot;, &quot;F&quot;, &quot;M&quot;) ) # Perform Cold Deck Imputation library(dplyr) # Define a matching function to find closest donor impute_cold_deck &lt;- function(missing_row, reference_data) { # Filter donors with the same gender possible_donors &lt;- reference_data %&gt;% filter(Gender == missing_row$Gender) # Return the mean age of matching donors as an example of systematic imputation return(mean(possible_donors$Age, na.rm = TRUE)) } # Apply Cold Deck Imputation to the missing rows current_data &lt;- current_data %&gt;% rowwise() %&gt;% mutate( Age_imputed = ifelse( is.na(Age), impute_cold_deck(cur_data(), reference_data), Age ) ) # Display the imputed dataset print(current_data) #&gt; # A tibble: 5 × 4 #&gt; # Rowwise: #&gt; ID Age Gender Age_imputed #&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 1 25 M 25 #&gt; 2 2 30 F 30 #&gt; 3 3 NA F 38.8 #&gt; 4 4 45 M 45 #&gt; 5 5 NA M 38.8 Comparison to Hot Deck Imputation Feature Hot Deck Imputation Cold Deck Imputation Donor Pool Internal (within the dataset) External (predefined dataset) Selection Random Systematic Variability Retained Reduced Bias Potential Lower Higher (if donor pool differs) This method suits situations where external reference datasets are trusted and representative. However, careful consideration is required to ensure alignment between the donor pool and the target dataset to avoid systematic biases. 11.4.2.3.3 Random Draw from Observed Distribution This imputation method replaces missing values by randomly sampling from the observed distribution of the variable with missing data. It is a simple, non-parametric approach that retains the variability of the original data. Advantages Preserves variability: By randomly drawing values from the observed data, this method ensures that the imputed values reflect the inherent variability of the variable. Computational simplicity: The process is straightforward and does not require model fitting or complex calculations. Disadvantages Ignores relationships among variables: Since the imputation is based solely on the observed distribution of the variable, it does not consider relationships or dependencies with other variables. May not align with trends: Imputed values are random and may fail to align with patterns or trends present in the data, such as time series structures or interactions. Steps in Random Draw Imputation Identify the observed (non-missing) values of the variable. For each missing value, randomly sample one value from the observed distribution with or without replacement. Replace the missing value with the randomly sampled value. The following example demonstrates how to use random draw imputation to fill in missing values: # Example dataset with missing values set.seed(123) data &lt;- data.frame( ID = 1:10, Value = c(10, 20, NA, 30, 40, NA, 50, 60, NA, 70) ) # Perform random draw imputation random_draw_impute &lt;- function(data, variable) { observed_values &lt;- data[[variable]][!is.na(data[[variable]])] # Observed values data[[variable]][is.na(data[[variable]])] &lt;- sample(observed_values, sum(is.na(data[[variable]])), replace = TRUE) return(data) } # Apply the imputation imputed_data &lt;- random_draw_impute(data, variable = &quot;Value&quot;) # Display the imputed dataset print(imputed_data) #&gt; ID Value #&gt; 1 1 10 #&gt; 2 2 20 #&gt; 3 3 70 #&gt; 4 4 30 #&gt; 5 5 40 #&gt; 6 6 70 #&gt; 7 7 50 #&gt; 8 8 60 #&gt; 9 9 30 #&gt; 10 10 70 Considerations When to Use: This method is suitable for exploratory analysis or as a quick way to handle missing data in univariate contexts. Limitations: Random draws may result in values that do not fit well in the broader context of the dataset, especially in cases where the variable has strong relationships with others. Feature Random Draw from Observed Distribution Regression-Based Imputation Complexity Simple Moderate to High Preserves Variability Yes Limited in deterministic forms Considers Relationships No Yes Risk of Implausible Values Low (if observed values are plausible) Moderate to High This method is a quick and computationally efficient way to address missing data but is best complemented by more sophisticated methods when relationships between variables are important. 11.4.2.4 Semi-Parametric Methods 11.4.2.4.1 Predictive Mean Matching (PMM) Predictive Mean Matching (PMM) imputes missing values by finding observed values closest in predicted value (based on a regression model) to the missing data. The donor values are then used to fill in the gaps. Advantages: Maintains observed variability in the data. Ensures imputed values are realistic since they are drawn from observed data. Disadvantages: Requires a suitable predictive model. Computationally intensive for large datasets. Steps for PMM: Regress \\(Y\\) on \\(X\\) (matrix of covariates) for the \\(n_1\\) (non-missing cases) to estimate coefficients \\(\\hat{b}\\) and residual variance \\(s^2\\). Draw from the posterior predictive distribution of residual variance: \\[s^2_{[1]} = \\frac{(n_1-k)s^2}{\\chi^2},\\] where \\(\\chi^2\\) is a random draw from \\(\\chi^2_{n_1-k}\\). Randomly sample from the posterior distribution of \\(\\hat{b}\\): \\[b_{[1]} \\sim MVN(\\hat{b}, s^2_{[1]}(X&#39;X)^{-1}).\\] Standardize residuals for \\(n_1\\) cases: \\[e_i = \\frac{y_i - \\hat{b}x_i}{\\sqrt{s^2(1-k/n_1)}}.\\] Randomly draw a sample (with replacement) of \\(n_0\\) residuals from Step 4. Calculate imputed values for \\(n_0\\) missing cases: \\[y_i = b_{[1]}x_i + s_{[1]}e_i.\\] Repeat Steps 2–6 (except Step 4) to create multiple imputations. Notes: PMM can handle heteroskedasticity works for multiple variables, imputing each using all others as predictors. Example: Example from Statistics Globe set.seed(1) # Seed N &lt;- 100 # Sample size y &lt;- round(runif(N,-10, 10)) # Target variable Y x1 &lt;- y + round(runif(N, 0, 50)) # Auxiliary variable 1 x2 &lt;- round(y + 0.25 * x1 + rnorm(N,-3, 15)) # Auxiliary variable 2 x3 &lt;- round(0.1 * x1 + rpois(N, 2)) # Auxiliary variable 3 # (categorical variable) x4 &lt;- as.factor(round(0.02 * y + runif(N))) # Auxiliary variable 4 # Insert 20% missing data in Y y[rbinom(N, 1, 0.2) == 1] &lt;- NA data &lt;- data.frame(y, x1, x2, x3, x4) # Store data in dataset head(data) # First 6 rows of our data #&gt; y x1 x2 x3 x4 #&gt; 1 NA 28 -10 5 0 #&gt; 2 NA 15 -2 2 1 #&gt; 3 1 15 -12 6 1 #&gt; 4 8 58 22 10 1 #&gt; 5 NA 26 -12 7 0 #&gt; 6 NA 19 36 5 1 library(&quot;mice&quot;) # Load mice package ##### Impute data via predictive mean matching (single imputation)##### imp_single &lt;- mice(data, m = 1, method = &quot;pmm&quot;) # Impute missing values #&gt; #&gt; iter imp variable #&gt; 1 1 y #&gt; 2 1 y #&gt; 3 1 y #&gt; 4 1 y #&gt; 5 1 y data_imp_single &lt;- complete(imp_single) # Store imputed data # head(data_imp_single) # Since single imputation underestiamtes stnadard errors, # we use multiple imputaiton ##### Predictive mean matching (multiple imputation) ##### # Impute missing values multiple times imp_multi &lt;- mice(data, m = 5, method = &quot;pmm&quot;) #&gt; #&gt; iter imp variable #&gt; 1 1 y #&gt; 1 2 y #&gt; 1 3 y #&gt; 1 4 y #&gt; 1 5 y #&gt; 2 1 y #&gt; 2 2 y #&gt; 2 3 y #&gt; 2 4 y #&gt; 2 5 y #&gt; 3 1 y #&gt; 3 2 y #&gt; 3 3 y #&gt; 3 4 y #&gt; 3 5 y #&gt; 4 1 y #&gt; 4 2 y #&gt; 4 3 y #&gt; 4 4 y #&gt; 4 5 y #&gt; 5 1 y #&gt; 5 2 y #&gt; 5 3 y #&gt; 5 4 y #&gt; 5 5 y data_imp_multi_all &lt;- # Store multiply imputed data complete(imp_multi, &quot;repeated&quot;, include = TRUE) data_imp_multi &lt;- # Combine imputed Y and X1-X4 (for convenience) data.frame(data_imp_multi_all[, 1:6], data[, 2:5]) head(data_imp_multi) #&gt; y.0 y.1 y.2 y.3 y.4 y.5 x1 x2 x3 x4 #&gt; 1 NA -1 6 -1 -3 3 28 -10 5 0 #&gt; 2 NA -10 10 4 0 2 15 -2 2 1 #&gt; 3 1 1 1 1 1 1 15 -12 6 1 #&gt; 4 8 8 8 8 8 8 58 22 10 1 #&gt; 5 NA 0 -1 -6 2 0 26 -12 7 0 #&gt; 6 NA 4 0 3 3 3 19 36 5 1 Example from UCLA Statistical Consulting library(mice) library(VIM) library(lattice) library(ggplot2) ## set observations to NA anscombe &lt;- within(anscombe, { y1[1:3] &lt;- NA y4[3:5] &lt;- NA }) ## view head(anscombe) #&gt; x1 x2 x3 x4 y1 y2 y3 y4 #&gt; 1 10 10 10 8 NA 9.14 7.46 6.58 #&gt; 2 8 8 8 8 NA 8.14 6.77 5.76 #&gt; 3 13 13 13 8 NA 8.74 12.74 NA #&gt; 4 9 9 9 8 8.81 8.77 7.11 NA #&gt; 5 11 11 11 8 8.33 9.26 7.81 NA #&gt; 6 14 14 14 8 9.96 8.10 8.84 7.04 ## check missing data patterns md.pattern(anscombe) #&gt; x1 x2 x3 x4 y2 y3 y1 y4 #&gt; 6 1 1 1 1 1 1 1 1 0 #&gt; 2 1 1 1 1 1 1 1 0 1 #&gt; 2 1 1 1 1 1 1 0 1 1 #&gt; 1 1 1 1 1 1 1 0 0 2 #&gt; 0 0 0 0 0 0 3 3 6 ## Number of observations per patterns for all pairs of variables p &lt;- md.pairs(anscombe) p #&gt; $rr #&gt; x1 x2 x3 x4 y1 y2 y3 y4 #&gt; x1 11 11 11 11 8 11 11 8 #&gt; x2 11 11 11 11 8 11 11 8 #&gt; x3 11 11 11 11 8 11 11 8 #&gt; x4 11 11 11 11 8 11 11 8 #&gt; y1 8 8 8 8 8 8 8 6 #&gt; y2 11 11 11 11 8 11 11 8 #&gt; y3 11 11 11 11 8 11 11 8 #&gt; y4 8 8 8 8 6 8 8 8 #&gt; #&gt; $rm #&gt; x1 x2 x3 x4 y1 y2 y3 y4 #&gt; x1 0 0 0 0 3 0 0 3 #&gt; x2 0 0 0 0 3 0 0 3 #&gt; x3 0 0 0 0 3 0 0 3 #&gt; x4 0 0 0 0 3 0 0 3 #&gt; y1 0 0 0 0 0 0 0 2 #&gt; y2 0 0 0 0 3 0 0 3 #&gt; y3 0 0 0 0 3 0 0 3 #&gt; y4 0 0 0 0 2 0 0 0 #&gt; #&gt; $mr #&gt; x1 x2 x3 x4 y1 y2 y3 y4 #&gt; x1 0 0 0 0 0 0 0 0 #&gt; x2 0 0 0 0 0 0 0 0 #&gt; x3 0 0 0 0 0 0 0 0 #&gt; x4 0 0 0 0 0 0 0 0 #&gt; y1 3 3 3 3 0 3 3 2 #&gt; y2 0 0 0 0 0 0 0 0 #&gt; y3 0 0 0 0 0 0 0 0 #&gt; y4 3 3 3 3 2 3 3 0 #&gt; #&gt; $mm #&gt; x1 x2 x3 x4 y1 y2 y3 y4 #&gt; x1 0 0 0 0 0 0 0 0 #&gt; x2 0 0 0 0 0 0 0 0 #&gt; x3 0 0 0 0 0 0 0 0 #&gt; x4 0 0 0 0 0 0 0 0 #&gt; y1 0 0 0 0 3 0 0 1 #&gt; y2 0 0 0 0 0 0 0 0 #&gt; y3 0 0 0 0 0 0 0 0 #&gt; y4 0 0 0 0 1 0 0 3 rr = number of observations where both pairs of values are observed rm = the number of observations where both variables are missing values mr = the number of observations where the first variable’s value (e.g. the row variable) is observed and second (or column) variable is missing mm = the number of observations where the second variable’s value (e.g. the col variable) is observed and first (or row) variable is missing ## Margin plot of y1 and y4 marginplot(anscombe[c(5, 8)], col = c(&quot;blue&quot;, &quot;red&quot;, &quot;orange&quot;)) ## 5 imputations for all missing values imp1 &lt;- mice(anscombe, m = 5) #&gt; #&gt; iter imp variable #&gt; 1 1 y1 y4 #&gt; 1 2 y1 y4 #&gt; 1 3 y1 y4 #&gt; 1 4 y1 y4 #&gt; 1 5 y1 y4 #&gt; 2 1 y1 y4 #&gt; 2 2 y1 y4 #&gt; 2 3 y1 y4 #&gt; 2 4 y1 y4 #&gt; 2 5 y1 y4 #&gt; 3 1 y1 y4 #&gt; 3 2 y1 y4 #&gt; 3 3 y1 y4 #&gt; 3 4 y1 y4 #&gt; 3 5 y1 y4 #&gt; 4 1 y1 y4 #&gt; 4 2 y1 y4 #&gt; 4 3 y1 y4 #&gt; 4 4 y1 y4 #&gt; 4 5 y1 y4 #&gt; 5 1 y1 y4 #&gt; 5 2 y1 y4 #&gt; 5 3 y1 y4 #&gt; 5 4 y1 y4 #&gt; 5 5 y1 y4 ## linear regression for each imputed data set - 5 regression are run fitm &lt;- with(imp1, lm(y1 ~ y4 + x1)) summary(fitm) #&gt; # A tibble: 15 × 6 #&gt; term estimate std.error statistic p.value nobs #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; #&gt; 1 (Intercept) 7.33 2.44 3.01 0.0169 11 #&gt; 2 y4 -0.416 0.223 -1.86 0.0996 11 #&gt; 3 x1 0.371 0.141 2.63 0.0302 11 #&gt; 4 (Intercept) 7.27 2.90 2.51 0.0365 11 #&gt; 5 y4 -0.435 0.273 -1.59 0.150 11 #&gt; 6 x1 0.387 0.160 2.41 0.0422 11 #&gt; 7 (Intercept) 6.54 2.80 2.33 0.0479 11 #&gt; 8 y4 -0.322 0.255 -1.26 0.243 11 #&gt; 9 x1 0.362 0.156 2.32 0.0491 11 #&gt; 10 (Intercept) 5.93 3.08 1.92 0.0907 11 #&gt; 11 y4 -0.286 0.282 -1.02 0.339 11 #&gt; 12 x1 0.418 0.176 2.37 0.0451 11 #&gt; 13 (Intercept) 8.16 2.67 3.05 0.0158 11 #&gt; 14 y4 -0.489 0.251 -1.95 0.0867 11 #&gt; 15 x1 0.326 0.151 2.17 0.0622 11 ## pool coefficients and standard errors across all 5 regression models pool(fitm) #&gt; Class: mipo m = 5 #&gt; term m estimate ubar b t dfcom df #&gt; 1 (Intercept) 5 7.0445966 7.76794670 0.719350800 8.63116766 8 5.805314 #&gt; 2 y4 5 -0.3896685 0.06634920 0.006991497 0.07473900 8 5.706243 #&gt; 3 x1 5 0.3727865 0.02473847 0.001134293 0.02609962 8 6.178032 #&gt; riv lambda fmi #&gt; 1 0.11112601 0.10001207 0.3044313 #&gt; 2 0.12644909 0.11225460 0.3161877 #&gt; 3 0.05502168 0.05215218 0.2586992 ## output parameter estimates summary(pool(fitm)) #&gt; term estimate std.error statistic df p.value #&gt; 1 (Intercept) 7.0445966 2.9378849 2.397846 5.805314 0.05483678 #&gt; 2 y4 -0.3896685 0.2733843 -1.425350 5.706243 0.20638512 #&gt; 3 x1 0.3727865 0.1615538 2.307508 6.178032 0.05923999 11.4.2.4.2 Stochastic Imputation Stochastic Imputation is an enhancement of regression imputation that introduces randomness into the imputation process by adding a random residual to the predicted values from a regression model. This approach aims to retain the variability of the original data while reducing the bias introduced by deterministic regression imputation. Stochastic Imputation can be described as: \\[ \\text{Imputed Value} = \\text{Predicted Value (from regression)} + \\text{Random Residual} \\] This method is commonly used as a foundation for multiple imputation techniques. Advantages of Stochastic Imputation Retains all the benefits of regression imputation: Preserves relationships between variables in the dataset. Utilizes information from observed data to inform imputations. Introduces randomness: Adds variability by including a random residual term, making imputed values more realistic and better representing the uncertainty of missing data. Supports multiple imputation: By generating different random residuals for each iteration, it facilitates the creation of multiple plausible datasets for robust statistical analysis. Disadvantages of Stochastic Imputation Implausible values: Depending on the random residuals, imputed values may fall outside the plausible range (e.g., negative values for variables like age or income). Cannot handle heteroskedasticity: If the data exhibit heteroskedasticity (i.e., non-constant variance of residuals), the randomness added by stochastic imputation may not accurately reflect the underlying variability. Steps in Stochastic Imputation Fit a regression model using cases with complete data for the variable with missing values. Predict missing values using the fitted model. Generate random residuals based on the distribution of residuals from the regression model. Add the random residuals to the predicted values to impute missing values. # Example dataset with missing values set.seed(123) data &lt;- data.frame( X = rnorm(10, mean = 50, sd = 10), Y = c(100, 105, 110, NA, 120, NA, 130, 135, 140, NA) ) # Perform stochastic imputation stochastic_impute &lt;- function(data, predictor, target) { # Subset data with complete cases complete_data &lt;- data[!is.na(data[[target]]), ] # Fit a regression model model &lt;- lm(as.formula(paste(target, &quot;~&quot;, predictor)), data = complete_data) # Predict missing values missing_data &lt;- data[is.na(data[[target]]), ] predictions &lt;- predict(model, newdata = missing_data) # Add random residuals residual_sd &lt;- sd(model$residuals, na.rm = TRUE) stochastic_values &lt;- predictions + rnorm(length(predictions), mean = 0, sd = residual_sd) # Impute missing values data[is.na(data[[target]]), target] &lt;- stochastic_values return(data) } # Apply stochastic imputation imputed_data &lt;- stochastic_impute(data, predictor = &quot;X&quot;, target = &quot;Y&quot;) # Display the imputed dataset print(imputed_data) Notes Multiple Imputation: Most multiple imputation methods are extensions of stochastic regression imputation. By repeating the imputation process with different random seeds, multiple datasets can be generated to account for uncertainty in the imputed values. Dealing with Implausible Values: Additional constraints or transformations (e.g., truncating imputed values to a plausible range) may be necessary to address the issue of implausible values. Comparison to Deterministic Regression Imputation Feature Deterministic Regression Imputation Stochastic Imputation Randomness None Adds random residuals Preserves Variability No Yes Use in Multiple Imputation Limited Well-suited Bias Potential Higher Lower # Income data set.seed(1) # Set seed N &lt;- 1000 # Sample size income &lt;- round(rnorm(N, 0, 500)) # Create some synthetic income data income[income &lt; 0] &lt;- income[income &lt; 0] * (-1) x1 &lt;- income + rnorm(N, 1000, 1500) # Auxiliary variables x2 &lt;- income + rnorm(N,-5000, 2000) # Create 10% missingness in income income[rbinom(N, 1, 0.1) == 1] &lt;- NA data_inc_miss &lt;- data.frame(income, x1, x2) Single stochastic regression imputation imp_inc_sri &lt;- mice(data_inc_miss, method = &quot;norm.nob&quot;, m = 1) #&gt; #&gt; iter imp variable #&gt; 1 1 income #&gt; 2 1 income #&gt; 3 1 income #&gt; 4 1 income #&gt; 5 1 income data_inc_sri &lt;- complete(imp_inc_sri) Single predictive mean matching imp_inc_pmm &lt;- mice(data_inc_miss, method = &quot;pmm&quot;, m = 1) #&gt; #&gt; iter imp variable #&gt; 1 1 income #&gt; 2 1 income #&gt; 3 1 income #&gt; 4 1 income #&gt; 5 1 income data_inc_pmm &lt;- complete(imp_inc_pmm) Stochastic regression imputation contains negative values data_inc_sri$income[data_inc_sri$income &lt; 0] #&gt; [1] -23.85404 -58.37790 -61.86396 -57.47909 -21.29221 -73.26549 #&gt; [7] -61.76194 -42.45942 -351.02991 -317.69090 # No values below 0 data_inc_pmm$income[data_inc_pmm$income &lt; 0] #&gt; numeric(0) Evidence for heteroskadastic data # Heteroscedastic data set.seed(1) # Set seed N &lt;- 1:1000 # Sample size a &lt;- 0 b &lt;- 1 sigma2 &lt;- N^2 eps &lt;- rnorm(N, mean = 0, sd = sqrt(sigma2)) y &lt;- a + b * N + eps # Heteroscedastic variable x &lt;- 30 * N + rnorm(N[length(N)], 1000, 200) # Correlated variable y[rbinom(N[length(N)], 1, 0.3) == 1] &lt;- NA # 30% missing data_het_miss &lt;- data.frame(y, x) Single stochastic regression imputation imp_het_sri &lt;- mice(data_het_miss, method = &quot;norm.nob&quot;, m = 1) #&gt; #&gt; iter imp variable #&gt; 1 1 y #&gt; 2 1 y #&gt; 3 1 y #&gt; 4 1 y #&gt; 5 1 y data_het_sri &lt;- complete(imp_het_sri) Single predictive mean matching imp_het_pmm &lt;- mice(data_het_miss, method = &quot;pmm&quot;, m = 1) #&gt; #&gt; iter imp variable #&gt; 1 1 y #&gt; 2 1 y #&gt; 3 1 y #&gt; 4 1 y #&gt; 5 1 y data_het_pmm &lt;- complete(imp_het_pmm) Comparison between predictive mean matching and stochastic regression imputation par(mfrow = c(1, 2)) # Both plots in one graphic # Plot of observed values plot(x[!is.na(data_het_sri$y)], data_het_sri$y[!is.na(data_het_sri$y)], main = &quot;&quot;, xlab = &quot;X&quot;, ylab = &quot;Y&quot;) # Plot of missing values points(x[is.na(y)], data_het_sri$y[is.na(y)], col = &quot;red&quot;) # Title of plot title(&quot;Stochastic Regression Imputation&quot;, line = 0.5) # Regression line abline(lm(y ~ x, data_het_sri), col = &quot;#1b98e0&quot;, lwd = 2.5) # Legend legend( &quot;topleft&quot;, c(&quot;Observed Values&quot;, &quot;Imputed Values&quot;, &quot;Regression Y ~ X&quot;), pch = c(1, 1, NA), lty = c(NA, NA, 1), col = c(&quot;black&quot;, &quot;red&quot;, &quot;#1b98e0&quot;) ) # Plot of observed values plot(x[!is.na(data_het_pmm$y)], data_het_pmm$y[!is.na(data_het_pmm$y)], main = &quot;&quot;, xlab = &quot;X&quot;, ylab = &quot;Y&quot;) # Plot of missing values points(x[is.na(y)], data_het_pmm$y[is.na(y)], col = &quot;red&quot;) # Title of plot title(&quot;Predictive Mean Matching&quot;, line = 0.5) abline(lm(y ~ x, data_het_pmm), col = &quot;#1b98e0&quot;, lwd = 2.5) # Legend legend( &quot;topleft&quot;, c(&quot;Observed Values&quot;, &quot;Imputed Values&quot;, &quot;Regression Y ~ X&quot;), pch = c(1, 1, NA), lty = c(NA, NA, 1), col = c(&quot;black&quot;, &quot;red&quot;, &quot;#1b98e0&quot;) ) mtext( &quot;Imputation of Heteroscedastic Data&quot;, # Main title of plot side = 3, line = -1.5, outer = TRUE, cex = 2 ) 11.4.2.5 Matrix Completion Matrix completion is a method used to impute missing data in a feature matrix while accounting for dependence between features. This approach leverages principal components to approximate the data matrix, a process referred to as matrix completion (James et al. 2013, Sec 12.3). Problem Setup Consider an \\(n \\times p\\) feature matrix \\(\\mathbf{X}\\), where the element \\(x_{ij}\\) represents the value for the \\(i\\)th observation and \\(j\\)th feature. Some elements of \\(\\mathbf{X}\\) are missing, and we aim to impute these missing values. Similar to the process described in 22.2, the matrix \\(\\mathbf{X}\\) can be approximated using its leading principal components. Specifically, we consider \\(M\\) principal components that minimize the following objective: \\[ \\underset{\\mathbf{A} \\in \\mathbb{R}^{n \\times M}, \\mathbf{B} \\in \\mathbb{R}^{p \\times M}}{\\operatorname{min}} \\left\\{ \\sum_{(i,j) \\in \\mathcal{O}} (x_{ij} - \\sum_{m=1}^M a_{im}b_{jm})^2 \\right\\} \\] where \\(\\mathcal{O}\\) is the set of observed indices \\((i,j)\\), which is a subset of the total \\(n \\times p\\) pairs. Here: - \\(\\mathbf{A}\\) is an \\(n \\times M\\) matrix of principal component scores. - \\(\\mathbf{B}\\) is a \\(p \\times M\\) matrix of principal component loadings. Imputation of Missing Values After solving the minimization problem: Missing observations \\(x_{ij}\\) can be imputed using the formula: \\[ \\hat{x}_{ij} = \\sum_{m=1}^M \\hat{a}_{im}\\hat{b}_{jm} \\] where \\(\\hat{a}_{im}\\) and \\(\\hat{b}_{jm}\\) are the estimated elements of \\(\\mathbf{A}\\) and \\(\\mathbf{B}\\), respectively. The leading \\(M\\) principal component scores and loadings can be approximately recovered, as is done in complete data scenarios. Iterative Algorithm The eigen-decomposition used in standard principal component analysis is not applicable here because of missing values. Instead, an iterative algorithm, as described in (James et al. 2013, Alg 12.1), is employed: Initialize the Complete Matrix: Construct an initial complete matrix \\(\\tilde{\\mathbf{X}}\\) of dimension \\(n \\times p\\) where: \\[ \\tilde{x}_{ij} = \\begin{cases} x_{ij} &amp; \\text{if } (i,j) \\in \\mathcal{O} \\\\ \\bar{x}_j &amp; \\text{if } (i,j) \\notin \\mathcal{O} \\end{cases} \\] Here, \\(\\bar{x}_j\\) is the mean of the observed values for the \\(j\\)th variable in the incomplete data matrix \\(\\mathbf{X}\\). \\(\\mathcal{O}\\) indexes the observed elements of \\(\\mathbf{X}\\). Iterative Steps: Repeat the following steps until convergence: Minimize the Objective: Solve the problem: \\[ \\underset{\\mathbf{A} \\in R^{n \\times M}, \\mathbf{B} \\in R^{p \\times M}}{\\operatorname{min}} \\left\\{ \\sum_{(i,j) \\in \\mathcal{O}} (x_{ij} - \\sum_{m=1}^M a_{im}b_{jm})^2 \\right\\} \\] by computing the principal components of the current \\(\\tilde{\\mathbf{X}}\\). Update Missing Values: For each missing element \\((i,j) \\notin \\mathcal{O}\\), set: \\[ \\tilde{x}_{ij} \\leftarrow \\sum_{m=1}^M \\hat{a}_{im}\\hat{b}_{jm} \\] Recalculate the Objective: Compute the objective: \\[ \\sum_{(i,j) \\in \\mathcal{O}} (x_{ij} - \\sum_{m=1}^M \\hat{a}_{im} \\hat{b}_{jm})^2 \\] Return Imputed Values: Once the algorithm converges, return the estimated missing entries \\(\\tilde{x}_{ij}\\) for \\((i,j) \\notin \\mathcal{O}\\). Key Considerations This approach assumes that the missing data are missing at random (MAR). Convergence criteria for the iterative algorithm often involve achieving a threshold for the change in the objective function or limiting the number of iterations. The choice of \\(M\\), the number of principal components, can be guided by cross-validation or other model selection techniques. 11.4.2.6 Comparison of Single Imputation Techniques Method Advantages Disadvantages Mean, Median, Mode Imputation Simple, quick implementation. Biased variances and covariances; ignores relationships among variables. Forward/Backward Filling Preserves temporal ordering. Biased for systematic gaps or long missing sequences. Linear Regression Imputation Preserves relationships among variables. Fails to capture variability; assumes linearity. Logistic Regression Imputation Handles categorical variables well. Requires appropriate model assumptions; ignores variability. PMM Maintains variability; imputes realistic values. Computationally intensive; requires a good predictive model. Hot Deck Imputation Flexible; maintains data distribution. Sensitive to donor selection; computationally demanding. Cold Deck Imputation Consistent across datasets with predefined donor pools. Risk of bias if donor data are not representative. Random Draw from Observed Simple; retains variability in data. Does not preserve relationships among variables; random imputation may distort trends. Matrix Completion Captures dependencies; imputes structurally consistent values. Computationally intensive; assumes principal components capture data relationships. Single imputation techniques are straightforward and accessible, but they often underestimate uncertainty and fail to fully leverage relationships among variables. These limitations make them less ideal for rigorous analyses compared to multiple imputation or model-based approaches. 11.4.3 Machine Learning and Modern Approaches 11.4.3.1 Tree-Based Methods 11.4.3.1.1 Random Forest Imputation (missForest) Random Forest Imputation uses an iterative process where a random forest model predicts missing values for one variable at a time, treating other variables as predictors. This process continues until convergence. Mathematical Framework: For a variable \\(X_j\\) with missing values, treat \\(X_j\\) as the response variable. Fit a random forest model \\(f(X_{-j})\\) using the other variables \\(X_{-j}\\) as predictors. Predict missing values \\(\\hat{X}_j = f(X_{-j})\\). Repeat for all variables with missing data until imputed values stabilize. Advantages: Captures complex interactions and non-linearities. Handles mixed data types seamlessly. Limitations: Computationally intensive for large datasets. Sensitive to the quality of data relationships. 11.4.3.1.2 Gradient Boosting Machines (GBM) Gradient Boosting Machines iteratively build models to minimize loss functions. For imputation, missing values are treated as a target variable to be predicted. Mathematical Framework: The GBM algorithm minimizes the loss function: \\[ L = \\sum_{i=1}^n \\ell(y_i, f(x_i)), \\] where \\(\\ell\\) is the loss function (e.g., mean squared error), \\(y_i\\) are observed values, and \\(f(x_i)\\) are predictions. Missing values are treated as the \\(y_i\\) and predicted iteratively. Advantages: Highly accurate predictions. Captures variable importance. Limitations: Overfitting risks. Requires careful parameter tuning. 11.4.3.2 Neural Network-Based Imputation 11.4.3.2.1 Autoencoders Autoencoders are unsupervised neural networks that compress and reconstruct data. Missing values are estimated during reconstruction. Mathematical Framework: An autoencoder consists of: An encoder function: \\(h = g(Wx + b)\\), which compresses the input \\(x\\). A decoder function: \\(\\hat{x} = g&#39;(W&#39;h + b&#39;)\\), which reconstructs the data. The network minimizes the reconstruction loss: \\[ L = \\sum_{i=1}^n (x_i - \\hat{x}_i)^2. \\] Advantages: Handles high-dimensional and non-linear data. Unsupervised learning. Limitations: Computationally demanding. Requires large datasets for effective training. 11.4.3.2.2 Generative Adversarial Networks (GANs) for Data Imputation GANs consist of a generator and a discriminator. For imputation, the generator fills in missing values, and the discriminator evaluates the quality of the imputations. Mathematical Framework: GAN training involves optimizing: \\[ \\min_G \\max_D \\mathbb{E}[\\log D(x)] + \\mathbb{E}[\\log(1 - D(G(z)))]. \\] \\(D(x)\\): Discriminator’s probability that \\(x\\) is real. \\(G(z)\\): Generator’s output for latent input \\(z\\). Advantages: Realistic imputations that reflect underlying distributions. Handles complex data types. Limitations: Difficult to train and tune. Computationally intensive. 11.4.3.3 Matrix Factorization and Matrix Completion 11.4.3.3.1 Singular Value Decomposition (SVD) SVD decomposes a matrix \\(A\\) into three matrices: \\[ A = U\\Sigma V^T, \\] where \\(U\\) and \\(V\\) are orthogonal matrices, and \\(\\Sigma\\) contains singular values. Missing values are estimated by reconstructing \\(A\\) using a low-rank approximation: \\[ \\hat{A} = U_k \\Sigma_k V_k^T. \\] Advantages: Captures global patterns. Efficient for structured data. Limitations: Assumes linear relationships. Sensitive to sparsity. 11.4.3.3.2 Collaborative Filtering Approaches Collaborative filtering uses similarities between rows (users) or columns (items) to impute missing data. For instance, the value of \\(X_{ij}\\) is predicted as: \\[ \\hat{X}_{ij} = \\frac{\\sum_{k \\in N(i)} w_{ik} X_{kj}}{\\sum_{k \\in N(i)} w_{ik}}, \\] where \\(w_{ik}\\) represents similarity weights and \\(N(i)\\) is the set of neighbors. 11.4.3.4 K-Nearest Neighbor (KNN) Imputation KNN identifies the \\(k\\) nearest observations based on a distance metric and imputes missing values using a weighted average (continuous variables) or mode (categorical variables). Mathematical Framework: For a missing value \\(x\\), its imputed value is: \\[ \\hat{x} = \\frac{\\sum_{i=1}^k w_i x_i}{\\sum_{i=1}^k w_i}, \\] where \\(w_i = \\frac{1}{d(x, x_i)}\\) and \\(d(x, x_i)\\) is a distance metric (e.g., Euclidean or Manhattan). Advantages: Simple and interpretable. Non-parametric. Limitations: Computationally expensive for large datasets. 11.4.3.5 Hybrid Methods Hybrid methods combine statistical and machine learning approaches. For example, mean imputation followed by fine-tuning with machine learning models. These methods aim to leverage the strengths of multiple techniques. 11.4.3.6 Summary Table Method Advantages Limitations Applications Random Forest (missForest) Handles mixed data types, captures interactions Computationally intensive Mixed data types Gradient Boosting Machines High accuracy, feature importance Sensitive to parameters Predictive tasks Autoencoders Handles high-dimensional, non-linear data Computationally expensive Complex datasets GANs Realistic imputations, complex distributions Difficult to train, resource-intensive Healthcare, finance SVD Captures global patterns, efficient Assumes linear relationships Recommendation systems Collaborative Filtering Intuitive for user-item data Struggles with sparse or new data Recommender systems KNN Imputation Simple, interpretable Computationally intensive, sensitive to k General-purpose Hybrid Methods Combines multiple strengths Complexity in design Flexible 11.4.4 Multiple Imputation Multiple Imputation (MI) is a statistical technique for handling missing data by creating several plausible datasets through imputation, analyzing each dataset separately, and then combining the results to account for uncertainty in the imputations. MI operates under the assumption that missing data is either Missing Completely at Random (MCAR) or Missing at Random (MAR). Unlike Single Imputation Techniques, MI reflects the uncertainty inherent in the missing data by introducing variability in the imputed values. It avoids biases introduced by ad hoc methods and produces more reliable statistical inferences. The three fundamental steps in MI are: Imputation: Replace missing values with a set of plausible values to create multiple “completed” datasets. Analysis: Perform the desired statistical analysis on each imputed dataset. Combination: Combine the results using rules to account for within- and between-imputation variability. 11.4.4.1 Why Multiple Imputation is Important Imputed values are estimates and inherently include random error. However, when these estimates are treated as exact values in subsequent analysis, the software may overlook this additional error. This oversight results in underestimated standard errors and overly small p-values, leading to misleading conclusions. Multiple imputation addresses this issue by generating multiple estimates for each missing value. These estimates differ slightly due to their random component, which reintroduces variation. This variation helps the software incorporate the uncertainty of imputed values, resulting in: Unbiased parameter estimates Accurate standard errors Improved p-values Multiple imputation was a significant breakthrough in statistics approximately 20 years ago. It provides solutions for many missing data issues (though not all) and, when applied correctly, leads to reliable parameter estimates. If the proportion of missing data is very small (e.g., 2-3%), the choice of imputation method is less critical. 11.4.4.2 Goals of Multiple Imputation The primary goals of any missing data technique, including multiple imputation, are: Unbiased parameter estimates: Ensuring accurate regression coefficients, group means, odds ratios, etc. Accurate standard errors: This leads to reliable p-values and appropriate statistical inferences. Adequate power: To detect meaningful and significant parameter values. 11.4.4.3 Overview of Rubin’s Framework Rubin’s Framework provides the theoretical foundation for MI. It uses a Bayesian model-based approach for generating imputations and a frequentist approach for evaluating the results. The central goals of Rubin’s framework are to ensure that imputations: Retain the statistical relationships present in the data. Reflect the uncertainty about the true values of the missing data. Under Rubin’s framework, MI offers the following advantages: Generalizability: Unlike Maximum Likelihood Estimation (MLE), MI can be applied to a wide range of models. Statistical Properties: When data is MAR or MCAR, MI estimates are consistent, asymptotically normal, and efficient. Rubin also emphasized the importance of using multiple imputations, as single imputations fail to account for variability in the imputed values, leading to underestimated standard errors and overly optimistic test statistics. 11.4.4.4 Multivariate Imputation via Chained Equations (MICE) Multivariate Imputation via Chained Equations (MICE) is a widely used algorithm for implementing MI, particularly in datasets with mixed variable types. The steps of MICE include: Initialization: Replace missing values with initial guesses, such as the mean or median of the observed data. Iterative Imputation: For each variable with missing values, regress it on all other variables (or a subset of relevant predictors). Use the regression model to predict missing values, adding a random error term drawn from the residual distribution. Convergence: Repeat the imputation process until parameter estimates stabilize. MICE offers flexibility in specifying regression models for each variable, accommodating continuous, categorical, and binary data. 11.4.4.5 Bayesian Ridge Regression for Imputation Bayesian ridge regression is an advanced imputation method that incorporates prior distributions on the regression coefficients, making it particularly useful when: Predictors are highly correlated. Sample sizes are small. Missingness is substantial. This method treats the regression coefficients as random variables and samples from their posterior distribution, introducing variability into the imputation process. Bayesian ridge regression is more computationally intensive than simpler methods like MICE but offers greater robustness. 11.4.4.6 Combining Results from MI (Rubin’s Rules) Once multiple datasets are imputed and analyzed, Rubin’s Rules are used to combine the results. The goal is to properly account for the uncertainty introduced by missing data. For a parameter of interest \\(\\theta\\): Estimate Combination: \\[ \\bar{\\theta} = \\frac{1}{M} \\sum_{m=1}^M \\theta_m \\] where \\(\\theta_m\\) is the estimate from the \\(m\\)th imputed dataset, and \\(M\\) is the number of imputations. Variance Combination: \\[ T = \\bar{W} + \\left(1 + \\frac{1}{M}\\right) B \\] where: \\(\\bar{W}\\) is the average within-imputation variance. \\(B\\) is the between-imputation variance: \\[ B = \\frac{1}{M-1} \\sum_{m=1}^M (\\theta_m - \\bar{\\theta})^2 \\] These formulas adjust the final variance to reflect uncertainty both within and across imputations. 11.4.4.6.1 Challenges Stochastic Variability: MI results vary slightly between runs due to its reliance on random draws. To ensure reproducibility, always set a random seed. Convergence: Iterative algorithms like MICE may struggle to converge, especially with high proportions of missing data. Assumption of MAR: MI assumes that missing data is MAR. If data is Missing Not at Random (MNAR), MI can produce biased results. 11.4.4.6.2 Best Practices Algorithm Selection: Use Multiple Imputation by Chained Equations (MICE) for datasets with mixed data types or when relationships between variables are complex. Apply Bayesian Ridge Regression for small datasets or when predictors are highly correlated. Diagnostic Checks: Evaluate the quality of imputations and assess convergence using trace plots or diagnostic statistics to ensure reliable results. Data Transformations: For skewed or proportion data, consider applying log or logit transformations before imputation and inverse-transforming afterward to preserve the data’s original scale. Handling Non-Linear Relationships: For non-linear relationships or interactions, stratify imputations by the levels of the categorical variable involved to ensure accurate estimates. Number of Imputations: Use at least 20 imputations for small datasets or datasets with high missingness. This ensures robust and reliable results in downstream analyses. Avoid Rounding Imputations for Dummy Variables: Many imputation methods (e.g., Markov Chain Monte Carlo [MCMC]) assume normality, even for dummy variables. While it was historically recommended to round imputed values to 0 or 1 for binary variables, research shows that this introduces bias in parameter estimates. Instead, leave imputed values as fractional, even though this may seem counter-intuitive. Do Not Transform Skewed Variables Before Imputation: Transforming variables to meet normality assumptions before imputation can distort their relationships with other variables, leading to biased imputations and possibly introducing outliers. It is better to directly impute the skewed variable. Use More Imputations: Traditional advice suggests 5–10 imputations are sufficient for unbiased estimates, but inconsistencies may arise in repeated analyses. [@Bodner_2008] suggests using a number of imputations equal to the percentage of missing data. As additional imputations generally do not significantly increase the computational workload, using more imputations is a prudent choice. Create Multiplicative Terms Before Imputation: When your model includes interaction or quadratic terms, generate these terms before imputing missing values. Imputing first and then generating these terms can introduce bias in their regression parameters, as highlighted by [@von_Hippel_2009]. References "],["evaluation-of-imputation-methods.html", "11.5 Evaluation of Imputation Methods", " 11.5 Evaluation of Imputation Methods 11.5.1 Statistical Metrics for Assessing Imputation Quality To evaluate the quality of imputed data, several statistical metrics are commonly used. These metrics compare the imputed values to the observed values (in cases where missingness is simulated or artificially introduced) or assess the overall impact of imputation on the quality of subsequent analyses. Key metrics include: Root Mean Squared Error (RMSE): RMSE is calculated as: \\[ \\text{RMSE} = \\sqrt{\\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2} \\] It measures the average magnitude of errors between the true and imputed values. Lower RMSE indicates better imputation accuracy. Mean Absolute Error (MAE): MAE measures the average absolute difference between observed and imputed values: \\[ \\text{MAE} = \\frac{1}{n} \\sum_{i=1}^{n} |y_i - \\hat{y}_i| \\] MAE provides a straightforward assessment of imputation performance and is less sensitive to outliers than RMSE. Log-Likelihood and Deviance Measures: Log-likelihood can be used to evaluate how well the imputation model fits the data. Deviance measures, based on likelihood comparisons, assess the relative goodness of fit of imputation models. These are particularly useful in evaluating methods like maximum likelihood estimation. In practice, these metrics may be combined with graphical methods such as density plots and residual analysis to understand imputation performance more thoroughly. 11.5.2 Bias-Variance Tradeoff in Imputation Imputation methods must balance bias and variance to achieve reliable results. Simpler methods, such as mean or mode imputation, often lead to biased parameter estimates, particularly if the missingness mechanism is non-random. These methods underestimate variability, shrinking standard errors and potentially leading to overconfidence in statistical inferences. Conversely, advanced methods like Multiple Imputation or Full Information Maximum Likelihood (FIML) typically yield unbiased estimates with appropriately calibrated variances. However, these methods may increase computational complexity and require careful tuning of assumptions and parameters. The tradeoff is summarized as follows: High Bias, Low Variance: Simpler methods (e.g., single imputation, mean imputation). Low Bias, Moderate Variance: Advanced methods (e.g., MI, FIML, Bayesian methods). 11.5.3 Sensitivity Analysis Sensitivity analysis is crucial to assess the robustness of imputation methods under varying assumptions. Two primary areas of focus include: Assessing Robustness to Assumptions: Imputation models often rely on assumptions about the missingness mechanism (See Definition and Classification of Missing Data). Sensitivity analysis involves testing how results vary when these assumptions are slightly relaxed or modified. Impact on Downstream Analysis: The quality of imputation should also be evaluated based on its influence on downstream analyses (Objectives of Imputation). For instance: Does the imputation affect causal inference in regression models? Are the conclusions from hypothesis testing or predictive modeling robust to the imputation technique? 11.5.4 Validation Using Simulated Data and Real-World Case Studies Validation of imputation methods is best performed through a combination of simulated data and real-world examples: Simulated Data: - Create datasets with known missingness patterns and true values. - Apply various imputation methods and assess their performance using RMSE, MAE, and other metrics. Real-World Case Studies: Use datasets from actual studies, such as customer transaction data in marketing or financial data in portfolio analysis. Evaluate the impact of imputation on actionable outcomes (e.g., market segmentation, risk assessment). Combining these approaches ensures that methods generalize well across different contexts and data structures. "],["criteria-for-choosing-an-effective-approach.html", "11.6 Criteria for Choosing an Effective Approach", " 11.6 Criteria for Choosing an Effective Approach Choosing an appropriate imputation method depends on the following criteria: Unbiased Parameter Estimates: The technique should ensure that key estimates, such as means, variances, and regression coefficients, are unbiased, particularly in the presence of MAR or MNAR data. Adequate Power: The method should preserve statistical power, enabling robust hypothesis testing and model estimation. This ensures that important effects are not missed due to inflated type II error. Accurate Standard Errors: Accurate estimation of standard errors is critical for reliable p-values and confidence intervals. Methods like single imputation often underestimate standard errors, leading to overconfident conclusions. Preferred Methods: Multiple Imputation and Full Information Maximum Likelihood Multiple Imputation (MI): MI replaces missing values with multiple plausible values drawn from a predictive distribution. It generates multiple complete datasets, analyzes each dataset, and combines the results. Pros: Handles uncertainty well, provides valid standard errors, and is robust under MAR. Cons: Computationally intensive, sensitive to model mis-specification. Full Information Maximum Likelihood (FIML): FIML uses all available data to estimate parameters directly, avoiding the need to impute missing values explicitly. Pros: Efficient, unbiased under MAR, and computationally elegant. Cons: Requires correctly specified models and may be sensitive to MNAR data. Methods to Avoid Single Imputation (e.g., Mean, Mode): Leads to biased estimates and underestimates variability. Listwise Deletion: Discards rows with missing data, reducing sample size and potentially introducing bias if the data is not MCAR. Practical Considerations Computational efficiency and ease of implementation. Compatibility with downstream analysis methods. Alignment with the data’s missingness mechanism. "],["challenges-and-ethical-considerations.html", "11.7 Challenges and Ethical Considerations", " 11.7 Challenges and Ethical Considerations 11.7.1 Challenges in High-Dimensional Data High-dimensional data, where the number of variables exceeds the number of observations, poses unique challenges for missing data analysis. Curse of Dimensionality: Standard imputation methods, such as mean or regression imputation, struggle with high-dimensional spaces due to sparse data distribution. Regularized Methods: Techniques such as LASSO, Ridge Regression, and Elastic Net can be used to handle high-dimensional missing data. These methods shrink model coefficients, preventing overfitting. Matrix Factorization: Methods like Principal Component Analysis (PCA) or Singular Value Decomposition (SVD) are often adapted to impute missing values in high-dimensional datasets by reducing the dimensionality first. 11.7.2 Missing Data in Big Data Contexts The advent of big data introduces additional complexities for missing data handling, including computational scalability and storage constraints. 11.7.2.1 Distributed Imputation Techniques MapReduce Frameworks: Algorithms like k-nearest neighbor (KNN) imputation or multiple imputation can be adapted for distributed environments using MapReduce or similar frameworks. Federated Learning: In scenarios where data is distributed across multiple locations (e.g., in healthcare or banking), federated learning allows imputation without centralizing data, ensuring privacy. 11.7.2.2 Cloud-Based Implementations Cloud-Native Algorithms: Cloud platforms like AWS, Google Cloud, and Azure provide scalable solutions for implementing advanced imputation algorithms on large datasets. AutoML Integration: Automated Machine Learning (AutoML) pipelines often include missing data handling as a preprocessing step, leveraging cloud-based computational power. Real-Time Imputation: In e-commerce, cloud-based solutions enable real-time imputation for recommendation systems or fraud detection, ensuring seamless user experiences. 11.7.3 Ethical Concerns 11.7.3.1 Bias Amplification Introduction of Systematic Bias: Imputation methods can inadvertently reinforce existing biases. For example, imputing salary data based on demographic variables may propagate societal inequalities. Business Implications: In credit scoring, biased imputation of missing financial data can lead to unfair credit decisions, disproportionately affecting marginalized groups. Mitigation Strategies: Techniques such as fairness-aware machine learning and bias auditing can help identify and reduce bias introduced during imputation. 11.7.3.2 Transparency in Reporting Imputation Decisions Reproducibility and Documentation: Transparent reporting of imputation methods and assumptions is essential for reproducibility. Analysts should provide clear documentation of the imputation pipeline. Stakeholder Communication: In business settings, communicating imputation decisions to stakeholders ensures informed decision-making and trust in the results. Ethical Frameworks: Ethical guidelines, such as those provided by the European Union’s GDPR or industry-specific codes, emphasize the importance of transparency in data handling. "],["emerging-trends-in-missing-data-handling.html", "11.8 Emerging Trends in Missing Data Handling", " 11.8 Emerging Trends in Missing Data Handling 11.8.1 Advances in Neural Network Approaches Neural networks have transformed the landscape of missing data imputation, offering flexible, scalable, and powerful solutions that go beyond traditional methods. 11.8.1.1 Variational Autoencoders (VAEs) Overview: Variational Autoencoders (VAEs) are generative models that encode data into a latent space and reconstruct it, filling in missing values during reconstruction. Advantages: Handle complex, non-linear relationships between variables. Scalable to high-dimensional datasets. Generate probabilistic imputations, reflecting uncertainty. Applications: In marketing, VAEs can impute missing customer behavior data while accounting for seasonal and demographic variations. In finance, VAEs assist in imputing missing stock price data by modeling dependencies among assets. 11.8.1.2 GANs for Missing Data Generative Adversarial Networks (GANs): GANs consist of a generator and a discriminator, with the generator imputing missing data and the discriminator evaluating its quality. Advantages: Preserve data distributions and avoid over-smoothing. Suitable for imputation in datasets with complex patterns or multi-modal distributions. Applications: In healthcare, GANs have been used to impute missing patient records while preserving patient privacy and data integrity. In retail, GANs can model missing sales data to predict trends and optimize inventory. 11.8.2 Integration with Reinforcement Learning Reinforcement learning (RL) is increasingly being integrated into missing data strategies, particularly in dynamic or sequential data environments. Markov Decision Processes (MDPs): RL models missing data handling as an MDP, where actions (imputations) are optimized based on rewards (accuracy of predictions or decisions). Active Imputation: RL can be used to actively query for missing data points, prioritizing those with the highest impact on downstream tasks. Example: In customer churn prediction, RL can optimize the imputation of high-value customer records. Applications: Financial forecasting: RL models are used to impute missing transaction data dynamically, optimizing portfolio decisions. Smart cities: RL-based models handle missing sensor data to enhance real-time decision-making in traffic management. 11.8.3 Synthetic Data Generation for Missing Data Synthetic data generation has emerged as a robust solution to address missing data, providing flexibility and privacy. Data Augmentation: Synthetic data is generated to augment datasets with missing values, reducing biases introduced by imputation. Techniques: Simulations: Monte Carlo simulations create plausible data points based on observed distributions. Generative Models: GANs and VAEs generate realistic synthetic data that aligns with existing patterns. Applications: In fraud detection, synthetic datasets balance the impact of missing values on anomaly detection. In insurance, synthetic data supports pricing models by filling in gaps from incomplete policyholder records. 11.8.4 Federated Learning and Privacy-Preserving Imputation Federated learning has gained traction as a method for collaborative analysis while preserving data privacy. Federated Imputation: Distributed imputation algorithms operate on decentralized data, ensuring that sensitive information remains local. Example: Hospitals collaboratively impute missing patient data without sharing individual records. Privacy Mechanisms: Differential privacy adds noise to imputed values, protecting individual-level data. Homomorphic encryption allows computations on encrypted data, ensuring privacy throughout the imputation process. Applications: Healthcare: Federated learning imputes missing diagnostic data across clinics. Banking: Collaborative imputation of financial transaction data supports risk modeling while adhering to regulations. 11.8.5 Imputation in Streaming and Online Data Environments The increasing use of streaming data in business and technology requires real-time imputation methods to ensure uninterrupted analysis. Challenges: Imputation must occur dynamically as data streams in. Low latency and high accuracy are essential to maintain real-time decision-making. Techniques: Online Learning Algorithms: Update imputation models incrementally as new data arrives. Sliding Window Methods: Use recent data to estimate and impute missing values in real time. Applications: IoT devices: Imputation in sensor networks for smart homes or industrial monitoring ensures continuous operation despite data transmission issues. Financial markets: Streaming imputation models predict and fill gaps in real-time stock price feeds to inform trading algorithms. "],["application-of-imputation-in-r.html", "11.9 Application of Imputation in R", " 11.9 Application of Imputation in R This section demonstrates how to visualize missing data and handle it using different imputation techniques. Package Algorithm Cont Var Cate Var Diagnostics Complexity Handling Best Use Case Limitations missForest Random Forest Yes Yes Out-of-bag error (NRMSE, PFC) Handles complex interactions Mixed data types with complex interactions May overfit with small datasets Hmisc Additive Regression, Bootstrap, Predictive Mean Matching Yes Yes \\(R^2\\) for imputed values Basic to intermediate complexity Simple datasets with low complexity Limited to simple imputation methods mi Bayesian Regression Yes Yes Graphical diagnostics,convergence Detects issues like collinearity Datasets with irregularities Computationally intensive for large data MICE Multivariate Imputation via Chained Equations Yes Yes Density plots, pooling of results Handles variable interactions General-purpose imputation for MAR data Requires proper method selection for variable types Amelia Bootstrap-based Expectation Maximization (EMB) Yes Limited (requires normality) Diagnostics supported Works well with large/time-series data Time-series or datasets approximating MVN Assumes MVN, requires transformations for non-MVN 11.9.1 Visualizing Missing Data Visualizing missing data is an essential first step in understanding the patterns and extent of missingness in your dataset. library(visdat) library(naniar) library(ggplot2) # Visualizing missing data vis_miss(airquality) # Missingness patterns using an upset plot gg_miss_upset(airquality) # Scatter plot of missing data with faceting ggplot(airquality, aes(x, y)) + geom_miss_point() + facet_wrap(~ group) # Missing values by variable gg_miss_var(data, facet = group) # Missingness in relation to factors gg_miss_fct(x = variable1, fct = variable2) For more details, read The Missing Book by Nicholas Tierney &amp; Allison Horst. 11.9.2 How Many Imputations? Usually, 5 imputations are sufficient unless there is an extremely high proportion of missing data. High proportions require revisiting data collection processes. Rubin’s Rule for Relative Efficiency According to Rubin, the relative efficiency of an estimate based on \\(m\\) imputations (relative to infinite imputations) is given by: \\[ \\text{Relative Efficiency} = ( 1 + \\frac{\\lambda}{m})^{-1} \\] where \\(\\lambda\\) is the rate of missing data. For example, with 50% missing data (\\(\\lambda = 0.5\\)), the standard deviation of an estimate based on 5 imputations is only about 5% wider than that from infinite imputations: \\[ \\sqrt{1 + \\frac{0.5}{5}} = 1.049 \\] 11.9.3 Generating Missing Data for Demonstration library(missForest) # Load the data data &lt;- iris # Generate 10% missing values at random set.seed(1) iris.mis &lt;- prodNA(iris, noNA = 0.1) # Remove categorical variables for numeric imputation iris.mis.cat &lt;- iris.mis iris.mis &lt;- subset(iris.mis, select = -c(Species)) 11.9.4 Imputation with Mean, Median, and Mode Mean, median, or mode imputation is a simple yet commonly used technique. # Imputation for the entire dataset e1071::impute(iris.mis, what = &quot;mean&quot;) # Replace with mean e1071::impute(iris.mis, what = &quot;median&quot;) # Replace with median # Imputation by variable Hmisc::impute(iris.mis$Sepal.Length, mean) # Replace with mean Hmisc::impute(iris.mis$Sepal.Length, median) # Replace with median Hmisc::impute(iris.mis$Sepal.Length, 0) # Replace with a specific value Checking Accuracy Accuracy can be checked by comparing predictions with actual values. # Example data actuals &lt;- iris$Sepal.Width[is.na(iris.mis$Sepal.Width)] predicteds &lt;- rep(mean(iris$Sepal.Width, na.rm = TRUE), length(actuals)) # Using MLmetrics package library(MLmetrics) MAE(predicteds, actuals) #&gt; [1] 0.2870303 MSE(predicteds, actuals) #&gt; [1] 0.1301598 RMSE(predicteds, actuals) #&gt; [1] 0.3607767 11.9.5 K-Nearest Neighbors (KNN) Imputation KNN is a more sophisticated method, leveraging similar observations to fill in missing values. library(DMwR2) knnOutput &lt;- knnImputation(data = iris.mis.cat, meth = &quot;median&quot;) anyNA(knnOutput) # Check for remaining missing values #&gt; [1] FALSE actuals &lt;- iris$Sepal.Width[is.na(iris.mis$Sepal.Width)] predicteds &lt;- knnOutput[is.na(iris.mis$Sepal.Width), &quot;Sepal.Width&quot;] # Using MLmetrics package library(MLmetrics) MAE(predicteds, actuals) #&gt; [1] 0.2318182 MSE(predicteds, actuals) #&gt; [1] 0.1038636 RMSE(predicteds, actuals) #&gt; [1] 0.3222788 KNN typically improves upon mean or median imputation in terms of predictive accuracy. 11.9.6 Imputation with Decision Trees (rpart) Decision trees, such as those implemented in rpart, are effective for both numeric and categorical variables. library(rpart) # Imputation for a categorical variable class_mod &lt;- rpart( Species ~ . - Sepal.Length, data = iris.mis.cat[!is.na(iris.mis.cat$Species), ], method = &quot;class&quot;, na.action = na.omit ) # Imputation for a numeric variable anova_mod &lt;- rpart( Sepal.Width ~ . - Sepal.Length, data = iris.mis[!is.na(iris.mis$Sepal.Width), ], method = &quot;anova&quot;, na.action = na.omit ) # Predictions species_pred &lt;- predict(class_mod, iris.mis.cat[is.na(iris.mis.cat$Species), ]) width_pred &lt;- predict(anova_mod, iris.mis[is.na(iris.mis$Sepal.Width), ]) 11.9.7 MICE (Multivariate Imputation via Chained Equations) MICE assumes that the data are Missing at Random (MAR). It imputes data for each variable by specifying an imputation model tailored to the variable type. 11.9.7.1 How MICE Works For a dataset with variables \\(X_1, X_2, \\dots, X_k\\): If \\(X_1\\) has missing data, it is regressed on the other variables. This process is repeated for all variables with missing data, using the previously predicted values as needed. By default: Continuous variables use linear regression. Categorical variables use logistic regression. 11.9.7.2 Methods Available in MICE pmm (Predictive Mean Matching): For numeric variables. logreg (Logistic Regression): For binary variables (2 levels). polyreg (Bayesian polytomous regression): For factor variables (≥2 levels). Proportional Odds Model: For ordered factor variables (≥2 levels). # Load packages library(mice) library(VIM) # Check missing values pattern md.pattern(iris.mis) #&gt; Sepal.Width Sepal.Length Petal.Length Petal.Width #&gt; 100 1 1 1 1 0 #&gt; 15 1 1 1 0 1 #&gt; 8 1 1 0 1 1 #&gt; 2 1 1 0 0 2 #&gt; 11 1 0 1 1 1 #&gt; 1 1 0 1 0 2 #&gt; 1 1 0 0 1 2 #&gt; 1 1 0 0 0 3 #&gt; 7 0 1 1 1 1 #&gt; 3 0 1 0 1 2 #&gt; 1 0 0 1 1 2 #&gt; 11 15 15 19 60 # Plot missing values aggr( iris.mis, col = c(&#39;navyblue&#39;, &#39;yellow&#39;), numbers = TRUE, sortVars = TRUE, labels = names(iris.mis), cex.axis = 0.7, gap = 3, ylab = c(&quot;Missing data&quot;, &quot;Pattern&quot;) ) #&gt; #&gt; Variables sorted by number of missings: #&gt; Variable Count #&gt; Petal.Width 0.12666667 #&gt; Sepal.Length 0.10000000 #&gt; Petal.Length 0.10000000 #&gt; Sepal.Width 0.07333333 Imputing Data # Perform multiple imputation using MICE imputed_Data &lt;- mice( iris.mis, m = 5, # Number of imputed datasets maxit = 10, # Number of iterations method = &#39;pmm&#39;, # Imputation method seed = 500 # Random seed for reproducibility ) Evaluating Imputed Data # Summary of imputed data summary(imputed_Data) #&gt; Class: mids #&gt; Number of multiple imputations: 5 #&gt; Imputation methods: #&gt; Sepal.Length Sepal.Width Petal.Length Petal.Width #&gt; &quot;pmm&quot; &quot;pmm&quot; &quot;pmm&quot; &quot;pmm&quot; #&gt; PredictorMatrix: #&gt; Sepal.Length Sepal.Width Petal.Length Petal.Width #&gt; Sepal.Length 0 1 1 1 #&gt; Sepal.Width 1 0 1 1 #&gt; Petal.Length 1 1 0 1 #&gt; Petal.Width 1 1 1 0 # Density plot: compare imputed values (red) with observed values (blue) densityplot(imputed_Data) Accessing and Using Imputed Data # Access the complete datasets completeData1 &lt;- complete(imputed_Data, 1) # First imputed dataset completeData2 &lt;- complete(imputed_Data, 2) # Second imputed dataset Regression Model with Imputed Dataset # Fit a regression model using imputed datasets fit &lt;- with(data = imputed_Data, exp = lm(Sepal.Width ~ Sepal.Length + Petal.Width)) # Combine results of all 5 models combine &lt;- pool(fit) summary(combine) #&gt; term estimate std.error statistic df p.value #&gt; 1 (Intercept) 1.9054698 0.33454626 5.695684 105.12438 1.127064e-07 #&gt; 2 Sepal.Length 0.2936285 0.07011405 4.187870 88.69066 6.625536e-05 #&gt; 3 Petal.Width -0.4742921 0.08138313 -5.827892 46.94941 4.915270e-07 11.9.8 Amelia Amelia uses a bootstrap-based Expectation-Maximization with Bootstrapping (EMB) algorithm for imputation, making it faster and suitable for cross-sectional and time-series data. 11.9.8.1 Assumptions All variables must follow a Multivariate Normal Distribution (MVN). Transformations may be required for non-normal data. Data must be Missing at Random (MAR). 11.9.8.2 Comparison: Amelia vs. MICE MICE imputes on a variable-by-variable basis using separate models. Amelia uses a joint modeling approach based on MVN. MICE handles multiple data types, while Amelia requires variables to approximate normality. 11.9.8.3 Imputation with Amelia library(Amelia) data(&quot;iris&quot;) # Seed 10% missing values set.seed(123) iris.mis &lt;- prodNA(iris, noNA = 0.1) # Specify columns and run Amelia amelia_fit &lt;- amelia( iris.mis, m = 5, # Number of imputations parallel = &quot;multicore&quot;, # Use multicore processing noms = &quot;Species&quot; # Nominal variables ) #&gt; -- Imputation 1 -- #&gt; #&gt; 1 2 3 4 5 6 7 #&gt; #&gt; -- Imputation 2 -- #&gt; #&gt; 1 2 3 4 5 #&gt; #&gt; -- Imputation 3 -- #&gt; #&gt; 1 2 3 4 5 #&gt; #&gt; -- Imputation 4 -- #&gt; #&gt; 1 2 3 4 5 6 #&gt; #&gt; -- Imputation 5 -- #&gt; #&gt; 1 2 3 4 5 6 7 8 9 10 # Access imputed outputs # amelia_fit$imputations[[1]] Amelia’s workflow includes bootstrapping multiple imputations to generate robust estimates of means and variances. This process ensures flexibility and speed for large datasets. 11.9.9 missForest The missForest package provides a robust non-parametric imputation method using the Random Forest algorithm. It is versatile, handling both continuous and categorical variables without requiring assumptions about the underlying functional forms. Key Features of missForest Non-Parametric: No assumptions about the functional form. Variable-Specific Models: Builds a random forest model for each variable to impute missing values. Error Estimates: Provides out-of-bag (OOB) imputation error estimates. NRMSE (Normalized Root Mean Squared Error) for continuous variables. PFC (Proportion of Falsely Classified) for categorical variables. High Control: Offers customizable parameters like mtry and ntree. library(missForest) # Impute missing values using default parameters iris.imp &lt;- missForest(iris.mis) # Check imputed values # View the imputed dataset # iris.imp$ximp # Out-of-bag error estimates iris.imp$OOBerror #&gt; NRMSE PFC #&gt; 0.14004144 0.02877698 # Compare imputed data with original data to calculate error iris.err &lt;- mixError(iris.imp$ximp, iris.mis, iris) iris.err #&gt; NRMSE PFC #&gt; 0.14420833 0.09090909 11.9.10 Hmisc The Hmisc package provides a suite of tools for imputing missing data, offering both simple methods (like mean or median imputation) and more advanced approaches like aregImpute. Features of Hmisc impute(): Simple imputation using user-defined methods like mean, median, or a random value. aregImpute(): Combines additive regression, bootstrapping, and predictive mean matching. Handles continuous and categorical variables. Automatically recognizes variable types and applies appropriate methods. Assumptions Linearity in the variables being predicted. Fisher’s optimum scoring is used for categorical variable prediction. library(Hmisc) # Impute using mean iris.mis$imputed_SepalLength &lt;- with(iris.mis, impute(Sepal.Length, mean)) # Impute using random value iris.mis$imputed_SepalLength2 &lt;- with(iris.mis, impute(Sepal.Length, &#39;random&#39;)) # Advanced imputation using aregImpute impute_arg &lt;- aregImpute( ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width + Species, data = iris.mis, n.impute = 5 ) #&gt; Iteration 1 Iteration 2 Iteration 3 Iteration 4 Iteration 5 Iteration 6 Iteration 7 Iteration 8 # Check R-squared values for predicted missing values impute_arg #&gt; #&gt; Multiple Imputation using Bootstrap and PMM #&gt; #&gt; aregImpute(formula = ~Sepal.Length + Sepal.Width + Petal.Length + #&gt; Petal.Width + Species, data = iris.mis, n.impute = 5) #&gt; #&gt; n: 150 p: 5 Imputations: 5 nk: 3 #&gt; #&gt; Number of NAs: #&gt; Sepal.Length Sepal.Width Petal.Length Petal.Width Species #&gt; 17 19 12 16 11 #&gt; #&gt; type d.f. #&gt; Sepal.Length s 2 #&gt; Sepal.Width s 2 #&gt; Petal.Length s 2 #&gt; Petal.Width s 2 #&gt; Species c 2 #&gt; #&gt; Transformation of Target Variables Forced to be Linear #&gt; #&gt; R-squares for Predicting Non-Missing Values for Each Variable #&gt; Using Last Imputations of Predictors #&gt; Sepal.Length Sepal.Width Petal.Length Petal.Width Species #&gt; 0.895 0.536 0.987 0.967 0.984 # Access imputed values for Sepal.Length impute_arg$imputed$Sepal.Length #&gt; [,1] [,2] [,3] [,4] [,5] #&gt; 13 4.4 4.9 4.9 5.0 4.9 #&gt; 14 4.8 4.4 5.0 4.5 4.5 #&gt; 23 4.8 5.1 5.1 5.1 4.8 #&gt; 26 5.0 4.8 4.9 4.9 5.0 #&gt; 34 5.0 5.8 6.0 5.7 5.8 #&gt; 39 4.4 4.9 5.0 4.5 4.6 #&gt; 41 5.2 5.1 4.8 5.0 4.8 #&gt; 69 5.8 6.0 6.3 6.0 6.1 #&gt; 72 5.6 5.7 5.7 5.8 6.1 #&gt; 89 6.1 5.7 5.7 5.6 6.9 #&gt; 90 5.5 6.2 5.2 6.0 5.8 #&gt; 91 5.7 6.9 6.0 6.4 6.4 #&gt; 116 5.9 6.8 6.4 6.6 6.9 #&gt; 118 7.9 7.9 7.9 7.9 7.9 #&gt; 135 6.7 6.7 6.7 6.9 6.7 #&gt; 141 7.0 6.3 5.9 6.7 7.0 #&gt; 143 5.7 6.7 5.8 6.3 5.4 Note: While missForest often outperforms Hmisc in terms of accuracy, the latter is useful for datasets with simpler requirements. 11.9.11 mi The mi package is a powerful tool for imputation, using Bayesian methods and providing rich diagnostics for model evaluation and convergence. Features of mi Graphical Diagnostics: Visualize imputation models and convergence. Bayesian Regression: Handles separation and other issues in data. Irregularity Detection: Automatically detects issues like high collinearity. Noise Addition: Adds noise to address additive constraints. library(mi) # Perform imputation using mi mi_data &lt;- mi(iris.mis, seed = 1) # Summary of the imputation process summary(mi_data) #&gt; $Sepal.Length #&gt; $Sepal.Length$is_missing #&gt; missing #&gt; FALSE TRUE #&gt; 133 17 #&gt; #&gt; $Sepal.Length$imputed #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; -0.6355172 -0.0703238 -0.0005039 -0.0052716 0.0765631 0.3731257 #&gt; #&gt; $Sepal.Length$observed #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; -0.90110 -0.47329 -0.04549 0.00000 0.32120 1.23792 #&gt; #&gt; #&gt; $Sepal.Width #&gt; $Sepal.Width$is_missing #&gt; missing #&gt; FALSE TRUE #&gt; 131 19 #&gt; #&gt; $Sepal.Width$imputed #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; -2.1083 -0.4216 -0.1925 -0.1940 0.1589 0.7330 #&gt; #&gt; $Sepal.Width$observed #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; -1.01272 -0.30642 -0.07099 0.00000 0.39988 1.34161 #&gt; #&gt; #&gt; $Petal.Length #&gt; $Petal.Length$is_missing #&gt; missing #&gt; FALSE TRUE #&gt; 138 12 #&gt; #&gt; $Petal.Length$imputed #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; -0.86312 -0.58453 0.23556 0.04176 0.48870 0.77055 #&gt; #&gt; $Petal.Length$observed #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; -0.7797 -0.6088 0.1459 0.0000 0.3880 0.9006 #&gt; #&gt; #&gt; $Petal.Width #&gt; $Petal.Width$is_missing #&gt; missing #&gt; FALSE TRUE #&gt; 134 16 #&gt; #&gt; $Petal.Width$imputed #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; -0.9116177 -0.0000042 0.2520468 0.1734543 0.5147010 0.8411324 #&gt; #&gt; $Petal.Width$observed #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; -0.69624 -0.56602 0.08503 0.00000 0.41055 0.86629 #&gt; #&gt; #&gt; $Species #&gt; $Species$crosstab #&gt; #&gt; observed imputed #&gt; setosa 180 16 #&gt; versicolor 192 11 #&gt; virginica 184 17 #&gt; #&gt; #&gt; $imputed_SepalLength #&gt; $imputed_SepalLength$is_missing #&gt; [1] &quot;all values observed&quot; #&gt; #&gt; $imputed_SepalLength$observed #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; -0.9574 -0.4379 0.0000 0.0000 0.3413 1.3152 #&gt; #&gt; #&gt; $imputed_SepalLength2 #&gt; $imputed_SepalLength2$is_missing #&gt; [1] &quot;all values observed&quot; #&gt; #&gt; $imputed_SepalLength2$observed #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; -0.90570 -0.48398 -0.06225 0.00000 0.35947 1.20292 "],["data.html", "Chapter 12 Data", " Chapter 12 Data There are multiple ways to categorize data. For example, Qualitative vs. Quantitative: Qualitative Quantitative in-depth interviews, documents, focus groups, case study, ethnography. open-ended questions. observations in words experiments, observation in words, survey with closed-end questions, structured interviews language, descriptive quantities, numbers Text-based Numbers-based Subjective Objectivity "],["cross-sectional.html", "12.1 Cross-Sectional", " 12.1 Cross-Sectional "],["time-series.html", "12.2 Time Series", " 12.2 Time Series \\[ y_t = \\beta_0 + x_{t1}\\beta_1 + x_{t2}\\beta_2 + ... + x_{t(k-1)}\\beta_{k-1} + \\epsilon_t \\] Examples Static Model \\(y_t=\\beta_0 + x_1\\beta_1 + x_2\\beta_2 - x_3\\beta_3 - \\epsilon_t\\) Finite Distributed Lag model \\(y_t=\\beta_0 + pe_t\\delta_0 + pe_{t-1}\\delta_1 +pe_{t-2}\\delta_2 + \\epsilon_t\\) Long Run Propensity (LRP) is \\(LRP = \\delta_0 + \\delta_1 + \\delta_2\\) Dynamic Model \\(GDP_t = \\beta_0 + \\beta_1GDP_{t-1} - \\epsilon_t\\) Finite Sample Properties for Time Series: A1-A3: OLS is unbiased A1-A4: usual standard errors are consistent and Gauss-Markov Theorem holds (OLS is BLUE) A1-A6, A6: Finite Sample Wald Test (t-test and F-test) are valid A3 might not hold under time series setting Spurious Time Trend - solvable Strict vs Contemporaneous Exogeneity - not solvable In time series data, there are many processes: Autoregressive model of order p: AR(p) Moving average model of order q: MA(q) Autoregressive model of order p and moving average model of order q: ARMA(p,q) Autoregressive conditional heteroskedasticity model of order p: ARCH(p) Generalized Autoregressive conditional heteroskedasticity of orders p and q; GARCH(p.q) 12.2.1 Deterministic Time trend Both the dependent and independent variables are trending over time Spurious Time Series Regression \\[ y_t = \\alpha_0 + t\\alpha_1 + v_t \\] and x takes the form \\[ x_t = \\lambda_0 + t\\lambda_1 + u_t \\] \\(\\alpha_1 \\neq 0\\) and \\(\\lambda_1 \\neq 0\\) \\(v_t\\) and \\(u_t\\) are independent there is no relationship between \\(y_t\\) and \\(x_t\\) If we estimate the regression, \\[ y_t = \\beta_0 + x_t\\beta_1 + \\epsilon_t \\] so the true \\(\\beta_1=0\\) Inconsistent: \\(plim(\\hat{\\beta}_1)=\\frac{\\alpha_1}{\\lambda_1}\\) Invalid Inference: \\(|t| \\to^d \\infty\\) for \\(H_0: \\beta_1=0\\), will always reject the null as \\(n \\to \\infty\\) Uninformative \\(R^2\\): \\(plim(R^2) = 1\\) will be able to perfectly predict as \\(n \\to \\infty\\) We can rewrite the equation as \\[ \\begin{aligned} y_t &amp;=\\beta_0 + \\beta_1x_t+\\epsilon_t \\\\ \\epsilon_t &amp;= \\alpha_1t + v_t \\end{aligned} \\] where \\(\\beta_0 = \\alpha_0\\) and \\(\\beta_1=0\\). Since \\(x_t\\) is a deterministic function of time, \\(\\epsilon_t\\) is correlated with \\(x_t\\) and we have the usual omitted variable bias. Even when \\(y_t\\) and \\(x_t\\) are related (\\(\\beta_1 \\neq 0\\)) but they are both trending over time, we still get spurious results with the simple regression on \\(y_t\\) on \\(x_t\\) Solutions to Spurious Trend Include time trend \\(t\\) as an additional control consistent parameter estimates and valid inference Detrend both dependent and independent variables and then regress the detrended outcome on detrended independent variables (i.e., regress residuals \\(\\hat{u}_t\\) on residuals \\(\\hat{v}_t\\)) Detrending is the same as partialing out in the [Frisch-Waugh-Lovell Theorem] Could allow for non-linear time trends by including \\(t\\) \\(t^2\\), and \\(\\exp(t)\\) Allow for seasonality by including indicators for relevant “seasons” (quarters, months, weeks). A3 does not hold under: Feedback Effect \\(\\epsilon_t\\) influences next period’s independent variables Dynamic Specification include last time period outcome as an explanatory variable Dynamically Complete For finite distrusted lag model, the number of lags needs to be absolutely correct. 12.2.2 Feedback Effect \\[ y_t = \\beta_0 + x_t\\beta_1 + \\epsilon_t \\] A3 \\[ E(\\epsilon_t|\\mathbf{X})= E(\\epsilon_t| x_1,x_2, ...,x_t,x_{t+1},...,x_T) \\] will not equal 0, because \\(y_t\\) will likely influence \\(x_{t+1},..,x_T\\) A3 is violated because we require the error to be uncorrelated with all time observation of the independent regressors (strict exogeneity) 12.2.3 Dynamic Specification \\[ y_t = \\beta_0 + y_{t-1}\\beta_1 + \\epsilon_t \\] \\[ E(\\epsilon_t|\\mathbf{X})= E(\\epsilon_t| y_1,y_2, ...,y_t,y_{t+1},...,y_T) \\] will not equal 0, because \\(y_t\\) and \\(\\epsilon_t\\) are inherently correlated A3 is violated because we require the error to be uncorrelated with all time observation of the independent regressors (strict exogeneity) Dynamic Specification is not allowed under A3 12.2.4 Dynamically Complete \\[ y_t = \\beta_0 + x_t\\delta_0 + x_{t-1}\\delta_1 + \\epsilon_t \\] \\[ E(\\epsilon_t|\\mathbf{X})= E(\\epsilon_t| x_1,x_2, ...,x_t,x_{t+1},...,x_T) \\] will not equal 0, because if we did not include enough lags, \\(x_{t-2}\\) and \\(\\epsilon_t\\) are correlated A3 is violated because we require the error to be uncorrelated with all time observation of the independent regressors (strict exogeneity) Can be corrected by including more lags (but when stop? ) Without A3 OLS is biased Gauss-Markov Theorem Finite Sample Properties are invalid then, we can Focus on Large Sample Properties Can use [A3a] instead of A3 [A3a] in time series become \\[ A3a: E(\\mathbf{x}_t&#39;\\epsilon_t)= 0 \\] only the regressors in this time period need to be independent from the error in this time period (Contemporaneous Exogeneity) \\(\\epsilon_t\\) can be correlated with \\(...,x_{t-2},x_{t-1},x_{t+1}, x_{t+2},...\\) can have a dynamic specification \\(y_t = \\beta_0 + y_{t-1}\\beta_1 + \\epsilon_t\\) Deriving Large Sample Properties for Time Series Assumptions A1, A2, [A3a] [Weak Law] and Central Limit Theorem depend on A5 \\(x_t\\) and \\(\\epsilon_t\\) are dependent over t without [Weak Law] or Central Limit Theorem depend on A5, we cannot have Large Sample Properties for OLS Instead of A5, we consider [A5a] Derivation of the Asymptotic Variance depends on A4 time series setting introduces Serial Correlation: \\(Cov(\\epsilon_t, \\epsilon_s) \\neq 0\\) under A1, A2, [A3a], and [A5a], OLS estimator is consistent, and asymptotically normal 12.2.5 Highly Persistent Data If \\(y_t, \\mathbf{x}_t\\) are not weakly dependent stationary process \\(y_t\\) and \\(y_{t-h}\\) are not almost independent for large h [A5a] does not hold and OLS is not consistent and does not have a limiting distribution. Example + Random Walk \\(y_t = y_{t-1} + u_t\\) + Random Walk with a drift: \\(y_t = \\alpha+ y_{t-1} + u_t\\) Solution First difference is a stationary process \\[ y_t - y_{t-1} = u_t \\] If \\(u_t\\) is a weakly dependent process (also called integrated of order 0) then \\(y_t\\) is said to be difference-stationary process (integrated of order 1) For regression, if \\(\\{y_t, \\mathbf{x}_t \\}\\) are random walks (integrated at order 1), can consistently estimate the first difference equation \\[ \\begin{aligned} y_t - y_{t-1} &amp;= (\\mathbf{x}_t - \\mathbf{x}_{t-1}\\beta + \\epsilon_t - \\epsilon_{t-1}) \\\\ \\Delta y_t &amp;= \\Delta \\mathbf{x}\\beta + \\Delta u_t \\end{aligned} \\] Unit Root Test \\[ y_t = \\alpha + \\alpha y_{t-1} + u_t \\] tests if \\(\\rho=1\\) (integrated of order 1) Under the null \\(H_0: \\rho = 1\\), OLS is not consistent or asymptotically normal. Under the alternative \\(H_a: \\rho &lt; 1\\), OLS is consistent and asymptotically normal. usual t-test is not valid, will need to use the transformed equation to produce a valid test. Dickey-Fuller Test \\[ \\Delta y_t= \\alpha + \\theta y_{t-1} + v_t \\] where \\(\\theta = \\rho -1\\) \\(H_0: \\theta = 0\\) and \\(H_a: \\theta &lt; 0\\) Under the null, \\(\\Delta y_t\\) is weakly dependent but \\(y_{t-1}\\) is not. Dickey and Fuller derived the non-normal asymptotic distribution. If you reject the null then \\(y_t\\) is not a random walk. Concerns with the standard Dickey Fuller Test 1. Only considers a fairly simplistic dynamic relationship \\[ \\Delta y_t = \\alpha + \\theta y_{t-1} + \\gamma_1 \\Delta_{t-1} + ..+ \\gamma_p \\Delta_{t-p} +v_t \\] with one additional lag, under the null \\(\\Delta_{y_t}\\) is an AR(1) process and under the alternative \\(y_t\\) is an AR(2) process. Solution: include lags of \\(\\Delta_{y_t}\\) as controls. Does not allow for time trend \\[ \\Delta y_t = \\alpha + \\theta y_{t-1} + \\delta t + v_t \\] allows \\(y_t\\) to have a quadratic relationship with \\(t\\) Solution: include time trend (changes the critical values). Adjusted Dickey-Fuller Test \\[ \\Delta y_t = \\alpha + \\theta y_{t-1} + \\delta t + \\gamma_1 \\Delta y_{t-1} + ... + \\gamma_p \\Delta y_{t-p} + v_t \\] where \\(\\theta = 1 - \\rho\\) \\(H_0: \\theta_1 = 0\\) and \\(H_a: \\theta_1 &lt; 0\\) Under the null, \\(\\Delta y_t\\) is weakly dependent but \\(y_{t-1}\\) is not Critical values are different with the time trend, if you reject the null then \\(y_t\\) is not a random walk. 12.2.5.0.1 Newey West Standard Errors If A4 does not hold, we can use Newey West Standard Errors (HAC - Heteroskedasticity Autocorrelation Consistent) \\[ \\hat{B} = T^{-1} \\sum_{t=1}^{T} e_t^2 \\mathbf{x&#39;_tx_t} + \\sum_{h=1}^{g}(1-\\frac{h}{g+1})T^{-1}\\sum_{t=h+1}^{T} e_t e_{t-h}(\\mathbf{x_t&#39;x_{t-h}+ x_{t-h}&#39;x_t}) \\] estimates the covariances up to a distance g part downweights to insure \\(\\hat{B}\\) is PSD How to choose g: For yearly data: \\(g = 1\\) or 2 is likely to account for most of the correlation For quarterly or monthly data: g should be larger ($g = 4$ or 8 for quarterly and \\(g = 12\\) or 14 for monthly) can also take integer part of \\(4(T/100)^{2/9}\\) or integer part of \\(T^{1/4}\\) Testing for Serial Correlation Run OLS regression of \\(y_t\\) on \\(\\mathbf{x_t}\\) and obtain residuals \\(e_t\\) Run OLS regression of \\(e_t\\) on \\(\\mathbf{x}_t, e_{t-1}\\) and test whether coefficient on \\(e_{t-1}\\) is significant. Reject the null of no serial correlation if the coefficient is significant at the 5% level. Test using heteroskedastic robust standard errors can include \\(e_{t-2},e_{t-3},..\\) in step 2 to test for higher order serial correlation (t-test would now be an F-test of joint significance) "],["repeated-cross-sections.html", "12.3 Repeated Cross Sections", " 12.3 Repeated Cross Sections For each time point (day, month, year, etc.), a set of data is sampled. This set of data can be different among different time points. For example, you can sample different groups of students each time you survey. Allowing structural change in pooled cross section \\[ y_i = \\mathbf{x}_i \\beta + \\delta_1 y_1 + ... + \\delta_T y_T + \\epsilon_i \\] Dummy variables for all but one time period allows different intercept for each time period allows outcome to change on average for each time period Allowing for structural change in pooled cross section \\[ y_i = \\mathbf{x}_i \\beta + \\mathbf{x}_i y_1 \\gamma_1 + ... + \\mathbf{x}_i y_T \\gamma_T + \\delta_1 y_1 + ...+ \\delta_T y_T + \\epsilon_i \\] Interact \\(x_i\\) with time period dummy variables allows different slopes for each time period allows effects to change based on time period (structural break) Interacting all time period dummies with \\(x_i\\) can produce many variables - use hypothesis testing to determine which structural breaks are needed. 12.3.1 Pooled Cross Section \\[ y_i=\\mathbf{x_i\\beta +x_i \\times y1\\gamma_1 + ...+ x_i \\times yT\\gamma_T + \\delta_1y_1+...+ \\delta_Ty_T + \\epsilon_i} \\] Interact \\(x_i\\) with time period dummy variables allows different slopes for each time period allows effect to change based on time period (structural break) interacting all time period dummies with \\(x_i\\) can produce many variables - use hypothesis testing to determine which structural breaks are needed. "],["panel-data.html", "12.4 Panel Data", " 12.4 Panel Data Detail notes in R can be found here Follows an individual over T time periods. Panel data structure is like having n samples of time series data Characteristics Information both across individuals and over time (cross-sectional and time-series) N individuals and T time periods Data can be either Balanced: all individuals are observed in all time periods Unbalanced: all individuals are not observed in all time periods. Assume correlation (clustering) over time for a given individual, with independence over individuals. Types Short panel: many individuals and few time periods. Long panel: many time periods and few individuals Both: many time periods and many individuals Time Trends and Time Effects Nonlinear Seasonality Discontinuous shocks Regressors Time-invariant regressors \\(x_{it}=x_i\\) for all t (e.g., gender, race, education) have zero within variation Individual-invariant regressors \\(x_{it}=x_{t}\\) for all i (e.g., time trend, economy trends) have zero between variation Variation for the dependent variable and regressors Overall variation: variation over time and individuals. Between variation: variation between individuals Within variation: variation within individuals (over time). Estimate Formula Individual mean \\(\\bar{x_i}= \\frac{1}{T} \\sum_{t}x_{it}\\) Overall mean \\(\\bar{x}=\\frac{1}{NT} \\sum_{i} \\sum_t x_{it}\\) Overall Variance \\(s _O^2 = \\frac{1}{NT-1} \\sum_i \\sum_t (x_{it} - \\bar{x})^2\\) Between variance \\(s_B^2 = \\frac{1}{N-1} \\sum_i (\\bar{x_i} -\\bar{x})^2\\) Within variance \\(s_W^2= \\frac{1}{NT-1} \\sum_i \\sum_t (x_{it} - \\bar{x_i})^2 = \\frac{1}{NT-1} \\sum_i \\sum_t (x_{it} - \\bar{x_i} +\\bar{x})^2\\) Note: \\(s_O^2 \\approx s_B^2 + s_W^2\\) Since we have n observation for each time period t, we can control for each time effect separately by including time dummies (time effects) \\[ y_{it}=\\mathbf{x_{it}\\beta} + d_1\\delta_1+...+d_{T-1}\\delta_{T-1} + \\epsilon_{it} \\] Note: we cannot use these many time dummies in time series data because in time series data, our n is 1. Hence, there is no variation, and sometimes not enough data compared to variables to estimate coefficients. Unobserved Effects Model Similar to group clustering, assume that there is a random effect that captures differences across individuals but is constant in time. \\[ y_it=\\mathbf{x_{it}\\beta} + d_1\\delta_1+...+d_{T-1}\\delta_{T-1} + c_i + u_{it} \\] where \\(c_i + u_{it} = \\epsilon_{it}\\) \\(c_i\\) unobserved individual heterogeneity (effect) \\(u_{it}\\) idiosyncratic shock \\(\\epsilon_{it}\\) unobserved error term. 12.4.1 Pooled OLS Estimator If \\(c_i\\) is uncorrelated with \\(x_{it}\\) \\[ E(\\mathbf{x_{it}&#39;}(c_i+u_{it})) = 0 \\] then [A3a] still holds. And we have Pooled OLS consistent. If A4 does not hold, OLS is still consistent, but not efficient, and we need cluster robust SE. Sufficient for [A3a] to hold, we need Exogeneity for \\(u_{it}\\) [A3a] (contemporaneous exogeneity): \\(E(\\mathbf{x_{it}&#39;}u_{it})=0\\) time varying error Random Effect Assumption (time constant error): \\(E(\\mathbf{x_{it}&#39;}c_{i})=0\\) Pooled OLS will give you consistent coefficient estimates under A1, A2, [A3a] (for both \\(u_{it}\\) and RE assumption), and A5 (randomly sampling across i). 12.4.2 Individual-specific effects model If we believe that there is unobserved heterogeneity across individual (e.g., unobserved ability of an individual affects \\(y\\)), If the individual-specific effects are correlated with the regressors, then we have the Fixed Effects Estimator. and if they are not correlated we have the Random Effects Estimator. 12.4.2.1 Random Effects Estimator Random Effects estimator is the Feasible GLS estimator that assumes \\(u_{it}\\) is serially uncorrelated and homoskedastic Under A1, A2, [A3a] (for both \\(u_{it}\\) and RE assumption) and A5 (randomly sampling across i), RE estimator is consistent. If A4 holds for \\(u_{it}\\), RE is the most efficient estimator If A4 fails to hold (may be heteroskedasticity across i, and serial correlation over t), then RE is not the most efficient, but still more efficient than pooled OLS. 12.4.2.2 Fixed Effects Estimator also known as Within Estimator uses within variation (over time) If the RE assumption is not hold (\\(E(\\mathbf{x_{it}&#39;}c_i) \\neq 0\\)), then A3a does not hold (\\(E(\\mathbf{x_{it}&#39;}\\epsilon_i) \\neq 0\\)). Hence, the OLS and RE are inconsistent/biased (because of omitted variable bias) However, FE can only fix bias due to time-invariant factors (both observables and unobservables) correlated with treatment (not time-variant factors that correlated with the treatment). The traditional FE technique is flawed when lagged dependent variables are included in the model. (Nickell 1981) (Narayanan and Nair 2013) With measurement error in the independent, FE will exacerbate the errors-in-the-variables bias. 12.4.2.2.1 Demean Approach To deal with violation in \\(c_i\\), we have \\[ y_{it}= \\mathbf{x_{it} \\beta} + c_i + u_{it} \\] \\[ \\bar{y_i}=\\bar{\\mathbf{x_i}} \\beta + c_i + \\bar{u_i} \\] where the second equation is the time averaged equation using within transformation, we have \\[ y_{it} - \\bar{y_i} = \\mathbf{(x_{it} - \\bar{x_i})}\\beta + u_{it} - \\bar{u_i} \\] because \\(c_i\\) is time constant. The Fixed Effects estimator uses POLS on the transformed equation \\[ y_{it} - \\bar{y_i} = \\mathbf{(x_{it} - \\bar{x_i})} \\beta + d_1\\delta_1 + ... + d_{T-2}\\delta_{T-2} + u_{it} - \\bar{u_i} \\] we need A3 (strict exogeneity) (\\(E((\\mathbf{x_{it}-\\bar{x_i}})&#39;(u_{it}-\\bar{u_i})=0\\)) to have FE consistent. Variables that are time constant will be absorbed into \\(c_i\\). Hence we cannot make inference on time constant independent variables. If you are interested in the effects of time-invariant variables, you could consider the OLS or between estimator It’s recommended that you should still use cluster robust standard errors. 12.4.2.2.2 Dummy Approach Equivalent to the within transformation (i.e., mathematically equivalent to Demean Approach), we can have the fixed effect estimator be the same with the dummy regression \\[ y_{it} = x_{it}\\beta + d_1\\delta_1 + ... + d_{T-2}\\delta_{T-2} + c_1\\gamma_1 + ... + c_{n-1}\\gamma_{n-1} + u_{it} \\] where \\[ c_i = \\begin{cases} 1 &amp;\\text{if observation is i} \\\\ 0 &amp;\\text{otherwise} \\\\ \\end{cases} \\] The standard error is incorrectly calculated. the FE within transformation is controlling for any difference across individual which is allowed to correlated with observables. 12.4.2.2.3 First-difference Approach Economists typically use this approach \\[ y_{it} - y_{i (t-1)} = (\\mathbf{x}_{it} - \\mathbf{x}_{i(t-1)}) \\beta + + (u_{it} - u_{i(t-1)}) \\] 12.4.2.2.4 Fixed Effects Summary The three approaches are almost equivalent. Demean Approach is mathematically equivalent to Dummy Approach If you have only 1 period, all 3 are the same. Since fixed effect is a within estimator, only status changes can contribute to \\(\\beta\\) variation. Hence, with a small number of changes then the standard error for \\(\\beta\\) will explode Status changes mean subjects change from (1) control to treatment group or (2) treatment to control group. Those who have status change, we call them switchers. Treatment effect is typically non-directional. You can give a parameter for the direction if needed. Issues: You could have fundamental difference between switchers and non-switchers. Even though we can’t definitive test this, but providing descriptive statistics on switchers and non-switchers can give us confidence in our conclusion. Because fixed effects focus on bias reduction, you might have larger variance (typically, with fixed effects you will have less df) If the true model is random effect, economists typically don’t care, especially when \\(c_i\\) is the random effect and \\(c_i \\perp x_{it}\\) (because RE assumption is that it is unrelated to \\(x_{it}\\)). The reason why economists don’t care is because RE wouldn’t correct bias, it only improves efficiency over OLS. You can estimate FE for different units (not just individuals). FE removes bias from time invariant factors but not without costs because it uses within variation, which imposes strict exogeneity assumption on \\(u_{it}\\): \\(E[(x_{it} - \\bar{x}_{i})(u_{it} - \\bar{u}_{it})]=0\\) Recall \\[ Y_{it} = \\beta_0 + X_{it}\\beta_1 + \\alpha_i + u_{it} \\] where \\(\\epsilon_{it} = \\alpha_i + u_{it}\\) \\[ \\hat{\\sigma}^2_\\epsilon = \\frac{SSR_{OLS}}{NT - K} \\] \\[ \\hat{\\sigma}^2_u = \\frac{SSR_{FE}}{NT - (N+K)} = \\frac{SSR_{FE}}{N(T-1)-K} \\] It’s ambiguous whether your variance of error changes up or down because SSR can increase while the denominator decreases. FE can be unbiased, but not consistent (i.e., not converging to the true effect) 12.4.2.2.5 FE Examples 12.4.2.2.6 Blau (1999) Intergenerational mobility If we transfer resources to low income family, can we generate upward mobility (increase ability)? Mechanisms for intergenerational mobility Genetic (policy can’t affect) (i.e., ability endowment) Environmental indirect Environmental direct \\[ \\frac{\\% \\Delta \\text{Human capital}}{\\% \\Delta \\text{income}} \\] Financial transfer Income measures: Total household income Wage income Non-wage income Annual versus permanent income Core control variables: Bad controls are those jointly determined with dependent variable Control by mother = choice by mother Uncontrolled by mothers: mother race location of birth education of parents household structure at age 14 \\[ Y_{ijt} = X_{jt} \\beta_i + I_{jt} \\alpha_i + \\epsilon_{ijt} \\] where \\(i\\) = test \\(j\\) = individual (child) \\(t\\) = time Grandmother’s model Since child is nested within mother and mother nested within grandmother, the fixed effect of child is included in the fixed effect of mother, which is included in the fixed-effect of grandmother \\[ Y_{ijgmt} = X_{it} \\beta_{i} + I_{jt} \\alpha_i + \\gamma_g + u_{ijgmt} \\] where \\(i\\) = test, \\(j\\) = kid, \\(m\\) = mother, \\(g\\) = grandmother where \\(\\gamma_g\\) includes \\(\\gamma_m\\) includes \\(\\gamma_j\\) Grandma fixed-effect Pros: control for some genetics + fixed characteristics of how mother are raised can estimate effect of parameter income Con: Might not be a sufficient control Common to cluster a the fixed-effect level (common correlated component) Fixed effect exaggerates attenuation bias Error rate on survey can help you fix this (plug in the number only , but not the uncertainty associated with that number). 12.4.2.2.7 Babcock (2010) \\[ T_{ijct} = \\alpha_0 + S_{jct} \\alpha_1 + X_{ijct} \\alpha_2 + u_{ijct} \\] where \\(S_{jct}\\) is the average class expectation \\(X_{ijct}\\alpha_2\\) is the individual characteristics \\(i\\) student \\(j\\) instructor \\(c\\) course \\(t\\) time \\[ T_{ijct} = \\beta_0+ S_{jct} \\beta_1+ X_{ijct} \\beta_2 +\\mu_{jc} + \\epsilon_{ijct} \\] where \\(\\mu_{jc}\\) is instructor by course fixed effect (unique id), which is different from \\((\\theta_j + \\delta_c)\\) Decrease course shopping because conditioned on available information (\\(\\mu_{jc}\\)) (class grade and instructor’s info). Grade expectation change even though class materials stay the same Identification strategy is Under (fixed) time-varying factor that could bias my coefficient (simultaneity) \\[ Y_{ijt} = X_{it} \\beta_1 + \\text{Teacher Experience}_{jt} \\beta_2 + \\text{Teacher education}_{jt} \\beta_3 + \\text{Teacher score}_{it}\\beta_4 + \\dots + \\epsilon_{ijt} \\] Drop teacher characteristics, and include teacher dummy effect \\[ Y_{ijt} = X_{it} \\alpha + \\Gamma_{it} \\theta_j + u_{ijt} \\] where \\(\\alpha\\) is the within teacher (conditional on teacher fixed effect) and \\(j = 1 \\to (J-1)\\) Nuisance in the sense that we don’t about the interpretation of \\(\\alpha\\) The least we can say about \\(\\theta_j\\) is the teacher effect conditional on student test score. \\[ Y_{ijt} = X_{it} \\gamma + \\epsilon_{ijt} \\] \\(\\gamma\\) is between within (unconditional) and \\(e_{ijt}\\) is the prediction error \\[ e_{ijt} = T_{it} \\delta_j + \\tilde{e}_{ijt} \\] where \\(\\delta_j\\) is the mean for each group \\[ Y_{ijkt} = Y_{ijkt-1} + X_{it} \\beta + T_{it} \\tau_j + (W_i + P_k + \\epsilon_{ijkt}) \\] where \\(Y_{ijkt-1}\\) = lag control \\(\\tau_j\\) = teacher fixed time \\(W_i\\) is the student fixed effect \\(P_k\\) is the school fixed effect \\(u_{ijkt} = W_i + P_k + \\epsilon_{ijkt}\\) And we worry about selection on class and school Bias in \\(\\tau\\) (for 1 teacher) is \\[ \\frac{1}{N_j} \\sum_{i = 1}^N (W_i + P_k + \\epsilon_{ijkt}) \\] where \\(N_j\\) = the number of student in class with teacher \\(j\\) then we can \\(P_k + \\frac{1}{N_j} \\sum_{i = 1}^{N_j} (W_i + \\epsilon_{ijkt})\\) Shocks from small class can bias \\(\\tau\\) \\[ \\frac{1}{N_j} \\sum_{i = 1}^{N_j} \\epsilon_{ijkt} \\neq 0 \\] which will inflate the teacher fixed effect Even if we create random teacher fixed effect and put it in the model, it still contains bias mentioned above which can still \\(\\tau\\) (but we do not know the way it will affect - whether more positive or negative). If teachers switch schools, then we can estimate both teacher and school fixed effect (mobility web thin vs. thick) Mobility web refers to the web of switchers (i.e., from one status to another). \\[ Y_{ijkt} = Y_{ijk(t-1)} \\alpha + X_{it}\\beta + T_{it} \\tau + P_k + \\epsilon_{ijkt} \\] If we demean (fixed-effect), \\(\\tau\\) (teacher fixed effect) will go away If you want to examine teacher fixed effect, we have to include teacher fixed effect Control for school, the article argues that there is no selection bias For \\(\\frac{1}{N_j} \\sum_{i =1}^{N_j} \\epsilon_{ijkt}\\) (teacher-level average residuals), \\(var(\\tau)\\) does not change with \\(N_j\\) (Figure 2 in the paper). In words, the quality of teachers is not a function of the number of students If \\(var(\\tau) =0\\) it means that teacher quality does not matter Spin-off of Measurement Error: Sampling error or estimation error \\[ \\hat{\\tau}_j = \\tau_j + \\lambda_j \\] \\[ var(\\hat{\\tau}) = var(\\tau + \\lambda) \\] Assume \\(cov(\\tau_j, \\lambda_j)=0\\) (reasonable) In words, your randomness in getting children does not correlation with teacher quality. Hence, \\[ \\begin{aligned} var(\\hat{\\tau}) &amp;= var(\\tau) + var(\\lambda) \\\\ var(\\tau) &amp;= var(\\hat{\\tau}) - var(\\lambda) \\\\ \\end{aligned} \\] We have \\(var(\\hat{\\tau})\\) and we need to estimate \\(var(\\lambda)\\) \\[ var(\\lambda) = \\frac{1}{J} \\sum_{j=1}^J \\hat{\\sigma}^2_j \\] where \\(\\hat{\\sigma}^2_j\\) is the squared standard error of the teacher \\(j\\) (a function of \\(n\\)) Hence, \\[ \\frac{var(\\tau)}{var(\\hat{\\tau})} = \\text{reliability} = \\text{true variance signal} \\] also known as how much noise in \\(\\hat{\\tau}\\) and \\[ 1 - \\frac{var(\\tau)}{var(\\hat{\\tau})} = \\text{noise} \\] Even in cases where the true relationship is that \\(\\tau\\) is a function of \\(N_j\\), then our recovery method for \\(\\lambda\\) is still not affected To examine our assumption \\[ \\hat{\\tau}_j = \\beta_0 + X_j \\beta_1 + \\epsilon_j \\] Regressing teacher fixed-effect on teacher characteristics should give us \\(R^2\\) close to 0, because teacher characteristics cannot predict sampling error (\\(\\hat{\\tau}\\) contain sampling error) 12.4.3 Tests for Assumptions We typically don’t test heteroskedasticity because we will use robust covariance matrix estimation anyway. Dataset library(&quot;plm&quot;) data(&quot;EmplUK&quot;, package=&quot;plm&quot;) data(&quot;Produc&quot;, package=&quot;plm&quot;) data(&quot;Grunfeld&quot;, package=&quot;plm&quot;) data(&quot;Wages&quot;, package=&quot;plm&quot;) 12.4.3.1 Poolability also known as an F test of stability (or Chow test) for the coefficients \\(H_0\\): All individuals have the same coefficients (i.e., equal coefficients for all individuals). \\(H_a\\) Different individuals have different coefficients. Notes: Under a within (i.e., fixed) model, different intercepts for each individual are assumed Under random model, same intercept is assumed library(plm) plm::pooltest(inv~value+capital, data=Grunfeld, model=&quot;within&quot;) #&gt; #&gt; F statistic #&gt; #&gt; data: inv ~ value + capital #&gt; F = 5.7805, df1 = 18, df2 = 170, p-value = 1.219e-10 #&gt; alternative hypothesis: unstability Hence, we reject the null hypothesis that coefficients are stable. Then, we should use the random model. 12.4.3.2 Individual and time effects use the Lagrange multiplier test to test the presence of individual or time or both (i.e., individual and time). Types: honda: (Honda 1985) Default bp: (Breusch and Pagan 1980) for unbalanced panels kw: (M. L. King and Wu 1997) unbalanced panels, and two-way effects ghm: (Gourieroux, Holly, and Monfort 1982): two-way effects pFtest(inv~value+capital, data=Grunfeld, effect=&quot;twoways&quot;) #&gt; #&gt; F test for twoways effects #&gt; #&gt; data: inv ~ value + capital #&gt; F = 17.403, df1 = 28, df2 = 169, p-value &lt; 2.2e-16 #&gt; alternative hypothesis: significant effects pFtest(inv~value+capital, data=Grunfeld, effect=&quot;individual&quot;) #&gt; #&gt; F test for individual effects #&gt; #&gt; data: inv ~ value + capital #&gt; F = 49.177, df1 = 9, df2 = 188, p-value &lt; 2.2e-16 #&gt; alternative hypothesis: significant effects pFtest(inv~value+capital, data=Grunfeld, effect=&quot;time&quot;) #&gt; #&gt; F test for time effects #&gt; #&gt; data: inv ~ value + capital #&gt; F = 0.23451, df1 = 19, df2 = 178, p-value = 0.9997 #&gt; alternative hypothesis: significant effects 12.4.3.3 Cross-sectional dependence/contemporaneous correlation Null hypothesis: residuals across entities are not correlated. 12.4.3.3.1 Global cross-sectional dependence pcdtest(inv~value+capital, data=Grunfeld, model=&quot;within&quot;) #&gt; #&gt; Pesaran CD test for cross-sectional dependence in panels #&gt; #&gt; data: inv ~ value + capital #&gt; z = 4.6612, p-value = 3.144e-06 #&gt; alternative hypothesis: cross-sectional dependence 12.4.3.3.2 Local cross-sectional dependence use the same command, but supply matrix w to the argument. pcdtest(inv~value+capital, data=Grunfeld, model=&quot;within&quot;) #&gt; #&gt; Pesaran CD test for cross-sectional dependence in panels #&gt; #&gt; data: inv ~ value + capital #&gt; z = 4.6612, p-value = 3.144e-06 #&gt; alternative hypothesis: cross-sectional dependence 12.4.3.4 Serial Correlation Null hypothesis: there is no serial correlation usually seen in macro panels with long time series (large N and T), not seen in micro panels (small T and large N) Serial correlation can arise from individual effects(i.e., time-invariant error component), or idiosyncratic error terms (e..g, in the case of AR(1) process). But typically, when we refer to serial correlation, we refer to the second one. Can be marginal test: only 1 of the two above dependence (but can be biased towards rejection) joint test: both dependencies (but don’t know which one is causing the problem) conditional test: assume you correctly specify one dependence structure, test whether the other departure is present. 12.4.3.4.1 Unobserved effect test semi-parametric test (the test statistic \\(W \\dot{\\sim} N\\) regardless of the distribution of the errors) with \\(H_0: \\sigma^2_\\mu = 0\\) (i.e., no unobserved effects in the residuals), favors pooled OLS. Under the null, covariance matrix of the residuals = its diagonal (off-diagonal = 0) It is robust against both unobserved effects that are constant within every group, and any kind of serial correlation. pwtest(log(gsp) ~ log(pcap) + log(pc) + log(emp) + unemp, data = Produc) #&gt; #&gt; Wooldridge&#39;s test for unobserved individual effects #&gt; #&gt; data: formula #&gt; z = 3.9383, p-value = 8.207e-05 #&gt; alternative hypothesis: unobserved effect Here, we reject the null hypothesis that the no unobserved effects in the residuals. Hence, we will exclude using pooled OLS. 12.4.3.4.2 Locally robust tests for random effects and serial correlation A joint LM test for random effects and serial correlation assuming normality and homoskedasticity of the idiosyncratic errors [Baltagi and Li (1991)](Baltagi and Li 1995) pbsytest(log(gsp) ~ log(pcap) + log(pc) + log(emp) + unemp, data = Produc, test = &quot;j&quot;) #&gt; #&gt; Baltagi and Li AR-RE joint test #&gt; #&gt; data: formula #&gt; chisq = 4187.6, df = 2, p-value &lt; 2.2e-16 #&gt; alternative hypothesis: AR(1) errors or random effects Here, we reject the null hypothesis that there is no presence of serial correlation, and random effects. But we still do not know whether it is because of serial correlation, of random effects or of both To know the departure from the null assumption, we can use Bera, Sosa-Escudero, and Yoon (2001)’s test for first-order serial correlation or random effects (both under normality and homoskedasticity assumption of the error). BSY for serial correlation pbsytest(log(gsp) ~ log(pcap) + log(pc) + log(emp) + unemp, data = Produc) #&gt; #&gt; Bera, Sosa-Escudero and Yoon locally robust test #&gt; #&gt; data: formula #&gt; chisq = 52.636, df = 1, p-value = 4.015e-13 #&gt; alternative hypothesis: AR(1) errors sub random effects BSY for random effects pbsytest(log(gsp)~log(pcap)+log(pc)+log(emp)+unemp, data=Produc, test=&quot;re&quot;) #&gt; #&gt; Bera, Sosa-Escudero and Yoon locally robust test (one-sided) #&gt; #&gt; data: formula #&gt; z = 57.914, p-value &lt; 2.2e-16 #&gt; alternative hypothesis: random effects sub AR(1) errors Since BSY is only locally robust, if you “know” there is no serial correlation, then this test is based on LM test is more superior: plmtest(inv ~ value + capital, data = Grunfeld, type = &quot;honda&quot;) #&gt; #&gt; Lagrange Multiplier Test - (Honda) #&gt; #&gt; data: inv ~ value + capital #&gt; normal = 28.252, p-value &lt; 2.2e-16 #&gt; alternative hypothesis: significant effects On the other hand, if you know there is no random effects, to test for serial correlation, use (Breusch 1978)-(Godfrey 1978)’s test lmtest::bgtest() If you “know” there are random effects, use (Baltagi and Li 1995)’s. to test for serial correlation in both AR(1) and MA(1) processes. \\(H_0\\): Uncorrelated errors. Note: one-sided only has power against positive serial correlation. applicable to only balanced panels. pbltest( log(gsp) ~ log(pcap) + log(pc) + log(emp) + unemp, data = Produc, alternative = &quot;onesided&quot; ) #&gt; #&gt; Baltagi and Li one-sided LM test #&gt; #&gt; data: log(gsp) ~ log(pcap) + log(pc) + log(emp) + unemp #&gt; z = 21.69, p-value &lt; 2.2e-16 #&gt; alternative hypothesis: AR(1)/MA(1) errors in RE panel model General serial correlation tests applicable to random effects model, OLS, and FE (with large T, also known as long panel). can also test higher-order serial correlation plm::pbgtest(plm::plm(inv ~ value + capital, data = Grunfeld, model = &quot;within&quot;), order = 2) #&gt; #&gt; Breusch-Godfrey/Wooldridge test for serial correlation in panel models #&gt; #&gt; data: inv ~ value + capital #&gt; chisq = 42.587, df = 2, p-value = 5.655e-10 #&gt; alternative hypothesis: serial correlation in idiosyncratic errors in the case of short panels (small T and large n), we can use pwartest(log(emp) ~ log(wage) + log(capital), data=EmplUK) #&gt; #&gt; Wooldridge&#39;s test for serial correlation in FE panels #&gt; #&gt; data: plm.model #&gt; F = 312.3, df1 = 1, df2 = 889, p-value &lt; 2.2e-16 #&gt; alternative hypothesis: serial correlation 12.4.3.5 Unit roots/stationarity Dickey-Fuller test for stochastic trends. Null hypothesis: the series is non-stationary (unit root) You would want your test to be less than the critical value (p&lt;.5) so that there is evidence there is not unit roots. 12.4.3.6 Heteroskedasticity Breusch-Pagan test Null hypothesis: the data is homoskedastic If there is evidence for heteroskedasticity, robust covariance matrix is advised. To control for heteroskedasticity: Robust covariance matrix estimation (Sandwich estimator) “white1” - for general heteroskedasticity but no serial correlation (check serial correlation first). Recommended for random effects. “white2” - is “white1” restricted to a common variance within groups. Recommended for random effects. “arellano” - both heteroskedasticity and serial correlation. Recommended for fixed effects 12.4.4 Model Selection 12.4.4.1 POLS vs. RE The continuum between RE (used FGLS which more assumption ) and POLS check back on the section of FGLS Breusch-Pagan LM test Test for the random effect model based on the OLS residual Null hypothesis: variances across entities is zero. In another word, no panel effect. If the test is significant, RE is preferable compared to POLS 12.4.4.2 FE vs. RE RE does not require strict exogeneity for consistency (feedback effect between residual and covariates) Hypothesis If true \\(H_0: Cov(c_i,\\mathbf{x_{it}})=0\\) \\(\\hat{\\beta}_{RE}\\) is consistent and efficient, while \\(\\hat{\\beta}_{FE}\\) is consistent \\(H_0: Cov(c_i,\\mathbf{x_{it}}) \\neq 0\\) \\(\\hat{\\beta}_{RE}\\) is inconsistent, while \\(\\hat{\\beta}_{FE}\\) is consistent Hausman Test For the Hausman test to run, you need to assume that strict exogeneity hold A4 to hold for \\(u_{it}\\) Then, Hausman test statistic: \\(H=(\\hat{\\beta}_{RE}-\\hat{\\beta}_{FE})&#39;(V(\\hat{\\beta}_{RE})- V(\\hat{\\beta}_{FE}))(\\hat{\\beta}_{RE}-\\hat{\\beta}_{FE}) \\sim \\chi_{n(X)}^2\\) where \\(n(X)\\) is the number of parameters for the time-varying regressors. A low p-value means that we would reject the null hypothesis and prefer FE A high p-value means that we would not reject the null hypothesis and consider RE estimator. gw &lt;- plm(inv ~ value + capital, data = Grunfeld, model = &quot;within&quot;) gr &lt;- plm(inv ~ value + capital, data = Grunfeld, model = &quot;random&quot;) phtest(gw, gr) #&gt; #&gt; Hausman Test #&gt; #&gt; data: inv ~ value + capital #&gt; chisq = 2.3304, df = 2, p-value = 0.3119 #&gt; alternative hypothesis: one model is inconsistent Violation Estimator Basic Estimator Instrumental variable Estimator Variable Coefficients estimator Generalized Method of Moments estimator General FGLS estimator Means groups estimator CCEMG Estimator for limited dependent variables 12.4.5 Summary All three estimators (POLS, RE, FE) require A1, A2, A5 (for individuals) to be consistent. Additionally, POLS is consistent under A3a(for \\(u_{it}\\)): \\(E(\\mathbf{x}_{it}&#39;u_{it})=0\\), and RE Assumption \\(E(\\mathbf{x}_{it}&#39;c_{i})=0\\) If A4 does not hold, use cluster robust SE but POLS is not efficient RE is consistent under A3a(for \\(u_{it}\\)): \\(E(\\mathbf{x}_{it}&#39;u_{it})=0\\), and RE Assumption \\(E(\\mathbf{x}_{it}&#39;c_{i})=0\\) If A4 (for \\(u_{it}\\)) holds then usual SE are valid and RE is most efficient If A4 (for \\(u_{it}\\)) does not hold, use cluster robust SE ,and RE is no longer most efficient (but still more efficient than POLS) FE is consistent under A3 \\(E((\\mathbf{x}_{it}-\\bar{\\mathbf{x}}_{it})&#39;(u_{it} -\\bar{u}_{it}))=0\\) Cannot estimate effects of time constant variables A4 generally does not hold for \\(u_{it} -\\bar{u}_{it}\\) so cluster robust SE are needed Note: A5 for individual (not for time dimension) implies that you have [A5a] for the entire data set. Estimator / True Model POLS RE FE POLS Consistent Consistent Inconsistent FE Consistent Consistent Consistent RE Consistent Consistent Inconsistent Based on table provided by Ani Katchova 12.4.6 Application 12.4.6.1 plm package Recommended application of plm can be found here and here by Yves Croissant #install.packages(&quot;plm&quot;) library(&quot;plm&quot;) library(foreign) Panel &lt;- read.dta(&quot;http://dss.princeton.edu/training/Panel101.dta&quot;) attach(Panel) Y &lt;- cbind(y) X &lt;- cbind(x1, x2, x3) # Set data as panel data pdata &lt;- pdata.frame(Panel, index = c(&quot;country&quot;, &quot;year&quot;)) # Pooled OLS estimator pooling &lt;- plm(Y ~ X, data = pdata, model = &quot;pooling&quot;) summary(pooling) # Between estimator between &lt;- plm(Y ~ X, data = pdata, model = &quot;between&quot;) summary(between) # First differences estimator firstdiff &lt;- plm(Y ~ X, data = pdata, model = &quot;fd&quot;) summary(firstdiff) # Fixed effects or within estimator fixed &lt;- plm(Y ~ X, data = pdata, model = &quot;within&quot;) summary(fixed) # Random effects estimator random &lt;- plm(Y ~ X, data = pdata, model = &quot;random&quot;) summary(random) # LM test for random effects versus OLS # Accept Null, then OLS, Reject Null then RE plmtest(pooling, effect = &quot;individual&quot;, type = c(&quot;bp&quot;)) # other type: &quot;honda&quot;, &quot;kw&quot;,&quot; &quot;ghm&quot;; other effect : &quot;time&quot; &quot;twoways&quot; # B-P/LM and Pesaran CD (cross-sectional dependence) test # Breusch and Pagan&#39;s original LM statistic pcdtest(fixed, test = c(&quot;lm&quot;)) # Pesaran&#39;s CD statistic pcdtest(fixed, test = c(&quot;cd&quot;)) # Serial Correlation pbgtest(fixed) # stationary library(&quot;tseries&quot;) adf.test(pdata$y, k = 2) # LM test for fixed effects versus OLS pFtest(fixed, pooling) # Hausman test for fixed versus random effects model phtest(random, fixed) # Breusch-Pagan heteroskedasticity library(lmtest) bptest(y ~ x1 + factor(country), data = pdata) # If there is presence of heteroskedasticity ## For RE model coeftest(random) #orginal coef # Heteroskedasticity consistent coefficients coeftest(random, vcovHC) t(sapply(c(&quot;HC0&quot;, &quot;HC1&quot;, &quot;HC2&quot;, &quot;HC3&quot;, &quot;HC4&quot;), function(x) sqrt(diag( vcovHC(random, type = x) )))) #show HC SE of the coef # HC0 - heteroskedasticity consistent. The default. # HC1,HC2, HC3 – Recommended for small samples. # HC3 gives less weight to influential observations. # HC4 - small samples with influential observations # HAC - heteroskedasticity and autocorrelation consistent ## For FE model coeftest(fixed) # Original coefficients coeftest(fixed, vcovHC) # Heteroskedasticity consistent coefficients # Heteroskedasticity consistent coefficients (Arellano) coeftest(fixed, vcovHC(fixed, method = &quot;arellano&quot;)) t(sapply(c(&quot;HC0&quot;, &quot;HC1&quot;, &quot;HC2&quot;, &quot;HC3&quot;, &quot;HC4&quot;), function(x) sqrt(diag( vcovHC(fixed, type = x) )))) #show HC SE of the coef Advanced Other methods to estimate the random model: \"swar\": default (Swamy and Arora 1972) \"walhus\": (Wallace and Hussain 1969) \"amemiya\": (Amemiya 1971) \"nerlove\"” (Nerlove 1971) Other effects: Individual effects: default Time effects: \"time\" Individual and time effects: \"twoways\" Note: no random two-ways effect model for random.method = \"nerlove\" amemiya &lt;- plm( Y ~ X, data = pdata, model = &quot;random&quot;, random.method = &quot;amemiya&quot;, effect = &quot;twoways&quot; ) To call the estimation of the variance of the error components ercomp(Y ~ X, data = pdata, method = &quot;amemiya&quot;, effect = &quot;twoways&quot;) Check for the unbalancedness. Closer to 1 indicates balanced data (Ahrens and Pincus 1981) punbalancedness(random) Instrumental variable \"bvk\": default (Balestra and Varadharajan-Krishnakumar 1987) \"baltagi\": (Baltagi 1981) \"am\" (Amemiya and MaCurdy 1986) \"bms\": (Breusch, Mizon, and Schmidt 1989) instr &lt;- plm( Y ~ X | X_ins, data = pdata, random.method = &quot;ht&quot;, model = &quot;random&quot;, inst.method = &quot;baltagi&quot; ) 12.4.6.1.1 Other Estimators 12.4.6.1.1.1 Variable Coefficients Model fixed_pvcm &lt;- pvcm(Y ~ X, data = pdata, model = &quot;within&quot;) random_pvcm &lt;- pvcm(Y ~ X, data = pdata, model = &quot;random&quot;) More details can be found here 12.4.6.1.1.2 Generalized Method of Moments Estimator Typically use in dynamic models. Example is from plm package z2 &lt;- pgmm( log(emp) ~ lag(log(emp), 1) + lag(log(wage), 0:1) + lag(log(capital), 0:1) | lag(log(emp), 2:99) + lag(log(wage), 2:99) + lag(log(capital), 2:99), data = EmplUK, effect = &quot;twoways&quot;, model = &quot;onestep&quot;, transformation = &quot;ld&quot; ) summary(z2, robust = TRUE) 12.4.6.1.1.3 General Feasible Generalized Least Squares Models Assume there is no cross-sectional correlation Robust against intragroup heteroskedasticity and serial correlation. Suited when n is much larger than T (long panel) However, inefficient under group-wise heteorskedasticity. # Random Effects zz &lt;- pggls(log(emp) ~ log(wage) + log(capital), data = EmplUK, model = &quot;pooling&quot;) # Fixed zz &lt;- pggls(log(emp) ~ log(wage) + log(capital), data = EmplUK, model = &quot;within&quot;) 12.4.6.2 fixest package Available functions feols: linear models feglm: generalized linear models femlm: maximum likelihood estimation feNmlm: non-linear in RHS parameters fepois: Poisson fixed-effect fenegbin: negative binomial fixed-effect Notes can only work for fixest object Examples by the package’s authors library(fixest) data(airquality) # Setting a dictionary setFixest_dict( c( Ozone = &quot;Ozone (ppb)&quot;, Solar.R = &quot;Solar Radiation (Langleys)&quot;, Wind = &quot;Wind Speed (mph)&quot;, Temp = &quot;Temperature&quot; ) ) # On multiple estimations: see the dedicated vignette est = feols( Ozone ~ Solar.R + sw0(Wind + Temp) | csw(Month, Day), data = airquality, cluster = ~ Day ) etable(est) #&gt; est.1 est.2 #&gt; Dependent Var.: Ozone (ppb) Ozone (ppb) #&gt; #&gt; Solar Radiation (Langleys) 0.1148*** (0.0234) 0.0522* (0.0202) #&gt; Wind Speed (mph) -3.109*** (0.7986) #&gt; Temperature 1.875*** (0.3671) #&gt; Fixed-Effects: ------------------ ------------------ #&gt; Month Yes Yes #&gt; Day No No #&gt; __________________________ __________________ __________________ #&gt; S.E.: Clustered by: Day by: Day #&gt; Observations 111 111 #&gt; R2 0.31974 0.63686 #&gt; Within R2 0.12245 0.53154 #&gt; #&gt; est.3 est.4 #&gt; Dependent Var.: Ozone (ppb) Ozone (ppb) #&gt; #&gt; Solar Radiation (Langleys) 0.1078** (0.0329) 0.0509* (0.0236) #&gt; Wind Speed (mph) -3.289*** (0.7777) #&gt; Temperature 2.052*** (0.2415) #&gt; Fixed-Effects: ----------------- ------------------ #&gt; Month Yes Yes #&gt; Day Yes Yes #&gt; __________________________ _________________ __________________ #&gt; S.E.: Clustered by: Day by: Day #&gt; Observations 111 111 #&gt; R2 0.58018 0.81604 #&gt; Within R2 0.12074 0.61471 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # in latex etable(est, tex = T) #&gt; \\begingroup #&gt; \\centering #&gt; \\begin{tabular}{lcccc} #&gt; \\tabularnewline \\midrule \\midrule #&gt; Dependent Variable: &amp; \\multicolumn{4}{c}{Ozone (ppb)}\\\\ #&gt; Model: &amp; (1) &amp; (2) &amp; (3) &amp; (4)\\\\ #&gt; \\midrule #&gt; \\emph{Variables}\\\\ #&gt; Solar Radiation (Langleys) &amp; 0.1148$^{***}$ &amp; 0.0522$^{**}$ &amp; 0.1078$^{***}$ &amp; 0.0509$^{**}$\\\\ #&gt; &amp; (0.0234) &amp; (0.0202) &amp; (0.0329) &amp; (0.0236)\\\\ #&gt; Wind Speed (mph) &amp; &amp; -3.109$^{***}$ &amp; &amp; -3.289$^{***}$\\\\ #&gt; &amp; &amp; (0.7986) &amp; &amp; (0.7777)\\\\ #&gt; Temperature &amp; &amp; 1.875$^{***}$ &amp; &amp; 2.052$^{***}$\\\\ #&gt; &amp; &amp; (0.3671) &amp; &amp; (0.2415)\\\\ #&gt; \\midrule #&gt; \\emph{Fixed-effects}\\\\ #&gt; Month &amp; Yes &amp; Yes &amp; Yes &amp; Yes\\\\ #&gt; Day &amp; &amp; &amp; Yes &amp; Yes\\\\ #&gt; \\midrule #&gt; \\emph{Fit statistics}\\\\ #&gt; Observations &amp; 111 &amp; 111 &amp; 111 &amp; 111\\\\ #&gt; R$^2$ &amp; 0.31974 &amp; 0.63686 &amp; 0.58018 &amp; 0.81604\\\\ #&gt; Within R$^2$ &amp; 0.12245 &amp; 0.53154 &amp; 0.12074 &amp; 0.61471\\\\ #&gt; \\midrule \\midrule #&gt; \\multicolumn{5}{l}{\\emph{Clustered (Day) standard-errors in parentheses}}\\\\ #&gt; \\multicolumn{5}{l}{\\emph{Signif. Codes: ***: 0.01, **: 0.05, *: 0.1}}\\\\ #&gt; \\end{tabular} #&gt; \\par\\endgroup # get the fixed-effects coefficients for 1 model fixedEffects = fixef(est[[1]]) summary(fixedEffects) #&gt; Fixed_effects coefficients #&gt; Number of fixed-effects for variable Month is 5. #&gt; Mean = 19.6 Variance = 272 #&gt; #&gt; COEFFICIENTS: #&gt; Month: 5 6 7 8 9 #&gt; 3.219 8.288 34.26 40.12 12.13 # see the fixed effects for one dimension fixedEffects$Month #&gt; 5 6 7 8 9 #&gt; 3.218876 8.287899 34.260812 40.122257 12.130971 plot(fixedEffects) For multiple estimation # set up library(fixest) # let R know the base dataset (the biggest/ultimate # dataset that includes everything in your analysis) base = iris # rename variables names(base) = c(&quot;y1&quot;, &quot;y2&quot;, &quot;x1&quot;, &quot;x2&quot;, &quot;species&quot;) res_multi = feols( c(y1, y2) ~ x1 + csw(x2, x2 ^ 2) | sw0(species), data = base, fsplit = ~ species, lean = TRUE, vcov = &quot;hc1&quot; # can also clustered at the fixed effect level ) # it&#39;s recommended to use vcov at # estimation stage, not summary stage summary(res_multi, &quot;compact&quot;) #&gt; sample fixef lhs rhs (Intercept) x1 #&gt; 1 Full sample 1 y1 x1 + x2 4.19*** (0.104) 0.542*** (0.076) #&gt; 2 Full sample 1 y1 x1 + x2 + I(x2^2) 4.27*** (0.101) 0.719*** (0.082) #&gt; 3 Full sample 1 y2 x1 + x2 3.59*** (0.103) -0.257*** (0.066) #&gt; 4 Full sample 1 y2 x1 + x2 + I(x2^2) 3.68*** (0.097) -0.030 (0.078) #&gt; 5 Full sample species y1 x1 + x2 0.906*** (0.076) #&gt; 6 Full sample species y1 x1 + x2 + I(x2^2) 0.900*** (0.077) #&gt; 7 Full sample species y2 x1 + x2 0.155* (0.073) #&gt; 8 Full sample species y2 x1 + x2 + I(x2^2) 0.148. (0.075) #&gt; 9 setosa 1 y1 x1 + x2 4.25*** (0.474) 0.399 (0.325) #&gt; 10 setosa 1 y1 x1 + x2 + I(x2^2) 4.00*** (0.504) 0.405 (0.325) #&gt; 11 setosa 1 y2 x1 + x2 2.89*** (0.416) 0.247 (0.305) #&gt; 12 setosa 1 y2 x1 + x2 + I(x2^2) 2.82*** (0.423) 0.248 (0.304) #&gt; 13 setosa species y1 x1 + x2 0.399 (0.325) #&gt; 14 setosa species y1 x1 + x2 + I(x2^2) 0.405 (0.325) #&gt; 15 setosa species y2 x1 + x2 0.247 (0.305) #&gt; 16 setosa species y2 x1 + x2 + I(x2^2) 0.248 (0.304) #&gt; 17 versicolor 1 y1 x1 + x2 2.38*** (0.423) 0.934*** (0.166) #&gt; 18 versicolor 1 y1 x1 + x2 + I(x2^2) 0.323 (1.44) 0.901*** (0.164) #&gt; 19 versicolor 1 y2 x1 + x2 1.25*** (0.275) 0.067 (0.095) #&gt; 20 versicolor 1 y2 x1 + x2 + I(x2^2) 0.097 (1.01) 0.048 (0.099) #&gt; 21 versicolor species y1 x1 + x2 0.934*** (0.166) #&gt; 22 versicolor species y1 x1 + x2 + I(x2^2) 0.901*** (0.164) #&gt; 23 versicolor species y2 x1 + x2 0.067 (0.095) #&gt; 24 versicolor species y2 x1 + x2 + I(x2^2) 0.048 (0.099) #&gt; 25 virginica 1 y1 x1 + x2 1.05. (0.539) 0.995*** (0.090) #&gt; 26 virginica 1 y1 x1 + x2 + I(x2^2) -2.39 (2.04) 0.994*** (0.088) #&gt; 27 virginica 1 y2 x1 + x2 1.06. (0.572) 0.149 (0.107) #&gt; 28 virginica 1 y2 x1 + x2 + I(x2^2) 1.10 (1.76) 0.149 (0.108) #&gt; 29 virginica species y1 x1 + x2 0.995*** (0.090) #&gt; 30 virginica species y1 x1 + x2 + I(x2^2) 0.994*** (0.088) #&gt; 31 virginica species y2 x1 + x2 0.149 (0.107) #&gt; 32 virginica species y2 x1 + x2 + I(x2^2) 0.149 (0.108) #&gt; x2 I(x2^2) #&gt; 1 -0.320. (0.170) #&gt; 2 -1.52*** (0.307) 0.348*** (0.075) #&gt; 3 0.364* (0.142) #&gt; 4 -1.18*** (0.313) 0.446*** (0.074) #&gt; 5 -0.006 (0.163) #&gt; 6 0.290 (0.408) -0.088 (0.117) #&gt; 7 0.623*** (0.114) #&gt; 8 0.951* (0.472) -0.097 (0.125) #&gt; 9 0.712. (0.418) #&gt; 10 2.51. (1.47) -2.91 (2.10) #&gt; 11 0.702 (0.560) #&gt; 12 1.27 (2.39) -0.911 (3.28) #&gt; 13 0.712. (0.418) #&gt; 14 2.51. (1.47) -2.91 (2.10) #&gt; 15 0.702 (0.560) #&gt; 16 1.27 (2.39) -0.911 (3.28) #&gt; 17 -0.320 (0.364) #&gt; 18 3.01 (2.31) -1.24 (0.841) #&gt; 19 0.929*** (0.244) #&gt; 20 2.80. (1.65) -0.695 (0.583) #&gt; 21 -0.320 (0.364) #&gt; 22 3.01 (2.31) -1.24 (0.841) #&gt; 23 0.929*** (0.244) #&gt; 24 2.80. (1.65) -0.695 (0.583) #&gt; 25 0.007 (0.205) #&gt; 26 3.50. (2.09) -0.870 (0.519) #&gt; 27 0.535*** (0.122) #&gt; 28 0.503 (1.56) 0.008 (0.388) #&gt; 29 0.007 (0.205) #&gt; 30 3.50. (2.09) -0.870 (0.519) #&gt; 31 0.535*** (0.122) #&gt; 32 0.503 (1.56) 0.008 (0.388) # call the first 3 estimated models only etable(res_multi[1:3], # customize the headers headers = c(&quot;mod1&quot;, &quot;mod2&quot;, &quot;mod3&quot;)) #&gt; res_multi[1:3].1 res_multi[1:3].2 res_multi[1:3].3 #&gt; mod1 mod2 mod3 #&gt; Dependent Var.: y1 y1 y2 #&gt; #&gt; Constant 4.191*** (0.1037) 4.266*** (0.1007) 3.587*** (0.1031) #&gt; x1 0.5418*** (0.0761) 0.7189*** (0.0815) -0.2571*** (0.0664) #&gt; x2 -0.3196. (0.1700) -1.522*** (0.3072) 0.3640* (0.1419) #&gt; x2 square 0.3479*** (0.0748) #&gt; _______________ __________________ __________________ ___________________ #&gt; S.E. type Heteroskedas.-rob. Heteroskedas.-rob. Heteroskedast.-rob. #&gt; Observations 150 150 150 #&gt; R2 0.76626 0.79456 0.21310 #&gt; Adj. R2 0.76308 0.79034 0.20240 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 12.4.6.2.1 Multiple estimation (Left-hand side) When you have multiple interested dependent variables etable(feols(c(y1, y2) ~ x1 + x2, base)) #&gt; feols(c(y1, y2)..1 feols(c(y1, y2) ..2 #&gt; Dependent Var.: y1 y2 #&gt; #&gt; Constant 4.191*** (0.0970) 3.587*** (0.0937) #&gt; x1 0.5418*** (0.0693) -0.2571*** (0.0669) #&gt; x2 -0.3196* (0.1605) 0.3640* (0.1550) #&gt; _______________ __________________ ___________________ #&gt; S.E. type IID IID #&gt; Observations 150 150 #&gt; R2 0.76626 0.21310 #&gt; Adj. R2 0.76308 0.20240 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 To input a list of dependent variable depvars &lt;- c(&quot;y1&quot;, &quot;y2&quot;) res &lt;- lapply(depvars, function(var) { res &lt;- feols(xpd(..lhs ~ x1 + x2, ..lhs = var), data = base) # summary(res) }) etable(res) #&gt; model 1 model 2 #&gt; Dependent Var.: y1 y2 #&gt; #&gt; Constant 4.191*** (0.0970) 3.587*** (0.0937) #&gt; x1 0.5418*** (0.0693) -0.2571*** (0.0669) #&gt; x2 -0.3196* (0.1605) 0.3640* (0.1550) #&gt; _______________ __________________ ___________________ #&gt; S.E. type IID IID #&gt; Observations 150 150 #&gt; R2 0.76626 0.21310 #&gt; Adj. R2 0.76308 0.20240 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 12.4.6.2.2 Multiple estimation (Right-hand side) Options to write the functions sw (stepwise): sequentially analyze each elements y ~ sw(x1, x2) will be estimated as y ~ x1 and y ~ x2 sw0 (stepwise 0): similar to sw but also estimate a model without the elements in the set first y ~ sw(x1, x2) will be estimated as y ~ 1 and y ~ x1 and y ~ x2 csw (cumulative stepwise): sequentially add each element of the set to the formula y ~ csw(x1, x2) will be estimated as y ~ x1 and y ~ x1 + x2 csw0 (cumulative stepwise 0): similar to csw but also estimate a model without the elements in the set first y ~ csw(x1, x2) will be estimated as y~ 1 y ~ x1 and y ~ x1 + x2 mvsw (multiverse stepwise): all possible combination of the elements in the set (it will get large very quick). mvsw(x1, x2, x3) will be sw0(x1, x2, x3, x1 + x2, x1 + x3, x2 + x3, x1 + x2 + x3) 12.4.6.2.3 Split sample estimation etable(feols(y1 ~ x1 + x2, fsplit = ~ species, data = base)) #&gt; feols(y1 ~ x1 +..1 feols(y1 ~ x1 ..2 feols(y1 ~ x1 +..3 #&gt; Sample (species) Full sample setosa versicolor #&gt; Dependent Var.: y1 y1 y1 #&gt; #&gt; Constant 4.191*** (0.0970) 4.248*** (0.4114) 2.381*** (0.4493) #&gt; x1 0.5418*** (0.0693) 0.3990 (0.2958) 0.9342*** (0.1693) #&gt; x2 -0.3196* (0.1605) 0.7121 (0.4874) -0.3200 (0.4024) #&gt; ________________ __________________ _________________ __________________ #&gt; S.E. type IID IID IID #&gt; Observations 150 50 50 #&gt; R2 0.76626 0.11173 0.57432 #&gt; Adj. R2 0.76308 0.07393 0.55620 #&gt; #&gt; feols(y1 ~ x1 +..4 #&gt; Sample (species) virginica #&gt; Dependent Var.: y1 #&gt; #&gt; Constant 1.052* (0.5139) #&gt; x1 0.9946*** (0.0893) #&gt; x2 0.0071 (0.1795) #&gt; ________________ __________________ #&gt; S.E. type IID #&gt; Observations 50 #&gt; R2 0.74689 #&gt; Adj. R2 0.73612 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 12.4.6.2.4 Standard Errors iid: errors are homoskedastic and independent and identically distributed hetero: errors are heteroskedastic using White correction cluster: errors are correlated within the cluster groups newey_west: (Newey and West 1986) use for time series or panel data. Errors are heteroskedastic and serially correlated. vcov = newey_west ~ id + period where id is the subject id and period is time period of the panel. to specify lag period to consider vcov = newey_west(2) ~ id + period where we’re considering 2 lag periods. driscoll_kraay (Driscoll and Kraay 1998) use for panel data. Errors are cross-sectionally and serially correlated. vcov = discoll_kraay ~ period conley: (Conley 1999) for cross-section data. Errors are spatially correlated vcov = conley ~ latitude + longitude to specify the distance cutoff, vcov = vcov_conley(lat = \"lat\", lon = \"long\", cutoff = 100, distance = \"spherical\"), which will use the conley() helper function. hc: from the sandwich package vcov = function(x) sandwich::vcovHC(x, type = \"HC1\")) To let R know which SE estimation you want to use, insert vcov = vcov_type ~ variables 12.4.6.2.5 Small sample correction To specify that R needs to use small sample correction add ssc = ssc(adj = T, cluster.adj = T) References "],["variable-transformation.html", "Chapter 13 Variable Transformation", " Chapter 13 Variable Transformation trafo vignette "],["continuous-variables.html", "13.1 Continuous Variables", " 13.1 Continuous Variables Purposes: To change the scale of the variables To transform skewed data distribution to normal distribution 13.1.1 Standardization \\[ x_i&#39; = \\frac{x_i - \\bar{x}}{s} \\] when you have a few large numbers 13.1.2 Min-max scaling \\[ x_i&#39; = \\frac{x_i - x_{max}}{x_{max} - x_{min}} \\] dependent on the min and max values, which makes it sensitive to outliers. best to use when you have values in a fixed interval. 13.1.3 Square Root/Cube Root When variables have positive skewness or residuals have positive heteroskasticity. Frequency counts variable Data have many 0 or extremely small values. 13.1.4 Logarithmic Variables have positively skewed distribution Formula In case \\(x_i&#39; = \\log(x_i)\\) cannot work zero because log(0) = -Inf \\(x_i&#39; = \\log(x_i + 1)\\) variables with 0 \\(x_i&#39; = \\log(x_i +c)\\) \\(x_i&#39; = \\frac{x_i}{|x_i|}\\log|x_i|\\) variables with negative values \\(x_i&#39;^\\lambda = \\log(x_i + \\sqrt{x_i^2 + \\lambda})\\) generalized log transformation For the general case of \\(\\log(x_i + c)\\), choosing a constant is rather tricky. The choice of the constant is critically important, especially when you want to do inference. It can dramatically change your model fit (see (Ekwaru and Veugelers 2018) for the independent variable case). J. Chen and Roth (2023) show that in causal inference problem, \\(\\log\\) transformation of values with meaningful 0 is problematic. But there are solutions for each approach (e.g., DID, IV). However, assuming that you do not have 0s because of Censoring No measurement errors (stemming from measurement tools) We can proceed choosing c (it’s okay if your 0’s are represent really small values). data(cars) cars$speed %&gt;% head() #&gt; [1] 4 4 7 7 8 9 log(cars$speed) %&gt;% head() #&gt; [1] 1.386294 1.386294 1.945910 1.945910 2.079442 2.197225 # log(x+1) log1p(cars$speed) %&gt;% head() #&gt; [1] 1.609438 1.609438 2.079442 2.079442 2.197225 2.302585 13.1.5 Exponential Negatively skewed data Underlying logarithmic trend (e.g., survival, decay) 13.1.6 Power Variables have negatively skewed distribution 13.1.7 Inverse/Reciprocal Variables have platykurtic distribution Data are positively skewed Ratio data data(cars) head(cars$dist) #&gt; [1] 2 10 4 22 16 10 plot(cars$dist) plot(1/(cars$dist)) 13.1.8 Hyperbolic arcsine Variables with positively skewed distribution 13.1.9 Ordered Quantile Norm (Bartlett 1947) \\[ x_i&#39; = \\Phi^{-1} (\\frac{rank(x_i) - 1/2}{length(x)}) \\] ord_dist &lt;- bestNormalize::orderNorm(cars$dist) ord_dist #&gt; orderNorm Transformation with 50 nonmissing obs and ties #&gt; - 35 unique values #&gt; - Original quantiles: #&gt; 0% 25% 50% 75% 100% #&gt; 2 26 36 56 120 ord_dist$x.t %&gt;% hist() 13.1.10 Arcsinh Proportion variable (0-1) cars$dist %&gt;% hist() # cars$dist %&gt;% MASS::truehist() as_dist &lt;- bestNormalize::arcsinh_x(cars$dist) as_dist #&gt; Standardized asinh(x) Transformation with 50 nonmissing obs.: #&gt; Relevant statistics: #&gt; - mean (before standardization) = 4.230843 #&gt; - sd (before standardization) = 0.7710887 as_dist$x.t %&gt;% hist() \\[ arcsinh(Y) = \\log(\\sqrt{1 + Y^2} + Y) \\] Paper Interpretation Azoulay, Fons-Rosen, and Zivin (2019) Elasticity Faber and Gaubert (2019) Percentage Hjort and Poulsen (2019) Percentage M. S. Johnson (2020) Percentage Beerli et al. (2021) Percentage Norris, Pecenco, and Weaver (2021) Percentage Berkouwer and Dean (2022) Percentage Cabral, Cui, and Dworsky (2022) Elasticity Carranza et al. (2022) Percentage Mirenda, Mocetti, and Rizzica (2022) Percentage For a simple regression model, \\(Y = \\beta X\\) When both \\(Y\\) and \\(X\\) are transformed, the coefficient estimate represents elasticity, indicating the percentage change in \\(Y\\) for a 1% change in \\(X\\). When only \\(Y\\) is in transformed and \\(X\\) is in raw form, the coefficient estimate represents the percentage change in \\(Y\\) for a one-unit change in \\(X\\). 13.1.11 Lambert W x F Transformation LambertW package Using moments to normalize data. Usually need to compare with the Box-Cox Transformation and Yeo-Johnson Transformation Can handle skewness, heavy-tailed. data(cars) head(cars$dist) #&gt; [1] 2 10 4 22 16 10 cars$dist %&gt;% hist() l_dist &lt;- LambertW::Gaussianize(cars$dist) # small fix l_dist %&gt;% hist() 13.1.12 Inverse Hyperbolic Sine (IHS) transformation Proposed by (N. L. Johnson 1949) Can be applied to real numbers. \\[ \\begin{aligned} f(x,\\theta) &amp;= \\frac{\\sinh^{-1} (\\theta x)}{\\theta} \\\\ &amp;= \\frac{\\log(\\theta x + (\\theta^2 x^2 + 1)^{1/2})}{\\theta} \\end{aligned} \\] 13.1.13 Box-Cox Transformation \\[ y^\\lambda = \\beta x+ \\epsilon \\] to fix non-linearity in the error terms work well between (-3,3) (i.e., small transformation). or with independent variables \\[ x_i&#39;^\\lambda = \\begin{cases} \\frac{x_i^\\lambda-1}{\\lambda} &amp; \\text{if } \\lambda \\neq 0\\\\ \\log(x_i) &amp; \\text{if } \\lambda = 0 \\end{cases} \\] And the two-parameter version is \\[ x_i&#39; (\\lambda_1, \\lambda_2) = \\begin{cases} \\frac{(x_i + \\lambda_2)^{\\lambda_1}-1}{} &amp; \\text{if } \\lambda_1 \\neq 0 \\\\ \\log(x_i + \\lambda_2) &amp; \\text{if } \\lambda_1 = 0 \\end{cases} \\] More advances (Manly 1976) (Bickel and Doksum 1981; Box and Cox 1981) library(MASS) data(cars) mod &lt;- lm(cars$speed ~ cars$dist, data = cars) # check residuals plot(mod) bc &lt;- boxcox(mod, lambda = seq(-3, 3)) # best lambda bc$x[which(bc$y == max(bc$y))] #&gt; [1] 1.242424 # model with best lambda mod_lambda = lm(cars$speed ^ (bc$x[which(bc$y == max(bc$y))]) ~ cars$dist, data = cars) plot(mod_lambda) # 2-parameter version two_bc = geoR::boxcoxfit(cars$speed) two_bc #&gt; Fitted parameters: #&gt; lambda beta sigmasq #&gt; 1.028798 15.253008 31.935297 #&gt; #&gt; Convergence code returned by optim: 0 plot(two_bc) # bestNormalize bc_dist &lt;- bestNormalize::boxcox(cars$dist) bc_dist #&gt; Standardized Box Cox Transformation with 50 nonmissing obs.: #&gt; Estimated statistics: #&gt; - lambda = 0.4950628 #&gt; - mean (before standardization) = 10.35636 #&gt; - sd (before standardization) = 3.978036 bc_dist$x.t %&gt;% hist() 13.1.14 Yeo-Johnson Transformation Similar to Box-Cox Transformation (when \\(\\lambda = 1\\)), but allows for negative value \\[ x_i&#39;^\\lambda = \\begin{cases} \\frac{(x_i+1)^\\lambda -1}{\\lambda} &amp; \\text{if } \\lambda \\neq0, x_i \\ge 0 \\\\ \\log(x_i + 1) &amp; \\text{if } \\lambda = 0, x_i \\ge 0 \\\\ \\frac{-[(-x_i+1)^{2-\\lambda}-1]}{2 - \\lambda} &amp; \\text{if } \\lambda \\neq 2, x_i &lt;0 \\\\ -\\log(-x_i + 1) &amp; \\text{if } \\lambda = 2, x_i &lt;0 \\end{cases} \\] data(cars) yj_speed &lt;- bestNormalize::yeojohnson(cars$speed) yj_speed$x.t %&gt;% hist() 13.1.15 RankGauss Turn values into ranks, then ranks to values under normal distribution. 13.1.16 Summary Automatically choose the best method to normalize data (code by bestNormalize) bestdist &lt;- bestNormalize::bestNormalize(cars$dist) bestdist$x.t %&gt;% hist() boxplot(log10(bestdist$oos_preds), yaxt = &quot;n&quot;) # axis(2, at = log10(c(.1, .5, 1, 2, 5, 10)), # labels = c(.1, .5, 1, 2, 5, 10)) References "],["categorical-variables.html", "13.2 Categorical Variables", " 13.2 Categorical Variables Purposes To transform to continuous variable (for machine learning models) (e.g., encoding/ embedding in text mining) Approaches: One-hot encoding Label encoding Feature hashing Binary encoding Base N encoding Frequency encoding Target encoding Ordinal encoding Helmert encoding Mean encoding Weight of evidence encoding Probability ratio encoding Backward difference encoding Leave one out encoding James-Stein encoding M-estimator encoding Thermometer encoding "],["hypothesis-testing.html", "Chapter 14 Hypothesis Testing", " Chapter 14 Hypothesis Testing Error types: Type I Error (False Positive): Reality: nope Diagnosis/Analysis: yes Type II Error (False Negative): Reality: yes Diagnosis/Analysis: nope Power: The probability of rejecting the null hypothesis when it is actually false Note: Always written in terms of the population parameter (\\(\\beta\\)) not the estimator/estimate (\\(\\hat{\\beta}\\)) Sometimes, different disciplines prefer to use \\(\\beta\\) (i.e., standardized coefficient), or \\(\\mathbf{b}\\) (i.e., unstandardized coefficient) \\(\\beta\\) and \\(\\mathbf{b}\\) are similar in interpretation; however, \\(\\beta\\) is scale free. Hence, you can see the relative contribution of \\(\\beta\\) to the dependent variable. On the other hand, \\(\\mathbf{b}\\) can be more easily used in policy decisions. \\[ \\beta_j = \\mathbf{b} \\frac{s_{x_j}}{s_y} \\] Assuming the null hypothesis is true, what is the (asymptotic) distribution of the estimator Two-sided \\[ \\begin{aligned} &amp;H_0: \\beta_j = 0 \\\\ &amp;H_1: \\beta_j \\neq 0 \\end{aligned} \\] then under the null, the OLS estimator has the following distribution \\[ A1-A3a, A5: \\sqrt{n} \\hat{\\beta_j} \\sim N(0,Avar(\\sqrt{n}\\hat{\\beta}_j)) \\] For the one-sided test, the null is a set of values, so now you choose the worst case single value that is hardest to prove and derive the distribution under the null One-sided \\[ \\begin{aligned} &amp;H_0: \\beta_j\\ge 0 \\\\ &amp;H_1: \\beta_j &lt; 0 \\end{aligned} \\] then the hardest null value to prove is \\(H_0: \\beta_j=0\\). Then under this specific null, the OLS estimator has the following asymptotic distribution \\[ A1-A3a, A5: \\sqrt{n}\\hat{\\beta_j} \\sim N(0,Avar(\\sqrt{n}\\hat{\\beta}_j)) \\] "],["types-of-hypothesis-testing.html", "14.1 Types of hypothesis testing", " 14.1 Types of hypothesis testing \\(H_0 : \\theta = \\theta_0\\) \\(H_1 : \\theta \\neq \\theta_0\\) How far away / extreme \\(\\theta\\) can be if our null hypothesis is true Assume that our likelihood function for q is \\(L(q) = q^{30}(1-q)^{70}\\) Likelihood function q = seq(0, 1, length = 100) L = function(q) { q ^ 30 * (1 - q) ^ 70 } plot(q, L(q), ylab = &quot;L(q)&quot;, xlab = &quot;q&quot;, type = &quot;l&quot;) Log-Likelihood function q = seq(0, 1, length = 100) l = function(q) { 30 * log(q) + 70 * log(1 - q) } plot(q, l(q) - l(0.3), ylab = &quot;l(q) - l(qhat)&quot;, xlab = &quot;q&quot;, type = &quot;l&quot;) abline(v = 0.2) Figure from(Fox 1997) typically, The likelihood ratio test (and Lagrange Multiplier (Score)) performs better with small to moderate sample sizes, but the Wald test only requires one maximization (under the full model). References "],["wald-test.html", "14.2 Wald test", " 14.2 Wald test \\[ \\begin{aligned} W &amp;= (\\hat{\\theta}-\\theta_0)&#39;[cov(\\hat{\\theta})]^{-1}(\\hat{\\theta}-\\theta_0) \\\\ W &amp;\\sim \\chi_q^2 \\end{aligned} \\] where \\(cov(\\hat{\\theta})\\) is given by the inverse Fisher Information matrix evaluated at \\(\\hat{\\theta}\\) and q is the rank of \\(cov(\\hat{\\theta})\\), which is the number of non-redundant parameters in \\(\\theta\\) Alternatively, \\[ t_W=\\frac{(\\hat{\\theta}-\\theta_0)^2}{I(\\theta_0)^{-1}} \\sim \\chi^2_{(v)} \\] where v is the degree of freedom. Equivalently, \\[ s_W= \\frac{\\hat{\\theta}-\\theta_0}{\\sqrt{I(\\hat{\\theta})^{-1}}} \\sim Z \\] How far away in the distribution your sample estimate is from the hypothesized population parameter. For a null value, what is the probability you would have obtained a realization “more extreme” or “worse” than the estimate you actually obtained? Significance Level (\\(\\alpha\\)) and Confidence Level (\\(1-\\alpha\\)) The significance level is the benchmark in which the probability is so low that we would have to reject the null The confidence level is the probability that sets the bounds on how far away the realization of the estimator would have to be to reject the null. Test Statistics Standardized (transform) the estimator and null value to a test statistic that always has the same distribution Test Statistic for the OLS estimator for a single hypothesis \\[ T = \\frac{\\sqrt{n}(\\hat{\\beta}_j-\\beta_{j0})}{\\sqrt{n}SE(\\hat{\\beta_j})} \\sim^a N(0,1) \\] Equivalently, \\[ T = \\frac{(\\hat{\\beta}_j-\\beta_{j0})}{SE(\\hat{\\beta_j})} \\sim^a N(0,1) \\] the test statistic is another random variable that is a function of the data and null hypothesis. T denotes the random variable test statistic t denotes the single realization of the test statistic Evaluating Test Statistic: determine whether or not we reject or fail to reject the null hypothesis at a given significance / confidence level Three equivalent ways Critical Value P-value Confidence Interval Critical Value For a given significance level, will determine the critical value \\((c)\\) One-sided: \\(H_0: \\beta_j \\ge \\beta_{j0}\\) \\[ P(T&lt;c|H_0)=\\alpha \\] Reject the null if \\(t&lt;c\\) One-sided: \\(H_0: \\beta_j \\le \\beta_{j0}\\) \\[ P(T&gt;c|H_0)=\\alpha \\] Reject the null if \\(t&gt;c\\) Two-sided: \\(H_0: \\beta_j \\neq \\beta_{j0}\\) \\[ P(|T|&gt;c|H_0)=\\alpha \\] Reject the null if \\(|t|&gt;c\\) p-value Calculate the probability that the test statistic was worse than the realization you have One-sided: \\(H_0: \\beta_j \\ge \\beta_{j0}\\) \\[ \\text{p-value} = P(T&lt;t|H_0) \\] One-sided: \\(H_0: \\beta_j \\le \\beta_{j0}\\) \\[ \\text{p-value} = P(T&gt;t|H_0) \\] Two-sided: \\(H_0: \\beta_j \\neq \\beta_{j0}\\) \\[ \\text{p-value} = P(|T|&lt;t|H_0) \\] reject the null if p-value \\(&lt; \\alpha\\) Confidence Interval Using the critical value associated with a null hypothesis and significance level, create an interval \\[ CI(\\hat{\\beta}_j)_{\\alpha} = [\\hat{\\beta}_j-(c \\times SE(\\hat{\\beta}_j)),\\hat{\\beta}_j+(c \\times SE(\\hat{\\beta}_j))] \\] If the null set lies outside the interval then we reject the null. We are not testing whether the true population value is close to the estimate, we are testing that given a field true population value of the parameter, how like it is that we observed this estimate. Can be interpreted as we believe with \\((1-\\alpha)\\times 100 \\%\\) probability that the confidence interval captures the true parameter value. With stronger assumption (A1-A6), we could consider Finite Sample Properties \\[ T = \\frac{\\hat{\\beta}_j-\\beta_{j0}}{SE(\\hat{\\beta}_j)} \\sim T(n-k) \\] This above distributional derivation is strongly dependent on A4 and A5 T has a student t-distribution because the numerator is normal and the denominator is \\(\\chi^2\\). Critical value and p-values will be calculated from the student t-distribution rather than the standard normal distribution. \\(n \\to \\infty\\), \\(T(n-k)\\) is asymptotically standard normal. Rule of thumb if \\(n-k&gt;120\\): the critical values and p-values from the t-distribution are (almost) the same as the critical values and p-values from the standard normal distribution. if \\(n-k&lt;120\\) if (A1-A6) hold then the t-test is an exact finite distribution test if (A1-A3a, A5) hold, because the t-distribution is asymptotically normal, computing the critical values from a t-distribution is still a valid asymptotic test (i.e., not quite the right critical values and p0values, the difference goes away as \\(n \\to \\infty\\)) 14.2.1 Multiple Hypothesis test multiple parameters as the same time \\(H_0: \\beta_1 = 0\\ \\&amp; \\ \\beta_2 = 0\\) \\(H_0: \\beta_1 = 1\\ \\&amp; \\ \\beta_2 = 0\\) perform a series of simply hypothesis does not answer the question (joint distribution vs. two marginal distributions). The test statistic is based on a restriction written in matrix form. \\[ y=\\beta_0+x_1\\beta_1 + x_2\\beta_2 + x_3\\beta_3 + \\epsilon \\] Null hypothesis is \\(H_0: \\beta_1 = 0\\) &amp; \\(\\beta_2=0\\) can be rewritten as \\(H_0: \\mathbf{R}\\beta -\\mathbf{q}=0\\) where \\(\\mathbf{R}\\) is a \\(m \\times k\\) matrix where m is the number of restrictions and \\(k\\) is the number of parameters. \\(\\mathbf{q}\\) is a \\(k \\times 1\\) vector \\(\\mathbf{R}\\) “picks up” the relevant parameters while \\(\\mathbf{q}\\) is a the null value of the parameter \\[ \\mathbf{R}= \\left( \\begin{array}{cccc} 0 &amp; 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 &amp; 0 \\\\ \\end{array} \\right), \\mathbf{q} = \\left( \\begin{array}{c} 0 \\\\ 0 \\\\ \\end{array} \\right) \\] Test Statistic for OLS estimator for a multiple hypothesis \\[ F = \\frac{(\\mathbf{R\\hat{\\beta}-q})\\hat{\\Sigma}^{-1}(\\mathbf{R\\hat{\\beta}-q})}{m} \\sim^a F(m,n-k) \\] \\(\\hat{\\Sigma}^{-1}\\) is the estimator for the asymptotic variance-covariance matrix if A4 holds, both the homoskedastic and heteroskedastic versions produce valid estimator If A4 does not hold, only the heteroskedastic version produces valid estimators. When \\(m = 1\\), there is only a single restriction, then the \\(F\\)-statistic is the \\(t\\)-statistic squared. \\(F\\) distribution is strictly positive, check [F-Distribution] for more details. 14.2.2 Linear Combination Testing multiple parameters as the same time \\[ \\begin{aligned} H_0&amp;: \\beta_1 -\\beta_2 = 0 \\\\ H_0&amp;: \\beta_1 - \\beta_2 &gt; 0 \\\\ H_0&amp;: \\beta_1 - 2\\times\\beta_2 =0 \\end{aligned} \\] Each is a single restriction on a function of the parameters. Null hypothesis: \\[ H_0: \\beta_1 -\\beta_2 = 0 \\] can be rewritten as \\[ H_0: \\mathbf{R}\\beta -\\mathbf{q}=0 \\] where \\(\\mathbf{R}\\)=(0 1 -1 0 0) and \\(\\mathbf{q}=0\\) 14.2.3 Estimate Difference in Coefficients There is no package to estimate for the difference between two coefficients and its CI, but a simple function created by Katherine Zee can be used to calculate this difference. Some modifications might be needed if you don’t use standard lm model in R. difftest_lm &lt;- function(x1, x2, model) { diffest &lt;- summary(model)$coef[x1, &quot;Estimate&quot;] - summary(model)$coef[x2, &quot;Estimate&quot;] vardiff &lt;- (summary(model)$coef[x1, &quot;Std. Error&quot;] ^ 2 + summary(model)$coef[x2, &quot;Std. Error&quot;] ^ 2) - (2 * (vcov(model)[x1, x2])) # variance of x1 + variance of x2 - 2*covariance of x1 and x2 diffse &lt;- sqrt(vardiff) tdiff &lt;- (diffest) / (diffse) ptdiff &lt;- 2 * (1 - pt(abs(tdiff), model$df, lower.tail = T)) upr &lt;- # will usually be very close to 1.96 diffest + qt(.975, df = model$df) * diffse lwr &lt;- diffest + qt(.025, df = model$df) * diffse df &lt;- model$df return(list( est = round(diffest, digits = 2), t = round(tdiff, digits = 2), p = round(ptdiff, digits = 4), lwr = round(lwr, digits = 2), upr = round(upr, digits = 2), df = df )) } 14.2.4 Application library(&quot;car&quot;) # Multiple hypothesis mod.davis &lt;- lm(weight ~ repwt, data=Davis) linearHypothesis(mod.davis, c(&quot;(Intercept) = 0&quot;, &quot;repwt = 1&quot;),white.adjust = TRUE) #&gt; Linear hypothesis test #&gt; #&gt; Hypothesis: #&gt; (Intercept) = 0 #&gt; repwt = 1 #&gt; #&gt; Model 1: restricted model #&gt; Model 2: weight ~ repwt #&gt; #&gt; Note: Coefficient covariance matrix supplied. #&gt; #&gt; Res.Df Df F Pr(&gt;F) #&gt; 1 183 #&gt; 2 181 2 3.3896 0.03588 * #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # Linear Combination mod.duncan &lt;- lm(prestige ~ income + education, data=Duncan) linearHypothesis(mod.duncan, &quot;1*income - 1*education = 0&quot;) #&gt; Linear hypothesis test #&gt; #&gt; Hypothesis: #&gt; income - education = 0 #&gt; #&gt; Model 1: restricted model #&gt; Model 2: prestige ~ income + education #&gt; #&gt; Res.Df RSS Df Sum of Sq F Pr(&gt;F) #&gt; 1 43 7518.9 #&gt; 2 42 7506.7 1 12.195 0.0682 0.7952 14.2.5 Nonlinear Suppose that we have q nonlinear functions of the parameters \\[ \\mathbf{h}(\\theta) = \\{ h_1 (\\theta), ..., h_q (\\theta)\\}&#39; \\] The,n, the Jacobian matrix (\\(\\mathbf{H}(\\theta)\\)), of rank q is \\[ \\mathbf{H}_{q \\times p}(\\theta) = \\left( \\begin{array} {ccc} \\frac{\\partial h_1(\\theta)}{\\partial \\theta_1} &amp; ... &amp; \\frac{\\partial h_1(\\theta)}{\\partial \\theta_p} \\\\ . &amp; . &amp; . \\\\ \\frac{\\partial h_q(\\theta)}{\\partial \\theta_1} &amp; ... &amp; \\frac{\\partial h_q(\\theta)}{\\partial \\theta_p} \\end{array} \\right) \\] where the null hypothesis \\(H_0: \\mathbf{h} (\\theta) = 0\\) can be tested against the 2-sided alternative with the Wald statistic \\[ W = \\frac{\\mathbf{h(\\hat{\\theta})&#39;\\{H(\\hat{\\theta})[F(\\hat{\\theta})&#39;F(\\hat{\\theta})]^{-1}H(\\hat{\\theta})&#39;\\}^{-1}h(\\hat{\\theta})}}{s^2q} \\sim F_{q,n-p} \\] "],["the-likelihood-ratio-test.html", "14.3 The likelihood ratio test", " 14.3 The likelihood ratio test \\[ t_{LR} = 2[l(\\hat{\\theta})-l(\\theta_0)] \\sim \\chi^2_v \\] where v is the degree of freedom. Compare the height of the log-likelihood of the sample estimate in relation to the height of log-likelihood of the hypothesized population parameter Alternatively, This test considers a ratio of two maximizations, \\[ \\begin{aligned} L_r &amp;= \\text{maximized value of the likelihood under $H_0$ (the reduced model)} \\\\ L_f &amp;= \\text{maximized value of the likelihood under $H_0 \\cup H_a$ (the full model)} \\end{aligned} \\] Then, the likelihood ratio is: \\[ \\Lambda = \\frac{L_r}{L_f} \\] which can’t exceed 1 (since \\(L_f\\) is always at least as large as \\(L-r\\) because \\(L_r\\) is the result of a maximization under a restricted set of the parameter values). The likelihood ratio statistic is: \\[ \\begin{aligned} -2ln(\\Lambda) &amp;= -2ln(L_r/L_f) = -2(l_r - l_f) \\\\ \\lim_{n \\to \\infty}(-2ln(\\Lambda)) &amp;\\sim \\chi^2_v \\end{aligned} \\] where \\(v\\) is the number of parameters in the full model minus the number of parameters in the reduced model. If \\(L_r\\) is much smaller than \\(L_f\\) (the likelihood ratio exceeds \\(\\chi_{\\alpha,v}^2\\)), then we reject he reduced model and accept the full model at \\(\\alpha \\times 100 \\%\\) significance level "],["lagrange-multiplier-score.html", "14.4 Lagrange Multiplier (Score)", " 14.4 Lagrange Multiplier (Score) \\[ t_S= \\frac{S(\\theta_0)^2}{I(\\theta_0)} \\sim \\chi^2_v \\] where \\(v\\) is the degree of freedom. Compare the slope of the log-likelihood of the sample estimate in relation to the slope of the log-likelihood of the hypothesized population parameter "],["two-one-sided-tests-tost-equivalence-testing.html", "14.5 Two One-Sided Tests (TOST) Equivalence Testing", " 14.5 Two One-Sided Tests (TOST) Equivalence Testing This is a good way to test whether your population effect size is within a range of practical interest (e.g., if the effect size is 0). library(TOSTER) "],["marginal-effects.html", "Chapter 15 Marginal Effects", " Chapter 15 Marginal Effects In cases without polynomials or interactions, it can be easy to interpret the marginal effect. For example, \\[ Y = \\beta_1 X_1 + \\beta_2 X_2 \\] where \\(\\beta\\) are the marginal effects. Numerical derivation is easier than analytical derivation. We need to choose values for all the variables to calculate the marginal effect of \\(X\\) Analytical derivation \\[ f&#39;(x) \\equiv \\lim_{h \\to 0} \\frac{f(x+h) - f(x)}{h} \\] E.g., \\(f(x) = X^2\\) \\[ \\begin{aligned} f&#39;(x) &amp;= \\lim_{h \\to 0} \\frac{(x+h)^2 - x^2}{h} \\\\ &amp;= \\frac{x^2 + 2xh + h^2 - x^2}{h} \\\\ &amp;= \\frac{2xh + h^2}{h} \\\\ &amp;= 2x + h \\\\ &amp;= 2x \\end{aligned} \\] For numerically approach, we “just” need to find a small \\(h\\) to plug in our function. However, you also need a large enough \\(h\\) to have numerically accurate computation (Gould, Pitblado, and Poi 2010, chap. 1) Numerically approach One-sided derivative \\[ \\begin{aligned} f&#39;(x) &amp;= \\lim_{h \\to 0} \\frac{(x+h)^2 - x^2}{h} \\\\ &amp; \\approx \\frac{f(x+h) -f(x)}{h} \\end{aligned} \\] Alternatively, two-sided derivative \\[ f&#39;_2(x) \\approx \\frac{f(x+h) - f(x- h)}{2h} \\] Marginal effects for discrete variables (also known as incremental effects) are the change in \\(E[Y|X]\\) for a one unit change in \\(X\\) continuous variables are the change in \\(E[Y|X]\\) for very small changes in \\(X\\) (not unit changes), because it’s a derivative, which is a limit when \\(h \\to 0\\) Analytical derivation Numerical derivation Marginal Effects Rules of expectations Approximate analytical solution Standard Errors Rules of variances Delta method using the asymptotic errors (vcov matrix) References "],["delta-method.html", "15.1 Delta Method", " 15.1 Delta Method approximate the mean and variance of a function of random variables using a first-order Taylor approximation A semi-parametric method Alternative approaches: Analytically derive a probability function for the margin Simulation/Bootstrapping Resources: Advanced: modmarg Intermediate: UCLA stat Simple: Another one Let \\(G(\\beta)\\) be a function of the parameters \\(\\beta\\), then \\[ var(G(\\beta)) \\approx \\nabla G(\\beta) cov (\\beta) \\nabla G(\\beta)&#39; \\] where \\(\\nabla G(\\beta)\\) = the gradient of the partial derivatives of \\(G(\\beta)\\) (also known as the Jacobian) "],["average-marginal-effect-algorithm.html", "15.2 Average Marginal Effect Algorithm", " 15.2 Average Marginal Effect Algorithm For one-sided derivative \\(\\frac{\\partial p(\\mathbf{X},\\beta)}{\\partial X}\\) in the probability scale Estimate your model For each observation \\(i\\) Calculate \\(\\hat{Y}_{i0}\\) which is the prediction in the probability scale using observed values Increase \\(X\\) (variable of interest) by a “small” amount \\(h\\) (\\(X_{new} = X + h\\)) When \\(X\\) is continuous, \\(h = (|\\bar{X}| + 0.001) \\times 0.001\\) where \\(\\bar{X}\\) is the mean value of \\(X\\) When \\(X\\) is discrete, \\(h = 1\\) Calculate \\(\\hat{Y}_{i1}\\) which is the prediction in the probability scale using new \\(X\\) and other variables’ observed vales. Calculate the difference between the two predictions as fraction of \\(h\\): \\(\\frac{\\bar{Y}_{i1} - \\bar{Y}_{i0}}{h}\\) Average numerical derivative is \\(E[\\frac{\\bar{Y}_{i1} - \\bar{Y}_{i0}}{h}] \\approx \\frac{\\partial p (Y|\\mathbf{X}, \\beta)}{\\partial X}\\) Two-sided derivatives Estimate your model For each observation \\(i\\) Calculate \\(\\hat{Y}_{i0}\\) which is the prediction in the probability scale using observed values Increase \\(X\\) (variable of interest) by a “small” amount \\(h\\) (\\(X_{1} = X + h\\)) and decrease \\(X\\) (variable of interest) by a “small” amount \\(h\\) (\\(X_{2} = X - h\\)) When \\(X\\) is continuous, \\(h = (|\\bar{X}| + 0.001) \\times 0.001\\) where \\(\\bar{X}\\) is the mean value of \\(X\\) When \\(X\\) is discrete, \\(h = 1\\) Calculate \\(\\hat{Y}_{i1}\\) which is the prediction in the probability scale using new \\(X_1\\) and other variables’ observed vales. Calculate \\(\\hat{Y}_{i2}\\) which is the prediction in the probability scale using new \\(X_2\\) and other variables’ observed vales. Calculate the difference between the two predictions as fraction of \\(h\\): \\(\\frac{\\bar{Y}_{i1} - \\bar{Y}_{i2}}{2h}\\) Average numerical derivative is \\(E[\\frac{\\bar{Y}_{i1} - \\bar{Y}_{i2}}{2h}] \\approx \\frac{\\partial p (Y|\\mathbf{X}, \\beta)}{\\partial X}\\) library(margins) library(tidyverse) data(&quot;mtcars&quot;) mod &lt;- lm(mpg ~ cyl * disp * hp, data = mtcars) margins::margins(mod) %&gt;% summary() #&gt; factor AME SE z p lower upper #&gt; cyl -4.0592 3.7614 -1.0792 0.2805 -11.4313 3.3130 #&gt; disp -0.0350 0.0132 -2.6473 0.0081 -0.0610 -0.0091 #&gt; hp -0.0284 0.0185 -1.5348 0.1248 -0.0647 0.0079 # function for variable get_mae &lt;- function(mod, var = &quot;disp&quot;) { data = mod$model pred &lt;- predict(mod) if (class(mod$model[[{ { var } }]]) == &quot;numeric&quot;) { h = (abs(mean(mod$model[[var]])) + 0.01) * 0.01 } else { h = 1 } data[[{ { var } }]] &lt;- data[[{ { var } }]] - h pred_new &lt;- predict(mod, newdata = data) mean(pred - pred_new) / h } get_mae(mod, var = &quot;disp&quot;) #&gt; [1] -0.03504546 "],["packages.html", "15.3 Packages", " 15.3 Packages 15.3.1 MarginalEffects MarginalEffects package is a successor of margins and emtrends (faster, more efficient, more adaptable). Hence, this is advocated to be used. A limitation is that there is no readily function to correct for multiple comparisons. Hence, one can use the p.adjust function to overcome this disadvantage. Definitions from the package: Marginal effects are slopes or derivatives (i.e., effect of changes in a variable on the outcome) margins package defines marginal effects as “partial derivatives of the regression equation with respect to each variable in the model for each unit in the data.” Marginal means are averages or integrals (i.e., marginalizing across rows of a prediction grid) To customize your plot using plot_cme (which is a ggplot class), you can check this post by the author of the MarginalEffects package Causal inference with the parametric g-formula Because the plug-in g estimator is equivalent to the average contrast in the marginaleffects package. To get predicted values library(marginaleffects) library(tidyverse) data(mtcars) mod &lt;- lm(mpg ~ hp * wt * am, data = mtcars) predictions(mod) %&gt;% head() #&gt; #&gt; Estimate Std. Error z Pr(&gt;|z|) S 2.5 % 97.5 % #&gt; 22.5 0.884 25.4 &lt;0.001 471.7 20.8 24.2 #&gt; 20.8 1.194 17.4 &lt;0.001 223.3 18.5 23.1 #&gt; 25.3 0.709 35.7 &lt;0.001 922.7 23.9 26.7 #&gt; 20.3 0.704 28.8 &lt;0.001 601.5 18.9 21.6 #&gt; 17.0 0.712 23.9 &lt;0.001 416.2 15.6 18.4 #&gt; 19.7 0.875 22.5 &lt;0.001 368.8 17.9 21.4 #&gt; #&gt; Columns: rowid, estimate, std.error, statistic, p.value, s.value, conf.low, conf.high, mpg, hp, wt, am # for specific reference values predictions(mod, newdata = datagrid(am = 0, wt = c(2, 4))) #&gt; #&gt; am wt Estimate Std. Error z Pr(&gt;|z|) S 2.5 % 97.5 % hp #&gt; 0 2 22.0 2.04 10.8 &lt;0.001 87.4 18.0 26.0 147 #&gt; 0 4 16.6 1.08 15.3 &lt;0.001 173.8 14.5 18.7 147 #&gt; #&gt; Columns: rowid, estimate, std.error, statistic, p.value, s.value, conf.low, conf.high, mpg, hp, am, wt plot_cap(mod, condition = c(&quot;hp&quot;,&quot;wt&quot;)) # Average Margianl Effects mfx &lt;- marginaleffects(mod, variables = c(&quot;hp&quot;, &quot;wt&quot;)) summary(mfx) #&gt; #&gt; Term Contrast Estimate Std. Error z Pr(&gt;|z|) 2.5 % 97.5 % #&gt; hp mean(dY/dX) -0.0381 0.0128 -2.98 0.00291 -0.0631 -0.013 #&gt; wt mean(dY/dX) -3.9391 1.0858 -3.63 &lt; 0.001 -6.0672 -1.811 #&gt; #&gt; Columns: term, contrast, estimate, std.error, statistic, p.value, conf.low, conf.high # Group-Average Marginal Effects marginaleffects::marginaleffects(mod, by = &quot;hp&quot;, variables = &quot;am&quot;) #&gt; #&gt; Term Contrast hp Estimate Std. Error z Pr(&gt;|z|) S 2.5 % #&gt; am mean(1) - mean(0) 52 3.976 5.20 0.764 0.445 1.2 -6.22 #&gt; am mean(1) - mean(0) 62 -2.774 2.51 -1.107 0.268 1.9 -7.68 #&gt; am mean(1) - mean(0) 65 2.999 4.13 0.725 0.468 1.1 -5.10 #&gt; am mean(1) - mean(0) 66 2.025 3.48 0.582 0.561 0.8 -4.80 #&gt; am mean(1) - mean(0) 91 1.858 2.76 0.674 0.500 1.0 -3.54 #&gt; am mean(1) - mean(0) 93 1.201 2.35 0.511 0.609 0.7 -3.40 #&gt; am mean(1) - mean(0) 95 -1.832 1.97 -0.931 0.352 1.5 -5.69 #&gt; am mean(1) - mean(0) 97 0.708 2.04 0.347 0.728 0.5 -3.28 #&gt; am mean(1) - mean(0) 105 -2.682 2.37 -1.132 0.258 2.0 -7.32 #&gt; am mean(1) - mean(0) 109 -0.237 1.59 -0.149 0.881 0.2 -3.35 #&gt; am mean(1) - mean(0) 110 -0.640 1.57 -0.407 0.684 0.5 -3.73 #&gt; am mean(1) - mean(0) 113 4.081 3.94 1.037 0.300 1.7 -3.63 #&gt; am mean(1) - mean(0) 123 -2.098 2.10 -0.998 0.318 1.7 -6.22 #&gt; am mean(1) - mean(0) 150 -1.429 1.90 -0.753 0.452 1.1 -5.15 #&gt; am mean(1) - mean(0) 175 -0.416 1.56 -0.266 0.790 0.3 -3.48 #&gt; am mean(1) - mean(0) 180 -1.381 2.47 -0.560 0.576 0.8 -6.22 #&gt; am mean(1) - mean(0) 205 -2.873 6.24 -0.460 0.645 0.6 -15.11 #&gt; am mean(1) - mean(0) 215 -2.534 6.95 -0.364 0.716 0.5 -16.16 #&gt; am mean(1) - mean(0) 230 -1.477 7.07 -0.209 0.835 0.3 -15.34 #&gt; am mean(1) - mean(0) 245 1.115 2.28 0.488 0.625 0.7 -3.36 #&gt; am mean(1) - mean(0) 264 2.106 2.29 0.920 0.358 1.5 -2.38 #&gt; am mean(1) - mean(0) 335 4.027 3.24 1.243 0.214 2.2 -2.32 #&gt; 97.5 % #&gt; 14.18 #&gt; 2.14 #&gt; 11.10 #&gt; 8.85 #&gt; 7.26 #&gt; 5.80 #&gt; 2.02 #&gt; 4.70 #&gt; 1.96 #&gt; 2.87 #&gt; 2.45 #&gt; 11.79 #&gt; 2.02 #&gt; 2.29 #&gt; 2.64 #&gt; 3.46 #&gt; 9.36 #&gt; 11.09 #&gt; 12.39 #&gt; 5.59 #&gt; 6.59 #&gt; 10.38 #&gt; #&gt; Columns: term, contrast, hp, estimate, std.error, statistic, p.value, s.value, conf.low, conf.high, predicted_lo, predicted_hi, predicted # Marginal effects at representative values marginaleffects::marginaleffects(mod, newdata = datagrid(am = 0, wt = c(2, 4))) #&gt; #&gt; Term Contrast am wt Estimate Std. Error z Pr(&gt;|z|) S 2.5 % 97.5 % #&gt; am 1 - 0 0 2 2.5465 2.7860 0.914 0.3607 1.5 -2.9139 8.00694 #&gt; am 1 - 0 0 4 -2.9661 3.0381 -0.976 0.3289 1.6 -8.9207 2.98852 #&gt; hp dY/dX 0 2 -0.0598 0.0283 -2.115 0.0344 4.9 -0.1153 -0.00439 #&gt; hp dY/dX 0 4 -0.0309 0.0187 -1.654 0.0981 3.3 -0.0676 0.00572 #&gt; wt dY/dX 0 2 -2.6762 1.4194 -1.885 0.0594 4.1 -5.4582 0.10587 #&gt; wt dY/dX 0 4 -2.6762 1.4199 -1.885 0.0595 4.1 -5.4591 0.10676 #&gt; #&gt; Columns: rowid, term, contrast, estimate, std.error, statistic, p.value, s.value, conf.low, conf.high, am, wt, predicted_lo, predicted_hi, predicted, mpg, hp # Marginal Effects at the Mean marginaleffects::marginaleffects(mod, newdata = &quot;mean&quot;) #&gt; #&gt; Term Contrast Estimate Std. Error z Pr(&gt;|z|) S 2.5 % 97.5 % #&gt; am 1 - 0 -0.8086 1.52383 -0.531 0.59568 0.7 -3.795 2.1781 #&gt; hp dY/dX -0.0323 0.00956 -3.375 &lt; 0.001 10.4 -0.051 -0.0135 #&gt; wt dY/dX -3.7959 1.21310 -3.129 0.00175 9.2 -6.174 -1.4183 #&gt; #&gt; Columns: rowid, term, contrast, estimate, std.error, statistic, p.value, s.value, conf.low, conf.high, predicted_lo, predicted_hi, predicted, mpg, hp, wt, am # counterfactual comparisons(mod, variables = list(am = 0:1)) %&gt;% summary() #&gt; #&gt; Term Contrast Estimate Std. Error z Pr(&gt;|z|) 2.5 % 97.5 % #&gt; am mean(1) - mean(0) -0.0481 1.85 -0.026 0.979 -3.68 3.58 #&gt; #&gt; Columns: term, contrast, estimate, std.error, statistic, p.value, conf.low, conf.high 15.3.2 margins Marginal effects are partial derivative of the regression equation with respect to each variable in the model for each unit in the data Average Partial Effects: the contribution of each variable the outcome scale, conditional on the other variables involved in the link function transformation of the linear predictor Average Marginal Effects: the marginal contribution of each variable on the scale of the linear predictor. Average marginal effects are the mean of these unit-specific partial derivatives over some sample margins package gives the marginal effects of models (a replication of the margins command in Stata). prediction package gives the unit-specific and sample average predictions of models (similar to the predictive margins in Stata). library(margins) # examples by the package&#39;s authors mod &lt;- lm(mpg ~ cyl * hp + wt, data = mtcars) summary(mod) #&gt; #&gt; Call: #&gt; lm(formula = mpg ~ cyl * hp + wt, data = mtcars) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -3.3440 -1.4144 -0.6166 1.2160 4.2815 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 52.017520 4.916935 10.579 4.18e-11 *** #&gt; cyl -2.742125 0.800228 -3.427 0.00197 ** #&gt; hp -0.163594 0.052122 -3.139 0.00408 ** #&gt; wt -3.119815 0.661322 -4.718 6.51e-05 *** #&gt; cyl:hp 0.018954 0.006645 2.852 0.00823 ** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 2.242 on 27 degrees of freedom #&gt; Multiple R-squared: 0.8795, Adjusted R-squared: 0.8616 #&gt; F-statistic: 49.25 on 4 and 27 DF, p-value: 5.065e-12 In cases where you have interaction or polynomial terms, the coefficient estimates cannot be interpreted as the marginal effects of X on Y. Hence, if you want to know the average marginal effects of each variable then summary(margins(mod)) #&gt; factor AME SE z p lower upper #&gt; cyl 0.0381 0.5999 0.0636 0.9493 -1.1376 1.2139 #&gt; hp -0.0463 0.0145 -3.1909 0.0014 -0.0748 -0.0179 #&gt; wt -3.1198 0.6613 -4.7176 0.0000 -4.4160 -1.8236 # equivalently margins_summary(mod) #&gt; factor AME SE z p lower upper #&gt; cyl 0.0381 0.5999 0.0636 0.9493 -1.1376 1.2139 #&gt; hp -0.0463 0.0145 -3.1909 0.0014 -0.0748 -0.0179 #&gt; wt -3.1198 0.6613 -4.7176 0.0000 -4.4160 -1.8236 plot(margins(mod)) Marginal effects at the mean (MEM): Marginal effects at the mean values of the sample For discrete variables, it’s called average discrete change (ADC) Average Marginal Effect (AME) An average of the marginal effects at each value of the sample Marginal Effects at representative values (MER) margins(mod, at = list(hp = 150)) #&gt; at(hp) cyl hp wt #&gt; 150 0.1009 -0.04632 -3.12 margins(mod, at = list(hp = 150)) %&gt;% summary() #&gt; factor hp AME SE z p lower upper #&gt; cyl 150.0000 0.1009 0.6128 0.1647 0.8692 -1.1001 1.3019 #&gt; hp 150.0000 -0.0463 0.0145 -3.1909 0.0014 -0.0748 -0.0179 #&gt; wt 150.0000 -3.1198 0.6613 -4.7175 0.0000 -4.4160 -1.8236 15.3.3 mfx Works well with Generalized Linear Models/glm package For technical details, see the package vignette Model Dependent Variable Syntax Probit Binary probitmfx Logit Binary logitmfx Poisson Count poissonmfx Negative Binomial Count negbinmfx Beta Rate betamfx library(mfx) data(&quot;mtcars&quot;) poissonmfx(formula = vs ~ mpg * cyl * disp, data = mtcars) #&gt; Call: #&gt; poissonmfx(formula = vs ~ mpg * cyl * disp, data = mtcars) #&gt; #&gt; Marginal Effects: #&gt; dF/dx Std. Err. z P&gt;|z| #&gt; mpg 1.4722e-03 8.7531e-03 0.1682 0.8664 #&gt; cyl 6.6420e-03 3.9263e-02 0.1692 0.8657 #&gt; disp 1.5899e-04 9.4555e-04 0.1681 0.8665 #&gt; mpg:cyl -3.4698e-04 2.0564e-03 -0.1687 0.8660 #&gt; mpg:disp -7.6794e-06 4.5545e-05 -0.1686 0.8661 #&gt; cyl:disp -3.3837e-05 1.9919e-04 -0.1699 0.8651 #&gt; mpg:cyl:disp 1.6812e-06 9.8919e-06 0.1700 0.8650 This package can only give the marginal effect for each variable in the glm model, but not the average marginal effect that we might look for. "],["prediction-and-estimation.html", "Chapter 16 Prediction and Estimation", " Chapter 16 Prediction and Estimation Prediction and Estimation (or Causal Inference) serve distinct roles in understanding and modeling data. "],["prediction-2.html", "16.1 Prediction", " 16.1 Prediction Definition: Prediction, denoted as \\(\\hat{y}\\), is about creating an algorithm for predicting the outcome variable \\(y\\) from predictors \\(x\\). Goal: The primary goal is loss minimization, aiming for model accuracy on unseen data: \\[ \\hat{f} \\approx \\min E_{(y,x)} L(f(x), y) \\] Applications in Economics: Measure variables. Embed prediction tasks within parameter estimation or treatment effects. Control for observed confounders. "],["parameter-estimation.html", "16.2 Parameter Estimation", " 16.2 Parameter Estimation Definition: Parameter estimation, represented by \\(\\hat{\\beta}\\), focuses on estimating the relationship between \\(y\\) and \\(x\\). Goal: The aim is consistency, ensuring that models perform well on the training data: \\[ E[\\hat{f}] = f \\] Challenges: High-dimensional spaces can lead to covariance among variables and multicollinearity. This leads to the bias-variance tradeoff (Hastie et al. 2009). References "],["causation-versus-prediction.html", "16.3 Causation versus Prediction", " 16.3 Causation versus Prediction Understanding the relationship between causation and prediction is crucial in statistical modeling. Let \\(Y\\) be an outcome variable dependent on \\(X\\), and our aim is to manipulate \\(X\\) to maximize a payoff function \\(\\pi(X, Y)\\) (Kleinberg et al. 2015). The decision on \\(X\\) hinges on: \\[ \\begin{aligned} \\frac{d\\pi(X, Y)}{d X} &amp;= \\frac{\\partial \\pi}{\\partial X} (Y) + \\frac{\\partial \\pi}{\\partial Y} \\frac{\\partial Y}{\\partial X} \\\\ &amp;= \\frac{\\partial \\pi}{\\partial X} \\text{(Prediction)} + \\frac{\\partial \\pi}{\\partial Y} \\text{(Causation)} \\end{aligned} \\] Empirical work is essential for estimating the derivatives in this equation: \\(\\frac{\\partial Y}{\\partial X}\\) is required for causal inference to determine \\(X\\)’s effect on \\(Y\\), \\(\\frac{\\partial \\pi}{\\partial X}\\) is required for prediction of \\(Y\\). (SICSS 2018 - Sendhil Mullainathan’s presentation slide) References "],["moderation.html", "Chapter 17 Moderation", " Chapter 17 Moderation Spotlight Analysis: Compare the mean of the dependent of the two groups (treatment and control) at every value (Simple Slopes Analysis) Floodlight Analysis: is spotlight analysis on the whole range of the moderator (Johnson-Neyman intervals) Other Resources: BANOVAL : floodlight analysis on Bayesian ANOVA models cSEM : doFloodlightAnalysis in SEM model (Spiller et al. 2013) Terminology: Main effects (slopes): coefficients that do no involve interaction terms Simple slope: when a continuous independent variable interact with a moderating variable, its slope at a particular level of the moderating variable Simple effect: when a categorical independent variable interacts with a moderating variable, its effect at a particular level of the moderating variable. Example: \\[ Y = \\beta_0 + \\beta_1 X + \\beta_2 M + \\beta_3 X \\times M \\] where \\(\\beta_0\\) = intercept \\(\\beta_1\\) = simple effect (slope) of \\(X\\) (independent variable) \\(\\beta_2\\) = simple effect (slope) of \\(M\\) (moderating variable) \\(\\beta_3\\) = interaction of \\(X\\) and \\(M\\) Three types of interactions: Continuous by continuous Continuous by categorical Categorical by categorical When interpreting the three-way interactions, one can use the slope difference test (Dawson and Richter 2006) References "],["emmeans-package.html", "17.1 emmeans package", " 17.1 emmeans package install.packages(&quot;emmeans&quot;) library(emmeans) Data set is from UCLA seminar where gender and prog are categorical dat &lt;- readRDS(&quot;data/exercise.rds&quot;) %&gt;% mutate(prog = factor(prog, labels = c(&quot;jog&quot;, &quot;swim&quot;, &quot;read&quot;))) %&gt;% mutate(gender = factor(gender, labels = c(&quot;male&quot;, &quot;female&quot;))) 17.1.1 Continuous by continuous contcont &lt;- lm(loss~hours*effort,data=dat) summary(contcont) #&gt; #&gt; Call: #&gt; lm(formula = loss ~ hours * effort, data = dat) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -29.52 -10.60 -1.78 11.13 34.51 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 7.79864 11.60362 0.672 0.5017 #&gt; hours -9.37568 5.66392 -1.655 0.0982 . #&gt; effort -0.08028 0.38465 -0.209 0.8347 #&gt; hours:effort 0.39335 0.18750 2.098 0.0362 * #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 13.56 on 896 degrees of freedom #&gt; Multiple R-squared: 0.07818, Adjusted R-squared: 0.07509 #&gt; F-statistic: 25.33 on 3 and 896 DF, p-value: 9.826e-16 Simple slopes for a continuous by continuous model Spotlight analysis (Aiken and West 2005): usually pick 3 values of moderating variable: Mean Moderating Variable + \\(\\sigma \\times\\) (Moderating variable) Mean Moderating Variable Mean Moderating Variable - \\(\\sigma \\times\\) (Moderating variable) effar &lt;- round(mean(dat$effort) + sd(dat$effort), 1) effr &lt;- round(mean(dat$effort), 1) effbr &lt;- round(mean(dat$effort) - sd(dat$effort), 1) # specify list of points mylist &lt;- list(effort = c(effbr, effr, effar)) # get the estimates emtrends(contcont, ~ effort, var = &quot;hours&quot;, at = mylist) #&gt; effort hours.trend SE df lower.CL upper.CL #&gt; 24.5 0.261 1.352 896 -2.392 2.91 #&gt; 29.7 2.307 0.915 896 0.511 4.10 #&gt; 34.8 4.313 1.308 896 1.745 6.88 #&gt; #&gt; Confidence level used: 0.95 # plot mylist &lt;- list(hours = seq(0, 4, by = 0.4), effort = c(effbr, effr, effar)) emmip(contcont, effort ~ hours, at = mylist, CIs = TRUE) # statistical test for slope difference emtrends( contcont, pairwise ~ effort, var = &quot;hours&quot;, at = mylist, adjust = &quot;none&quot; ) #&gt; $emtrends #&gt; effort hours.trend SE df lower.CL upper.CL #&gt; 24.5 0.261 1.352 896 -2.392 2.91 #&gt; 29.7 2.307 0.915 896 0.511 4.10 #&gt; 34.8 4.313 1.308 896 1.745 6.88 #&gt; #&gt; Results are averaged over the levels of: hours #&gt; Confidence level used: 0.95 #&gt; #&gt; $contrasts #&gt; contrast estimate SE df t.ratio p.value #&gt; effort24.5 - effort29.7 -2.05 0.975 896 -2.098 0.0362 #&gt; effort24.5 - effort34.8 -4.05 1.931 896 -2.098 0.0362 #&gt; effort29.7 - effort34.8 -2.01 0.956 896 -2.098 0.0362 #&gt; #&gt; Results are averaged over the levels of: hours The 3 p-values are the same as the interaction term. For publication, we use library(ggplot2) # data mylist &lt;- list(hours = seq(0, 4, by = 0.4), effort = c(effbr, effr, effar)) contcontdat &lt;- emmip(contcont, effort ~ hours, at = mylist, CIs = TRUE, plotit = FALSE) contcontdat$feffort &lt;- factor(contcontdat$effort) levels(contcontdat$feffort) &lt;- c(&quot;low&quot;, &quot;med&quot;, &quot;high&quot;) # plot p &lt;- ggplot(data = contcontdat, aes(x = hours, y = yvar, color = feffort)) + geom_line() p1 &lt;- p + geom_ribbon(aes(ymax = UCL, ymin = LCL, fill = feffort), alpha = 0.4) p1 + labs(x = &quot;Hours&quot;, y = &quot;Weight Loss&quot;, color = &quot;Effort&quot;, fill = &quot;Effort&quot;) 17.1.2 Continuous by categorical # use Female as basline dat$gender &lt;- relevel(dat$gender, ref = &quot;female&quot;) contcat &lt;- lm(loss ~ hours * gender, data = dat) summary(contcat) #&gt; #&gt; Call: #&gt; lm(formula = loss ~ hours * gender, data = dat) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -27.118 -11.350 -1.963 10.001 42.376 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 3.335 2.731 1.221 0.222 #&gt; hours 3.315 1.332 2.489 0.013 * #&gt; gendermale 3.571 3.915 0.912 0.362 #&gt; hours:gendermale -1.724 1.898 -0.908 0.364 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 14.06 on 896 degrees of freedom #&gt; Multiple R-squared: 0.008433, Adjusted R-squared: 0.005113 #&gt; F-statistic: 2.54 on 3 and 896 DF, p-value: 0.05523 Get simple slopes by each level of the categorical moderator emtrends(contcat, ~ gender, var = &quot;hours&quot;) #&gt; gender hours.trend SE df lower.CL upper.CL #&gt; female 3.32 1.33 896 0.702 5.93 #&gt; male 1.59 1.35 896 -1.063 4.25 #&gt; #&gt; Confidence level used: 0.95 # test difference in slopes emtrends(contcat, pairwise ~ gender, var = &quot;hours&quot;) #&gt; $emtrends #&gt; gender hours.trend SE df lower.CL upper.CL #&gt; female 3.32 1.33 896 0.702 5.93 #&gt; male 1.59 1.35 896 -1.063 4.25 #&gt; #&gt; Confidence level used: 0.95 #&gt; #&gt; $contrasts #&gt; contrast estimate SE df t.ratio p.value #&gt; female - male 1.72 1.9 896 0.908 0.3639 # which is the same as the interaction term # plot (mylist &lt;- list( hours = seq(0, 4, by = 0.4), gender = c(&quot;female&quot;, &quot;male&quot;) )) #&gt; $hours #&gt; [1] 0.0 0.4 0.8 1.2 1.6 2.0 2.4 2.8 3.2 3.6 4.0 #&gt; #&gt; $gender #&gt; [1] &quot;female&quot; &quot;male&quot; emmip(contcat, gender ~ hours, at = mylist, CIs = TRUE) 17.1.3 Categorical by categorical # relevel baseline dat$prog &lt;- relevel(dat$prog, ref = &quot;read&quot;) dat$gender &lt;- relevel(dat$gender, ref = &quot;female&quot;) catcat &lt;- lm(loss ~ gender * prog, data = dat) summary(catcat) #&gt; #&gt; Call: #&gt; lm(formula = loss ~ gender * prog, data = dat) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -19.1723 -4.1894 -0.0994 3.7506 27.6939 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) -3.6201 0.5322 -6.802 1.89e-11 *** #&gt; gendermale -0.3355 0.7527 -0.446 0.656 #&gt; progjog 7.9088 0.7527 10.507 &lt; 2e-16 *** #&gt; progswim 32.7378 0.7527 43.494 &lt; 2e-16 *** #&gt; gendermale:progjog 7.8188 1.0645 7.345 4.63e-13 *** #&gt; gendermale:progswim -6.2599 1.0645 -5.881 5.77e-09 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 6.519 on 894 degrees of freedom #&gt; Multiple R-squared: 0.7875, Adjusted R-squared: 0.7863 #&gt; F-statistic: 662.5 on 5 and 894 DF, p-value: &lt; 2.2e-16 Simple effects emcatcat &lt;- emmeans(catcat, ~ gender*prog) # differences in predicted values contrast(emcatcat, &quot;revpairwise&quot;, by = &quot;prog&quot;, adjust = &quot;bonferroni&quot;) #&gt; prog = read: #&gt; contrast estimate SE df t.ratio p.value #&gt; male - female -0.335 0.753 894 -0.446 0.6559 #&gt; #&gt; prog = jog: #&gt; contrast estimate SE df t.ratio p.value #&gt; male - female 7.483 0.753 894 9.942 &lt;.0001 #&gt; #&gt; prog = swim: #&gt; contrast estimate SE df t.ratio p.value #&gt; male - female -6.595 0.753 894 -8.762 &lt;.0001 Plot emmip(catcat, prog ~ gender,CIs=TRUE) Bar graph catcatdat &lt;- emmip(catcat, gender ~ prog, CIs = TRUE, plotit = FALSE) p &lt;- ggplot(data = catcatdat, aes(x = prog, y = yvar, fill = gender)) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) p1 &lt;- p + geom_errorbar( position = position_dodge(.9), width = .25, aes(ymax = UCL, ymin = LCL), alpha = 0.3 ) p1 + labs(x = &quot;Program&quot;, y = &quot;Weight Loss&quot;, fill = &quot;Gender&quot;) References "],["probmod-package.html", "17.2 probmod package", " 17.2 probmod package Not recommend: package has serious problem with subscript. install.packages(&quot;probemod&quot;) library(probemod) myModel &lt;- lm(loss ~ hours * gender, data = dat %&gt;% select(loss, hours, gender)) jnresults &lt;- jn(myModel, dv = &#39;loss&#39;, iv = &#39;hours&#39;, mod = &#39;gender&#39;) pickapoint( myModel, dv = &#39;loss&#39;, iv = &#39;hours&#39;, mod = &#39;gender&#39;, alpha = .01 ) plot(jnresults) "],["interactions-package.html", "17.3 interactions package", " 17.3 interactions package Recommend install.packages(&quot;interactions&quot;) 17.3.1 Continuous interaction (at least one of the two variables is continuous) library(interactions) library(jtools) # for summ() states &lt;- as.data.frame(state.x77) fiti &lt;- lm(Income ~ Illiteracy * Murder + `HS Grad`, data = states) summ(fiti) Observations 50 Dependent variable Income Type OLS linear regression F(4,45) 10.65 R² 0.49 Adj. R² 0.44 Est. S.E. t val. p (Intercept) 1414.46 737.84 1.92 0.06 Illiteracy 753.07 385.90 1.95 0.06 Murder 130.60 44.67 2.92 0.01 HS Grad 40.76 10.92 3.73 0.00 Illiteracy:Murder -97.04 35.86 -2.71 0.01 Standard errors: OLS For continuous moderator, the three values chosen are: -1 SD above the mean The mean -1 SD below the mean interact_plot(fiti, pred = Illiteracy, modx = Murder, # if you don&#39;t want the plot to mean-center # centered = &quot;none&quot;, # exclude the mean value of the moderator # modx.values = &quot;plus-minus&quot;, # split moderator&#39;s distribution into 3 groups # modx.values = &quot;terciles&quot; plot.points = T, # overlay data # different shape for differennt levels of the moderator point.shape = T, # if two data points are on top one another, # this moves them apart by little jitter = 0.1, # other appearance option x.label = &quot;X label&quot;, y.label = &quot;Y label&quot;, main.title = &quot;Title&quot;, legend.main = &quot;Legend Title&quot;, colors = &quot;blue&quot;, # include confidence band interval = TRUE, int.width = 0.9, robust = TRUE # use robust SE ) To include weights from the regression inn the plot fiti &lt;- lm(Income ~ Illiteracy * Murder, data = states, weights = Population) interact_plot(fiti, pred = Illiteracy, modx = Murder, plot.points = TRUE) Partial Effect Plot library(ggplot2) data(cars) fitc &lt;- lm(cty ~ year + cyl * displ + class + fl + drv, data = mpg) summ(fitc) Observations 234 Dependent variable cty Type OLS linear regression F(16,217) 99.73 R² 0.88 Adj. R² 0.87 Est. S.E. t val. p (Intercept) -200.98 47.01 -4.28 0.00 year 0.12 0.02 5.03 0.00 cyl -1.86 0.28 -6.69 0.00 displ -3.56 0.66 -5.41 0.00 classcompact -2.60 0.93 -2.80 0.01 classmidsize -2.63 0.93 -2.82 0.01 classminivan -4.41 1.04 -4.24 0.00 classpickup -4.37 0.93 -4.68 0.00 classsubcompact -2.38 0.93 -2.56 0.01 classsuv -4.27 0.87 -4.92 0.00 fld 6.34 1.69 3.74 0.00 fle -4.57 1.66 -2.75 0.01 flp -1.92 1.59 -1.21 0.23 flr -0.79 1.57 -0.50 0.61 drvf 1.40 0.40 3.52 0.00 drvr 0.49 0.46 1.06 0.29 cyl:displ 0.36 0.08 4.56 0.00 Standard errors: OLS interact_plot( fitc, pred = displ, modx = cyl, # the observed data is based on displ, cyl, and model error partial.residuals = TRUE, modx.values = c(4, 5, 6, 8) ) Check linearity assumption in the model Plot the lines based on the subsample (red line), and whole sample (black line) x_2 &lt;- runif(n = 200, min = -3, max = 3) w &lt;- rbinom(n = 200, size = 1, prob = 0.5) err &lt;- rnorm(n = 200, mean = 0, sd = 4) y_2 &lt;- 2.5 - x_2 ^ 2 - 5 * w + 2 * w * (x_2 ^ 2) + err data_2 &lt;- as.data.frame(cbind(x_2, y_2, w)) model_2 &lt;- lm(y_2 ~ x_2 * w, data = data_2) summ(model_2) Observations 200 Dependent variable y_2 Type OLS linear regression F(3,196) 1.57 R² 0.02 Adj. R² 0.01 Est. S.E. t val. p (Intercept) -1.12 0.50 -2.27 0.02 x_2 0.28 0.27 1.04 0.30 w 1.42 0.71 2.00 0.05 x_2:w -0.23 0.40 -0.58 0.56 Standard errors: OLS interact_plot( model_2, pred = x_2, modx = w, linearity.check = TRUE, plot.points = TRUE ) 17.3.1.1 Simple Slopes Analysis continuous by continuous variable interaction (still work for binary) conditional slope of the variable of interest (i.e., the slope of \\(X\\) when we hold \\(M\\) constant at a value) Using sim_slopes it will mean-center all variables except the variable of interest For moderator that is Continuous, it will pick mean, and plus/minus 1 SD Categorical, it will use all factor sim_slopes requires A regression model with an interaction term) Variable of interest (pred =) Moderator: (modx =) sim_slopes(fiti, pred = Illiteracy, modx = Murder, johnson_neyman = FALSE) #&gt; SIMPLE SLOPES ANALYSIS #&gt; #&gt; Slope of Illiteracy when Murder = 5.420973 (- 1 SD): #&gt; #&gt; Est. S.E. t val. p #&gt; -------- -------- -------- ------ #&gt; -71.59 268.65 -0.27 0.79 #&gt; #&gt; Slope of Illiteracy when Murder = 8.685043 (Mean): #&gt; #&gt; Est. S.E. t val. p #&gt; --------- -------- -------- ------ #&gt; -437.12 175.82 -2.49 0.02 #&gt; #&gt; Slope of Illiteracy when Murder = 11.949113 (+ 1 SD): #&gt; #&gt; Est. S.E. t val. p #&gt; --------- -------- -------- ------ #&gt; -802.66 145.72 -5.51 0.00 # plot the coefficients ss &lt;- sim_slopes(fiti, pred = Illiteracy, modx = Murder, modx.values = c(0, 5, 10)) plot(ss) # table ss &lt;- sim_slopes(fiti, pred = Illiteracy, modx = Murder, modx.values = c(0, 5, 10)) library(huxtable) as_huxtable(ss) Table 17.1: Value of MurderSlope of Illiteracy Value of Murderslope 0.00535.50 (458.77) 5.00-24.44 (282.48) 10.00-584.38 (152.37)*** 17.3.1.2 Johnson-Neyman intervals To know all the values of the moderator for which the slope of the variable of interest will be statistically significant, we can use the Johnson-Neyman interval (P. O. Johnson and Neyman 1936) Even though we kind of know that the alpha level when implementing the Johnson-Neyman interval is not correct (Bauer and Curran 2005), not until recently that there is a correction for the type I and II errors (Esarey and Sumner 2018). Since Johnson-Neyman inflates the type I error (comparisons across all values of the moderator) sim_slopes( fiti, pred = Illiteracy, modx = Murder, johnson_neyman = TRUE, control.fdr = TRUE, # correction for type I and II # include conditional intecepts # cond.int = TRUE, robust = &quot;HC3&quot;, # rubust SE # don&#39;t mean-centered non-focal variables # centered = &quot;none&quot;, jnalpha = 0.05 ) #&gt; JOHNSON-NEYMAN INTERVAL #&gt; #&gt; When Murder is OUTSIDE the interval [-11.70, 8.75], the slope of Illiteracy #&gt; is p &lt; .05. #&gt; #&gt; Note: The range of observed values of Murder is [1.40, 15.10] #&gt; #&gt; Interval calculated using false discovery rate adjusted t = 2.33 #&gt; #&gt; SIMPLE SLOPES ANALYSIS #&gt; #&gt; Slope of Illiteracy when Murder = 5.420973 (- 1 SD): #&gt; #&gt; Est. S.E. t val. p #&gt; -------- -------- -------- ------ #&gt; -71.59 256.60 -0.28 0.78 #&gt; #&gt; Slope of Illiteracy when Murder = 8.685043 (Mean): #&gt; #&gt; Est. S.E. t val. p #&gt; --------- -------- -------- ------ #&gt; -437.12 191.07 -2.29 0.03 #&gt; #&gt; Slope of Illiteracy when Murder = 11.949113 (+ 1 SD): #&gt; #&gt; Est. S.E. t val. p #&gt; --------- -------- -------- ------ #&gt; -802.66 178.75 -4.49 0.00 For plotting, we can use johnson_neyman johnson_neyman(fiti, pred = Illiteracy, modx = Murder, # correction for type I and II control.fdr = TRUE, alpha = .05) #&gt; JOHNSON-NEYMAN INTERVAL #&gt; #&gt; When Murder is OUTSIDE the interval [-22.57, 8.52], the slope of Illiteracy #&gt; is p &lt; .05. #&gt; #&gt; Note: The range of observed values of Murder is [1.40, 15.10] #&gt; #&gt; Interval calculated using false discovery rate adjusted t = 2.33 Note: y-axis is the conditional slope of the variable of interest 17.3.1.3 3-way interaction # fita3 &lt;- # lm(rating ~ privileges * critical * learning, # data = attitude) # # probe_interaction( # fita3, # pred = critical, # modx = learning, # mod2 = privileges, # alpha = .1 # ) mtcars$cyl &lt;- factor(mtcars$cyl, labels = c(&quot;4 cylinder&quot;, &quot;6 cylinder&quot;, &quot;8 cylinder&quot;)) fitc3 &lt;- lm(mpg ~ hp * wt * cyl, data = mtcars) interact_plot(fitc3, pred = hp, modx = wt, mod2 = cyl) + theme_apa(legend.pos = &quot;bottomright&quot;) Johnson-Neyman 3-way interaction library(survey) data(api) dstrat &lt;- svydesign( id = ~ 1, strata = ~ stype, weights = ~ pw, data = apistrat, fpc = ~ fpc ) regmodel3 &lt;- survey::svyglm(api00 ~ avg.ed * growth * enroll, design = dstrat) sim_slopes( regmodel3, pred = growth, modx = avg.ed, mod2 = enroll, jnplot = TRUE ) #&gt; ███████████████ While enroll (2nd moderator) = 153.0518 (- 1 SD) ██████████████ #&gt; #&gt; JOHNSON-NEYMAN INTERVAL #&gt; #&gt; When avg.ed is OUTSIDE the interval [2.75, 3.82], the slope of growth is p #&gt; &lt; .05. #&gt; #&gt; Note: The range of observed values of avg.ed is [1.38, 4.44] #&gt; #&gt; SIMPLE SLOPES ANALYSIS #&gt; #&gt; Slope of growth when avg.ed = 2.085002 (- 1 SD): #&gt; #&gt; Est. S.E. t val. p #&gt; ------ ------ -------- ------ #&gt; 1.25 0.32 3.86 0.00 #&gt; #&gt; Slope of growth when avg.ed = 2.787381 (Mean): #&gt; #&gt; Est. S.E. t val. p #&gt; ------ ------ -------- ------ #&gt; 0.39 0.22 1.75 0.08 #&gt; #&gt; Slope of growth when avg.ed = 3.489761 (+ 1 SD): #&gt; #&gt; Est. S.E. t val. p #&gt; ------- ------ -------- ------ #&gt; -0.48 0.35 -1.37 0.17 #&gt; #&gt; ████████████████ While enroll (2nd moderator) = 595.2821 (Mean) ███████████████ #&gt; #&gt; JOHNSON-NEYMAN INTERVAL #&gt; #&gt; When avg.ed is OUTSIDE the interval [2.84, 7.83], the slope of growth is p #&gt; &lt; .05. #&gt; #&gt; Note: The range of observed values of avg.ed is [1.38, 4.44] #&gt; #&gt; SIMPLE SLOPES ANALYSIS #&gt; #&gt; Slope of growth when avg.ed = 2.085002 (- 1 SD): #&gt; #&gt; Est. S.E. t val. p #&gt; ------ ------ -------- ------ #&gt; 0.72 0.22 3.29 0.00 #&gt; #&gt; Slope of growth when avg.ed = 2.787381 (Mean): #&gt; #&gt; Est. S.E. t val. p #&gt; ------ ------ -------- ------ #&gt; 0.34 0.16 2.16 0.03 #&gt; #&gt; Slope of growth when avg.ed = 3.489761 (+ 1 SD): #&gt; #&gt; Est. S.E. t val. p #&gt; ------- ------ -------- ------ #&gt; -0.04 0.24 -0.16 0.87 #&gt; #&gt; ███████████████ While enroll (2nd moderator) = 1037.5125 (+ 1 SD) ██████████████ #&gt; #&gt; JOHNSON-NEYMAN INTERVAL #&gt; #&gt; The Johnson-Neyman interval could not be found. Is the p value for your #&gt; interaction term below the specified alpha? #&gt; #&gt; SIMPLE SLOPES ANALYSIS #&gt; #&gt; Slope of growth when avg.ed = 2.085002 (- 1 SD): #&gt; #&gt; Est. S.E. t val. p #&gt; ------ ------ -------- ------ #&gt; 0.18 0.31 0.58 0.56 #&gt; #&gt; Slope of growth when avg.ed = 2.787381 (Mean): #&gt; #&gt; Est. S.E. t val. p #&gt; ------ ------ -------- ------ #&gt; 0.29 0.20 1.49 0.14 #&gt; #&gt; Slope of growth when avg.ed = 3.489761 (+ 1 SD): #&gt; #&gt; Est. S.E. t val. p #&gt; ------ ------ -------- ------ #&gt; 0.40 0.27 1.49 0.14 Report ss3 &lt;- sim_slopes(regmodel3, pred = growth, modx = avg.ed, mod2 = enroll) plot(ss3) as_huxtable(ss3) Table 17.2: enroll = 153 Value of avg.edSlope of growth Value of avg.edslope 2.091.25 (0.32)*** 2.790.39 (0.22)# enroll = 595.28 Value of avg.edSlope of growth 3.49-0.48 (0.35) 2.090.72 (0.22)** 2.790.34 (0.16)* enroll = 1037.51 Value of avg.edSlope of growth 3.49-0.04 (0.24) 2.090.18 (0.31) 2.790.29 (0.20) 3.490.40 (0.27) 17.3.2 Categorical interaction library(ggplot2) mpg2 &lt;- mpg %&gt;% mutate(cyl = factor(cyl)) mpg2[&quot;auto&quot;] &lt;- &quot;auto&quot; mpg2$auto[mpg2$trans %in% c(&quot;manual(m5)&quot;, &quot;manual(m6)&quot;)] &lt;- &quot;manual&quot; mpg2$auto &lt;- factor(mpg2$auto) mpg2[&quot;fwd&quot;] &lt;- &quot;2wd&quot; mpg2$fwd[mpg2$drv == &quot;4&quot;] &lt;- &quot;4wd&quot; mpg2$fwd &lt;- factor(mpg2$fwd) ## Drop the two cars with 5 cylinders (rest are 4, 6, or 8) mpg2 &lt;- mpg2[mpg2$cyl != &quot;5&quot;, ] ## Fit the model fit3 &lt;- lm(cty ~ cyl * fwd * auto, data = mpg2) library(jtools) # for summ() summ(fit3) Observations 230 Dependent variable cty Type OLS linear regression F(11,218) 61.37 R² 0.76 Adj. R² 0.74 Est. S.E. t val. p (Intercept) 21.37 0.39 54.19 0.00 cyl6 -4.37 0.54 -8.07 0.00 cyl8 -8.37 0.67 -12.51 0.00 fwd4wd -2.91 0.76 -3.83 0.00 automanual 1.45 0.57 2.56 0.01 cyl6:fwd4wd 0.59 0.96 0.62 0.54 cyl8:fwd4wd 2.13 0.99 2.15 0.03 cyl6:automanual -0.76 0.90 -0.84 0.40 cyl8:automanual 0.71 1.18 0.60 0.55 fwd4wd:automanual -1.66 1.07 -1.56 0.12 cyl6:fwd4wd:automanual 1.29 1.52 0.85 0.40 cyl8:fwd4wd:automanual -1.39 1.76 -0.79 0.43 Standard errors: OLS cat_plot(fit3, pred = cyl, modx = fwd, plot.points = T) #line plots cat_plot( fit3, pred = cyl, modx = fwd, geom = &quot;line&quot;, point.shape = TRUE, # colors = &quot;Set2&quot;, # choose color vary.lty = TRUE ) # bar plot cat_plot( fit3, pred = cyl, modx = fwd, geom = &quot;bar&quot;, interval = T, plot.points = TRUE ) References "],["interactionr-package.html", "17.4 interactionR package", " 17.4 interactionR package For publication purposes Following (Knol and VanderWeele 2012) for presentation (Hosmer and Lemeshow 1992) for confidence intervals based on the delta method (G. Y. Zou 2008) for variance recovery “mover” method (Assmann et al. 1996) for bootstrapping install.packages(&quot;interactionR&quot;) References "],["sjplot-package.html", "17.5 sjPlot package", " 17.5 sjPlot package For publication purposes (recommend, but more advanced) link "],["causal-inference.html", "Chapter 18 Causal Inference", " Chapter 18 Causal Inference After all of the mambo jumbo that we have learned so far, I want to now talk about the concept of causality. We usually say that correlation is not causation. Then, what is causation? One of my favorite books has explained this concept beautifully (Pearl and Mackenzie 2018). And I am just going to quickly summarize the gist of it from my understanding. I hope that it can give you an initial grasp on the concept so that later you can continue to read up and develop a deeper understanding. It’s important to have a deep understanding regarding the method research. However, one needs to be aware of its limitation. As mentioned in various sections throughout the book, we see that we need to ask experts for number as our baseline or visit literature to gain insight from past research. Here, we dive in a more conceptual side statistical analysis as a whole, regardless of particular approach. You probably heard scientists say correlation doesn’t mean causation. There are ridiculous spurious correlations that give a firm grip on what the previous phrase means. The pioneer who tried to use regression to infer causation in social science was Yule (1899) (but it was a fatal attempt where he found relief policy increases poverty). To make a causal inference from statistics, the equation (function form) must be stable under intervention (i.e., variables are manipulated). Statistics is used to be a causality-free enterprise in the past. Not until the development of path analysis by Sewall Wright in the 1920s that the discipline started to pay attention to causation. Then, it remained dormant until the Causal Revolution (quoted Judea Pearl’s words). This revolution introduced the calculus of causation which includes (1) causal diagrams), and (2) a symbolic language The world has been using \\(P(Y|X)\\) (statistics use to derive this), but what we want is to compare the difference between \\(P(Y|do(X))\\): treatment group \\(P(Y|do(not-X))\\): control group Hence, we can see a clear difference between \\(P(Y|X) \\neq P(Y|do(X))\\) The conclusion we want to make from data is counterfactuals: What would have happened had we not do X? To teach a robot to make inference, we need inference engine p. 12 (Pearl and Mackenzie 2018) Levels of cognitive ability to be a causal learner: Seeing Doing Imagining Ladder of causation (associated with levels of cognitive ability as well): Association: conditional probability, correlation, regression Intervention Counterfactuals Level Activity Questions Examples Association \\(P(y|x)\\) Seeing What is? How would seeing X change my belief in Y? What does a symptom tell me about a disease? Intervention \\(P(y|do(x),z)\\) Doing Intervening What if? What if I do X? What if I spend more time learning, will my result change? Counterfactuals \\(P(y_x|x&#39;,y&#39;)\\) Imagining Why? was it X that caused Y? What if I had acted differently What if I stopped smoking a year ago? Table by (Pearl 2019, 57) You cannot define causation from probability alone If you say X causes Y if X raises the probability of Y.” On the surface, it might sound intuitively right. But when we translate it to probability notation: \\(P(Y|X) &gt;P(Y)\\) , it can’t be more wrong. Just because you are seeing X (1st level), it doesn’t mean the probability of Y increases. It could be either that (1) X causes Y, or (2) Z affects both X and Y. Hence, people might use control variables, which translate: \\(P(Y|X, Z=z) &gt; P(Y|Z=z)\\), then you can be more confident in your probabilistic observation. However, the question is how can you choose \\(Z\\) With the invention of the do-operator, now you can represent X causes Y as \\[ P(Y|do(X)) &gt; P(Y) \\] and with the help of causal diagram, now you can answer questions at the 2nd level (Intervention) Note: people under econometrics might still use “Granger causality” and “vector autoregression” to use the probability language to represent causality (but it’s not). The 7 tools for Structural Causal Model framework (Pearl 2019): Encoding Causal Assumptions - transparency and testability (with graphical representation) Do-calculus and the control of confounding: “back-door” The algorithmization of Counterfactuals Mediation Analysis and the Assessment of Direct and Indirect Effects Adaptability, External validity and Sample Selection Bias: are still researched under “domain adaptation”, “transfer learning” Recovering from missing data Causal Discovery: d-separation Functional decomposition (Hoyer et al. 2008) Spontaneous local changes (Pearl 2014) List of packages to do causal inference in R Simpson’s Paradox: A statistical association seen in an entire population is reversed in sub-population. Structural Causal Model accompanies graphical causal model to create more efficient language to represent causality Structural Causal Model is the solution to the curse of dimensionality (i.e., large numbers of variable \\(p\\), and small dataset \\(n\\)) thanks to product decomposition. It allows us to solve problems without knowing the function, parameters, or distributions of the error terms. Suppose you have a causal chain \\(X \\to Y \\to Z\\): \\[ P(X=x,Y=y, Z=z) = P(X=x)P(Y=y|X=x)P(Z=z|Y=y) \\] Experimental Design Quasi-experimental Design Experimentalist Observationalist Experimental Data Observational Data Random Assignment (reduce treatment imbalance) Random Sampling (reduce sample selection error) Criticisms of quasi-experimental versus experimental designs: Quasi-experimental methods don’t approximate well experimental results. For example, LaLonde (1986) shows Matching Methods, Difference-in-differences, Tobit-2 (Heckman-type) can’t approximate the experimental estimates. Tools in a hierarchical order Experimental Design: Randomized Control Trials (Gold standard): Tier 1 Quasi-experimental Regression Discontinuity Synthetic Difference-in-Differences Difference-In-Differences Synthetic Control Event Studies Fixed Effects Estimator 12.4.2.2 Endogenous Treatment: mostly Instrumental Variables Matching Methods Interrupted Time Series Endogenous Sample Selection 33.2: mostly Heckman’s correction Internal vs. External Validity Internal Validity: Economists and applied scientists largely care about. External Validity: Localness might affect your external validity. For many economic policies, there is a difference between treatment and intention to treat. For example, we might have an effective vaccine (i.e., intention to treat), but it does not mean that everybody will take it (i.e., treatment). There are four types of subjects that we deal with: Non-switchers: we don’t care about non-switchers because even if we introduce or don’t introduce the intervention, it won’t affect them. Always takers Never takers Switchers Compliers: defined as those who respect the intervention. We only care about compliers because when we introduce the intervention, they will do something. When we don’t have any interventions, they won’t do it. Tools above are used to identify the causal impact of an intervention on compliers If we have only compliers in our dataset, then intention to treatment = treatment effect. Defiers: those who will go to the opposite direction of your treatment. We typically aren’t interested in defiers because they will do the opposite of what we want them to do. And they are typically a small group; hence, we just assume they don’t exist. Treatment Assignment Control Assignment Compliers Treated No Treated Always-takers Treated Treated Never-takers Not treated No treated Defiers Not treated Treated Directional Bias due to selection into treatment comes from 2 general opposite sources Mitigation-based: select into treatment to combat a problem Preference-based: select into treatment because units like that kind of treatment. References "],["treatment-effect-types.html", "18.1 Treatment effect types", " 18.1 Treatment effect types This section is based on Paul Testa’s note Terminology: Quantities of causal interest (i.e., treatment effect types) Estimands: parameters of interest Estimators: procedures to calculate hesitates for the parameters of interest Sources of bias (according to prof. Luke Keele) \\[ \\begin{aligned} &amp;\\text{Estimator - True Causal Effect} \\\\ &amp;= \\text{Hidden bias + Misspecification bias + Statistical Noise} \\\\ &amp;= \\text{Due to design + Due to modeling + Due to finite sample} \\end{aligned} \\] 18.1.1 Average Treatment Effects Average treatment effect (ATE) is the difference in means of the treated and control groups Randomization under Experimental Design can provide an unbiased estimate of ATE. Let \\(Y_i(1)\\) denote the outcome of individual \\(i\\) under treatment and \\(Y_i(0)\\) denote the outcome of individual \\(i\\) under control Then, the treatment effect for individual \\(i\\) is the difference between her outcome under treatment and control \\[ \\tau_i = Y_i(1) - Y_i(0) \\] Without a time machine or dimension portal, we can only observe one of the two event: either individual \\(i\\) experiences the treatment or she doesn’t. Then, the ATE as a quantity of interest can come in handy since we can observe across all individuals \\[ ATE = \\frac{1}{N} \\sum_{i=1}^N \\tau_i = \\frac{\\sum_1^N Y_i(1)}{N} - \\frac{\\sum_i^N Y_i(0)}{N} \\] With random assignment (i.e., treatment assignment is independent of potential outcome and observables and unobservables), the observed means difference between the two groups is an unbiased estimator of the average treatment effect \\[ E(Y_i (1) |D = 1) = E(Y_i(1)|D=0) = E(Y_i(1)) \\\\ E(Y_i(0) |D = 1) = E(Y_i(0)|D = 0 ) = E(Y_i(0)) \\] \\[ ATE = E(Y_i(1)) - E(Y_i(0)) \\] Alternatively, we can write the potential outcomes model in a regression form \\[ Y_i = Y_i(0) + [Y_i (1) - Y_i(0)] D_i \\] Let \\(\\beta_{0i} = Y_i (0) ; \\beta_{1i} = Y_i(1) - Y_i(0)\\), we have \\[ Y_i = \\beta_{0i} + \\beta_{1i} D_i \\] where \\(\\beta_{0i}\\) = outcome if the unit did not receive any treatment \\(\\beta_{1i}\\) = treatment effect (i.e., random coefficients for each unit \\(i\\)) To understand endogeneity (i.e., nonrandom treatment assignment), we can examine a standard linear model \\[ \\begin{aligned} Y_i &amp;= \\beta_{0i} + \\beta_{1i} D_i \\\\ &amp;= ( \\bar{\\beta}_{0} + \\epsilon_{0i} ) + (\\bar{\\beta}_{1} + \\epsilon_{1i} )D_i \\\\ &amp;= \\bar{\\beta}_{0} + \\epsilon_{0i} + \\bar{\\beta}_{1} D_i + \\epsilon_{1i} D_i \\end{aligned} \\] When you have random assignment, \\(E(\\epsilon_{0i}) = E(\\epsilon_{1i}) = 0\\) No selection bias: \\(D_i \\perp e_{0i}\\) Treatment effect is independent of treatment assignment: \\(D_i \\perp e_{1i}\\) But otherwise, residuals can correlate with \\(D_i\\) For estimation, \\(\\hat{\\beta}_1^{OLS}\\) is identical to difference in means (i.e., \\(Y_i(1) - Y_i(0)\\)) In case of heteroskedasticity (i.e., \\(\\epsilon_{0i} + D_i \\epsilon_{1i} \\neq 0\\) ), this residual’s variance depends on \\(X\\) when you have heterogeneous treatment effects (i.e., \\(\\epsilon_{1i} \\neq 0\\)) Robust SE should still give consistent estimate of \\(\\hat{\\beta}_1\\) in this case Alternatively, one can use two-sample t-test on difference in means with unequal variances. 18.1.2 Conditional Average Treatment Effects Treatment effects can be different for different groups of people. In words, treatment effects can vary across subgroups. To examine the heterogeneity across groups (e.g., men vs. women), we can estimate the conditional average treatment effects (CATE) for each subgroup \\[ CATE = E(Y_i(1) - Y_i(0) |D_i, X_i)) \\] 18.1.3 Intent-to-treat Effects When we encounter non-compliance (either people suppose to receive treatment don’t receive it, or people suppose to be in the control group receive the treatment), treatment receipt is not independent of potential outcomes and confounders. In this case, the difference in observed means between the treatment and control groups is not Average Treatment Effects, but Intent-to-treat Effects (ITT). In words, ITT is the treatment effect on those who receive the treatment 18.1.4 Local Average Treatment Effects Instead of estimating the treatment effects of those who receive the treatment (i.e., Intent-to-treat Effects), you want to estimate the treatment effect of those who actually comply with the treatment. This is the local average treatment effects (LATE) or complier average causal effects (CACE). I assume we don’t use CATE to denote complier average treatment effect because it was reserved for conditional average treatment effects. Using random treatment assignment as an instrument, we can recover the effect of treatment on compliers. As the percent of compliers increases, Intent-to-treat Effects and Local Average Treatment Effects converge Rule of thumb: SE(LATE) = SE(ITT)/(share of compliers) LATE estimate is always greater than the ITT estimate LATE can also be estimated using a pure placebo group (Gerber et al. 2010). Partial compliance is hard to study, and IV/2SLS estimator is biased, we have to use Bayesian (Long, Little, and Lin 2010; Jin and Rubin 2009, 2008). 18.1.4.1 One-sided noncompliance One-sided noncompliance is when in the sample, we only have compliers and never-takers With the exclusion restriction (i.e., excludability), never-takers have the same results in the treatment or control group (i.e., never treated) With random assignment, we can have the same number of never-takers in the treatment and control groups Hence, \\[ LATE = \\frac{ITT}{\\text{share of compliers}} \\] 18.1.4.2 Two-sided noncompliance Two-sided noncompliance is when in the sample, we have compliers, never-takers, and always-takers To estimate LATE, beyond excludability like in the One-sided noncompliance case, we need to assume that there is no defiers (i.e., monotonicity assumption) (this is excusable in practical studies) \\[ LATE = \\frac{ITT}{\\text{share of compliers}} \\] 18.1.5 Population vs. Sample Average Treatment Effects See (Imai, King, and Stuart 2008) for when the sample average treatment effect (SATE) diverges from the population average treatment effect (PATE). To stay consistent, this section uses notations from (Imai, King, and Stuart 2008)’s paper. In a finite population \\(N\\), we observe \\(n\\) observations (\\(N&gt;&gt;n\\)), where half is in the control and half is in the treatment group. With unknown data generating process, we have \\[ I_i = \\begin{cases} 1 \\text{ if unit i is in the sample} \\\\ 0 \\text{ otherwise} \\end{cases} \\] \\[ T_i = \\begin{cases} 1 \\text{ if unit i is in the treatment group} \\\\ 0 \\text{ if unit i is in the control group} \\end{cases} \\] \\[ \\text{potential outcome} = \\begin{cases} Y_i(1) \\text{ if } T_i = 1 \\\\ Y_i(0) \\text{ if } T_i = 0 \\end{cases} \\] Observed outcome is \\[ Y_i | I_i = 1= T_i Y_i(1) + (1-T_i)Y_i(0) \\] Since we can never observed both outcome for the same individual, the treatment effect is always unobserved for unit \\(i\\) \\[ TE_i = Y_i(1) - Y_i(0) \\] Sample average treatment effect is \\[ SATE = \\frac{1}{n}\\sum_{i \\in \\{I_i = 1\\}} TE_i \\] Population average treatment effect is \\[ PATE = \\frac{1}{N}\\sum_{i=1}^N TE_i \\] Let \\(X_i\\) be observables and \\(U_i\\) be unobservables for unit \\(i\\) The baseline estimator for SATE and PATE is \\[ \\begin{aligned} D &amp;= \\frac{1}{n/2} \\sum_{i \\in (I_i = 1, T_i = 1)} Y_i - \\frac{1}{n/2} \\sum_{i \\in (I_i = 1 , T_i = 0)} Y_i \\\\ &amp;= \\text{observed sample mean of the treatment group} \\\\ &amp;- \\text{observed sample mean of the control group} \\end{aligned} \\] Let \\(\\Delta\\) be the estimation error (deviation from the truth), under an additive model \\[ Y_i(t) = g_t(X_i) + h_t(U_i) \\] The decomposition of the estimation error is \\[ \\begin{aligned} PATE - D = \\Delta &amp;= \\Delta_S + \\Delta_T \\\\ &amp;= (PATE - SATE) + (SATE - D)\\\\ &amp;= \\text{sample selection}+ \\text{treatment imbalance} \\\\ &amp;= (\\Delta_{S_X} + \\Delta_{S_U}) + (\\Delta_{T_X} + \\Delta_{T_U}) \\\\ &amp;= \\text{(selection on observed + selection on unobserved)} \\\\ &amp;+ (\\text{treatment imbalance in observed + unobserved}) \\end{aligned} \\] 18.1.5.1 Estimation Error from Sample Selection Also known as sample selection error \\[ \\Delta_S = PATE - SATE = \\frac{N - n}{N}(NATE - SATE) \\] where NATE is the non-sample average treatment effect (i.e., average treatment effect for those in the population but not in your sample: \\[ NATE = \\sum_{i\\in (I_i = 0)} \\frac{TE_i}{N-n} \\] From the equation, to have zero sample selection error (i.e., \\(\\Delta_S = 0\\)), we can either Get \\(N = n\\) by redefining your sample as the population of interest \\(NATE = SATE\\) (e.g., \\(TE_i\\) is constant over \\(i\\) in both your selected sample, and those in the population that you did not select) Note When you have heterogeneous treatment effects, random sampling can only warrant sample selection bias, not sample selection error. Since we can rarely know the true underlying distributions of the observables (\\(X\\)) and unobservables (\\(U\\)), we cannot verify whether the empirical distributions of your observables and unobservables for those in your sample is identical to that of your population (to reduce \\(\\Delta_S\\)). For special case, Say you have census of your population, you can adjust for the observables \\(X\\) to reduce \\(\\Delta_{S_X}\\), but still you cannot adjust your unobservables (\\(U\\)) Say you are willing to assume \\(TE_i\\) is constant over \\(X_i\\), then \\(\\Delta_{S_X} = 0\\) \\(U_i\\), then \\(\\Delta_{U}=0\\) 18.1.5.2 Estimation Error from Treatment Imbalance Also known as treatment imbalance error \\[ \\Delta_T = SATE - D \\] \\(\\Delta_T \\to 0\\) when treatment and control groups are balanced (i.e., identical empirical distributions) for both observables (\\(X\\)) and unobservables (\\(U\\)) However, in reality, we can only readjust for observables, not unobservables. Blocking Matching Methods Definition Random assignment within strata based on pre-treatment observables Dropping, repeating or grouping observations to balance covariates between the treatment and control group (Rubin 1973) Time Before randomization of treatments After randomization of treatments What if the set of covariates used to adjust is irrelevant? Nothing happens In the worst case scenario (e.g., these variables are uncorrelated with the treatment assignment, but correlated with the post-treatment variables), matching induces bias that is greater than just using the unadjusted difference in means Benefits \\(\\Delta_{T_X}=0\\) (no imbalance on observables). But we don’t know its effect on unobservables imbalance (might reduce if the unobservables are correlated with the observables) Reduce model dependence, bias, variance, mean-square error 18.1.6 Average Treatment Effects on the Treated and Control Average Effect of treatment on the Treated (ATT) is \\[ \\begin{aligned} ATT &amp;= E(Y_i(1) - Y_i(0)|D_i = 1) \\\\ &amp;= E(Y_i(1)|D_i = 1) - E(Y_i(0) |D_i = 1) \\end{aligned} \\] Average Effect of treatment on the Control (ATC) (i.e., the effect would be for those weren’t treated) is \\[ \\begin{aligned} ATC &amp;= E(Y_i(1) - Y_i (0) |D_i =0) \\\\ &amp;= E(Y_i(1)|D_i = 0) - E(Y_i(0)|D_i = 0) \\end{aligned} \\] Under random assignment and full compliance, \\[ ATE = ATT = ATC \\] Sample average treatment effect on the treated is \\[ SATT = \\frac{1}{n} \\sum_i TE_i \\] where \\(TE_i\\) is the treatment effect for unit \\(i\\) \\(n\\) is the number of treated units in the sample \\(i\\) belongs the subset (i.e., sample) of the population of interest that is treated. Population average treatment effect on the treated is \\[ PATT = \\frac{1}{N} \\sum_i TE_i \\] where \\(TE_i\\) is the treatment effect for unit \\(i\\) \\(N\\) is the number of treated units in the population \\(i\\) belongs to the population of interest that is treated. 18.1.7 Quantile Average Treatment Effects Instead of the middle point estimate (ATE), we can also understand the changes in the distribution the outcome variable due to the treatment. Using quantile regression and more assumptions (Abadie, Angrist, and Imbens 2002; Chernozhukov and Hansen 2005), we can have consistent estimate of quantile treatment effects (QTE), with which we can make inference regarding a given quantile. 18.1.8 Mediation Effects With additional assumptions (i.e., sequential ignorability (Imai, Keele, and Tingley 2010; Bullock and Ha 2011)), we can examine the mechanism of the treatment on the outcome. Under the causal framework, the indirect effect of treatment via a mediator is called average causal mediation effect (ACME) the direct effect of treatment on outcome is the average direct effect (ADE) More in the Mediation Section 36 18.1.9 Log-odds Treatment Effects For binary outcome variable, we might be interested in the log-odds of success. See (Freedman 2008) on how to estimate a consistent causal effect. Alternatively, attributable effects (Rosenbaum 2002) can also be appropriate for binary outcome. References "],["experimental-design.html", "Chapter 19 Experimental Design", " Chapter 19 Experimental Design Randomized Control Trials (RCT) or Experiments have always been and are likely to continue in the future to be the holy grail of causal inference, because of unbiased estimates elimination of confounding factors on average (covariate imbalance is always possible. Hence, you want to do Rerandomization to achieve platinum standard set by (Tukey 1993)) RCT means you have two group treatment (or experimental) gorp and control group. Hence, as you introduce the treatment (your exogenous variable) to the treatment group, the only expected difference in the outcomes of the two group should be due to the treatment. Subjects from the same population will be randomly assigned to either treatment or control group. This random assignment give us the confidence that changes in the outcome variable will be due only the treatment, not any other source (variable). It can be easier for hard science to have RCT because they can introduce the treatment, and have control environments. But it’s hard for social scientists because their subjects are usually human, and some treatment can be hard to introduce, or environments are uncontrollable. Hence, social scientists have to develop different tools (Quasi-experimental) to recover causal inference or to recreate the treatment and control group environment. With RCT, you can easily establish internal validity Even though random assignment is not the same thing as ceteris paribus (i.e., holding everything else constant), it should have the same effect (i.e., under random manipulation, other things equal can be observed, on average, across treatment and control groups). Selection Problem Assume we have binary treatment \\(D_i =(0,1)\\) outcome of interest \\(Y_i\\) for individual \\(i\\) \\(Y_{0i}\\) are those were not treated \\(Y_{1i}\\) are those were treated \\[ \\text{Potential Outcome} = \\begin{cases} Y_{1i} \\text{ if } D_i = 1 \\\\ Y_{0i} \\text{ if } D_i = 0 \\end{cases} \\] Then, what we observe in the outcome variable is \\[ Y_i = Y_{0i} + (Y_{1i} - Y_{0i})D_i \\] It’s likely that \\(Y_{1i}\\) and \\(Y_{0i}\\) both have their own distributions (i.e., different treatment effect for different people). Since we can’t see both outcomes for the same individual (unless we have a time machine), then we can only make inference regarding the average outcome of those who were treated and those who were not. \\[ \\begin{aligned} E[Y_i | D_i = 1] - E[Y_i | D_i = 0] &amp;= (E[Y_{1i} | D_i = 1] - E[Y_{0i}|D_i = 1] ) + (E[Y_{0i} |D_i = 1] - E[Y_{0i} |D_i = 0]) \\\\ &amp;= (E[Y_{1i}-Y_{0i}|D_i = 1] ) + (E[Y_{0i} |D_i = 1] - E[Y_{0i} |D_i = 0]) \\\\ \\text{Observed difference in treatment} &amp;= \\text{Average treatment effect on the treated} + \\text{Selection bias} \\end{aligned} \\] The average treatment effect is the average between between a person who is treated and the same person (in another parallel universe) who is not treated The selection bias is the difference between those who were treated and those who weren’t treated With random assignment of treatment (\\(D_i\\)) under Experimental Design, we can have \\(D_i\\) independent of potential outcomes \\[ \\begin{aligned} E[Y_i | D_i = 1] - E[Y_i|D_i = 0] &amp;= E[Y_{1i}|D_i = 1]-E[Y_{0i}|D_i = 0)]\\\\ &amp;= E[Y_{1i}|D_i = 1]-E[Y_{0i}|D_i = 0)] &amp;&amp; D_i \\perp Y_i \\\\ &amp;= E[Y_{1i} - Y_{0i}|D_i = 1] \\\\ &amp;= E[Y_{1i} - Y_{0i}] \\end{aligned} \\] Another representation under regression Suppose that you know the effect is \\[ Y_{1i} - Y_{0i} = \\rho \\] The observed outcome variable (for an individual) can be rewritten as \\[ \\begin{aligned} Y_i &amp;= E(Y_{0i}) + (Y_{1i}-Y_{0i})D_i + [Y_{0i} - E(Y_{0i})]\\\\ &amp;= \\alpha + \\rho D_i + \\eta_i \\end{aligned} \\] where \\(\\eta_i\\) = random variation of \\(Y_{0i}\\) Hence, the conditional expectation of an individual outcome on treatment status is \\[ \\begin{aligned} E[Y_i |D_i = 1] &amp;= \\alpha + \\rho &amp;+ E[\\eta_i |D_i = 1] \\\\ E[Y_i |D_i = 0] &amp;= \\alpha &amp;+ E[\\eta_i |D_i = 0] \\end{aligned} \\] Thus, \\[ E[Y_i |D_i = 1] - E[Y_i |D_i = 0] = \\rho + E[\\eta_i |D_i = 1] -E[\\eta_i |D_i = 0] \\] where \\(E[\\eta_i |D_i = 1] -E[\\eta_i |D_i = 0]\\) is the selection bias - correlation between the regression error term (\\(\\eta_i\\)), and the regressor (\\(D_i\\)) Under regression, we have \\[ E[\\eta_i |D_i = 1] -E[\\eta_i |D_i = 0] = E[Y_{0i} |D_i = 1] -E[Y_{0i}|D_i = 0] \\] which is the difference in outcomes between those who weren’t treated get treated and those who weren’t treated stay untreated Say you have control variables (\\(X_i\\)), that is uncorrelated with the treatment (\\(D_i\\)), then you can include in your model, and it won’t (in principle) affect your estimate of the treatment effect (\\(\\rho\\)) with an added benefit of reducing the residual variance, which subsequently reduces the standard error of other estimates. \\[ Y_i = \\alpha + \\rho D_i + X_i&#39;\\gamma + \\eta_i \\] Examples: Bertrand and Mullainathan (2004) randomly assign race to a job application to study the effect of race on callbacks. References "],["notes.html", "19.1 Notes", " 19.1 Notes For outcomes with 0s, we can’t use log-like transformation, because it’s sensitive to outcome unit (J. Chen and Roth 2023). For info on this issue, check [Zero-valued Outcomes]. We should use: Percentage changes in the Average: by using Poisson QMLE, we can interpret the coefficients of the effect of treatment on the treated group relative to the mean of the control group. Extensive vs. Intensive Margins: Distinguish the treatment effect on the intensive (outcome: 10 to 11) vs. extensive margins (outcome: 0 to 1). To get the bounds for the intensive-margin, use Lee (2009) (assuming that treatment has a monotonic effect on outcome) set.seed(123) # For reproducibility library(tidyverse) n &lt;- 1000 # Number of observations p_treatment &lt;- 0.5 # Probability of being treated # Step 1: Generate the treatment variable D D &lt;- rbinom(n, 1, p_treatment) # Step 2: Generate potential outcomes # Untreated potential outcome (mostly zeroes) Y0 &lt;- rnorm(n, mean = 0, sd = 1) * (runif(n) &lt; 0.3) # Treated potential outcome (shifting both the probability of being positive - extensive margin and its magnitude - intensive margin) Y1 &lt;- Y0 + rnorm(n, mean = 2, sd = 1) * (runif(n) &lt; 0.7) # Step 3: Combine effects based on treatment Y_observed &lt;- (1 - D) * Y0 + D * Y1 # Add explicit zeroes to model situations with no effect Y_observed[Y_observed &lt; 0] &lt;- 0 data &lt;- data.frame( ID = 1:n, Treatment = D, Outcome = Y_observed, X = rnorm(n) ) |&gt; # whether outcome is positive dplyr::mutate(positive = Outcome &gt; 0) # Viewing the first few rows of the dataset head(data) #&gt; ID Treatment Outcome X positive #&gt; 1 1 0 0.0000000 1.4783345 FALSE #&gt; 2 2 1 2.2369379 -1.4067867 TRUE #&gt; 3 3 0 0.0000000 -1.8839721 FALSE #&gt; 4 4 1 3.2192276 -0.2773662 TRUE #&gt; 5 5 1 0.6649693 0.4304278 TRUE #&gt; 6 6 0 0.0000000 -0.1287867 FALSE hist(data$Outcome) Percentage changes in the Average library(fixest) res_pois &lt;- fepois( fml = Outcome ~ Treatment + X, data = data, vcov = &quot;hetero&quot; ) etable(res_pois) #&gt; res_pois #&gt; Dependent Var.: Outcome #&gt; #&gt; Constant -2.223*** (0.1440) #&gt; Treatment 2.579*** (0.1494) #&gt; X 0.0235 (0.0406) #&gt; _______________ __________________ #&gt; S.E. type Heteroskedas.-rob. #&gt; Observations 1,000 #&gt; Squared Cor. 0.33857 #&gt; Pseudo R2 0.26145 #&gt; BIC 1,927.9 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 To calculate the proportional effect # proportional effect exp(coefficients(res_pois)[&quot;Treatment&quot;]) - 1 #&gt; Treatment #&gt; 12.17757 # SE exp(coefficients(res_pois)[&quot;Treatment&quot;]) * sqrt(res_pois$cov.scaled[&quot;Treatment&quot;, &quot;Treatment&quot;]) #&gt; Treatment #&gt; 1.968684 Hence, we conclude that the treatment effect is 1215% higher for the treated group as compared to the control group. Extensive vs. Intensive Margins Here, we can estimate the intensive-margin treatment effect (i.e., the treatment effect for “always-takers”). res &lt;- causalverse::lee_bounds( df = data, d = &quot;Treatment&quot;, m = &quot;positive&quot;, y = &quot;Outcome&quot;, numdraws = 10 ) |&gt; causalverse::nice_tab(2) print(res) #&gt; term estimate std.error #&gt; 1 Lower bound -0.22 0.09 #&gt; 2 Upper bound 2.77 0.14 Since in this case, the bounds contains 0, we can’t say much about the intensive margin for always-takers. If we aim to examine the sensitivity of always-takers, we should consider scenarios where the average outcome of compliers are \\(100 \\times c\\%\\) lower or higher than that of always-takers. We assume that \\(E(Y(1)|Complier) = (1-c)E(Y(1)|Always-taker)\\) set.seed(1) c_values = c(.1, .5, .7) combined_res &lt;- bind_rows(lapply(c_values, function(c) { res &lt;- causalverse::lee_bounds( df = data, d = &quot;Treatment&quot;, m = &quot;positive&quot;, y = &quot;Outcome&quot;, numdraws = 10, c_at_ratio = c ) res$c_value &lt;- as.character(c) return(res) })) combined_res |&gt; dplyr::select(c_value, everything()) |&gt; causalverse::nice_tab() #&gt; c_value term estimate std.error #&gt; 1 0.1 Point estimate 6.60 0.71 #&gt; 2 0.5 Point estimate 2.54 0.13 #&gt; 3 0.7 Point estimate 1.82 0.08 If we assume \\(c = 0.1\\) (i.e., under treatment, compliers would have an outcome equal to 10% of the outcome of always-takers), then the intensive-margin effect for always-takers is 6.6 more in the unit of the outcome. If we assume \\(c = 0.5\\) (i.e., under treatment, compliers would have an outcome equal to 50% of the outcome of always-takers), then the intensive-margin effect for always-takers is 2.54 more in the unit of the outcome. References "],["semi-random-experiment.html", "19.2 Semi-random Experiment", " 19.2 Semi-random Experiment Chicago Open Enrollment Program (Cullen, Jacob, and Levitt 2005) Students can apply to “choice” schools Many schools are oversubscribed (Demand &gt; Supply) Resolve scarcity via random lotteries Non-random enrollment, we only have random lottery which mean the above Let \\[ \\delta_j = E(Y_i | Enroll_{ij} = 1; Apply_{ij} = 1) - E(Y_i | Enroll_{ij} = 0; Apply_{ij} = 1) \\] and \\[ \\theta_j = E(Y_i | Win_{ij} = 1; Apply_{ij} = 1) - E(Y_i | Win_{ij} = 0; Apply_{ij} = 1) \\] Hence, we can clearly see that \\(\\delta_j \\neq \\theta_j\\) because you can only enroll, but you cannot ensure that you will win. Thus, intention to treat is different from treatment effect. Non-random enrollment, we only have random lottery which means we can only estimate \\(\\theta_j\\) To recover the true treatment effect, we can use \\[ \\delta_j = \\frac{E(Y_i|W_{ij} = 1; A_{ij} = 1) - E(Y_i | W_{ij}=0; A_{ij} = 1)}{P(Enroll_{ij} = 1| W_{ij}= 1; A_{ij}=1) - P(Enroll_{ij} = 1| W_{ij}=0; A_{ij}=1)} \\] where \\(\\delta_j\\) = treatment effect \\(W\\) = Whether students win the lottery \\(A\\) = Whether student apply for the lottery i = application j = school Say that we have 10 win Number students Type Selection effect Treatment effect Total effect 1 Always Takers +0.2 +1 +1.2 2 Compliers 0 +1 +1 7 Never Takers -0.1 0 -0.1 10 lose Number students Type Selection effect Treatment effect Total effect 1 Always Takers +0.2 +1 +1.2 2 Compliers 0 0 0 7 Never Takers -0.1 0 -0.1 Intent to treatment = Average effect of who you give option to choose \\[ \\begin{aligned} E(Y_i | W_{ij}=1; A_{ij} = 1) &amp;= \\frac{1*(1.2)+ 2*(1) + 7 * (-0.1)}{10}\\\\ &amp;= 0.25 \\end{aligned} \\] \\[ \\begin{aligned} E(Y_i | W_{ij}=0; A_{ij} = 1) &amp;= \\frac{1*(1.2)+ 2*(0) + 7 * (-0.1)}{10}\\\\ &amp;= 0.05 \\end{aligned} \\] Hence, \\[ \\begin{aligned} \\text{Intent to treatment} &amp;= 0.25 - 0.05 = 0.2 \\\\ \\text{Treatment effect} &amp;= 1 \\end{aligned} \\] \\[ \\begin{aligned} P(Enroll_{ij} = 1 | W_{ij} = 1; A_{ij}=1 ) &amp;= \\frac{1+2}{10} = 0.3 \\\\ P(Enroll_{ij} = 1 | W_{ij} = 0; A_{ij}=1 ) &amp;= \\frac{1}{10} = 0.1 \\end{aligned} \\] \\[ \\text{Treatment effect} = \\frac{0.2}{0.3-0.1} = 1 \\] After knowing how to recover the treatment effect, we turn our attention to the main model \\[ Y_{ia} = \\delta W_{ia} + \\lambda L_{ia} + e_{ia} \\] where \\(W\\) = whether a student wins a lottery \\(L\\) = whether student enrolls in the lottery \\(\\delta\\) = intent to treat Hence, Conditional on lottery, the \\(\\delta\\) is valid But without lottery, your \\(\\delta\\) is not random Winning and losing are only identified within lottery Each lottery has multiple entries. Thus, we can have within estimator We can also include other control variables (\\(X_i \\theta\\)) \\[ Y_{ia} = \\delta_1 W_{ia} + \\lambda_1 L_{ia} + X_i \\theta + u_{ia} \\] \\[ \\begin{aligned} E(\\delta) &amp;= E(\\delta_1) \\\\ E(\\lambda) &amp;\\neq E(\\lambda_1) &amp;&amp; \\text{because choosing a lottery is not random} \\end{aligned} \\] Including \\((X_i \\theta)\\) just shifts around control variables (i.e., reweighting of lottery), which would not affect your treatment effect \\(E(\\delta)\\) References "],["rerandomization.html", "19.3 Rerandomization", " 19.3 Rerandomization Since randomization only balances baseline covariates on average, imbalance in variables due to random chance can still happen. In case that you have a “bad” randomization (i.e., imbalance for important baseline covariates), (Morgan and Rubin 2012) introduce the idea of rerandomization. Rerandomization is checking balance during the randomization process (before the experiment), to eliminate bad allocation (i.e., those with unacceptable balance). The greater the number of variables, the greater the likelihood that at least one covariate would be imbalanced across treatment groups. Example: For 10 covariates, the probability of a significant difference at \\(\\alpha = .05\\) for at least one covariate is \\(1 - (1-.05)^{10} = 0.4 = 40\\%\\) Rerandomization increase treatment effect estimate precision if the covariates are correlated with the outcome. Improvement in precision for treatment effect estimate depends on (1) improvement in covariate balance and (2) correlation between covariates and the outcome. You also need to take into account rerandomization into your analysis when making inference. Rerandomization is equivalent to increasing our sample size. Alternatives include Stratified randomization (Johansson and Schultzberg 2022) Matched randomization (Greevy et al. 2004; Kapelner and Krieger 2014) Minimization (Pocock and Simon 1975) Rerandomization Criterion Acceptable randomization is based on a function of covariate matrix \\(\\mathbf{X}\\) and vector of treatment assignments \\(\\mathbf{W}\\) \\[ W_i = \\begin{cases} 1 \\text{ if treated} \\\\ 0 \\text{ if control} \\end{cases} \\] Mahalanobis Distance, \\(M\\), can be used as criteria for acceptable balance Let \\(M\\) be the multivariate distance between groups means \\[ \\begin{aligned} M &amp;= (\\bar{\\mathbf{X}}_T - \\bar{\\mathbf{X}}_C)&#39; cov(\\bar{\\mathbf{X}}_T - \\bar{\\mathbf{X}}_C)^{-1} (\\bar{\\mathbf{X}}_T - \\bar{\\mathbf{X}}_C) \\\\ &amp;= (\\frac{1}{n_T}+ \\frac{1}{n_C})^{-1}(\\bar{\\mathbf{X}}_T - \\bar{\\mathbf{X}}_C)&#39; cov(\\mathbf{X})^{-1}(\\bar{\\mathbf{X}}_T - \\bar{\\mathbf{X}}_C) \\end{aligned} \\] With large sample size and “pure” randomization \\(M \\sim \\chi^2_k\\) where \\(k\\) is the number of covariates to be balanced Then let \\(p_a\\) be the probability of accepting a randomization. Choosing appropriate \\(p_a\\) is a tradeoff between balance and time. Then the rule of thumb is re-randomize when \\(M &gt; a\\) References "],["two-stage-randomized-experiments-with-interference-and-noncompliance.html", "19.4 Two-Stage Randomized Experiments with Interference and Noncompliance", " 19.4 Two-Stage Randomized Experiments with Interference and Noncompliance (Imai, Jiang, and Malani 2021) References "],["sampling.html", "Chapter 20 Sampling ", " Chapter 20 Sampling "],["simple-sampling.html", "20.1 Simple Sampling", " 20.1 Simple Sampling Simple (random) Sampling library(dplyr) iris_df &lt;- iris set.seed(1) sample_n(iris_df, 10) #&gt; Sepal.Length Sepal.Width Petal.Length Petal.Width Species #&gt; 1 5.8 2.7 4.1 1.0 versicolor #&gt; 2 6.4 2.8 5.6 2.1 virginica #&gt; 3 4.4 3.2 1.3 0.2 setosa #&gt; 4 4.3 3.0 1.1 0.1 setosa #&gt; 5 7.0 3.2 4.7 1.4 versicolor #&gt; 6 5.4 3.0 4.5 1.5 versicolor #&gt; 7 5.4 3.4 1.7 0.2 setosa #&gt; 8 7.6 3.0 6.6 2.1 virginica #&gt; 9 6.1 2.8 4.7 1.2 versicolor #&gt; 10 4.6 3.4 1.4 0.3 setosa library(sampling) # set unique id number for each row iris_df$id = 1:nrow(iris_df) # Simple random sampling with replacement srswor(10, length(iris_df$id)) #&gt; [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 #&gt; [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 #&gt; [75] 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 #&gt; [112] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #&gt; [149] 0 0 # Simple random sampling without replacement (sequential method) srswor1(10, length(iris_df$id)) #&gt; [1] 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #&gt; [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #&gt; [75] 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #&gt; [112] 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 #&gt; [149] 0 0 # Simple random sampling with replacement srswr(10, length(iris_df$id)) #&gt; [1] 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 1 0 0 0 0 #&gt; [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #&gt; [75] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 #&gt; [112] 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 #&gt; [149] 0 0 library(survey) data(&quot;api&quot;) srs_design &lt;- svydesign(data = apistrat, weights = ~pw, fpc = ~fpc, id = ~1) library(sampler) rsamp(albania, n = 260, over = 0.1, # desired oversampling proportion rep = F) Identify missing points between sample and collected data alsample &lt;- rsamp(df = albania, 544) alreceived &lt;- rsamp(df = alsample, 390) rmissing(sampdf = alsample, colldf = alreceived, col_name = qvKod) "],["stratified-sampling.html", "20.2 Stratified Sampling", " 20.2 Stratified Sampling A stratum is a subset of the population that has at least one common characteristic. Steps: Identify relevant stratums and their representation in the population. Randomly sample to select a sufficient number of subjects from each stratum. Stratified sampling reduces sampling error. library(dplyr) # by number of rows sample_iris &lt;- iris %&gt;% group_by(Species) %&gt;% sample_n(5) sample_iris #&gt; # A tibble: 15 × 5 #&gt; # Groups: Species [3] #&gt; Sepal.Length Sepal.Width Petal.Length Petal.Width Species #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; #&gt; 1 4.4 3 1.3 0.2 setosa #&gt; 2 5.2 3.5 1.5 0.2 setosa #&gt; 3 5.1 3.8 1.5 0.3 setosa #&gt; 4 5.2 3.4 1.4 0.2 setosa #&gt; 5 4.5 2.3 1.3 0.3 setosa #&gt; 6 5.5 2.5 4 1.3 versicolor #&gt; 7 7 3.2 4.7 1.4 versicolor #&gt; 8 6.7 3 5 1.7 versicolor #&gt; 9 6.1 2.9 4.7 1.4 versicolor #&gt; 10 5.5 2.4 3.8 1.1 versicolor #&gt; 11 6.4 2.7 5.3 1.9 virginica #&gt; 12 6.4 2.8 5.6 2.1 virginica #&gt; 13 6.4 3.2 5.3 2.3 virginica #&gt; 14 6.8 3.2 5.9 2.3 virginica #&gt; 15 7.2 3.6 6.1 2.5 virginica # by fraction sample_iris &lt;- iris %&gt;% group_by(Species) %&gt;% sample_frac(size = .15) sample_iris #&gt; # A tibble: 24 × 5 #&gt; # Groups: Species [3] #&gt; Sepal.Length Sepal.Width Petal.Length Petal.Width Species #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; #&gt; 1 5.5 4.2 1.4 0.2 setosa #&gt; 2 5 3 1.6 0.2 setosa #&gt; 3 5.2 4.1 1.5 0.1 setosa #&gt; 4 4.6 3.1 1.5 0.2 setosa #&gt; 5 5.1 3.7 1.5 0.4 setosa #&gt; 6 4.8 3.4 1.9 0.2 setosa #&gt; 7 5.1 3.3 1.7 0.5 setosa #&gt; 8 5.5 3.5 1.3 0.2 setosa #&gt; 9 5 2.3 3.3 1 versicolor #&gt; 10 5.6 2.9 3.6 1.3 versicolor #&gt; # ℹ 14 more rows library(sampler) # Stratified sample using proportional allocation without replacement ssamp(df=albania, n=360, strata=qarku, over=0.1) #&gt; # A tibble: 395 × 45 #&gt; qarku Q_ID bashkia BAS_ID zaz njesiaAdministrative COM_ID qvKod zgjedhes #&gt; &lt;fct&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Berat 1 Berat 11 ZAZ … &quot;Berat &quot; 1101 &quot;\\&quot;3… 558 #&gt; 2 Berat 1 Berat 11 ZAZ … &quot;Berat &quot; 1101 &quot;\\&quot;3… 815 #&gt; 3 Berat 1 Berat 11 ZAZ … &quot;Sinje&quot; 1108 &quot;\\&quot;3… 419 #&gt; 4 Berat 1 Kucove 13 ZAZ … &quot;Lumas&quot; 1104 &quot;\\&quot;3… 237 #&gt; 5 Berat 1 Kucove 13 ZAZ … &quot;Kucove&quot; 1201 &quot;\\&quot;3… 562 #&gt; 6 Berat 1 Skrapar 17 ZAZ … &quot;Corovode&quot; 1303 &quot;\\&quot;3… 829 #&gt; 7 Berat 1 Berat 11 ZAZ … &quot;Roshnik&quot; 1107 &quot;\\&quot;3… 410 #&gt; 8 Berat 1 Ura Vajg… 19 ZAZ … &quot;Ura Vajgurore&quot; 1110 &quot;\\&quot;3… 708 #&gt; 9 Berat 1 Kucove 13 ZAZ … &quot;Perondi&quot; 1203 &quot;\\&quot;3… 835 #&gt; 10 Berat 1 Kucove 13 ZAZ … &quot;Kucove&quot; 1201 &quot;\\&quot;3… 907 #&gt; # ℹ 385 more rows #&gt; # ℹ 36 more variables: meshkuj &lt;int&gt;, femra &lt;int&gt;, totalSeats &lt;int&gt;, #&gt; # vendndodhja &lt;fct&gt;, ambienti &lt;fct&gt;, totalVoters &lt;int&gt;, femVoters &lt;int&gt;, #&gt; # maleVoters &lt;int&gt;, unusedBallots &lt;int&gt;, damagedBallots &lt;int&gt;, #&gt; # ballotsCast &lt;int&gt;, invalidVotes &lt;int&gt;, validVotes &lt;int&gt;, lsi &lt;int&gt;, #&gt; # ps &lt;int&gt;, pkd &lt;int&gt;, sfida &lt;int&gt;, pr &lt;int&gt;, pd &lt;int&gt;, pbdksh &lt;int&gt;, #&gt; # adk &lt;int&gt;, psd &lt;int&gt;, ad &lt;int&gt;, frd &lt;int&gt;, pds &lt;int&gt;, pdiu &lt;int&gt;, … Identify number of missing points by strata between sample and collected data alsample &lt;- rsamp(df = albania, 544) alreceived &lt;- rsamp(df = alsample, 390) smissing( sampdf = alsample, colldf = alreceived, strata = qarku, col_name = qvKod ) "],["unequal-probability-sampling.html", "20.3 Unequal Probability Sampling", " 20.3 Unequal Probability Sampling UPbrewer() UPmaxentropy() UPmidzuno() UPmidzunopi2() UPmultinomial() UPpivotal() UPrandompivotal() UPpoisson() UPsampford() UPsystematic() UPrandomsystematic() UPsystematicpi2() UPtille() UPtillepi2() "],["balanced-sampling.html", "20.4 Balanced Sampling", " 20.4 Balanced Sampling Purpose: to get the same means in the population and the sample for all the auxiliary variables Balanced sampling is different from purposive selection Balancing equations \\[ \\sum_{k \\in S} \\frac{\\mathbf{x}_k}{\\pi_k} = \\sum_{k \\in U} \\mathbf{x}_k \\] where \\(\\mathbf{x}_k\\) is a vector of auxiliary variables 20.4.1 Cube flight phase landing phase samplecube() fastflightcube() landingcube() 20.4.2 Stratification Try to replicate the population based on the original multivariate histogram library(survey) data(&quot;api&quot;) srs_design &lt;- svydesign(data = apistrat, weights = ~pw, fpc = ~fpc, strata = ~stype, id = ~1) balancedstratification() 20.4.3 Cluster library(survey) data(&quot;api&quot;) srs_design &lt;- svydesign(data = apiclus1, weights = ~pw, fpc = ~fpc, id = ~dnum) balancedcluster() 20.4.4 Two-stage library(survey) data(&quot;api&quot;) srs_design &lt;- svydesign(data = apiclus2, fpc = ~fpc1 + fpc2, id = ~ dnum + snum) balancedtwostage() "],["analysis-of-variance-anova.html", "Chapter 21 Analysis of Variance (ANOVA)", " Chapter 21 Analysis of Variance (ANOVA) ANOVA is using the same underlying mechanism as linear regression. However, the angle that ANOVA chooses to look at is slightly different from the traditional linear regression. It can be more useful in the case with qualitative variables and designed experiments. Experimental Design Factor: explanatory or predictor variable to be studied in an investigation Treatment (or Factor Level): “value” of a factor applied to the experimental unit Experimental Unit: person, animal, piece of material, etc. that is subjected to treatment(s) and provides a response Single Factor Experiment: one explanatory variable considered Multifactor Experiment: more than one explanatory variable Classification Factor: A factor that is not under the control of the experimenter (observational data) Experimental Factor: assigned by the experimenter Basics of experimental design: Choices that a statistician has to make: set of treatments set of experimental units treatment assignment (selection bias) measurement (measurement bias, blind experiments) Advancements in experimental design: Factorial Experiments: consider multiple factors at the same time (interaction) Replication: repetition of experiment assess mean squared error control over precision of experiment (power) Randomization Before R.A. Fisher (1900s), treatments were assigned systematically or subjectively randomization: assign treatments to experimental units at random, which averages out systematic effects that cannot be control by the investigator Local control: Blocking or Stratification Reduce experimental errors and increase power by placing restrictions on the randomization of treatments to experimental units. Randomization may also eliminate correlations due to time and space. "],["completely-randomized-design-crd.html", "21.1 Completely Randomized Design (CRD)", " 21.1 Completely Randomized Design (CRD) Treatment factor A with \\(a\\ge2\\) treatments levels. Experimental units are randomly assigned to each treatment. The number of experimental units in each group can be equal (balanced): n unequal (unbalanced): \\(n_i\\) for the i-th group (i = 1,…,a). The total sample size is \\(N=\\sum_{i=1}^{a}n_i\\) Possible assignments of units to treatments are \\(k=\\frac{N!}{n_1!n_2!...n_a!}\\) Each has probability 1/k of being selected. Each experimental unit is measured with a response \\(Y_{ij}\\), in which j denotes unit and i denotes treatment. Treatment 1 2 … a \\(Y_{11}\\) \\(Y_{21}\\) … \\(Y_{a1}\\) \\(Y_{12}\\) … … … … … … … Sample Mean \\(\\bar{Y_{1.}}\\) \\(\\bar{Y_{2.}}\\) … \\(\\bar{Y_{a.}}\\) Sample SD \\(s_1\\) \\(s_2\\) … \\(s_a\\) where \\(\\bar{Y_{i.}}=\\frac{1}{n_i}\\sum_{j=1}^{n_i}Y_{ij}\\) \\(s_i^2=\\frac{1}{n_i-1}\\sum_{j=1}^{n_i}(Y_{ij}-\\bar{Y_i})^2\\) And the grand mean is \\(\\bar{Y_{..}}=\\frac{1}{N}\\sum_{i}\\sum_{j}Y_{ij}\\) 21.1.1 Single Factor Fixed Effects Model also known as Single Factor (One-Way) ANOVA or ANOVA Type I model. Partitioning the Variance The total variability of the \\(Y_{ij}\\) observation can be measured as the deviation of \\(Y_{ij}\\) around the overall mean \\(\\bar{Y_{..}}\\): \\(Y_{ij} - \\bar{Y_{..}}\\) This can be rewritten as: \\[ \\begin{aligned} Y_{ij} - \\bar{Y_{..}}&amp;=Y_{ij} - \\bar{Y_{..}} + \\bar{Y_{i.}} - \\bar{Y_{i.}} \\\\ &amp;= (\\bar{Y_{i.}}-\\bar{Y_{..}})+(Y_{ij}-\\bar{Y_{i.}}) \\end{aligned} \\] where the first term is the between treatment differences (i.e., the deviation of the treatment mean from the overall mean) the second term is within treatment differences (i.e., the deviation of the observation around its treatment mean) \\[ \\begin{aligned} \\sum_{i}\\sum_{j}(Y_{ij} - \\bar{Y_{..}})^2 &amp;= \\sum_{i}n_i(\\bar{Y_{i.}}-\\bar{Y_{..}})^2+\\sum_{i}\\sum_{j}(Y_{ij}-\\bar{Y_{i.}})^2 \\\\ SSTO &amp;= SSTR + SSE \\\\ total~SS &amp;= treatment~SS + error~SS \\\\ (N-1)~d.f. &amp;= (a-1)~d.f. + (N - a) ~ d.f. \\end{aligned} \\] we lose a d.f. for the total corrected SSTO because of the estimation of the mean (\\(\\sum_{i}\\sum_{j}(Y_{ij} - \\bar{Y_{..}})=0\\)) And, for the SSTR \\(\\sum_{i}n_i(\\bar{Y_{i.}}-\\bar{Y_{..}})=0\\) Accordingly, \\(MSTR= \\frac{SST}{a-1}\\) and \\(MSR=\\frac{SSE}{N-a}\\) ANOVA Table Source of Variation SS df MS Between Treatments \\(\\sum_{i}n_i (\\bar{Y_{i.}}-\\bar{Y_{..}})^2\\) a-1 SSTR/(a-1) Error (within treatments) \\(\\sum_{i}\\sum_{j}(Y_{ij}-\\bar{Y_{i.}})^2\\) N-a SSE/(N-a) Total (corrected) \\(\\sum_{i}n_i (\\bar{Y_{i.}}-\\bar{Y_{..}})^2\\) N-1 Linear Model Explanation of ANOVA 21.1.1.1 Cell means model \\[ Y_{ij}=\\mu_i+\\epsilon\\_{ij} \\] where \\(Y_{ij}\\) response variable in \\(j\\)-th subject for the \\(i\\)-th treatment \\(\\mu_i\\): parameters (fixed) representing the unknown population mean for the i-th treatment \\(\\epsilon_{ij}\\) independent \\(N(0,\\sigma^2)\\) errors \\(E(Y_{ij})=\\mu_i\\) \\(var(Y_{ij})=var(\\epsilon_{ij})=\\sigma^2\\) All observations have the same variance Example: \\(a = 3\\) (3 treatments) \\(n_1=n_2=n_3=2\\) \\[ \\begin{aligned} \\left(\\begin{array}{c} Y_{11}\\\\ Y_{12}\\\\ Y_{21}\\\\ Y_{22}\\\\ Y_{31}\\\\ Y_{32}\\\\ \\end{array}\\right) &amp;= \\left(\\begin{array}{ccc} 1 &amp; 0 &amp; 0 \\\\ 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\\\ 0 &amp; 0 &amp; 1 \\\\ \\end{array}\\right) \\left(\\begin{array}{c} \\mu_1 \\\\ \\mu_2 \\\\ \\mu_3 \\\\ \\end{array}\\right) + \\left(\\begin{array}{c} \\epsilon_{11} \\\\ \\epsilon_{12} \\\\ \\epsilon_{21} \\\\ \\epsilon_{22} \\\\ \\epsilon_{31} \\\\ \\epsilon_{32} \\\\ \\end{array}\\right)\\\\ \\mathbf{y} &amp;= \\mathbf{X\\beta} +\\mathbf{\\epsilon} \\end{aligned} \\] \\(X_{k,ij}=1\\) if the \\(k\\)-th treatment is used \\(X_{k,ij}=0\\) Otherwise Note: no intercept term. \\[\\begin{equation} \\begin{aligned} \\mathbf{b}= \\left[\\begin{array}{c} \\mu_1 \\\\ \\mu_2 \\\\ \\mu_3 \\\\ \\end{array}\\right] &amp;= (\\mathbf{x}&#39;\\mathbf{x})^{-1}\\mathbf{x}&#39;\\mathbf{y} \\\\ &amp; = \\left[\\begin{array}{ccc} n_1 &amp; 0 &amp; 0\\\\ 0 &amp; n_2 &amp; 0\\\\ 0 &amp; 0 &amp; n_3 \\\\ \\end{array}\\right]^{-1} \\left[\\begin{array}{c} Y_1\\\\ Y_2\\\\ Y_3\\\\ \\end{array}\\right] \\\\ &amp; = \\left[\\begin{array}{c} \\bar{Y_1}\\\\ \\bar{Y_2}\\\\ \\bar{Y_3}\\\\ \\end{array}\\right] \\end{aligned} \\tag{21.1} \\end{equation}\\] is the BLUE (best linear unbiased estimator) for \\(\\beta=[\\mu_1 \\mu_2\\mu_3]&#39;\\) \\[ E(\\mathbf{b})=\\beta \\] \\[ var(\\mathbf{b})=\\sigma^2(\\mathbf{X&#39;X})^{-1}=\\sigma^2 \\left[\\begin{array}{ccc} 1/n_1 &amp; 0 &amp; 0\\\\ 0 &amp; 1/n_2 &amp; 0\\\\ 0 &amp; 0 &amp; 1/n_3\\\\ \\end{array}\\right] \\] \\(var(b_i)=var(\\hat{\\mu_i})=\\sigma^2/n_i\\) where \\(\\mathbf{b} \\sim N(\\beta,\\sigma^2(\\mathbf{X&#39;X})^{-1})\\) \\[ \\begin{aligned} MSE &amp;= \\frac{1}{N-a} \\sum_{i}\\sum_{j}(Y_{ij}-\\bar{Y_{i.}})^2 \\\\ &amp;= \\frac{1}{N-a} \\sum_{i}[(n_i-1)\\frac{\\sum_{i}(Y_{ij}-\\bar{Y_{i.}})^2}{n_i-1}] \\\\ &amp;= \\frac{1}{N-a} \\sum_{i}(n_i-1)s_1^2 \\end{aligned} \\] We have \\(E(s_i^2)=\\sigma^2\\) \\(E(MSE)=\\frac{1}{N-a}\\sum_{i}(n_i-1)\\sigma^2=\\sigma^2\\) Hence, MSE is an unbiased estimator of \\(\\sigma^2\\), regardless of whether the treatment means are equal or not. \\(E(MSTR)=\\sigma^2+\\frac{\\sum_{i}n_i(\\mu_i-\\mu_.)^2}{a-1}\\) where \\(\\mu_.=\\frac{\\sum_{i=1}^{a}n_i\\mu_i}{\\sum_{i=1}^{a}n_i}\\) If all treatment means are equals (=\\(\\mu_.\\)), \\(E(MSTR)=\\sigma^2\\). Then we can use an \\(F\\)-test for the equality of all treatment means: \\[H_0:\\mu_1=\\mu_2=..=\\mu_a\\] \\[H_a: not~al l~ \\mu_i ~ are ~ equal \\] \\(F=\\frac{MSTR}{MSE}\\) where large values of F support \\(H_a\\) (since MSTR will tend to exceed MSE when \\(H_a\\) holds) and F near 1 support \\(H_0\\) (upper tail test) Equivalently, when \\(H_0\\) is true, \\(F \\sim f_{(a-1,N-a)}\\) If \\(F \\leq f_{(a-1,N-a;1-\\alpha)}\\), we cannot reject \\(H_0\\) If \\(F \\geq f_{(a-1,N-a;1-\\alpha)}\\), we reject \\(H_0\\) Note: If \\(a = 2\\) (2 treatments), \\(F\\)-test = two sample \\(t\\)-test 21.1.1.2 Treatment Effects (Factor Effects) Besides Cell means model, we have another way to formalize one-way ANOVA: \\[Y_{ij} = \\mu + \\tau_i + \\epsilon_{ij}\\] where \\(Y_{ij}\\) is the \\(j\\)-th response for the \\(i\\)-th treatment \\(\\tau_i\\) is \\(i\\)-th treatment effect \\(\\mu\\) constant component, common to all observations \\(\\epsilon_{ij}\\) independent random errors ~ \\(N(0,\\sigma^2)\\) For example, \\(a = 3\\), \\(n_1=n_2=n_3=2\\) \\[\\begin{equation} \\begin{aligned} \\left(\\begin{array}{c} Y_{11}\\\\ Y_{12}\\\\ Y_{21}\\\\ Y_{22}\\\\ Y_{31}\\\\ Y_{32}\\\\ \\end{array}\\right) &amp;= \\left(\\begin{array}{cccc} 1 &amp; 1 &amp; 0 &amp; 0 \\\\ 1 &amp; 1 &amp; 0 &amp; 0 \\\\ 1 &amp; 0 &amp; 1 &amp; 0 \\\\ 1 &amp; 0 &amp; 1 &amp; 0 \\\\ 1 &amp; 0 &amp; 0 &amp; 1 \\\\ 1 &amp; 0 &amp; 0 &amp; 1 \\\\ \\end{array}\\right) \\left(\\begin{array}{c} \\mu \\\\ \\tau_1 \\\\ \\tau_2 \\\\ \\tau_3\\\\ \\end{array}\\right) + \\left(\\begin{array}{c} \\epsilon_{11} \\\\ \\epsilon_{12} \\\\ \\epsilon_{21} \\\\ \\epsilon_{22} \\\\ \\epsilon_{31} \\\\ \\epsilon_{32} \\\\ \\end{array}\\right)\\\\ \\mathbf{y} &amp;= \\mathbf{X\\beta} +\\mathbf{\\epsilon} \\end{aligned} \\tag{21.2} \\end{equation}\\] However, \\[ \\mathbf{X&#39;X} = \\left( \\begin{array} {cccc} \\sum_{i}n_i &amp; n_1 &amp; n_2 &amp; n_3 \\\\ n_1 &amp; n_1 &amp; 0 &amp; 0 \\\\ n_2 &amp; 0 &amp; n_2 &amp; 0 \\\\ n_3 &amp; 0 &amp; 0 &amp; n_3 \\\\ \\end{array} \\right) \\] is singular thus does not exist, \\(\\mathbf{b}\\) is insolvable (infinite solutions) Hence, we have to impose restrictions on the parameters to a model matrix \\(\\mathbf{X}\\) of full rank. Whatever restriction we use, we still have: \\(E(Y_{ij})=\\mu + \\tau_i = \\mu_i = mean ~ response ~ for ~ i-th ~ treatment\\) 21.1.1.2.1 Restriction on sum of tau \\(\\sum_{i=1}^{a}\\tau_i=0\\) implies \\[ \\mu= \\mu +\\frac{1}{a}\\sum_{i=1}^{a}(\\mu+\\tau_i) \\] is the average of the treatment mean (grand mean) (overall mean) \\[ \\begin{aligned} \\tau_i &amp;=(\\mu+\\tau_i) -\\mu = \\mu_i-\\mu \\\\ &amp;= \\text{treatment mean} - \\text{grand~mean} \\\\ &amp;= \\text{treatment effect} \\end{aligned} \\] \\[ \\tau_a=-\\tau_1-\\tau_2-...-\\tau_{a-1} \\] Hence, the mean for the a-th treatment is \\[ \\mu_a=\\mu+\\tau_a=\\mu-\\tau_1-\\tau_2-...-\\tau_{a-1} \\] Hence, the model need only “a” parameters: \\[ \\mu,\\tau_1,\\tau_2,..,\\tau_{a-1} \\] Equation (21.2) becomes \\[\\begin{equation} \\begin{aligned} \\left(\\begin{array}{c} Y_{11}\\\\ Y_{12}\\\\ Y_{21}\\\\ Y_{22}\\\\ Y_{31}\\\\ Y_{32}\\\\ \\end{array}\\right) &amp;= \\left(\\begin{array}{ccc} 1 &amp; 1 &amp; 0 \\\\ 1 &amp; 1 &amp; 0 \\\\ 1 &amp; 0 &amp; 1 \\\\ 1 &amp; 0 &amp; 1 \\\\ 1 &amp; -1 &amp; -1 \\\\ 1 &amp; -1 &amp; -1 \\\\ \\end{array}\\right) \\left(\\begin{array}{c} \\mu \\\\ \\tau_1 \\\\ \\tau_2 \\\\ \\end{array}\\right) + \\left(\\begin{array}{c} \\epsilon_{11} \\\\ \\epsilon_{12} \\\\ \\epsilon_{21} \\\\ \\epsilon_{22} \\\\ \\epsilon_{31} \\\\ \\epsilon_{32} \\\\ \\end{array}\\right)\\\\ \\mathbf{y} &amp;= \\mathbf{X\\beta} +\\mathbf{\\epsilon} \\end{aligned} \\end{equation}\\] where \\(\\beta\\equiv[\\mu,\\tau_1,\\tau_2]&#39;\\) Equation (21.1) with \\(\\sum_{i}\\tau_i=0\\) becomes \\[ \\begin{aligned} \\mathbf{b}= \\left[\\begin{array}{c} \\hat{\\mu} \\\\ \\hat{\\tau_1} \\\\ \\hat{\\tau_2} \\\\ \\end{array}\\right] &amp;= (\\mathbf{x}&#39;\\mathbf{x})^{-1}\\mathbf{x}&#39;\\mathbf{y} \\\\ &amp; = \\left[\\begin{array}{ccc} \\sum_{i}n_i &amp; n_1-n_3 &amp; n_2-n_3\\\\ n_1-n_3 &amp; n_1+n_3 &amp; n_3\\\\ n_2-n_3 &amp; n_3 &amp; n_2-n_3 \\\\ \\end{array}\\right]^{-1} \\left[\\begin{array}{c} Y_{..}\\\\ Y_{1.}-Y_{3.}\\\\ Y_{2.}-Y_{3.}\\\\ \\end{array}\\right] \\\\ &amp; = \\left[\\begin{array}{c} \\frac{1}{3}\\sum_{i=1}^{3}\\bar{Y_{i.}}\\\\ \\bar{Y_{1.}}-\\frac{1}{3}\\sum_{i=1}^{3}\\bar{Y_{i.}}\\\\ \\bar{Y_{2.}}-\\frac{1}{3}\\sum_{i=1}^{3}\\bar{Y_{i.}}\\\\ \\end{array}\\right]\\\\ &amp; = \\left[\\begin{array}{c} \\hat{\\mu}\\\\ \\hat{\\tau_1}\\\\ \\hat{\\tau_2}\\\\ \\end{array}\\right] \\end{aligned} \\] and \\(\\hat{\\tau_3}=-\\hat{\\tau_1}-\\hat{\\tau_2}=\\bar{Y_3}-\\frac{1}{3} \\sum_{i}\\bar{Y_{i.}}\\) 21.1.1.2.2 Restriction on first tau In R, lm() uses the restriction \\(\\tau_1=0\\) For the previous example, for \\(n_1=n_2=n_3=2\\), and \\(\\tau_1=0\\). Then the treatment means can be written as: \\[ \\begin{aligned} \\mu_1 &amp;= \\mu + \\tau_1 = \\mu + 0 = \\mu \\\\ \\mu_2 &amp;= \\mu + \\tau_2 \\\\ \\mu_3 &amp;= \\mu + \\tau_3 \\end{aligned} \\] Hence, \\(\\mu\\) is the mean response for the first treatment In the matrix form, \\[ \\begin{aligned} \\left(\\begin{array}{c} Y_{11}\\\\ Y_{12}\\\\ Y_{21}\\\\ Y_{22}\\\\ Y_{31}\\\\ Y_{32}\\\\ \\end{array}\\right) &amp;= \\left(\\begin{array}{ccc} 1 &amp; 0 &amp; 0 \\\\ 1 &amp; 0 &amp; 0 \\\\ 1 &amp; 1 &amp; 0 \\\\ 1 &amp; 1 &amp; 0 \\\\ 1 &amp; 0 &amp; 1 \\\\ 1 &amp; 0 &amp; 1 \\\\ \\end{array}\\right) \\left(\\begin{array}{c} \\mu \\\\ \\tau_2 \\\\ \\tau_3 \\\\ \\end{array}\\right) + \\left(\\begin{array}{c} \\epsilon_{11} \\\\ \\epsilon_{12} \\\\ \\epsilon_{21} \\\\ \\epsilon_{22} \\\\ \\epsilon_{31} \\\\ \\epsilon_{32} \\\\ \\end{array}\\right)\\\\ \\mathbf{y} &amp;= \\mathbf{X\\beta} +\\mathbf{\\epsilon} \\end{aligned} \\] \\(\\beta = [\\mu,\\tau_2,\\tau_3]&#39;\\) \\[ \\begin{aligned} \\mathbf{b}= \\left[\\begin{array}{c} \\hat{\\mu} \\\\ \\hat{\\tau_2} \\\\ \\hat{\\tau_3} \\\\ \\end{array}\\right] &amp;= (\\mathbf{x}&#39;\\mathbf{x})^{-1}\\mathbf{x}&#39;\\mathbf{y} \\\\ &amp; = \\left[\\begin{array}{ccc} \\sum_{i}n_i &amp; n_2 &amp; n_3\\\\ n_2 &amp; n_2 &amp; 0\\\\ n_3 &amp; 0 &amp; n_3 \\\\ \\end{array}\\right]^{-1} \\left[\\begin{array}{c} Y_{..}\\\\ Y_{2.}\\\\ Y_{3.}\\\\ \\end{array}\\right] \\\\ &amp; = \\left[ \\begin{array}{c} \\bar{Y_{1.}} \\\\ \\bar{Y_{2.}} - \\bar{Y_{1.}} \\\\ \\bar{Y_{3.}} - \\bar{Y_{1.}}\\\\ \\end{array}\\right] \\end{aligned} \\] \\[ E(\\mathbf{b})= \\beta = \\left[\\begin{array}{c} {\\mu}\\\\ {\\tau_2}\\\\ {\\tau_3}\\\\ \\end{array}\\right] = \\left[\\begin{array}{c} \\mu_1\\\\ \\mu_2-\\mu_1\\\\ \\mu_3-\\mu_1\\\\ \\end{array}\\right] \\] \\[ \\begin{aligned} var(\\mathbf{b}) &amp;= \\sigma^2(\\mathbf{X&#39;X})^{-1} \\\\ var(\\hat{\\mu}) &amp;= var(\\bar{Y_{1.}})=\\sigma^2/n_1 \\\\ var(\\hat{\\tau_2}) &amp;= var(\\bar{Y_{2.}}-\\bar{Y_{1.}}) = \\sigma^2/n_2 + \\sigma^2/n_1 \\\\ var(\\hat{\\tau_3}) &amp;= var(\\bar{Y_{3.}}-\\bar{Y_{1.}}) = \\sigma^2/n_3 + \\sigma^2/n_1 \\end{aligned} \\] Note For all three parameterization, the ANOVA table is the same Model 1: \\(Y_{ij} = \\mu_i + \\epsilon_{ij}\\) Model 2: \\(Y_{ij} = \\mu + \\tau_i + \\epsilon_{ij}\\) where \\(\\sum_{i} \\tau_i=0\\) Model 3: \\(Y_{ij}= \\mu + \\tau_i + \\epsilon_{ij}\\) where \\(\\tau_1=0\\) All models have the same calculation for \\(\\hat{Y}\\) as \\[ \\mathbf{\\hat{Y} = X(X&#39;X)^{-1}X&#39;Y=PY = Xb} \\] ANOVA Table Source of Variation SS df MS F Between Treatments \\(\\sum_{i} n _ i (\\bar { Y_ {i .} } -\\bar{Y_{..}})^2 = \\mathbf{Y &#39; (P-P_1)Y}\\) a-1 \\(\\frac{SSTR}{a-1}\\) \\(\\frac{MSTR}{MSE}\\) Error (within treatments) \\(\\sum_{i}\\sum_{j}(Y_{ij} -\\bar{Y_{i.}})^2=\\mathbf{e&#39;e}\\) N-a \\(\\frac{SSE}{N-a}\\) Total (corrected) \\(\\sum_{i } n_i(\\bar{Y_{i.}}-\\bar{Y_{..}})^2=\\mathbf{Y&#39;Y - Y&#39;P_1Y}\\) N-1 where \\(\\mathbf{P_1} = \\frac{1}{n}\\mathbf{J}\\) The \\(F\\)-statistic here has \\((a-1,N-a)\\) degrees of freedom, which gives the same value for all three parameterization, but the hypothesis test is written a bit different: \\[ \\begin{aligned} &amp;H_0 : \\mu_1 = \\mu_2 = ... = \\mu_a \\\\ &amp;H_0 : \\mu + \\tau_1 = \\mu + \\tau_2 = ... = \\mu + \\tau_a \\\\ &amp;H_0 : \\tau_1 = \\tau_2 = ...= \\tau_a \\end{aligned} \\] The \\(F\\)-test here serves as a preliminary analysis, to see if there is any difference at different factors. For more in-depth analysis, we consider different testing of treatment effects. 21.1.1.3 Testing of Treatment Effects A Single Treatment Mean \\(\\mu_i\\) A Differences Between Treatment Means A Contrast Among Treatment Means A Linear Combination of Treatment Means 21.1.1.3.1 Single Treatment Mean We have \\(\\hat{\\mu_i}=\\bar{Y_{i.}}\\) where \\(E(\\bar{Y_{i.}})=\\mu_i\\) \\(var(\\bar{Y_{i}})=\\sigma^2/n_i\\) estimated by \\(s^2(\\bar{Y_{i.}})=MSE / n_i\\) Since \\(\\frac{\\bar{Y_{i.}}-\\mu_i}{s(\\bar{Y_{i.}})} \\sim t_{N-a}\\) and the confidence interval for \\(\\mu_i\\) is \\(\\bar{Y_{i.}} \\pm t_{1-\\alpha/2;N-a}s(\\bar{Y_{i.}})\\), then we can do a t-test for the means difference with some constant \\(c\\) \\[ \\begin{aligned} &amp;H_0: \\mu_i = c \\\\ &amp;H_1: \\mu_i \\neq c \\end{aligned} \\] where \\[ T =\\frac{\\bar{Y_{i.}}-c}{s(\\bar{Y_{i.}})} \\] follows \\(t_{N-a}\\) when \\(H_0\\) is true. If \\(|T| &gt; t_{1-\\alpha/2;N-a}\\), we can reject \\(H_0\\) 21.1.1.3.2 Differences Between Treatment Means Let \\(D=\\mu_i - \\mu_i&#39;\\), also known as pairwise comparison \\(D\\) can be estimated by \\(\\hat{D}=\\bar{Y_{i}}-\\bar{Y_{i}}&#39;\\) is unbiased (\\(E(\\hat{D})=\\mu_i-\\mu_i&#39;\\)) Since \\(\\bar{Y_{i}}\\) and \\(\\bar{Y_{i}}&#39;\\) are independent, then \\[ var(\\hat{D})=var(\\bar{Y_{i}}) + var(\\bar{Y_{i&#39;}}) = \\sigma^2(1/n_i + 1/n_i&#39;) \\] can be estimated with \\[ s^2(\\hat{D}) = MSE(1/n_i + 1/n_i&#39;) \\] With the single treatment inference, \\[ \\frac{\\hat{D}-D}{s(\\hat{D})} \\sim t_{N-a} \\] hence, \\[ \\hat{D} \\pm t_{(1-\\alpha/2;N-a)}s(\\hat{D}) \\] Hypothesis tests: \\[ \\begin{aligned} &amp;H_0: \\mu_i = \\mu_i&#39; \\\\ &amp;H_a: \\mu_i \\neq \\mu_i&#39; \\end{aligned} \\] can be tested by the following statistic \\[ T = \\frac{\\hat{D}}{s(\\hat{D})} \\sim t_{1-\\alpha/2;N-a} \\] reject \\(H_0\\) if \\(|T| &gt; t_{1-\\alpha/2;N-a}\\) 21.1.1.3.3 Contrast Among Treatment Means generalize the comparison of two means, we have contrasts A contrast is a linear combination of treatment means: \\[ L = \\sum_{i=1}^{a}c_i \\mu_i \\] where each \\(c_i\\) is non-random constant and sum to 0: \\[ \\sum_{i=1}^{a} c_i = 0 \\] An unbiased estimator of a contrast L is \\[ \\hat{L} = \\sum_{i=1}^{a}c_i \\bar{Y}_{i.} \\] and \\(E(\\hat{L}) = L\\). Since the \\(\\bar{Y}_{i.}\\), i = 1,…, a are independent. \\[ \\begin{aligned} var(\\hat{L}) &amp;= var(\\sum_{i=1}^a c_i \\bar{Y}_{i.}) = \\sum_{i=1}^a var(c_i \\bar{Y}_i) \\\\ &amp;= \\sum_{i=1}^a c_i^2 var(\\bar{Y}_i) = \\sum_{i=1}^a c_i^2 \\sigma^2 /n_i \\\\ &amp;= \\sigma^2 \\sum_{i=1}^{a} c_i^2 /n_i \\end{aligned} \\] Estimation of the variance: \\[ s^2(\\hat{L}) = MSE \\sum_{i=1}^{a} \\frac{c_i^2}{n_i} \\] \\(\\hat{L}\\) is normally distributed (since it is a linear combination of independent normal random variables). Then, since \\(SSE/\\sigma^2\\) is \\(\\chi_{N-a}^2\\) \\[ \\frac{\\hat{L}-L}{s(\\hat{L})} \\sim t_{N-a} \\] A \\(1-\\alpha\\) confidence limits are given by \\[ \\hat{L} \\pm t_{1-\\alpha/2; N-a}s(\\hat{L}) \\] Hypothesis testing \\[ \\begin{aligned} &amp;H_0: L = 0 \\\\ &amp;H_a: L \\neq 0 \\end{aligned} \\] with \\[ T = \\frac{\\hat{L}}{s(\\hat{L})} \\] reject \\(H_0\\) if \\(|T| &gt; t_{1-\\alpha/2;N-a}\\) 21.1.1.3.4 Linear Combination of Treatment Means just like contrast \\(L = \\sum_{i=1}^a c_i \\mu_i\\) but no restrictions on the \\(c_i\\) coefficients. Tests on a single treatment mean, two treatment means, and contrasts can all be considered form the same perspective. \\[ \\begin{aligned} &amp;H_0: \\sum c_i \\mu_i = c \\\\ &amp;H_a: \\sum c_i \\mu_i \\neq c \\end{aligned} \\] The test statistics ( \\(t\\)-stat) can be considered equivalently as \\(F\\)-tests; \\(F = (T)^2\\) where \\(F \\sim F_{1,N-a}\\). Since the numerator degrees of freedom is always 1 in these cases, we refer to them as single-degree-of-freedom tests. Multiple Contrasts To test simultaneously \\(k \\ge 2\\) contrasts, let \\(T_1,...,T_k\\) be the t-stat. The joint distribution of these random variables is a multivariate t-distribution (the tests are dependent since they re based on the same data). Limitations for comparing multiple contrasts: The confidence coefficient \\(1-\\alpha\\) only applies to a particular estimate, not a series of estimates; similarly, the Type I error rate, \\(\\alpha\\), applies to a particular test, not a series of tests. Example: 3 \\(t\\)-tests at \\(\\alpha = 0.05\\), if tests are independent (which they are not), \\(0.95^3 = 0.857\\) (thus \\(\\alpha - 0.143\\) not 0.05) The confidence coefficient \\(1-\\alpha\\) and significance level \\(\\alpha\\) are appropriate only if the test was not suggest by the data. often, the results of an experiment suggest important (i.e.,..g, potential significant) relationships. the process of studying effects suggests by the data is called data snooping Multiple Comparison Procedures: Tukey Scheffe Bonferroni 21.1.1.3.4.1 Tukey All pairwise comparisons of factor level means. All pairs \\(D = \\mu_i - \\mu_i&#39;\\) or all tests of the form: \\[ \\begin{aligned} &amp;H_0: \\mu_i -\\mu_i&#39; = 0 \\\\ &amp;H_a: \\mu_i - \\mu_i&#39; \\neq 0 \\end{aligned} \\] When all sample sizes are equal (\\(n_1 = n_2 = ... = n_a\\)) then the Tukey method family confidence coefficient is exactly \\(1-\\alpha\\) and the significance level is exactly \\(\\alpha\\) When the sample sizes are not equal, the family confidence coefficient is greater than \\(1-\\alpha\\) (i.e., the significance level is less than \\(\\alpha\\)) so the test conservative Tukey considers the studentized range distribution. If we have \\(Y_1,..,Y_r\\), observations from a normal distribution with mean \\(\\alpha\\) and variance \\(\\sigma^2\\). Define: \\[ w = max(Y_i) - min(Y_i) \\] as the range of the observations. Let \\(s^2\\) be an estimate of \\(\\sigma^2\\) with v degrees of freedom. Then, \\[ q(r,v) = \\frac{w}{s} \\] is called the studentized range. The distribution of q uses a special table. Notes when we are not interested in testing all pairwise comparison,s the confidence coefficient for the family of comparisons under consideration will be greater than \\(1-\\alpha\\) (with the significance level less than \\(\\alpha\\)) Tukey can be used for “data snooping” as long as the effects to be studied on the basis of preliminary data analysis are pairwise comparisons. 21.1.1.3.4.2 Scheffe This method applies when the family of interest is the set of possible contrasts among the treatment means: \\[ L = \\sum_{i=1}^a c_i \\mu_i \\] where \\(\\sum_{i=1}^a c_i =0\\) That is, the family of all possible contrasts \\(L\\) or \\[ \\begin{aligned} &amp;H_0: L = 0 \\\\ &amp;H_a: L \\neq 0 \\end{aligned} \\] The family confidence level for the Scheffe procedure is exactly \\(1-\\alpha\\) (i.e., significance level = \\(\\alpha\\)) whether the sample sizes are equal or not. For simultaneous confidence intervals, \\[ \\hat{L} \\pm Ss(\\hat{L}) \\] where \\(\\hat{L}=\\sum c_i \\bar{Y}_{i.},s^2(\\hat{L}) = MSE \\sum c_i^2/n_i\\) and \\(S^2 = (a-1)f_{1-\\alpha;a-1,N-a}\\) The Scheffe procedure considers \\[ F = \\frac{\\hat{L}^2}{(a-1)s^2(\\hat{L})} \\] where we reject \\(H_0\\) at the family significance level \\(\\alpha\\) if \\(F &gt; f_{(1-\\alpha;a-1,N-a)}\\) Note Since applications of the Scheffe never involve all conceivable contrasts, the finite family confidence coefficient will be larger than \\(1-\\alpha\\), so \\(1-\\alpha\\) is a lower bound. Thus, people often consider a larger \\(\\alpha\\) (e.g., 90% confidence interval) Scheffe can be used for “data scooping” since the family of statements contains all possible contrasts. If only pairwise comparisons are to be considered, The Tukey procedure gives narrower confidence limits. 21.1.1.3.4.3 Bonferroni Applicable whether the sample sizes are equal or unequal. For the confidence intervals, \\[ \\hat{L} \\pm B s(\\hat{L}) \\] where \\(B= t_{(1-\\alpha/(2g);N-a)}\\) and g is the number of comparisons in the family. Hypothesis testing \\[ \\begin{aligned} &amp;H_0: L = 0 \\\\ &amp;H_a: L \\neq 0 \\end{aligned} \\] Let \\(T= \\frac{\\hat{L}}{s(\\hat{L})}\\) and reject \\(H_0\\) if \\(|T|&gt;t_{1-\\alpha/(2g),N-a}\\) Notes If all pairwise comparisons are of interest, the Tukey procedure is superior (narrower confidence intervals). If not, Bonferroni may be better. Bonferroni is better than Scheffe when the number of contrasts is about the same as the treatment levels (or less). Recommendation: compute all threes and pick the smallest. Bonferroni can’t be used for data snooping 21.1.1.3.4.4 Fisher’s LSD does not control for family error rate use \\(t\\)-stat for testing \\[ H_0: \\mu_i = \\mu_j \\] t-stat \\[ t = \\frac{\\bar{y}_i - \\bar{y}_j}{\\sqrt{MSE(\\frac{1}{n_i}+ \\frac{1}{n_j})}} \\] 21.1.1.3.4.5 Newman-Keuls Do not recommend using this test since it has less power than ANOVA. 21.1.1.3.5 Multiple comparisons with a control 21.1.1.3.5.1 Dunnett We have \\(a\\) groups where the last group is the control group, and the \\(a-1\\) treatment groups. Then, we compare treatment groups to the control group. Hence, we have \\(a-1\\) contrasts (i.e., \\(a-1\\) pairwise comparisons) 21.1.1.3.6 Summary When choosing a multiple contrast method: Pairwise Equal groups sizes: Tukey Unequal groups sizes: Tukey, Scheffe Not pairwise with control: Dunnett general: Bonferroni, Scheffe 21.1.2 Single Factor Random Effects Model Also known as ANOVA Type II models. Treatments are chosen at from from larger population. We extend inference to all treatments in the population and not restrict our inference to those treatments that happened to be selected for the study. 21.1.2.1 Random Cell Means \\[ Y_{ij} = \\mu_i + \\epsilon_{ij} \\] where \\(\\mu_i \\sim N(\\mu, \\sigma^2_{\\mu})\\) and independent \\(\\epsilon_{ij} \\sim N(0,\\sigma^2)\\) and independent \\(\\mu_i\\) and \\(\\epsilon_{ij}\\) are mutually independent for \\(i =1,...,a; j = 1,...,n\\) With all treatment sample sizes are equal \\[ \\begin{aligned} E(Y_{ij}) &amp;= E(\\mu_i) = \\mu \\\\ var(Y_{ij}) &amp;= var(\\mu_i) + var(\\epsilon_i) = \\sigma^2_{\\mu} + \\sigma^2 \\end{aligned} \\] Since \\(Y_{ij}\\) are not independent \\[ \\begin{aligned} cov(Y_{ij},Y_{ij&#39;}) &amp;= E(Y_{ij}Y_{ij&#39;}) - E(Y_{ij})E(Y_{ij&#39;}) \\\\ &amp;= E(\\mu_i^2 + \\mu_i \\epsilon_{ij&#39;} + \\mu_i \\epsilon_{ij} + \\epsilon_{ij}\\epsilon_{ij&#39;}) - \\mu^2 \\\\ &amp;= \\sigma^2_{\\mu} + \\mu^2 - \\mu^2 &amp; \\text{if} j \\neq j&#39; \\\\ &amp;= \\sigma^2_{\\mu} &amp; \\text{if} j \\neq j&#39; \\end{aligned} \\] \\[ \\begin{aligned} cov(Y_{ij},Y_{i&#39;j&#39;}) &amp;= E(\\mu_i \\mu_{i&#39;} + \\mu_i \\epsilon_{i&#39;j&#39;}+ \\mu_{i&#39;}\\epsilon_{ij}+ \\epsilon_{ij}\\epsilon_{i&#39;j&#39;}) - \\mu^2 \\\\ &amp;= \\mu^2 - \\mu^2 &amp; \\text{if } i \\neq i&#39; \\\\ &amp;= 0 \\\\ \\end{aligned} \\] Hence, all observations have the same variance any two observations from the same treatment have covariance \\(\\sigma^2_{\\mu}\\) The correlation between any two responses from the same treatment: \\[ \\begin{aligned} \\rho(Y_{ij},Y_{ij&#39;}) &amp;= \\frac{\\sigma^2_{\\mu}}{\\sigma^2_{\\mu}+ \\sigma^2} &amp;&amp; \\text{$j \\neq j&#39;$} \\end{aligned} \\] Inference Intraclass Correlation Coefficient \\[ \\frac{\\sigma^2_{\\mu}}{\\sigma^2 + \\sigma^2_{\\mu}} \\] which measures the proportion of total variability of \\(Y_{ij}\\) accounted for by the variance of \\(\\mu_i\\) \\[ \\begin{aligned} &amp;H_0: \\sigma_{\\mu}^2 = 0 \\\\ &amp;H_a: \\sigma_{\\mu}^2 \\neq 0 \\end{aligned} \\] \\(H_0\\) implies \\(\\mu_i = \\mu\\) for all i, which can be tested by the F-test in ANOVA. The understandings of the Single Factor Fixed Effects Model and the Single Factor Random Effects Model are different, the ANOVA is same for the one factor model. The difference is in the expected mean squares Random Effects Model Fixed Effects Model \\(E(MSE) = \\sigma^2\\) \\(E(MSE) = \\sigma^2\\) \\(E(M STR) = \\sigma^2 - n \\sigma^2_\\mu\\) \\(E(MSTR) = \\sigma^2 + \\frac{ \\sum_i n_i (\\mu_i - \\mu)^2}{a-1}\\) If \\(\\sigma^2_\\mu\\), then MSE and MSTR have the same expectation (\\(\\sigma^2\\)). Otherwise, \\(E(MSTR) &gt;E(MSE)\\). Large values of the statistic \\[ F = \\frac{MSTR}{MSE} \\] suggest we reject \\(H_0\\). Since \\(F \\sim F_{(a-1,a(n-1))}\\) when \\(H_0\\) holds. If \\(F &gt; f_{(1-\\alpha;a-1,a(n-1))}\\) we reject \\(H_0\\). If sample sizes are not equal, \\(F\\)-test can still be used, but the df are \\(a-1\\) and \\(N-a\\). 21.1.2.1.1 Estimation of \\(\\mu\\) An unbiased estimator of \\(E(Y_{ij})=\\mu\\) is the grand mean: \\(\\hat{\\mu} = \\hat{Y}_{..}\\) The variance of this estimator is \\[ \\begin{aligned} var(\\bar{Y}_{..}) &amp;= var(\\sum_i \\bar{Y}_{i.}/a) \\\\ &amp;= \\frac{1}{a^2}\\sum_ivar(\\bar{Y}_{i.}) \\\\ &amp;= \\frac{1}{a^2}\\sum_i(\\sigma^2_\\mu+\\sigma^2/n) \\\\ &amp;= \\frac{1}{a^2}(\\sigma^2_{\\mu}+\\sigma^2/n) \\\\ &amp;= \\frac{n\\sigma^2_{\\mu}+ \\sigma^2}{an} \\end{aligned} \\] An unbiased estimator of this variance is \\(s^2(\\bar{Y})=\\frac{MSTR}{an}\\). Thus \\(\\frac{\\bar{Y}_{..}-\\mu}{s(\\bar{Y}_{..})} \\sim t_{a-1}\\) A \\(1-\\alpha\\) confidence interval is \\(\\bar{Y}_{..} \\pm t_{(1-\\alpha/2;a-1)}s(\\bar{Y}_{..})\\) 21.1.2.1.2 Estimation of \\(\\sigma^2_\\mu/(\\sigma^2_{\\mu}+\\sigma^2)\\) In the random and fixed effects model, MSTR and MSE are independent. When the sample sizes are equal (\\(n_i = n\\) for all i), \\[ \\frac{\\frac{MSTR}{n\\sigma^2_\\mu+ \\sigma^2}}{\\frac{MSE}{\\sigma^2}} \\sim f_{(a-1,a(n-1))} \\] \\[ P(f_{(\\alpha/2;a-1,a(n-1))}\\le \\frac{\\frac{MSTR}{n\\sigma^2_\\mu+ \\sigma^2}}{\\frac{MSE}{\\sigma^2}} \\le f_{(1-\\alpha/2;a-1,a(n-1))}) = 1-\\alpha \\] \\[ \\begin{aligned} L &amp;= \\frac{1}{n}(\\frac{MSTR}{MSE}(\\frac{1}{f_{(1-\\alpha/2;a-1,a(n-1))}})-1) \\\\ U &amp;= \\frac{1}{n}(\\frac{MSTR}{MSE}(\\frac{1}{f_{(\\alpha/2;a-1,a(n-1))}})-1) \\end{aligned} \\] The lower and upper \\((L^*,U^*)\\) confidence limits for \\(\\frac{\\sigma^2_\\mu}{\\sigma^2_\\mu + \\sigma^2}\\) \\[ \\begin{aligned} L^* &amp;= \\frac{L}{1+L} \\\\ U^* &amp;= \\frac{U}{1+U} \\end{aligned} \\] If the lower limit for \\(\\frac{\\sigma^2_\\mu}{\\sigma^2}\\) is negative, it is customary to set \\(L = 0\\). 21.1.2.1.3 Estimation of \\(\\sigma^2\\) \\(a(n-1)MSE/\\sigma^2 \\sim \\chi^2_{a(n-1)}\\), the \\((1-\\alpha)\\) confidence interval for \\(\\sigma^2\\): \\[ \\frac{a(n-1)MSE}{\\chi^2_{1-\\alpha/2;a(n-1)}} \\le \\sigma^2 \\le \\frac{a(n-1)MSE}{\\chi^2_{\\alpha/2;a(n-1)}} \\] can also be used in case sample sizes are not equal - then df is N-a. 21.1.2.1.4 Estimation of \\(\\sigma^2_\\mu\\) \\(E(MSE) = \\sigma^2\\) \\(E(MSTR) = \\sigma^2 + n\\sigma^2_\\mu\\). Hence, \\[ \\sigma^2_{\\mu} = \\frac{E(MSTR)- E(MSE)}{n} \\] An unbiased estimator of \\(\\sigma^2_\\mu\\) is given by \\[ s^2_\\mu =\\frac{MSTR-MSE}{n} \\] if \\(s^2_\\mu &lt; 0\\), set \\(s^2_\\mu = 0\\) If sample sizes are not equal, \\[ s^2_\\mu = \\frac{MSTR - MSE}{n&#39;} \\] where \\(n&#39; = \\frac{1}{a-1}(\\sum_i n_i- \\frac{\\sum_i n^2_i}{\\sum_i n_i})\\) no exact confidence intervals for \\(\\sigma^2_\\mu\\), but we can approximate intervals. Satterthewaite Procedure can be used to construct approximate confidence intervals for linear combination of expected mean squares A linear combination: \\[ \\sigma^2_\\mu = \\frac{1}{n} E(MSTR) + (-\\frac{1}{n}) E(MSE) \\] \\[ S = d_1 E(MS_1) + ..+ d_h E(MS_h) \\] where \\(d_i\\) are coefficients. An unbiased estimator of S is \\[ \\hat{S} = d_1 MS_1 + ...+ d_h MS_h \\] Let \\(df_i\\) be the degrees of freedom associated with the mean square \\(MS_i\\). The Satterthwaite approximation: \\[ \\frac{(df)\\hat{S}}{S} \\sim \\chi^2_{df} \\] where \\[ df = \\frac{(d_1MS_1+...+d_hMS_h)^2}{(d_1MS_1)^2/df_1 + ...+ (d_hMS_h)^2/df_h} \\] An approximate \\(1-\\alpha\\) confidence interval for S: \\[ \\frac{(df)\\hat{S}}{\\chi^2_{1-\\alpha/2;df}} \\le S \\le \\frac{(df)\\hat{S}}{\\chi^2_{\\alpha/2;df}} \\] For the single factor random effects model \\[ \\frac{(df)s^2_\\mu}{\\chi^2_{1-\\alpha/2;df}} \\le \\sigma^2_\\mu \\le \\frac{(df)s^2_\\mu}{\\chi^2_{\\alpha/2;df}} \\] where \\[ df = \\frac{(sn^2_\\mu)^2}{\\frac{(MSTR)^2}{a-1}+ \\frac{(MSE)^2}{a(n-1)}} \\] 21.1.2.2 Random Treatment Effects Model \\[ \\tau_i = \\mu_i - E(\\mu_i) = \\mu_i - \\mu \\] we have \\(\\mu_i = \\mu + \\tau_i\\) and \\[ Y_{ij} = \\mu + \\tau_i + \\epsilon_{ij} \\] where \\(\\mu\\) = constant, common to all observations \\(\\tau_i \\sim N(0,\\sigma^2_\\tau)\\) independent (random variables) \\(\\epsilon_{ij} \\sim N(0,\\sigma^2)\\) independent. \\(\\tau_{i}, \\epsilon_{ij}\\) are independent (i=1,…,a; j =1,..,n) our model is concerned with only balanced single factor ANOVA. Diagnostics Measures Non-constant error variance (plots, Levene test, Hartley test). Non-independence of errors (plots, Durban-Watson test). Outliers (plots, regression methods). Non-normality of error terms (plots, Shapiro-Wilk, Anderson-Darling). Omitted Variable Bias (plots) Remedial Weighted Least Squares [Transformations] Non-parametric Procedures. Note Fixed effect ANOVA is relatively robust to non-normality unequal variances when sample sizes are approximately equal; at least the F-test and multiple comparisons. However, single comparisons of treatment means are sensitive to unequal variances. Lack of independence can seriously affect both fixed and random effect ANVOA. 21.1.3 Two Factor Fixed Effect ANOVA The multi-factor experiment is more efficient provides more info gives more validity to the findings. 21.1.3.1 Balanced Assumption: All treatment sample sizes are equal All treatment means are of equal importance Assume: Factor \\(A\\) has a levels and Factor \\(B\\) has b levels. All \\(a \\times b\\) factor levels are considered. The number of treatments for each level is n. \\(N = abn\\) observations in the study. 21.1.3.1.1 Cell Means Model \\[ Y_{ijk} = \\mu_{ij} + \\epsilon_{ijk} \\] where \\(\\mu_{ij}\\) are fixed parameters (cell means) \\(i = 1,...,a\\) = the levels of Factor A \\(j = 1,...,b\\) = the levels of Factor B. \\(\\epsilon_{ijk} \\sim \\text{indep } N(0,\\sigma^2)\\) for \\(i = 1,...,a\\), \\(j = 1,..,b\\) and \\(k = 1,..,n\\) And \\[ \\begin{aligned} E(Y_{ijk}) &amp;= \\mu_{ij} \\\\ var(Y_{ijk}) &amp;= var(\\epsilon_{ijk}) = \\sigma^2 \\end{aligned} \\] Hence, \\[ Y_{ijk} \\sim \\text{indep } N(\\mu_{ij},\\sigma^2) \\] And the model is \\[ \\mathbf{Y} = \\mathbf{X} \\beta + \\epsilon \\] Thus, \\[ \\begin{aligned} E(\\mathbf{Y}) &amp;= \\mathbf{X}\\beta \\\\ var(\\mathbf{Y}) &amp;= \\sigma^2 \\mathbf{I} \\end{aligned} \\] Interaction \\[ (\\alpha \\beta)_{ij} = \\mu_{ij} - (\\mu_{..}+ \\alpha_i + \\beta_j) \\] where \\(\\mu_{..} = \\sum_i \\sum_j \\mu_{ij}/ab\\) is the grand mean \\(\\alpha_i = \\mu_{i.}-\\mu_{..}\\) is the main effect for factor \\(A\\) at the \\(i\\)-th level \\(\\beta_j = \\mu_{.j} - \\mu_{..}\\) is the main effect for factor \\(B\\) at the \\(j\\)-th level \\((\\alpha \\beta)_{ij}\\) is the interaction effect when factor \\(A\\) is at the \\(i\\)-th level and factor \\(B\\) is at the \\(j\\)-th level. \\((\\alpha \\beta)_{ij} = \\mu_{ij} - \\mu_{i.}-\\mu_{.j}+ \\mu_{..}\\) Examine interactions: Examine whether all \\(\\mu_{ij}\\) can be expressed as the sums \\(\\mu_{..} + \\alpha_i + \\beta_j\\) Examine whether the difference between the mean responses for any two levels of factor \\(B\\) is the same for all levels of factor \\(A\\). Examine whether the difference between the mean response for any two levels of factor \\(A\\) is the same for all levels of factor \\(B\\) Examine whether the treatment mean curves for the different factor levels in a treatment plot are parallel. For \\(j = 1,...,b\\) \\[ \\begin{aligned} \\sum_i(\\alpha \\beta)_{ij} &amp;= \\sum_i (\\mu_{ij} - \\mu_{..} - \\alpha_i - \\beta_j) \\\\ &amp;= \\sum_i \\mu_{ij} - a \\mu_{..} - \\sum_i \\alpha_i - a \\beta_j \\\\ &amp;= a \\mu_{.j} - a \\mu_{..}- \\sum_i (\\mu_{i.} - \\mu_{..}) - a(\\mu_{.j}-\\mu_{..}) \\\\ &amp;= a \\mu_{.j} - a \\mu_{..} - a \\mu_{..}+ a \\mu_{..} - a (\\mu_{.j} - \\mu_{..}) \\\\ &amp;= 0 \\end{aligned} \\] Similarly, \\(\\sum_j (\\alpha \\beta) = 0, i = 1,...,a\\) and \\(\\sum_i \\sum_j (\\alpha \\beta)_{ij} =0\\), \\(\\sum_i \\alpha_i = 0\\), \\(\\sum_j \\beta_j = 0\\) 21.1.3.1.2 Factor Effects Model \\[ \\begin{aligned} \\mu_{ij} &amp;= \\mu_{..} + \\alpha_i + \\beta_j + (\\alpha \\beta)_{ij} \\\\ Y_{ijk} &amp;= \\mu_{..} + \\alpha_i + \\beta_j + (\\alpha \\beta)_{ij} + \\epsilon_{ijk} \\end{aligned} \\] where \\(\\mu_{..}\\) is a constant \\(\\alpha_i\\) are constants subject to the restriction \\(\\sum_i \\alpha_i=0\\) \\(\\beta_j\\) are constants subject to the restriction \\(\\sum_j \\beta_j = 0\\) \\((\\alpha \\beta)_{ij}\\) are constants subject to the restriction \\(\\sum_i(\\alpha \\beta)_{ij} = 0\\) for \\(j=1,...,b\\) and \\(\\sum_j(\\alpha \\beta)_{ij} = 0\\) for \\(i = 1,...,a\\) \\(\\epsilon_{ijk} \\sim \\text{indep } N(0,\\sigma^2)\\) for \\(k = 1,..,n\\) We have \\[ \\begin{aligned} E(Y_{ijk}) &amp;= \\mu_{..} + \\alpha_i + \\beta_j + (\\alpha \\beta)_{ij}\\\\ var(Y_{ijk}) &amp;= \\sigma^2 \\\\ Y_{ijk} &amp;\\sim N (\\mu_{..} + \\alpha_i + \\beta_j + (\\alpha \\beta)_{ij}, \\sigma^2) \\end{aligned} \\] We have \\(1+a+b+ab\\) parameters. But there are \\(ab\\) parameters in the Cell Means Model. In the Factor Effects Model, the restrictions limit the number of parameters that can be estimated: \\[ \\begin{aligned} 1 &amp;\\text{ for } \\mu_{..} \\\\ (a-1) &amp;\\text{ for } \\alpha_i \\\\ (b-1) &amp;\\text{ for } \\beta_j \\\\ (a-1)(b-1) &amp;\\text{ for } (\\alpha \\beta)_{ij} \\end{aligned} \\] Hence, there are \\[ 1 + a - 1 + b - 1 + ab - a- b + 1 = ab \\] parameters in the model. We can have several restrictions when considering the model in the form \\(\\mathbf{Y} = \\mathbf{X} \\beta + \\epsilon\\) One way: \\[ \\begin{aligned} \\alpha_a &amp;= \\alpha_1 - \\alpha_2 - ... - \\alpha_{a-1} \\\\ \\beta_b &amp;= -\\beta_1 - \\beta_2 - ... - \\beta_{b-1} \\\\ (\\alpha \\beta)_{ib} &amp;= -(\\alpha \\beta)_{i1} -(\\alpha \\beta)_{i2} -...-(\\alpha \\beta)_{i,b-1} ; i = 1,..,a \\\\ (\\alpha \\beta)_{aj}&amp; = -(\\alpha \\beta)_{1j}-(\\alpha \\beta)_{2j} - ... -(\\alpha \\beta)_{a-1,j}; j = 1,..,b \\end{aligned} \\] We can fit the model by least squares or maximum likelihood Cell Means Model minimize \\[ Q = \\sum_i \\sum_j \\sum_k (Y_{ijk}-\\mu_{ij})^2 \\] estimators \\[ \\begin{aligned} \\hat{\\mu}_{ij} &amp;= \\bar{Y}_{ij} \\\\ \\hat{Y}_{ijk} &amp;= \\bar{Y}_{ij} \\\\ e_{ijk} = Y_{ijk} - \\hat{Y}_{ijk} &amp;= Y_{ijk} - \\bar{Y}_{ij} \\end{aligned} \\] Factor Effects Model \\[ Q = \\sum_i \\sum_j \\sum_k (Y_{ijk} - \\mu_{..}-\\alpha_i = \\beta_j - (\\alpha \\beta)_{ij})^2 \\] subject to the restrictions \\[ \\begin{aligned} \\sum_i \\alpha_i &amp;= 0 \\\\ \\sum_j \\beta_j &amp;= 0 \\\\ \\sum_i (\\alpha \\beta)_{ij} &amp;= 0 \\\\ \\sum_j (\\alpha \\beta)_{ij} &amp;= 0 \\end{aligned} \\] estimators \\[ \\begin{aligned} \\hat{\\mu}_{..} &amp;= \\bar{Y}_{...} \\\\ \\hat{\\alpha}_i &amp;= \\bar{Y}_{i..} - \\bar{Y}_{...} \\\\ \\hat{\\beta}_j &amp;= \\bar{Y}_{.j.}-\\bar{Y}_{...} \\\\ (\\hat{\\alpha \\beta})_{ij} &amp;= \\bar{Y}_{ij.} - \\bar{Y}_{i..} - \\bar{Y}_{.j.}+ \\bar{Y}_{...} \\end{aligned} \\] The fitted values \\[ \\hat{Y}_{ijk} = \\bar{Y}_{...}+ (\\bar{Y}_{i..}- \\bar{Y}_{...})+ (\\bar{Y}_{.j.}- \\bar{Y}_{...}) + (\\bar{Y}_{ij.} - \\bar{Y}_{i..}-\\bar{Y}_{.j.}+\\bar{Y}_{...}) = \\bar{Y}_{ij.} \\] where \\[ \\begin{aligned} e_{ijk} &amp;= Y_{ijk} - \\bar{Y}_{ij.} \\\\ e_{ijk} &amp;\\sim \\text{ indep } (0,\\sigma^2) \\end{aligned} \\] and \\[ \\begin{aligned} s^2_{\\hat{\\mu}..} &amp;= \\frac{MSE}{nab} \\\\ s^2_{\\hat{\\alpha}_i} &amp;= MSE(\\frac{1}{nb} - \\frac{1}{nab}) \\\\ s^2_{\\hat{\\beta}_j} &amp;= MSE(\\frac{1}{na} - \\frac{1}{nab}) \\\\ s^2_{(\\hat{\\alpha\\beta})_{ij}} &amp;= MSE (\\frac{1}{n} - \\frac{1}{na}- \\frac{1}{nb} + \\frac{1}{nab}) \\end{aligned} \\] 21.1.3.1.2.1 Partitioning the Total Sum of Squares \\[ Y_{ijk} - \\bar{Y}_{...} = \\bar{Y}_{ij.} - \\bar{Y}_{...} + Y_{ijk} - \\bar{Y}_{ij.} \\] \\(Y_{ijk} - \\bar{Y}_{...}\\): Total deviation \\(\\bar{Y}_{ij.} - \\bar{Y}_{...}\\): Deviation of treatment mean from overall mean \\(Y_{ijk} - \\bar{Y}_{ij.}\\): Deviation of observation around treatment mean (residual). \\[ \\begin{aligned} \\sum_i \\sum_j \\sum_k (Y_{ijk} - \\bar{Y}_{...})^2 &amp;= n \\sum_i \\sum_j (\\bar{Y}_{ij.}- \\bar{Y}_{...})^2+ \\sum_i \\sum_j sum_k (Y_{ijk} - \\bar{ij.})^2 \\\\ SSTO &amp;= SSTR + SSE \\end{aligned} \\] (cross product terms are 0) \\[ \\bar{Y}_{ij.}- \\bar{Y}_{...} = \\bar{Y}_{i..}-\\bar{Y}_{...} + \\bar{Y}_{.j.}-\\bar{Y}_{...} + \\bar{Y}_{ij.} - \\bar{Y}_{i..} - \\bar{Y}_{.j.} + \\bar{Y}_{...} \\] squaring and summing: \\[ \\begin{aligned} n\\sum_i \\sum_j (\\bar{Y}_{ij.}-\\bar{Y}_{...})^2 &amp;= nb\\sum_i (\\bar{Y}_{i..}-\\bar{Y}_{...})^2 + na \\sum_j (\\bar{Y}_{.j.}-\\bar{Y}_{...})^2 \\\\ &amp;+ n \\sum_i \\sum_j (\\bar{Y}_{ij.}-\\bar{Y}_{i..}- \\bar{Y}_{.j.}+ \\bar{Y}_{...})^2 \\\\ SSTR &amp;= SSA + SSB + SSAB \\end{aligned} \\] The interaction term from \\[ \\begin{aligned} SSAB &amp;= SSTO - SSE - SSA - SSB \\\\ SSAB &amp;= SSTR - SSA - SSB \\end{aligned} \\] where \\(SSA\\) is the factor \\(A\\) sum of squares (measures the variability of the estimated factor \\(A\\) level means \\(\\bar{Y}_{i..}\\))- the more variable, the larger \\(SSA\\) \\(SSB\\) is the factor \\(B\\) sum of squares \\(SSAB\\) is the interaction sum of squares, measuring the variability of the estimated interactions. 21.1.3.1.2.2 Partitioning the df \\(N = abn\\) cases and \\(ab\\) treatments. For one-way ANOVA and regression, the partition has df: \\[ SS: SSTO = SSTR + SSE \\] \\[ df: N-1 = (ab-1) + (N-ab) \\] we must further partition the \\(ab-1\\) df with SSTR \\[ SSTR = SSA + SSB + SSAB \\] \\[ ab-1 = (a-1) + (b-1) + (a-1)(b-1) \\] \\(df_{SSA} = a-1\\): a treatment deviations but 1 df is lost due to the restriction \\(\\sum (\\bar{Y}_{i..}- \\bar{Y}_{...})=0\\) \\(df_{SSB} = b-1\\): b treatment deviations but 1 df is lost due to the restriction \\(\\sum (\\bar{Y}_{.j.}- \\bar{Y}_{...})=0\\) \\(df_{SSAB} = (a-1)(b-1)= (ab-1)-(a-1)-(b-1)\\): ab interactions, there are (a+b-1) restrictions, so df = ab-a-(b-1)= (a-1)(b-1) 21.1.3.1.2.3 Mean Squares \\[ \\begin{aligned} MSA &amp;= \\frac{SSA}{a-1}\\\\ MSB &amp;= \\frac{SSB}{b-1}\\\\ MSAB &amp;= \\frac{SSAB}{(a-1)(b-1)} \\end{aligned} \\] The expected mean squares are \\[ \\begin{aligned} E(MSE) &amp;= \\sigma^2 \\\\ E(MSA) &amp;= \\sigma^2 + nb \\frac{\\sum \\alpha_i^2}{a-1} = \\sigma^2 + nb \\frac{\\sum(\\sum_{i.}-\\mu_{..})^2}{a-1} \\\\ E(MSB) &amp;= \\sigma^2 + na \\frac{\\sum \\beta_i^2}{b-1} = \\sigma^2 + na \\frac{\\sum(\\sum_{.j}-\\mu_{..})^2}{b-1} \\\\ E(MSAB) &amp;= \\sigma^2 + n \\frac{\\sum \\sum (\\alpha \\beta)_{ij}^2}{(a-1)(b-1)} = \\sigma^2 + n \\frac{\\sum (\\mu_{ij}- \\mu_{i.}- \\mu_{.j}+ \\mu_{..} )^2}{(a-1)(b-1)} \\end{aligned} \\] If there are no factor A main effects (all \\(\\mu_{i.} = 0\\) or \\(\\alpha_i = 0\\)) the MSA and MSE have the same expectation; otherwise MSA &gt; MSE. Same for factor B, and interaction effects. which case we can examine F-statistics. Interaction \\[ \\begin{aligned} H_0: \\mu_{ij}- \\mu_{i.} - \\mu_{.j} + \\mu_{..} = 0 &amp;&amp; \\text{for all i,j} \\\\ H_a: \\mu_{ij}- \\mu_{i.} - \\mu_{.j} + \\mu_{..} \\neq 0 &amp;&amp; \\text{for some i,j} \\end{aligned} \\] or \\[ \\begin{aligned} &amp;H_0: \\text{All}(\\alpha \\beta)_{ij} = 0 \\\\ &amp;H_a: \\text{Not all} (\\alpha \\beta) = 0 \\end{aligned} \\] Let \\(F = \\frac{MSAB}{MSE}\\). When \\(H_0\\) is true \\(F \\sim f_{((a-1)(b-1),ab(n-1))}\\). So reject \\(H_0\\) when \\(F &gt; f_{((a-1)(b-1),ab(n-1))}\\) Factor A main effects: \\[ \\begin{aligned} &amp;H_0: \\mu_{1.} = \\mu_{2.} = ... = \\mu_{a.} \\\\ &amp;H_a: \\text{Not all $\\mu_{i.}$ are equal} \\end{aligned} \\] or \\[ \\begin{aligned} &amp;H_0: \\alpha_1 = ... = \\alpha_a = 0 \\\\ &amp;H_a: \\text{Not all $\\alpha_i$ are equal to 0} \\end{aligned} \\] \\(F= \\frac{MSA}{MSE}\\) and reject \\(H_0\\) if \\(F&gt;f_{(1-\\alpha;a-1,ab(n-1))}\\) 21.1.3.1.2.4 Two-way ANOVA Source of Variation SS df MS F Factor A \\(SSA\\) \\(a-1\\) \\(MSA = SSA/(a-1)\\) \\(MSA/MSE\\) Factor B \\(SSB\\) \\(b-1\\) \\(MSB = SSB/(b-1)\\) \\(MSB/MSE\\) AB interactions \\(SSAB\\) \\((a-1)(b-1)\\) \\(MSAB = SSAB /MSE\\) Error \\(SSE\\) \\(ab(n-1)\\) \\(MSE = SSE/ab(n-1)\\) Total (corrected) \\(SSTO\\) \\(abn - 1\\) Doing 2-way ANOVA means you always check interaction first, because if there are significant interactions, checking the significance of the main effects becomes moot. The main effects concern the mean responses for levels of one factor averaged over the levels of the other factor. When interaction is present, we can’t conclude that a given factor has no effect, even if these averages are the same. It means that the effect of the factor depends on the level of the other factor. On the other hand, if you can establish that there is no interaction, then you can consider inference on the factor main effects, which are then said to be additive. And we can also compare factor means like the Single Factor Fixed Effects Model using Tukey, Scheffe, Bonferroni. We can also consider contrasts in the 2-way model \\[ L = \\sum c_i \\mu_i \\] where \\(\\sum c_i =0\\) which is estimated by \\[ \\hat{L} = \\sum c_i \\bar{Y}_{i..} \\] with variance \\[ \\sigma^2(\\hat{L}) = \\frac{\\sigma^2}{bn} \\sum c_i^2 \\] and variance estimate \\[ \\frac{MSE}{bn} \\sum c_i^2 \\] Orthogonal Contrasts \\[ \\begin{aligned} L_1 &amp;= \\sum c_i \\mu_i, \\sum c_i = 0 \\\\ L_2 &amp;= \\sum d_i \\mu_i , \\sum d_i = 0 \\end{aligned} \\] these contrasts are said to be orthogonal if \\[ \\sum \\frac{c_i d_i}{n_i} = 0 \\] in balanced case \\(\\sum c_i d_i =0\\) \\[ \\begin{aligned} cov(\\hat{L}_1, \\hat{L}_2) &amp;= cov(\\sum_i c_i \\bar{Y}_{i..}, \\sum_l d_l \\bar{Y}_{l..}) \\\\ &amp;= \\sum_i \\sum_l c_i d_l cov(\\bar{Y}_{i..},\\bar{Y}_{l..}) \\\\ &amp;= \\sum_i c_i d_i \\frac{\\sigma^2}{bn} = 0 \\end{aligned} \\] Orthogonal contrasts can be used to further partition the model sum of squares. There are many sets of orthogonal contrasts and thus, many ways to partition the sum of squares. A special set of orthogonal contrasts that are used when the levels of a factor can be assigned values on a metric scale are called orthogonal polynomials Coefficients can be found for the special case of equal spaced levels (e.g., (0 15 30 45 60)) equal sample sizes (\\(n_1 = n_2 = ... = n_{ab}\\)) We can define the SS for a given contrast: \\[ SS_L = \\frac{\\hat{L}^2}{\\sum_{i=1}^a (c^2_i/bn_i)} \\] \\[ T = \\frac{\\hat{L}}{\\sqrt{MSE\\sum_{i=1}^a(c_i^2/bn_i)}} \\sim t \\] Moreover, \\[ t^2_{(1-\\alpha/2;df)}=F_{(1-\\alpha;1,df)} \\] So, \\[ \\frac{SS_L}{MSE} \\sim F_{(1-\\alpha;1,df_{MSE})} \\] all contrasts have d.f = 1 21.1.3.2 Unbalanced We could have unequal numbers of replications for all treatment combinations: Observational studies Dropouts in designed studies Larger sample sizes for inexpensive treatments Sample sizes to match population makeup. Assume that each factor combination has at least 1 observation (no empty cells) Consider the same model as: \\[ Y_{ijk} = \\mu_{..} + \\alpha_i + \\beta_j + (\\alpha \\beta)_{ij} + \\epsilon_{ijk} \\] where sample sizes are: \\(n_{ij}\\): \\[ \\begin{aligned} n_{i.} &amp;= \\sum_j n_{ij} \\\\ n_{.j} &amp;= \\sum_i n_{ij} \\\\ n_T &amp;= \\sum_i \\sum_j n_{ij} \\end{aligned} \\] Problem here is that \\[ SSTO \\neq SSA + SSB + SSAB + SSE \\] (the design is non-orthogonal) For \\(i = 1,...,a-1,\\) \\[ u_i = \\begin{cases} +1 &amp; \\text{if the obs is from the i-th level of Factor 1} \\\\ -1 &amp; \\text{if the obs is from the a-th level of Factor 1} \\\\ 0 &amp; \\text{otherwise} \\\\ \\end{cases} \\] For \\(j=1,...,b-1\\) \\[ v_i = \\begin{cases} +1 &amp; \\text{if the obs is from the j-th level of Factor 1} \\\\ -1 &amp; \\text{if the obs is from the b-th level of Factor 1} \\\\ 0 &amp; \\text{otherwise} \\\\ \\end{cases} \\] We can use these indicator variables as predictor variables and \\(\\mu_{..}, \\alpha_i ,\\beta_j, (\\alpha \\beta)_{ij}\\) as unknown parameters. \\[ Y = \\mu_{..} + \\sum_{i=1}^{a-1} \\alpha_i u_i + \\sum_{j=1}^{b-1} \\beta_j v_j + \\sum_{i=1}^{a-1} \\sum_{j=1}^{b-1}(\\alpha \\beta)_{ij} u_i v_j + \\epsilon \\] To test hypotheses, we use the extra sum of squares idea. For interaction effects \\[ \\begin{aligned} &amp;H_0: all (\\alpha \\beta)_{ij} = 0 \\\\ &amp;H_a: \\text{not all }(\\alpha \\beta)_{ij} =0 \\end{aligned} \\] Or to test \\[ \\begin{aligned} &amp;H_0: \\beta_1 = \\beta_2 = \\beta_3 = 0 \\\\ &amp;H_a: \\text{not all } \\beta_j = 0 \\end{aligned} \\] Analysis of Factor Means (e.g., contrasts) is analogous to the balanced case, with modifications in the formulas for means and standard errors to account for unequal sample sizes. Or , we can fit the cell means model and consider it from a regression perspective If you have empty cells (i.e., some factor combinations have no observation), then the equivalent regression approach can’t be used. But you can still do partial analyses 21.1.4 Two-Way Random Effects ANOVA \\[ Y_{ijk} = \\mu_{..} + \\alpha_i + \\beta_j + (\\alpha \\beta)_{ij} + \\epsilon_{ij} \\] where \\(\\mu_{..}\\): constant \\(\\alpha_i \\sim N(0,\\sigma^2_{\\alpha}), i = 1,..,a\\) (independent) \\(\\beta_j \\sim N(0,\\sigma^2_{\\beta}), j = 1,..,b\\) (independent) \\((\\alpha \\beta)_{ij} \\sim N(0,\\sigma^2_{\\alpha \\beta}),i=1,...,a,j=1,..,b\\) (independent) \\(\\epsilon_{ijk} \\sim N(0,\\sigma^2)\\) (independent) All \\(\\alpha_i, \\beta_j, (\\alpha \\beta)_{ij}\\) are pairwise independent Theoretical means, variances, and covariances are \\[ \\begin{aligned} E(Y_{ijk}) &amp;= \\mu_{..} \\\\ var(Y_{ijk}) &amp;= \\sigma^2_Y= \\sigma^2_\\alpha + \\sigma^2_\\beta + \\sigma^2_{\\alpha \\beta} + \\sigma^2 \\end{aligned} \\] So \\(Y_{ijk} \\sim N(\\mu_{..},\\sigma^2_\\alpha + \\sigma^2_\\beta + \\sigma^2_{\\alpha \\beta} + \\sigma^2)\\) \\[ \\begin{aligned} cov(Y_{ijk},Y_{ij&#39;k&#39;}) &amp;= \\sigma^2_{\\alpha}, j \\neq j&#39; \\\\ cov(Y_{ijk},Y_{i&#39;jk&#39;}) &amp;= \\sigma^2_{\\beta}, i \\neq i&#39;\\\\ cov(Y_{ijk},Y_{ijk&#39;}) &amp;= \\sigma^2_\\alpha + \\sigma^2_{\\beta} + \\sigma^2_{\\alpha \\beta}, k \\neq k&#39; \\\\ cov(Y_{ijk},Y_{i&#39;j&#39;k&#39;}) &amp;= , i \\neq i&#39;, j \\neq j&#39; \\end{aligned} \\] 21.1.5 Two-Way Mixed Effects ANOVA 21.1.5.1 Balanced One fixed factor, while other is random treatment levels, we have a mixed effects model or a mixed model Restricted mixed model for 2-way ANOVA: \\[ Y_{ijk} = \\mu_{..} + \\alpha_i + \\beta_j + (\\alpha \\beta)_{ij} + \\epsilon_{ijk} \\] where \\(\\mu_{..}\\): constant \\(\\alpha_i\\): fixed effects with constraints subject to restriction \\(\\sum \\alpha_i = 0\\) \\(\\beta_j \\sim indep N(0,\\sigma^2_\\beta)\\) \\((\\alpha \\beta)_{ij} \\sim N(0,\\frac{a-1}{a}\\sigma^2_{\\alpha \\beta})\\) subject to restriction \\(\\sum_i (\\alpha \\beta)_{ij} = 0\\) for all j, the variance here is written as the proportion for convenience; it makes the expected mean squares simpler (other assumed \\(var((\\alpha \\beta)_{ij}= \\sigma^2_{\\alpha \\beta}\\)) \\(cov((\\alpha \\beta)_{ij},(\\alpha \\beta)_{i&#39;j&#39;}) = - \\frac{1}{a} \\sigma^2_{\\alpha \\beta}, i \\neq i&#39;\\) \\(\\epsilon_{ijk}\\sim indepN(0,\\sigma^2)\\) \\(\\beta_j, (\\alpha \\beta)_{ij}, \\epsilon_{ijk}\\) are pairwise independent Two-way mixed models are written in an “unrestricted” form, with no restrictions on the interaction effects \\((\\alpha \\beta)_{ij}\\), they are pairwise independent. Let \\(\\beta^*, (\\alpha \\beta)^*_{ij}\\) be the unrestricted random effects, and \\((\\bar{\\alpha \\beta})_{ij}^*\\) the means averaged over the fixed factor for each level of random factor B. \\[ \\begin{aligned} \\beta_j &amp;= \\beta_j^* + (\\bar{\\alpha \\beta})_{ij}^* \\\\ (\\alpha \\beta)_{ij} &amp;= (\\alpha \\beta)_{ij}^* - (\\bar{\\alpha \\beta})_{ij}^* \\end{aligned} \\] Some consider the restricted model to be more general. but here we consider the restricted form. \\[ \\begin{aligned} E(Y_{ijk}) &amp;= \\mu_{..} + \\alpha_i \\\\ var(Y_{ijk}) &amp;= \\sigma^2_\\beta + \\frac{a-1}{a} \\sigma^2_{\\alpha \\beta} + \\sigma^2 \\end{aligned} \\] Responses from the same random factor \\((B)\\) level are correlated \\[ \\begin{aligned} cov(Y_{ijk},Y_{ijk&#39;}) &amp;= E(Y_{ijk}Y_{ijk&#39;}) - E(Y_{ijk})E(Y_{ijk&#39;}) \\\\ &amp;= \\sigma^2_\\beta + \\frac{a-1}{a} \\sigma^2_{\\alpha \\beta} , k \\neq k&#39; \\end{aligned} \\] Similarly, \\[ \\begin{aligned} cov(Y_{ijk},Y_{i&#39;jk&#39;}) &amp;= \\sigma^2_\\beta - \\frac{1}{a} \\sigma^2_{\\alpha\\ \\beta}, i \\neq i&#39; \\\\ cov(Y_{ijk},Y_{i&#39;j&#39;k&#39;}) &amp;= 0, j \\neq j&#39; \\end{aligned} \\] Hence, you can see that the only way you don’t have dependence in the \\(Y\\) is when they don’t share the same random effect. An advantage of the restricted mixed model is that 2 observations from the same random factor b level can be positively or negatively correlated. In the unrestricted model, they can only be positively correlated. Mean Square Fixed ANOVA (A, B Fixed) Random ANOVA (A,B random) Mixed ANVOA (A fixed, B random) MSA a - 1 \\(\\sigma ^2+ n b \\frac{\\sum\\alpha_i^2}{a-1}\\) \\(\\sigma^2 + nb\\sigma^ 2_ \\alpha +n \\sigma^ 2_{\\alpha \\beta}\\) MSB b-1 \\(\\sigma^2 + n a \\frac{\\sum\\beta ^2_j}{b-1}\\) \\(\\sigma^ 2 + na\\sigma^2_ \\beta +n \\sigma^ 2_{\\alpha \\beta}\\) MSAB ( a-1)(b-1) \\(\\sigma^2 + n \\frac{\\sum \\sum(\\alpha \\beta )^2_ {ij}} { ( a-1)(b-1)}\\) \\(\\sigma^2+n \\sigma^2_{\\alpha \\beta}\\) MSE (n-1)ab \\(\\sigma^2\\) \\(\\sigma^2\\) For fixed, random, and mixed models (balanced), the ANOVA table sums of squares calculations are identical. (also true for df and mean squares). The only difference is with the expected mean squares, thus the test statistics. In Random ANOVA, we test \\[ \\begin{aligned} &amp;H_0: \\sigma^2 = 0 \\\\ &amp;H_a: \\sigma^2 &gt; 0 \\end{aligned} \\] by considering \\(F= \\frac{MSA}{MSAB} \\sim F_{a-1;(a-1)(b-1)}\\) The same test statistic is used for mixed models, but in that case we are testing null hypothesis that all of the \\(\\alpha_i = 0\\) The test statistic different for the same null hypothesis under the fixed effects model. Test for effects of Fixed ANOVA (A&amp;B fixed) Random ANOVA (A&amp;B random) Mixed ANOVA (A fixed, B random) Factor A \\(\\frac{MSA}{MSE}\\) \\(\\frac{MSA}{MSAB}\\) \\(\\frac{MSA}{MSAB}\\) Factor B \\(\\frac{MSB}{MSE}\\) \\(\\frac{MSB}{MSAB}\\) \\(\\frac{MSB}{MSE}\\) AB interactions \\(\\frac{MSAB}{MSE}\\) \\(\\frac{MSAB}{MSE}\\) \\(\\frac{MSAB}{MSE}\\) Estimation Of Variance Components In random and mixed effects models, we are interested in estimating the variance components Variance component \\(\\sigma^2_\\beta\\) in the mixed ANOVA. \\[ E(\\sigma^2_\\beta) = \\frac{E(MSB)-E(MSE)}{na} = \\frac{\\sigma^2 + na \\sigma^2_\\beta - \\sigma^2}{na} = \\sigma^2_\\beta \\] which can be estimated with \\[ \\hat{\\sigma}^2_\\beta = \\frac{MSB - MSE}{na} \\] Confidence intervals for variance components can be constructed (approximately) by using the Satterthwaite procedure or the MLS procedure (like the 1-way random effects) Estimation of Fixed Effects in Mixed Models \\[ \\begin{aligned} \\hat{\\alpha}_i &amp;= \\bar{Y}_{i..} - \\bar{Y}_{...} \\\\ \\hat{\\mu}_{i.} &amp;= \\bar{Y}_{...} + (\\bar{Y}_{i..}- \\bar{Y}_{...}) = \\bar{Y}_{i..} \\\\ \\sigma^2(\\hat{\\alpha}_i) &amp;= \\frac{\\sigma^2 + n \\sigma^2_{\\alpha \\beta}}{bn} = \\frac{E(MSAB)}{bn} \\\\ s^2(\\hat{\\alpha}_i) &amp;= \\frac{MSAB}{bn} \\end{aligned} \\] Contrasts on the Fixed Effects \\[ \\begin{aligned} L &amp;= \\sum c_i \\alpha_i \\\\ \\sum c_i &amp;= 0 \\\\ \\hat{L} &amp;= \\sum c_i \\hat{\\alpha}_i \\\\ \\sigma^2(\\hat{L}) &amp;= \\sum c^2_i \\sigma^2 (\\hat{\\alpha}_i) \\\\ s^2(\\hat{L}) &amp;= \\frac{MSAB}{bn} \\sum c^2_i \\end{aligned} \\] Confidence intervals and tests can be constructed as usual 21.1.5.2 Unbalanced For a mixed model with a = 2, b = 4 \\[ \\begin{aligned} Y_{ijk} &amp;= \\mu_{..} + \\alpha_i + \\beta_j + (\\alpha \\beta)_{ij} + \\epsilon_{ijk} \\\\ var(\\beta_j)&amp;= \\sigma^2_\\beta \\\\ var((\\alpha \\beta)_{ij})&amp;= \\frac{2-1}{2}\\sigma^2_{\\alpha \\beta} = \\frac{\\sigma^2_{\\alpha \\beta}}{2} \\\\ var(\\epsilon_{ijk}) &amp;= \\sigma^2 \\\\ E(Y_{ijk}) &amp;= \\mu_{..} + \\alpha_i \\\\ var(Y_{ijk}) &amp;= \\sigma^2_{\\beta} + \\frac{\\sigma^2_{\\alpha \\beta}}{2} + \\sigma^2 \\\\ cov(Y_{ijk},Y_{ijk&#39;}) &amp;= \\sigma^2 + \\frac{\\sigma^2_{\\alpha \\beta}}{2}, k \\neq k&#39; \\\\ cov(Y_{ijk},Y_{i&#39;jk&#39;}) &amp;= \\sigma^2_{\\beta} - \\frac{\\sigma^2_{\\alpha \\beta}}{2}, i \\neq i&#39; \\\\ cov(Y_{ijk},Y_{i&#39;j&#39;k&#39;}) &amp;= 0, j \\neq j&#39; \\end{aligned} \\] assume \\[ \\mathbf{Y} \\sim N(\\mathbf{X}\\beta, M) \\] where \\(M\\) is block diagonal density function \\[ f(\\mathbf{Y}) = \\frac{1}{(2\\pi)^{N/2}|M|^{1/2}}exp(-\\frac{1}{2}\\mathbf{(Y - X \\beta)&#39; M^{-1}(Y-X\\beta)}) \\] if we knew the variance components, we could use GLS: \\[ \\hat{\\beta}_{GLS} = \\mathbf{(X&#39;M^{-1}X)^{-1}X&#39;M^{-1}Y} \\] but we usually don’t know the variance components \\(\\sigma^2, \\sigma^2_\\beta, \\sigma^2_{\\alpha \\beta}\\) that make up \\(M\\) Another way to get estimates is by Maximum likelihood estimation we try to maximize its log \\[ \\ln L = - \\frac{N}{2} \\ln (2\\pi) - \\frac{1}{2}\\ln|M| - \\frac{1}{2} \\mathbf{(Y-X \\beta)&#39;\\Sigma^{-1}(Y-X\\beta)} \\] "],["nonparametric-anova.html", "21.2 Nonparametric ANOVA", " 21.2 Nonparametric ANOVA 21.2.1 Kruskal-Wallis Generalization of independent samples Wilcoxon Rank sum test for 2 independent samples (like F-test of one-way ANOVA is a generalization to several independent samples of the two sample t-test) Consider the one-way case: We have \\(a\\ge2\\) treatments \\(n_i\\) is the sample size for the \\(i\\)-th treatment \\(Y_{ij}\\) is the \\(j\\)-th observation from the \\(i\\)-th treatment. we make no assumption of normality We only assume that observations on the \\(i\\)-th treatment are a random sample from the continuous CDF \\(F_i\\), i = 1,..,n, and are mutually independent. \\[ \\begin{aligned} &amp;H_0: F_1 = F_2 = ... = F_a \\\\ &amp;H_a: F_i &lt; F_j \\text{ for some } i \\neq j \\end{aligned} \\] or if distribution is from the location-scale family, \\(H_0: \\theta_1 = \\theta_2 = ... = \\theta_a\\)) Procedure Rank all \\(N = \\sum_{i=1}^a n_i\\) observations in ascending order. Let \\(r_{ij} = rank(Y_{ij})\\), note \\(\\sum_i \\sum_j r_{ij} = 1 + 2 .. + N = \\frac{N(N+1)}{2}\\) Calculate the rank sums and averages: \\[ r_{i.} = \\sum_{j=1}^{n_i} r_{ij} \\] and \\[ \\bar{r}_{i.} = \\frac{r_{i.}}{n_i}, i = 1,..,a \\] Calculate the test statistic on the ranks: \\[ \\chi_{KW}^2 = \\frac{SSTR}{\\frac{SSTO}{N-1}} \\] where \\(SSTR = \\sum n_i (\\bar{r}_{i.}- \\bar{r}_{..})^2\\) and \\(SSTO = \\sum \\sum (\\bar{r}_{ij}- \\bar{r}_{..})^2\\) For large \\(n_i\\) (\\(\\ge 5\\) observations) the Kruskal-Wallis statistic is approximated by a \\(\\chi^2_{a-1}\\) distribution when all the treatment means are equal. Hence, reject \\(H_0\\) if \\(\\chi^2_{KW} &gt; \\chi^2_{(1-\\alpha;a-1)}\\). If sample sizes are small, one can exhaustively work out all possible distinct ways of assigning N ranks to the observations from a treatments and calculate the value of the KW statistic in each case (\\(\\frac{N!}{n_1!..n_a!}\\) possible combinations). Under \\(H_0\\) all of these assignments are equally likely. 21.2.2 Friedman Test When the responses \\(Y_{ij} = 1,..,n, j = 1,..,r\\) in a randomized complete block design are not normally distributed (or do not have constant variance), a nonparametric test is more helpful. A distribution-free rank-based test for comparing the treatments in this setting is the Friedman test. Let \\(F_{ij}\\) be the CDF of random \\(Y_{ij}\\), corresponding to the observed value \\(y_{ij}\\) Under the null hypothesis, \\(F_{ij}\\) are identical for all treatments j separately for each block i. \\[ \\begin{aligned} &amp;H_0: F_{i1} = F_{i2} = ... = F_{ir} \\text{ for all i} \\\\ &amp;H_a: F_{ij} &lt; F_{ij&#39;} \\text{ for some } j \\neq j&#39; \\text{ for all } i \\end{aligned} \\] For location parameter distributions, treatment effects can be tested: \\[ \\begin{aligned} &amp;H_0: \\tau_1 = \\tau_2 = ... = \\tau_r \\\\ &amp;H_a: \\tau_j &gt; \\tau_{j&#39;} \\text{ for some } j \\neq j&#39; \\end{aligned} \\] Procedure Rank observations from the r treatments separately within each block (in ascending order; if ties, each tied observation is given the mean of ranks involved). Let the ranks be called \\(r_{ij}\\) Calculate the Friedman test statistic \\[ \\chi^2_F = \\frac{SSTR}{\\frac{SSTR + SSE}{n(r-1)}} \\] where \\[ \\begin{aligned} SSTR &amp;= n \\sum (\\bar{r}_{.j}-\\bar{r}_{..})^2 \\\\ SSE &amp;= \\sum \\sum (r_{ij} - \\bar{r}_{.j})^2 \\\\ \\bar{r}_{.j} &amp;= \\frac{\\sum_i r_{ij}}{n}\\\\ \\bar{r}_{..} &amp;= \\frac{r+1}{2} \\end{aligned} \\] If there is no ties, it can be rewritten as \\[ \\chi^2_{F} = [\\frac{12}{nr(n+1)}\\sum_j r_{.j}^2] - 3n(r+1) \\] with large number of blocks, \\(\\chi^2_F\\) is approximately \\(\\chi^2_{r-1}\\) under \\(H_0\\). Hence, we reject \\(H_0\\) if \\(\\chi^2_F &gt; \\chi^2_{(1-\\alpha;r-1)}\\) The exact null distribution for \\(\\chi^2_F\\) can be derived since there are r! possible ways of assigning ranks 1,2,…,r to the r observations within each block. There are n blocks and thus \\((r!)^n\\) possible assignments to the ranks, which are equally likely when \\(H_0\\) is true. "],["sample-size-planning-for-anova.html", "21.3 Sample Size Planning for ANOVA", " 21.3 Sample Size Planning for ANOVA 21.3.1 Balanced Designs 21.3.1.1 Single Factor Studies 21.3.1.1.1 Fixed cell means \\[ P(F&gt;f_{(1-\\alpha;a-1,N-a)}|\\phi) = 1 - \\beta \\] where \\(\\phi\\) is the non-centrality parameter (measures how unequal the treatment means \\(\\mu_i\\) are) \\[ \\phi = \\frac{1}{\\sigma}\\sqrt{\\frac{n}{a}\\sum_i (\\mu_i - \\mu_.)^2} , (n_i \\equiv n) \\] and \\[ \\mu_. = \\frac{\\sum \\mu_i}{a} \\] To decide on the power probabilities we use the non-central F distribution. We could use the power table directly when effects are fixed and design is balanced by using minimum range of factor level means for your desired differences \\[ \\Delta = \\max(\\mu_i) - \\min(\\mu_i) \\] Hence, we need \\(\\alpha\\) level \\(\\Delta\\) \\(\\sigma\\) \\(\\beta\\) Notes: When \\(\\Delta/\\sigma\\) is small greatly affects sample size, but if \\(\\Delta/\\sigma\\) is large. Reducing \\(\\alpha\\) or \\(\\beta\\) increases the required sample sizes. Error in estimating \\(\\sigma\\) can make a large difference. 21.3.1.2 Multi-factor Studies The same noncentral \\(F\\) tables can be used here For two-factor fixed effect model Test for interactions: \\[ \\begin{aligned} \\phi &amp;= \\frac{1}{\\sigma} \\sqrt{\\frac{n \\sum \\sum (\\alpha \\beta_{ij})^2}{(a-1)(b-1)+1}} = \\frac{1}{\\sigma} \\sqrt{\\frac{n \\sum \\sum (\\mu_{ij}- \\mu_{i.} - \\mu_{.j} + \\mu_{..})^2}{(a-1)(b-1)+1}} \\\\ \\upsilon_1 &amp;= (a-1)(b-1) \\\\ \\upsilon_2 &amp;= ab(n-1) \\end{aligned} \\] Test for Factor \\(A\\) main effects: \\[ \\begin{aligned} \\phi &amp;= \\frac{1}{\\sigma} \\sqrt{\\frac{nb \\sum \\alpha_i^2}{a}} = \\frac{1}{\\sigma}\\sqrt{\\frac{nb \\sum (\\mu_{i.}- \\mu_{..})^2}{a}} \\\\ \\upsilon_1 &amp;= a-1 \\\\ \\upsilon_2 &amp;= ab(n-1) \\end{aligned} \\] Test for Factor \\(B\\) main effects: \\[ \\begin{aligned} \\phi &amp;= \\frac{1}{\\sigma} \\sqrt{\\frac{na \\sum \\beta_j^2}{b}} = \\frac{1}{\\sigma}\\sqrt{\\frac{na \\sum (\\mu_{.j}- \\mu_{..})^2}{b}} \\\\ \\upsilon_1 &amp;= b-1 \\\\ \\upsilon_2 &amp;= ab(n-1) \\end{aligned} \\] Procedure: Specify the minimum range of Factor \\(A\\) means Obtain sample sizes with \\(r = a\\). The resulting sample size is \\(bn\\), from which \\(n\\) can be obtained. Repeat the first 2 steps for Factor \\(B\\) minimum range. Choose the greater number of sample size between \\(A\\) and \\(B\\). 21.3.2 Randomized Block Experiments Analogous to completely randomized designs . The power of the F-test for treatment effects for randomized block design uses the same non-centrality parameter as completely randomized design: \\[ \\phi = \\frac{1}{\\sigma} \\sqrt{\\frac{n}{r} \\sum (\\mu_i - \\mu_.)^2} \\] However, the power level is different from the randomized block design because error variance \\(\\sigma^2\\) is different df(MSE) is different. "],["randomized-block-designs.html", "21.4 Randomized Block Designs", " 21.4 Randomized Block Designs To improve the precision of treatment comparisons, we can reduce variability among the experimental units. We can group experimental units into blocks so that each block contains relatively homogeneous units. Within each block, random assignment treatments to units (separate random assignment for each block) The number of units per block is a multiple of the number of factor combinations. Commonly, use each treatment once in each block. Benefits of Blocking Reduction in variability of estimators for treatment means Improved power for t-tests and F-tests Narrower confidence intervals Smaller MSE Compare treatments under different conditions (related to different blocks). Loss from Blocking (little to lose) If you don’t do blocking well, you waste df on negligible block effects that could have been used to estimate \\(\\sigma^2\\) Hence, the df for \\(t\\)-tests and denominator df for \\(F\\)-tests will be reduced without reducing MSE and small loss of power for both tests. Consider \\[ Y_{ij} = \\mu_{..} + \\rho_i + \\tau_j + \\epsilon_{ij} \\] where \\(i = 1, 2, \\dots, n\\) \\(j = 1, 2, \\dots, r\\) \\(\\mu_{..}\\): overall mean response, averaging across all blocks and treatments \\(\\rho_i\\): block effect, average difference in response for i-th block (\\(\\sum \\rho_i =0\\)) \\(\\tau_j\\) treatment effect, average across blocks (\\(\\sum \\tau_j = 0\\)) \\(\\epsilon_{ij} \\sim iid N(0,\\sigma^2)\\): random experimental error. Here, we assume that the block and treatment effects are additive. The difference in average response for any pair of treatments i the same within each block \\[ (\\mu_{..} + \\rho_i + \\tau_j) - (\\mu_{..} + \\rho_i + \\tau_j&#39;) = \\tau_j - \\tau_j&#39; \\] for all \\(i=1,..,n\\) blocks \\[ \\begin{aligned} \\hat{\\mu} &amp;= \\bar{Y}_{..} \\\\ \\hat{\\rho}_i &amp;= \\bar{Y}_{i.} - \\bar{Y}_{..} \\\\ \\hat{\\tau}_j &amp;= \\bar{Y}_{.j} - \\bar{Y}_{..} \\end{aligned} \\] Hence, \\[ \\begin{aligned} \\hat{Y}_{ij} &amp;= \\bar{Y}_{..} + (\\bar{Y}_{i.} - \\bar{Y}_{..}) + (\\bar{Y}_{.j}- \\bar{Y}_{..}) = \\bar{Y}_{i.} + \\bar{Y}_{.j} - \\bar{Y}_{..} \\\\ e_{ij} &amp;= Y_{ij} - \\hat{Y}_{ij} = Y_{ij}- \\bar{Y}_{i.} - \\bar{Y}_{.j} + \\bar{Y}_{..} \\end{aligned} \\] ANOVA table Source of Variation SS df Fixed Treatments E(MS) Random Treatments E(MS) Blocks \\(r \\sum_i(\\bar{Y}_{i.}-\\bar{Y}_{..})^2\\) \\(n - 1\\) \\(\\sigma^2 +r \\frac{\\sum \\rho^2_i}{n-1}\\) \\(\\sigma^2 + r \\frac{\\sum \\rho^2_i}{n-1}\\) Treatments \\(n\\sum_ j (\\bar{Y} _ {.j}-\\bar{ Y}_{..})^2\\) \\(r - 1\\) \\(\\sigma^2 + n \\frac{\\sum \\tau^2_j}{r-1}\\) \\(\\sigma^2 + n \\sigma^2_\\tau\\) Error \\(\\sum_i \\sum _j ( Y_{ ij } - \\bar { Y}_{i.} - \\bar{Y}_{.j} + \\bar{ Y}_{..})^2\\) \\((n-1)(r-1)\\) \\(\\sigma^2\\) \\(\\sigma^2\\) Total \\(SSTO\\) \\(nr-1\\) F-tests \\[ \\begin{aligned} H_0: \\tau_1 = \\tau_2 = ... = \\tau_r = 0 &amp;&amp; \\text{Fixed Treatment Effects} \\\\ H_a: \\text{not all } \\tau_j = 0 \\\\ \\\\ H_0: \\sigma^2_{\\tau} = 0 &amp;&amp; \\text{Random Treatment Effects} \\\\ H_a: \\sigma^2_{\\tau} \\neq 0 \\end{aligned} \\] In both cases \\(F = \\frac{MSTR}{MSE}\\), reject \\(H_0\\) if \\(F &gt; f_{(1-\\alpha; r-1,(n-1)(r-1))}\\) we don’t use F-test to compare blocks, because We have a priori that blocs are different Randomization is done “within” block. To estimate the efficiency that was gained by blocking (relative to completely randomized design). \\[ \\begin{aligned} \\hat{\\sigma}^2_{CR} &amp;= \\frac{(n-1)MSBL + n(r-1)MSE}{nr-1} \\\\ \\hat{\\sigma}^2_{RB} &amp;= MSE \\\\ \\frac{\\hat{\\sigma}^2_{CR}}{\\hat{\\sigma}^2_{RB}} &amp;= \\text{above 1} \\\\ \\end{aligned} \\] then a completely randomized experiment would \\[ (\\frac{\\hat{\\sigma}^2_{CR}}{\\hat{\\sigma}^2_{RB}}-1)\\%% \\] more observations than the randomized block design to get the same MSE If batches are randomly selected then they are random effects. That is , if the experiment was repeated, a new sample of i batches would be selected,d yielding new values for \\(\\rho_1, \\rho_2,...,\\rho_i\\) then. \\[ \\rho_1, \\rho_2,...,\\rho_j \\sim N(0,\\sigma^2_\\rho) \\] Then, \\[ Y_{ij} = \\mu_{..} + \\rho_i + \\tau_j + \\epsilon_{ij} \\] where \\(\\mu_{..}\\) fixed \\(\\rho_i\\): random iid \\(N(0,\\sigma^2_p)\\) \\(\\tau_j\\) fixed (or random) \\(\\sum \\tau_j = 0\\) \\(\\epsilon_{ij} \\sim iid N(0,\\sigma^2)\\) Fixed Treatment \\[ \\begin{aligned} E(Y_{ij}) &amp;= \\mu_{..} + \\tau_j \\\\ var(Y_{ij}) &amp;= \\sigma^2_{\\rho} + \\sigma^2 \\end{aligned} \\] \\[ \\begin{aligned} cov(Y_{ij},Y_{ij&#39;}) &amp;= \\sigma^2 , j \\neq j&#39; \\text{ treatments within same block are correlated} \\\\ cov(Y_{ij},Y_{i&#39;j&#39;}) &amp;= 0 , i \\neq i&#39; , j \\neq j&#39; \\end{aligned} \\] Correlation between 2 observations in the same block \\[ \\frac{\\sigma^2_{\\rho}}{\\sigma^2 + \\sigma^2_{\\rho}} \\] The expected MS for the additive fixed treatment effect, random block effect is Source SS E(MS) Blocks SSBL \\(\\sigma^2 + r \\sigma^2_\\rho\\) Treatment SSTR \\(\\sigma^2 + n \\frac{\\sum \\tau^2_j}{r-1}\\) Error SSE \\(\\sigma^2\\) Interactions and Blocks without replications within each block for each treatment, we can’t consider interaction between block and treatment when the block effect is fixed. Hence, only in the random block effect, we have \\[ Y_{ij} = \\mu_{..} + \\rho_i + \\tau_j + (\\rho \\tau)_{ij} + \\epsilon_{ij} \\] where \\(\\mu_{..}\\) constant \\(\\rho_i \\sim idd N(0,\\sigma^2_{\\rho})\\) random \\(\\tau_j\\) fixed (\\(\\sum \\tau_j = 0\\)) \\((\\rho \\tau)_{ij} \\sim N(0,\\frac{r-1}{r}\\sigma^2_{\\rho \\tau})\\) with \\(\\sum_j (\\rho \\tau)_{ij}=0\\) for all i \\(cov((\\rho \\tau)_{ij},(\\rho \\tau)_{ij&#39;})= -\\frac{1}{r} \\sigma^2_{\\rho \\tau}\\) for \\(j \\neq j&#39;\\) \\(\\epsilon_{ij} \\sim iid N(0,\\sigma^2)\\) random Note: a special case of mixed 2-factor model with 1 observation per “cell” \\[ \\begin{aligned} E(Y_{ij}) &amp;= \\mu_{..} + \\tau_j \\\\ var(Y_{ij}) &amp;= \\sigma^2_\\rho + \\frac{r-1}{r} \\sigma^2_{\\rho \\tau} + \\sigma^2 \\end{aligned} \\] \\[ \\begin{aligned} cov(Y_{ij},Y_{ij&#39;}) &amp;= \\sigma^2_\\rho - \\frac{1}{r} \\sigma^2_{\\rho \\tau}, j \\neq j&#39; \\text{ obs from the same block are correlated} \\\\ cov(Y_{ij},Y_{i&#39;j&#39;}) &amp;= 0, i \\neq i&#39;, j \\neq j&#39; \\text{ obs from different blocks are independent} \\end{aligned} \\] The sum of squares and degrees of freedom for interaction model are the same as those for the additive model. The difference exists only with the expected mean squares Source SS df E(MS) Blocks \\(SSBL\\) \\(n-1\\) \\(\\sigma^2 + r \\sigma^2_\\rho\\) Treatment \\(SSTR\\) \\(r -1\\) \\(\\sigma^2 + \\sigma ^2_{\\rho \\tau} + n \\frac{\\sum \\tau_j^2}{r-1}\\) Error \\(SSE\\) \\((n-1)(r-1)\\) \\(\\sigma^2 + \\sigma ^2_{\\rho \\tau}\\) No exact test is possible for block effects when interaction is present (Not important if blocks are used primarily to reduce experimental error variability) \\(E(MSE) = \\sigma^2 + \\sigma^2_{\\rho \\tau}\\) the error term variance and interaction variance \\(\\sigma^2_{\\rho \\tau}\\). We can’t estimate these components separately with this model. The two are confounded. If more than 1 observation per treatment block combination, one can consider interaction with fixed block effects, which is called generalized randomized block designs (multifactor analysis). 21.4.1 Tukey Test of Additivity (Tukey’s 1 df test for additivity) formal test of interaction effects between blocks and treatments for a randomized block design. can also considered for testing additivity in 2-way analyses when there is only one observation per cell. we consider a less restricted interaction term \\[ (\\rho \\tau)_{ij} = D\\rho_i \\tau_j \\text{(D: Constant)} \\] So, \\[ Y_{ij} = \\mu_{..} + \\rho_i + \\tau_j + D\\rho_i \\tau_j + \\epsilon_{ij} \\] the least square estimate or MLE for D \\[ \\hat{D} = \\frac{\\sum_i \\sum_j \\rho_i \\tau_j Y_{ij}}{\\sum_i \\rho_i^2 \\sum_j \\tau^2_j} \\] replacing the parameters by their estimates \\[ \\hat{D} = \\frac{\\sum_i \\sum_j (\\bar{Y}_{i.}- \\bar{Y}_{..})(\\bar{Y}_{.j}- \\bar{Y}_{..})Y_{ij}}{\\sum_i (\\bar{Y}_{i.}- \\bar{Y}_{..})^2 \\sum_j(\\bar{Y}_{.j}- \\bar{Y}_{..})^2} \\] Thus, the interaction sum of squares \\[ SSint = \\sum_i \\sum_j \\hat{D}^2(\\bar{Y}_{i.}- \\bar{Y}_{..})^2(\\bar{Y}_{.j}- \\bar{Y}_{..})^2 \\] The ANOVA decomposition \\[ SSTO = SSBL + SSTR + SSint + SSRem \\] where \\(SSRem\\): remainder sum of squares \\[ SSRem = SSTO - SSBL - SSTR - SSint \\] if \\(D = 0\\) (i.e., no interactions of the type \\(D \\rho_i \\tau_j\\)). \\(SSint\\) and \\(SSRem\\) are independent \\(\\chi^2_{1,rn-r-n}\\). If \\(D = 0\\), \\[ F = \\frac{SSint/1}{SSRem/(rn-r-n)} \\sim f_{(1-\\alpha;rn-r-n)} \\] if \\[ \\begin{aligned} &amp;H_0: D = 0 \\text{ no interaction present} \\\\ &amp;H_a: D \\neq 0 \\text{ interaction of form $D \\rho_i \\tau_j$ present} \\end{aligned} \\] we reject \\(H_0\\) if \\(F &gt; f_{(1-\\alpha;1,nr-r-n)}\\) "],["nested-designs.html", "21.5 Nested Designs", " 21.5 Nested Designs Let \\(\\mu_{ij}\\) be the mean response when factor A is at the i-th level and factor B is at the j-th level. If the factors are crossed, the \\(j\\)-th level of B is the same for all levels of A. If factor B is nested within A, the j-th level of B when A is at level 1 has nothing in common with the j-th level of B when A is at level 2. Factors that can’t be manipulated are designated as classification factors, as opposed to experimental factors (i.e., you assign to the experimental units). 21.5.1 Two-Factor Nested Designs Consider B is nested within A. both factors are fixed All treatment means are equally important. Mean responses \\[ \\mu_{i.} = \\sum_j \\mu_{ij}/b \\] Main effect factor A \\[ \\alpha_i = \\mu_{i.} - \\mu_{..} \\] where \\(\\mu_{..} = \\frac{\\mu_{ij}}{ab} = \\frac{\\sum_i \\mu_{i.}}{a}\\) and \\(\\sum_i \\alpha_i = 0\\) Individual effects of \\(B\\) is denoted as \\(\\beta_{j(i)}\\) where \\(j(i)\\) indicates the \\(j\\)-th level of factor \\(B\\) is nested within the it-h level of factor A \\[ \\begin{aligned} \\beta_{j(i)} &amp;= \\mu_{ij} - \\mu_{i.} \\\\ &amp;= \\mu_{ij} - \\alpha_i - \\mu_{..} \\\\ \\sum_j \\beta_{j(i)}&amp;=0 , i = 1,...,a \\end{aligned} \\] \\(\\beta_{j(i)}\\) is the specific effect of the \\(j\\)-th level of factor \\(B\\) nested within the \\(i\\)-th level of factor \\(A\\). Hence, \\[ \\mu_{ij} \\equiv \\mu_{..} + \\alpha_i + \\beta_{j(i)} \\equiv \\mu_{..} + (\\mu_{i.} - \\mu_{..}) + (\\mu_{ij} - \\mu_{i.}) \\] Model \\[ Y_{ijk} = \\mu_{..} + \\alpha_i + \\beta_{j(i)} + \\epsilon_{ijk} \\] where \\(Y_{ijk}\\) response for the \\(k\\)-th treatment when factor \\(A\\) is at the \\(i\\)-th level and factor \\(B\\) is at the \\(j\\)-th level \\((i = 1,..,a; j = 1,..,b; k = 1,..n)\\) \\(\\mu_{..}\\) constant \\(\\alpha_i\\) constants subject to restriction \\(\\sum_i \\alpha_i = 0\\) \\(\\beta_{j(i)}\\) constants subject to restriction \\(\\sum_j \\beta_{j(i)} = 0\\) for all \\(i\\) \\(\\epsilon_{ijk} \\sim iid N(0,\\sigma^2)\\) \\[ \\begin{aligned} E(Y_{ijk}) &amp;= \\mu_{..} + \\alpha_i + \\beta_{j(i)} \\\\ var(Y_{ijk}) &amp;= \\sigma^2 \\end{aligned} \\] there is no interaction term in a nested model ANOVA for Two-Factor Nested Designs Least Squares and MLE estimates Parameter Estimator \\(\\mu_{..}\\) \\(\\bar{Y}_{...}\\) \\(\\alpha_i\\) \\(\\bar{Y}_{i..} - \\bar{Y}_{...}\\) \\(\\beta_{j(i)}\\) \\(\\bar{Y}_{ij.} - \\bar{Y}_{i..}\\) \\(\\hat{Y}_{ijk}\\) \\(\\bar{Y}_{ij.}\\) residual \\(e_{ijk} = Y_{ijk} - \\bar{Y}_{ijk}\\) \\[ \\begin{aligned} SSTO &amp;= SSA + SSB(A) + SSE \\\\ \\sum_i \\sum_j \\sum_k (Y_{ijk}- \\bar{Y}_{...})^2 &amp;= bn \\sum_i (\\bar{Y}_{i..}- \\bar{Y}_{...})^2 + n \\sum_i \\sum_j (\\bar{Y}_{ij.}- \\bar{Y}_{i..})^2 \\\\ &amp;+ \\sum_i \\sum_j \\sum_k (Y_{ijk} -\\bar{Y}_{ij.})^2 \\end{aligned} \\] ANOVA Table Source of Variation SS df MS E(MS) Factor A \\(SSA\\) \\(a-1\\) \\(MSA\\) \\(\\sigma^2 + bn \\frac{\\sum \\alpha_i^2}{a-1}\\) Factor B \\(SSB(A)\\) \\(a(b-1)\\) \\(MSB(A)\\) \\(\\sigma^2 + n \\frac{\\ | | | | um \\sum e ta_{i)}^ 2}{a(b-1)}\\) Error \\(SSE\\) \\(ab(n-1)\\) \\(MSE\\) \\(\\sigma^2\\) Total \\(SSTO\\) \\(abn -1\\) Tests For Factor Effects \\[ \\begin{aligned} &amp;H_0: \\text{ All } \\alpha_i =0 \\\\ &amp;H_a: \\text{ not all } \\alpha_i = 0 \\end{aligned} \\] \\(F = \\frac{MSA}{MSE} \\sim f_{(1-\\alpha;a-1,(n-1)ab)}\\) reject if \\(F &gt; f\\) \\[ \\begin{aligned} &amp;H_0: \\text{ All } \\beta_{j(i)} =0 \\\\ &amp;H_a: \\text{ not all } \\beta_{j(i)} = 0 \\end{aligned} \\] \\(F = \\frac{MSB(A)}{MSE} \\sim f_{(1-\\alpha;a(b-1),(n-1)ab)}\\) reject \\(F&gt;f\\) Testing Factor Effect Contrasts \\(L = \\sum c_i \\mu_i\\) where \\(\\sum c_i =0\\) \\[ \\begin{aligned} \\hat{L} &amp;= \\sum c_i \\bar{Y}_{i..} \\\\ \\hat{L} &amp;\\pm t_{(1-\\alpha/2;df)}s(\\hat{L}) \\end{aligned} \\] where \\(s^2(\\hat{L}) = \\sum c_i^2 s^2(\\bar{Y}_{i..})\\), where \\(s^2(\\bar{Y}_{i..}) = \\frac{MSE}{bn}, df = ab(n-1)\\) Testing Treatment Means \\(L = \\sum c_i \\mu_{.j}\\) estimated by \\(\\hat{L} = \\sum c_i \\bar{Y}_{ij}\\) with confidence limits: \\[ \\hat{L} \\pm t_{(1-\\alpha/2;(n-1)ab)}s(\\hat{L}) \\] where \\[ s^2(\\hat{L}) = \\frac{MSE}{n}\\sum c^2_i \\] Unbalanced Nested Two-Factor Designs If there are different number of levels of factor \\(B\\) for different levels of factor \\(A\\), then the design is called unbalanced The model \\[ \\begin{aligned} Y_{ijk} &amp;= \\mu_{..} + \\alpha_i + \\beta_{j(i)} + \\epsilon_{ijk} \\\\ \\sum_{i=1}^2 \\alpha_i &amp;=0 \\\\ \\sum_{j=1}^3 \\beta_{j(1)} &amp;= 0 \\\\ \\sum_{j=1}^2 \\beta_{j(2)}&amp;=0 \\end{aligned} \\] where \\(i = 1,2;j =1,..,b_i;k=1,..,n_{ij}\\) \\(b_1 = 3, b_2= 2, n_{11} = n_{13} =2, n_{12}=1,n_{21} = n_{22} = 2\\) \\(\\alpha_1,\\beta_{1(1)}, \\beta_{2(1)}, \\beta_{1(2)}\\) are parameters. And constraints: \\(\\alpha_2 = - \\alpha_1, \\beta_{3(1)}= - \\beta_{1(1)}-\\beta_{2(1)}, \\beta_{2(2)}=-\\beta_{1(2)}\\) 4 indicator variables \\[\\begin{equation} X_1 = \\begin{cases} 1&amp;\\text{if obs from school 1}\\\\ -1&amp;\\text{if obs from school 2}\\\\ \\end{cases} \\end{equation}\\] \\[\\begin{equation} X_2 = \\begin{cases} 1&amp;\\text{if obs from instructor 1 in school 1}\\\\ -1&amp;\\text{if obs from instructor 3 in school 1}\\\\ 0&amp;\\text{otherwise}\\\\ \\end{cases} \\end{equation}\\] \\[\\begin{equation} X_3 = \\begin{cases} 1&amp;\\text{if obs from instructor 2 in school 1}\\\\ -1&amp;\\text{if obs from instructor 3 in school 1}\\\\ 0&amp;\\text{otherwise}\\\\ \\end{cases} \\end{equation}\\] \\[\\begin{equation} X_4 = \\begin{cases} 1&amp;\\text{if obs from instructor 1 in school 1}\\\\ -1&amp;\\text{if obs from instructor 2 in school 1}\\\\ 0&amp;\\text{otherwise}\\\\ \\end{cases} \\end{equation}\\] Regression Full Model \\[ Y_{ijk} = \\mu_{..} + \\alpha_1 X_{ijk1} + \\beta_{1(1)}X_{ijk2} + \\beta_{2(1)}X_{ijk3} + \\beta_{1(2)}X_{ijk4} + \\epsilon_{ijk} \\] Random Factor Effects If \\[ \\begin{aligned} \\alpha_1 &amp;\\sim iid N(0,\\sigma^2_\\alpha) \\\\ \\beta_{j(i)} &amp;\\sim iid N(0,\\sigma^2_\\beta) \\end{aligned} \\] Mean Square Expected Mean Squares A fixed, B random Expected Mean Squares A random, B random MSA \\(\\sigma^ 2 + n \\sigma^2_\\beta + bn \\frac{\\sum \\alpha_i^2}{a-1}\\) \\(\\sigma^2 + bn \\sigma^2_{\\alpha} + n \\sigma^2_\\beta\\) MSB(A) \\(\\sigma^2 + n \\sigma^2_\\beta\\) \\(\\sigma^2 + n \\sigma^2_\\beta\\) MSE \\(\\sigma^2\\) \\(\\sigma^2\\) Test Statistics Factor A \\(\\frac{MSA}{MSB(A)}\\) \\(\\frac{MSA}{MSB(A)}\\) Factor B(A) \\(\\frac{MSB(A)}{MSE}\\) \\(\\frac{MSB(A)}{MSE}\\) Another way to increase the precision of treatment comparisons by reducing variability is to use regression models to adjust for differences among experimental units (also known as analysis of covariance). "],["single-factor-covariance-model.html", "21.6 Single Factor Covariance Model", " 21.6 Single Factor Covariance Model \\[ Y_{ij} = \\mu_{.} + \\tau_i + \\gamma(X_{ij} - \\bar{X}_{..}) + \\epsilon_{ij} \\] for \\(i = 1,...,r;j=1,..,n_i\\) where \\(\\mu_.\\) overall mean \\(\\tau_i\\): fixed treatment effects (\\(\\sum \\tau_i =0\\)) \\(\\gamma\\): fixed regression coefficient effect between X and Y \\(X_{ij}\\) covariate (not random) \\(\\epsilon_{ij} \\sim iid N(0,\\sigma^2)\\): random errors If we just use \\(\\gamma X_{ij}\\) as the regression term (rather than \\(\\gamma(X_{ij}-\\bar{X}_{..})\\)), then \\(\\mu_.\\) is no longer the overall mean; thus we need to centered mean. \\[ \\begin{aligned} E(Y_{ij}) &amp;= \\mu_. + \\tau_i + \\gamma(X_{ij}-\\bar{X}_{..}) \\\\ var(Y_{ij}) &amp;= \\sigma^2 \\end{aligned} \\] \\(Y_{ij} \\sim N(\\mu_{ij},\\sigma^2)\\), where \\[ \\begin{aligned} \\mu_{ij} &amp;= \\mu_. + \\tau_i + \\gamma(X_{ij} - \\bar{X}_{..}) \\\\ \\sum \\tau_i &amp;=0 \\end{aligned} \\] Thus, the mean response (\\(\\mu_{ij}\\)) is a regression line with intercept \\(\\mu_. + \\tau_i\\) and slope \\(\\gamma\\) for each treatment $$i. Assumption: All treatment regression lines have the same slope when treatment interact with covariate \\(X\\) (non-parallel slopes), covariance analysis is not appropriate. in which case we should use separate regression lines. More complicated regression features (e.g., quadratic, cubic) or additional covariates e.g., \\[ Y_{ij} = \\mu_. + \\tau_i + \\gamma_1(X_{ij1}-\\bar{X}_{..2}) + \\gamma_2(X_{ij2}-\\bar{X}_{..2}) + \\epsilon_{ij} \\] Regression Formulation We can use indicator variables for treatments \\[ l_1 = \\begin{cases} 1 &amp; \\text{if case is from treatment 1}\\\\ -1 &amp; \\text{if case is from treatment r}\\\\ 0 &amp;\\text{otherwise}\\\\ \\end{cases} \\] \\[ . \\] \\[ . \\] \\[ l_{r-1} = \\begin{cases} 1 &amp; \\text{if case is from treatment r-1}\\\\ -1 &amp; \\text{if case is from treatment r}\\\\ 0 &amp;\\text{otherwise}\\\\ \\end{cases} \\] Let \\(x_{ij} = X_{ij}- \\bar{X}_{..}\\). the regression model is \\[ Y_{ij} = \\mu_. + \\tau_1l_{ij,1} + .. + \\tau_{r-1}l_{ij,r-1} + \\gamma x_{ij}+\\epsilon_{ij} \\] where \\(I_{ij,1}\\) is the indicator variable \\(l_1\\) for the j-th case from treatment i. The treatment effect \\(\\tau_1,..\\tau_{r-1}\\) are just regression coefficients for the indicator variables. We could use the same diagnostic tools for this case. Inference Treatment effects \\[ \\begin{aligned} &amp;H_0: \\tau_1 = \\tau_2 = ...= 0 \\\\ &amp;H_a: \\text{not all } \\tau_i =0 \\end{aligned} \\] \\[ \\begin{aligned} &amp;\\text{Full Model}: Y_{ij} = \\mu_. + \\tau_i + \\gamma X_{ij} +\\epsilon_{ij} \\\\ &amp;\\text{Reduced Model}: Y_{ij} = \\mu_. + \\gamma X_{ij} + \\epsilon_{ij} \\end{aligned} \\] \\[ F = \\frac{SSE(R) - SSE(F)}{(N-2)-(N-(r+1))} / \\frac{SSE(F)}{N-(r+1)} \\sim F_{(r-1,N-(r+1))} \\] If we are interested in comparisons of treatment effects. For example, r - 3. We estimate \\(\\tau_1,\\tau_2, \\tau_3 = -\\tau_1 - \\tau_2\\) Comparison Estimate Variance of Estimator \\(\\tau_1 - \\tau_2\\) \\(\\hat{\\tau}_1 - \\hat{\\tau}_2\\) \\(var(\\hat {\\tau}_1) + var(\\hat{\\tau}_2) - 2cov(\\hat{ \\tau}_1\\hat{\\tau}_2)\\) \\(\\tau_1 - \\tau_3\\) \\(2 \\hat{\\tau}_1 + \\hat{\\tau}_2\\) \\(4var(\\hat {\\tau}_1) + var(\\hat{\\tau}_2) - 4cov(\\hat{ \\tau}_1\\hat{\\tau}_2)\\) \\(\\tau_2 - \\tau_3\\) \\(\\hat{\\tau}_1 + 2 \\hat{\\tau}_2\\) \\(var(\\hat{\\tau}_1) + 4var(\\hat{\\tau}_2) - 4cov(\\hat{\\tau}_1\\hat{\\tau}_2)\\) Testing for Parallel Slopes Example: r = 3 \\[ Y_{ij} = \\mu_{.} + \\tau_1 I_{ij,1} + \\tau_2 I_{ij,2} + \\gamma X_{ij} + \\beta_1 I_{ij,1}X_{ij} + \\beta_2 I_{ij,2}X_{ij} + \\epsilon_{ij} \\] where \\(\\beta_1,\\beta_2\\): interaction coefficients. \\[ \\begin{aligned} &amp;H_0: \\beta_1 = \\beta_2 = 0 \\\\ &amp;H_a: \\text{at least one} \\beta \\neq 0 \\end{aligned} \\] If we can’t reject \\(H_0\\) using F-test then we have evidence that the slopes are parallel Adjusted Means The means in response after adjusting for the covariate effect \\[ Y_{i.}(adj) = \\bar{Y}_{i.} - \\hat{\\gamma}(\\bar{X}_{i.} - \\bar{X}_{..}) \\] "],["multivariate-methods.html", "Chapter 22 Multivariate Methods", " Chapter 22 Multivariate Methods \\(y_1,...,y_p\\) are possibly correlated random variables with means \\(\\mu_1,...,\\mu_p\\) \\[ \\mathbf{y} = \\left( \\begin{array} {c} y_1 \\\\ . \\\\ y_p \\\\ \\end{array} \\right) \\] \\[ E(\\mathbf{y}) = \\left( \\begin{array} {c} \\mu_1 \\\\ . \\\\ \\mu_p \\\\ \\end{array} \\right) \\] Let \\(\\sigma_{ij} = cov(y_i, y_j)\\) for \\(i,j = 1,…,p\\) \\[ \\mathbf{\\Sigma} = (\\sigma_{ij}) = \\left( \\begin{array} {cccc} \\sigma_{11} &amp; \\sigma_{22} &amp; ... &amp; \\sigma_{1p} \\\\ \\sigma_{21} &amp; \\sigma_{22} &amp; ... &amp; \\sigma_{2p} \\\\ . &amp; . &amp; . &amp; . \\\\ \\sigma_{p1} &amp; \\sigma_{p2} &amp; ... &amp; \\sigma_{pp} \\end{array} \\right) \\] where \\(\\mathbf{\\Sigma}\\) (symmetric) is the variance-covariance or dispersion matrix Let \\(\\mathbf{u}_{p \\times 1}\\) and \\(\\mathbf{v}_{q \\times 1}\\) be random vectors with means \\(\\mu_u\\) and \\(\\mu_v\\) . Then \\[ \\mathbf{\\Sigma}_{uv} = cov(\\mathbf{u,v}) = E[(\\mathbf{u} - \\mu_u)(\\mathbf{v} - \\mu_v)&#39;] \\] in which \\(\\mathbf{\\Sigma}_{uv} \\neq \\mathbf{\\Sigma}_{vu}\\) and \\(\\mathbf{\\Sigma}_{uv} = \\mathbf{\\Sigma}_{vu}&#39;\\) Properties of Covariance Matrices Symmetric \\(\\mathbf{\\Sigma}&#39; = \\mathbf{\\Sigma}\\) Non-negative definite \\(\\mathbf{a&#39;\\Sigma a} \\ge 0\\) for any \\(\\mathbf{a} \\in R^p\\), which is equivalent to eigenvalues of \\(\\mathbf{\\Sigma}\\), \\(\\lambda_1 \\ge \\lambda_2 \\ge ... \\ge \\lambda_p \\ge 0\\) \\(|\\mathbf{\\Sigma}| = \\lambda_1 \\lambda_2 ... \\lambda_p \\ge 0\\) (generalized variance) (the bigger this number is, the more variation there is \\(trace(\\mathbf{\\Sigma}) = tr(\\mathbf{\\Sigma}) = \\lambda_1 + ... + \\lambda_p = \\sigma_{11} + ... + \\sigma_{pp} =\\) sum of variance (total variance) Note: \\(\\mathbf{\\Sigma}\\) is typically required to be positive definite, which means all eigenvalues are positive, and \\(\\mathbf{\\Sigma}\\) has an inverse \\(\\mathbf{\\Sigma}^{-1}\\) such that \\(\\mathbf{\\Sigma}^{-1}\\mathbf{\\Sigma} = \\mathbf{I}_{p \\times p} = \\mathbf{\\Sigma \\Sigma}^{-1}\\) Correlation Matrices \\[ \\rho_{ij} = \\frac{\\sigma_{ij}}{\\sqrt{\\sigma_{ii} \\sigma_{jj}}} \\] \\[ \\mathbf{R} = \\left( \\begin{array} {cccc} \\rho_{11} &amp; \\rho_{12} &amp; ... &amp; \\rho_{1p} \\\\ \\rho_{21} &amp; \\rho_{22} &amp; ... &amp; \\rho_{2p} \\\\ . &amp; . &amp; . &amp;. \\\\ \\rho_{p1} &amp; \\rho_{p2} &amp; ... &amp; \\rho_{pp} \\\\ \\end{array} \\right) \\] where \\(\\rho_{ij}\\) is the correlation, and \\(\\rho_{ii} = 1\\) for all i Alternatively, \\[ \\mathbf{R} = [diag(\\mathbf{\\Sigma})]^{-1/2}\\mathbf{\\Sigma}[diag(\\mathbf{\\Sigma})]^{-1/2} \\] where \\(diag(\\mathbf{\\Sigma})\\) is the matrix which has the \\(\\sigma_{ii}\\)’s on the diagonal and 0’s elsewhere and \\(\\mathbf{A}^{1/2}\\) (the square root of a symmetric matrix) is a symmetric matrix such as \\(\\mathbf{A} = \\mathbf{A}^{1/2}\\mathbf{A}^{1/2}\\) Equalities Let \\(\\mathbf{x}\\) and \\(\\mathbf{y}\\) be random vectors with means \\(\\mu_x\\) and \\(\\mu_y\\) and variance -variance matrices \\(\\mathbf{\\Sigma}_x\\) and \\(\\mathbf{\\Sigma}_y\\). \\(\\mathbf{A}\\) and \\(\\mathbf{B}\\) be matrices of constants and \\(\\mathbf{c}\\) and \\(\\mathbf{d}\\) be vectors of constants Then \\(E(\\mathbf{Ay + c} ) = \\mathbf{A} \\mu_y + c\\) \\(var(\\mathbf{Ay + c}) = \\mathbf{A} var(\\mathbf{y})\\mathbf{A}&#39; = \\mathbf{A \\Sigma_y A}&#39;\\) \\(cov(\\mathbf{Ay + c, By+ d}) = \\mathbf{A\\Sigma_y B}&#39;\\) \\(E(\\mathbf{Ay + Bx + c}) = \\mathbf{A \\mu_y + B \\mu_x + c}\\) \\(var(\\mathbf{Ay + Bx + c}) = \\mathbf{A \\Sigma_y A&#39; + B \\Sigma_x B&#39; + A \\Sigma_{yx}B&#39; + B\\Sigma&#39;_{yx}A&#39;}\\) Multivariate Normal Distribution Let \\(\\mathbf{y}\\) be a multivariate normal (MVN) random variable with mean \\(\\mu\\) and variance \\(\\mathbf{\\Sigma}\\). Then the density of \\(\\mathbf{y}\\) is \\[ f(\\mathbf{y}) = \\frac{1}{(2\\pi)^{p/2}|\\mathbf{\\Sigma}|^{1/2}} \\exp(-\\frac{1}{2} \\mathbf{(y-\\mu)&#39;\\Sigma^{-1}(y-\\mu)} ) \\] \\(\\mathbf{y} \\sim N_p(\\mu, \\mathbf{\\Sigma})\\) 22.0.1 Properties of MVN Let \\(\\mathbf{A}_{r \\times p}\\) be a fixed matrix. Then \\(\\mathbf{Ay} \\sim N_r (\\mathbf{A \\mu, A \\Sigma A&#39;})\\) . \\(r \\le p\\) and all rows of \\(\\mathbf{A}\\) must be linearly independent to guarantee that \\(\\mathbf{A \\Sigma A}&#39;\\) is non-singular. Let \\(\\mathbf{G}\\) be a matrix such that \\(\\mathbf{\\Sigma}^{-1} = \\mathbf{GG}&#39;\\). Then \\(\\mathbf{G&#39;y} \\sim N_p(\\mathbf{G&#39; \\mu, I})\\) and \\(\\mathbf{G&#39;(y-\\mu)} \\sim N_p (0,\\mathbf{I})\\) Any fixed linear combination of \\(y_1,...,y_p\\) (say \\(\\mathbf{c&#39;y}\\)) follows \\(\\mathbf{c&#39;y} \\sim N_1 (\\mathbf{c&#39; \\mu, c&#39; \\Sigma c})\\) Define a partition, \\([\\mathbf{y}&#39;_1,\\mathbf{y}_2&#39;]&#39;\\) where \\(\\mathbf{y}_1\\) is \\(p_1 \\times 1\\) \\(\\mathbf{y}_2\\) is \\(p_2 \\times 1\\), \\(p_1 + p_2 = p\\) \\(p_1,p_2 \\ge 1\\) Then \\[ \\left( \\begin{array} {c} \\mathbf{y}_1 \\\\ \\mathbf{y}_2 \\\\ \\end{array} \\right) \\sim N \\left( \\left( \\begin{array} {c} \\mu_1 \\\\ \\mu_2 \\\\ \\end{array} \\right), \\left( \\begin{array} {cc} \\mathbf{\\Sigma}_{11} &amp; \\mathbf{\\Sigma}_{12} \\\\ \\mathbf{\\Sigma}_{21} &amp; \\mathbf{\\Sigma}_{22}\\\\ \\end{array} \\right) \\right) \\] The marginal distributions of \\(\\mathbf{y}_1\\) and \\(\\mathbf{y}_2\\) are \\(\\mathbf{y}_1 \\sim N_{p1}(\\mathbf{\\mu_1, \\Sigma_{11}})\\) and \\(\\mathbf{y}_2 \\sim N_{p2}(\\mathbf{\\mu_2, \\Sigma_{22}})\\) Individual components \\(y_1,...,y_p\\) are all normally distributed \\(y_i \\sim N_1(\\mu_i, \\sigma_{ii})\\) The conditional distribution of \\(\\mathbf{y}_1\\) and \\(\\mathbf{y}_2\\) is normal \\(\\mathbf{y}_1 | \\mathbf{y}_2 \\sim N_{p1}(\\mathbf{\\mu_1 + \\Sigma_{12} \\Sigma_{22}^{-1}(y_2 - \\mu_2),\\Sigma_{11} - \\Sigma_{12} \\Sigma_{22}^{-1} \\sigma_{21}})\\) In this formula, we see if we know (have info about) \\(\\mathbf{y}_2\\), we can re-weight \\(\\mathbf{y}_1\\) ’s mean, and the variance is reduced because we know more about \\(\\mathbf{y}_1\\) because we know \\(\\mathbf{y}_2\\) which is analogous to \\(\\mathbf{y}_2 | \\mathbf{y}_1\\). And \\(\\mathbf{y}_1\\) and \\(\\mathbf{y}_2\\) are independently distrusted only if \\(\\mathbf{\\Sigma}_{12} = 0\\) If \\(\\mathbf{y} \\sim N(\\mathbf{\\mu, \\Sigma})\\) and \\(\\mathbf{\\Sigma}\\) is positive definite, then \\(\\mathbf{(y-\\mu)&#39; \\Sigma^{-1} (y - \\mu)} \\sim \\chi^2_{(p)}\\) If \\(\\mathbf{y}_i\\) are independent \\(N_p (\\mathbf{\\mu}_i , \\mathbf{\\Sigma}_i)\\) random variables, then for fixed matrices \\(\\mathbf{A}_{i(m \\times p)}\\), \\(\\sum_{i=1}^k \\mathbf{A}_i \\mathbf{y}_i \\sim N_m (\\sum_{i=1}^{k} \\mathbf{A}_i \\mathbf{\\mu}_i, \\sum_{i=1}^k \\mathbf{A}_i \\mathbf{\\Sigma}_i \\mathbf{A}_i)\\) Multiple Regression \\[ \\left( \\begin{array} {c} Y \\\\ \\mathbf{x} \\end{array} \\right) \\sim N_{p+1} \\left( \\left[ \\begin{array} {c} \\mu_y \\\\ \\mathbf{\\mu}_x \\end{array} \\right] , \\left[ \\begin{array} {cc} \\sigma^2_Y &amp; \\mathbf{\\Sigma}_{yx} \\\\ \\mathbf{\\Sigma}_{yx} &amp; \\mathbf{\\Sigma}_{xx} \\end{array} \\right] \\right) \\] The conditional distribution of Y given x follows a univariate normal distribution with \\[ \\begin{aligned} E(Y| \\mathbf{x}) &amp;= \\mu_y + \\mathbf{\\Sigma}_{yx} \\Sigma_{xx}^{-1} (\\mathbf{x}- \\mu_x) \\\\ &amp;= \\mu_y - \\Sigma_{yx} \\Sigma_{xx}^{-1}\\mu_x + \\Sigma_{yx} \\Sigma_{xx}^{-1}\\mathbf{x} \\\\ &amp;= \\beta_0 + \\mathbf{\\beta&#39;x} \\end{aligned} \\] where \\(\\beta = (\\beta_1,...,\\beta_p)&#39; = \\mathbf{\\Sigma}_{xx}^{-1} \\mathbf{\\Sigma}_{yx}&#39;\\) (e.g., analogous to \\(\\mathbf{(x&#39;x)^{-1}x&#39;y}\\) but not the same if we consider \\(Y_i\\) and \\(\\mathbf{x}_i\\), \\(i = 1,..,n\\) and use the empirical covariance formula: \\(var(Y|\\mathbf{x}) = \\sigma^2_Y - \\mathbf{\\Sigma_{yx}\\Sigma^{-1}_{xx} \\Sigma&#39;_{yx}}\\)) Samples from Multivariate Normal Populations A random sample of size n, \\(\\mathbf{y}_1,.., \\mathbf{y}_n\\) from \\(N_p (\\mathbf{\\mu}, \\mathbf{\\Sigma})\\). Then Since \\(\\mathbf{y}_1,..., \\mathbf{y}_n\\) are iid, their sample mean, \\(\\bar{\\mathbf{y}} = \\sum_{i=1}^n \\mathbf{y}_i/n \\sim N_p (\\mathbf{\\mu}, \\mathbf{\\Sigma}/n)\\). that is, \\(\\bar{\\mathbf{y}}\\) is an unbiased estimator of \\(\\mathbf{\\mu}\\) The \\(p \\times p\\) sample variance-covariance matrix, \\(\\mathbf{S}\\) is \\(\\mathbf{S} = \\frac{1}{n-1}\\sum_{i=1}^n (\\mathbf{y}_i - \\bar{\\mathbf{y}})(\\mathbf{y}_i - \\bar{\\mathbf{y}})&#39; = \\frac{1}{n-1} (\\sum_{i=1}^n \\mathbf{y}_i \\mathbf{y}_i&#39; - n \\bar{\\mathbf{y}}\\bar{\\mathbf{y}}&#39;)\\) where \\(\\mathbf{S}\\) is symmetric, unbiased estimator of \\(\\mathbf{\\Sigma}\\) and has \\(p(p+1)/2\\) random variables. \\((n-1)\\mathbf{S} \\sim W_p (n-1, \\mathbf{\\Sigma})\\) is a Wishart distribution with n-1 degrees of freedom and expectation \\((n-1) \\mathbf{\\Sigma}\\). The Wishart distribution is a multivariate extension of the Chi-squared distribution. \\(\\bar{\\mathbf{y}}\\) and \\(\\mathbf{S}\\) are independent \\(\\bar{\\mathbf{y}}\\) and \\(\\mathbf{S}\\) are sufficient statistics. (All of the info in the data about \\(\\mathbf{\\mu}\\) and \\(\\mathbf{\\Sigma}\\) is contained in \\(\\bar{\\mathbf{y}}\\) and \\(\\mathbf{S}\\) , regardless of sample size). Large Sample Properties \\(\\mathbf{y}_1,..., \\mathbf{y}_n\\) are a random sample from some population with mean \\(\\mathbf{\\mu}\\) and variance-covariance matrix \\(\\mathbf{\\Sigma}\\) \\(\\bar{\\mathbf{y}}\\) is a consistent estimator for \\(\\mu\\) \\(\\mathbf{S}\\) is a consistent estimator for \\(\\mathbf{\\Sigma}\\) Multivariate Central Limit Theorem: Similar to the univariate case, \\(\\sqrt{n}(\\bar{\\mathbf{y}} - \\mu) \\dot{\\sim} N_p (\\mathbf{0,\\Sigma})\\) where n is large relative to p (\\(n \\ge 25p\\)), which is equivalent to \\(\\bar{\\mathbf{y}} \\dot{\\sim} N_p (\\mu, \\mathbf{\\Sigma}/n)\\) Wald’s Theorem: \\(n(\\bar{\\mathbf{y}} - \\mu)&#39; \\mathbf{S}^{-1} (\\bar{\\mathbf{y}} - \\mu)\\) when n is large relative to p. Maximum Likelihood Estimation for MVN Suppose iid \\(\\mathbf{y}_1 ,... \\mathbf{y}_n \\sim N_p (\\mu, \\mathbf{\\Sigma})\\), the likelihood function for the data is \\[ \\begin{aligned} L(\\mu, \\mathbf{\\Sigma}) &amp;= \\prod_{j=1}^n (\\frac{1}{(2\\pi)^{p/2}|\\mathbf{\\Sigma}|^{1/2}} \\exp(-\\frac{1}{2}(\\mathbf{y}_j -\\mu)&#39;\\mathbf{\\Sigma}^{-1})(\\mathbf{y}_j -\\mu)) \\\\ &amp;= \\frac{1}{(2\\pi)^{np/2}|\\mathbf{\\Sigma}|^{n/2}} \\exp(-\\frac{1}{2} \\sum_{j=1}^n(\\mathbf{y}_j -\\mu)&#39;\\mathbf{\\Sigma}^{-1})(\\mathbf{y}_j -\\mu) \\end{aligned} \\] Then, the MLEs are \\[ \\hat{\\mu} = \\bar{\\mathbf{y}} \\] \\[ \\hat{\\mathbf{\\Sigma}} = \\frac{n-1}{n} \\mathbf{S} \\] using derivatives of the log of the likelihood function with respect to \\(\\mu\\) and \\(\\mathbf{\\Sigma}\\) Properties of MLEs Invariance: If \\(\\hat{\\theta}\\) is the MLE of \\(\\theta\\), then the MLE of \\(h(\\theta)\\) is \\(h(\\hat{\\theta})\\) for any function h(.) Consistency: MLEs are consistent estimators, but they are usually biased Efficiency: MLEs are efficient estimators (no other estimator has a smaller variance for large samples) Asymptotic normality: Suppose that \\(\\hat{\\theta}_n\\) is the MLE for \\(\\theta\\) based upon n independent observations. Then \\(\\hat{\\theta}_n \\dot{\\sim} N(\\theta, \\mathbf{H}^{-1})\\) \\(\\mathbf{H}\\) is the Fisher Information Matrix, which contains the expected values of the second partial derivatives fo the log-likelihood function. the (i,j)th element of \\(\\mathbf{H}\\) is \\(-E(\\frac{\\partial^2 l(\\mathbf{\\theta})}{\\partial \\theta_i \\partial \\theta_j})\\) we can estimate \\(\\mathbf{H}\\) by finding the form determined above, and evaluate it at \\(\\theta = \\hat{\\theta}_n\\) Likelihood ratio testing: for some null hypothesis, \\(H_0\\) we can form a likelihood ratio test The statistic is: \\(\\Lambda = \\frac{\\max_{H_0}l(\\mathbf{\\mu}, \\mathbf{\\Sigma|Y})}{\\max l(\\mu, \\mathbf{\\Sigma | Y})}\\) For large n, \\(-2 \\log \\Lambda \\sim \\chi^2_{(v)}\\) where v is the number of parameters in the unrestricted space minus the number of parameters under \\(H_0\\) Test of Multivariate Normality Check univariate normality for each trait (X) separately Can check \\[Normality Assessment\\] The good thing is that if any of the univariate trait is not normal, then the joint distribution is not normal (see again [m]). If a joint multivariate distribution is normal, then the marginal distribution has to be normal. However, marginal normality of all traits does not imply joint MVN Easily rule out multivariate normality, but not easy to prove it Mardia’s tests for multivariate normality Multivariate skewness is\\[ \\beta_{1,p} = E[(\\mathbf{y}- \\mathbf{\\mu})&#39; \\mathbf{\\Sigma}^{-1} (\\mathbf{x} - \\mathbf{\\mu})]^3 \\] where \\(\\mathbf{x}\\) and \\(\\mathbf{y}\\) are independent, but have the same distribution (note: \\(\\beta\\) here is not regression coefficient) Multivariate kurtosis is defined as \\[ \\beta_{2,p} - E[(\\mathbf{y}- \\mathbf{\\mu})&#39; \\mathbf{\\Sigma}^{-1} (\\mathbf{x} - \\mathbf{\\mu})]^2 \\] For the MVN distribution, we have \\(\\beta_{1,p} = 0\\) and \\(\\beta_{2,p} = p(p+2)\\) For a sample of size n, we can estimate \\[ \\hat{\\beta}_{1,p} = \\frac{1}{n^2}\\sum_{i=1}^n \\sum_{j=1}^n g^2_{ij} \\] \\[ \\hat{\\beta}_{2,p} = \\frac{1}{n} \\sum_{i=1}^n g^2_{ii} \\] where \\(g_{ij} = (\\mathbf{y}_i - \\bar{\\mathbf{y}})&#39; \\mathbf{S}^{-1} (\\mathbf{y}_j - \\bar{\\mathbf{y}})\\). Note: \\(g_{ii} = d^2_i\\) where \\(d^2_i\\) is the Mahalanobis distance (Mardia 1970) shows for large n \\[ \\kappa_1 = \\frac{n \\hat{\\beta}_{1,p}}{6} \\dot{\\sim} \\chi^2_{p(p+1)(p+2)/6} \\] \\[ \\kappa_2 = \\frac{\\hat{\\beta}_{2,p} - p(p+2)}{\\sqrt{8p(p+2)/n}} \\sim N(0,1) \\] Hence, we can use \\(\\kappa_1\\) and \\(\\kappa_2\\) to test the null hypothesis of MVN. When the data are non-normal, normal theory tests on the mean are sensitive to \\(\\beta_{1,p}\\) , while tests on the covariance are sensitive to \\(\\beta_{2,p}\\) Alternatively, Doornik-Hansen test for multivariate normality (Doornik and Hansen 2008) Chi-square Q-Q plot Let \\(\\mathbf{y}_i, i = 1,...,n\\) be a random sample sample from \\(N_p(\\mathbf{\\mu}, \\mathbf{\\Sigma})\\) Then \\(\\mathbf{z}_i = \\mathbf{\\Sigma}^{-1/2}(\\mathbf{y}_i - \\mathbf{\\mu}), i = 1,...,n\\) are iid \\(N_p (\\mathbf{0}, \\mathbf{I})\\). Thus, \\(d_i^2 = \\mathbf{z}_i&#39; \\mathbf{z}_i \\sim \\chi^2_p , i = 1,...,n\\) plot the ordered \\(d_i^2\\) values against the qualities of the \\(\\chi^2_p\\) distribution. When normality holds, the plot should approximately resemble a straight lien passing through the origin at a 45 degree it requires large sample size (i.e., sensitive to sample size). Even if we generate data from a MVN, the tail of the Chi-square Q-Q plot can still be out of line. If the data are not normal, we can ignore it use nonparametric methods use models based upon an approximate distribution (e.g., GLMM) try performing a transformation library(heplots) library(ICSNP) library(MVN) library(tidyverse) trees = read.table(&quot;images/trees.dat&quot;) names(trees) &lt;- c(&quot;Nitrogen&quot;,&quot;Phosphorous&quot;,&quot;Potassium&quot;,&quot;Ash&quot;,&quot;Height&quot;) str(trees) #&gt; &#39;data.frame&#39;: 26 obs. of 5 variables: #&gt; $ Nitrogen : num 2.2 2.1 1.52 2.88 2.18 1.87 1.52 2.37 2.06 1.84 ... #&gt; $ Phosphorous: num 0.417 0.354 0.208 0.335 0.314 0.271 0.164 0.302 0.373 0.265 ... #&gt; $ Potassium : num 1.35 0.9 0.71 0.9 1.26 1.15 0.83 0.89 0.79 0.72 ... #&gt; $ Ash : num 1.79 1.08 0.47 1.48 1.09 0.99 0.85 0.94 0.8 0.77 ... #&gt; $ Height : int 351 249 171 373 321 191 225 291 284 213 ... summary(trees) #&gt; Nitrogen Phosphorous Potassium Ash #&gt; Min. :1.130 Min. :0.1570 Min. :0.3800 Min. :0.4500 #&gt; 1st Qu.:1.532 1st Qu.:0.1963 1st Qu.:0.6050 1st Qu.:0.6375 #&gt; Median :1.855 Median :0.2250 Median :0.7150 Median :0.9300 #&gt; Mean :1.896 Mean :0.2506 Mean :0.7619 Mean :0.8873 #&gt; 3rd Qu.:2.160 3rd Qu.:0.2975 3rd Qu.:0.8975 3rd Qu.:0.9825 #&gt; Max. :2.880 Max. :0.4170 Max. :1.3500 Max. :1.7900 #&gt; Height #&gt; Min. : 65.0 #&gt; 1st Qu.:122.5 #&gt; Median :181.0 #&gt; Mean :196.6 #&gt; 3rd Qu.:276.0 #&gt; Max. :373.0 cor(trees, method = &quot;pearson&quot;) # correlation matrix #&gt; Nitrogen Phosphorous Potassium Ash Height #&gt; Nitrogen 1.0000000 0.6023902 0.5462456 0.6509771 0.8181641 #&gt; Phosphorous 0.6023902 1.0000000 0.7037469 0.6707871 0.7739656 #&gt; Potassium 0.5462456 0.7037469 1.0000000 0.6710548 0.7915683 #&gt; Ash 0.6509771 0.6707871 0.6710548 1.0000000 0.7676771 #&gt; Height 0.8181641 0.7739656 0.7915683 0.7676771 1.0000000 # qq-plot gg &lt;- trees %&gt;% pivot_longer(everything(), names_to = &quot;Var&quot;, values_to = &quot;Value&quot;) %&gt;% ggplot(aes(sample = Value)) + geom_qq() + geom_qq_line() + facet_wrap(&quot;Var&quot;, scales = &quot;free&quot;) gg # Univariate normality sw_tests &lt;- apply(trees, MARGIN = 2, FUN = shapiro.test) sw_tests #&gt; $Nitrogen #&gt; #&gt; Shapiro-Wilk normality test #&gt; #&gt; data: newX[, i] #&gt; W = 0.96829, p-value = 0.5794 #&gt; #&gt; #&gt; $Phosphorous #&gt; #&gt; Shapiro-Wilk normality test #&gt; #&gt; data: newX[, i] #&gt; W = 0.93644, p-value = 0.1104 #&gt; #&gt; #&gt; $Potassium #&gt; #&gt; Shapiro-Wilk normality test #&gt; #&gt; data: newX[, i] #&gt; W = 0.95709, p-value = 0.3375 #&gt; #&gt; #&gt; $Ash #&gt; #&gt; Shapiro-Wilk normality test #&gt; #&gt; data: newX[, i] #&gt; W = 0.92071, p-value = 0.04671 #&gt; #&gt; #&gt; $Height #&gt; #&gt; Shapiro-Wilk normality test #&gt; #&gt; data: newX[, i] #&gt; W = 0.94107, p-value = 0.1424 # Kolmogorov-Smirnov test ks_tests &lt;- map(trees, ~ ks.test(scale(.x),&quot;pnorm&quot;)) ks_tests #&gt; $Nitrogen #&gt; #&gt; Asymptotic one-sample Kolmogorov-Smirnov test #&gt; #&gt; data: scale(.x) #&gt; D = 0.12182, p-value = 0.8351 #&gt; alternative hypothesis: two-sided #&gt; #&gt; #&gt; $Phosphorous #&gt; #&gt; Asymptotic one-sample Kolmogorov-Smirnov test #&gt; #&gt; data: scale(.x) #&gt; D = 0.17627, p-value = 0.3944 #&gt; alternative hypothesis: two-sided #&gt; #&gt; #&gt; $Potassium #&gt; #&gt; Asymptotic one-sample Kolmogorov-Smirnov test #&gt; #&gt; data: scale(.x) #&gt; D = 0.10542, p-value = 0.9348 #&gt; alternative hypothesis: two-sided #&gt; #&gt; #&gt; $Ash #&gt; #&gt; Asymptotic one-sample Kolmogorov-Smirnov test #&gt; #&gt; data: scale(.x) #&gt; D = 0.14503, p-value = 0.6449 #&gt; alternative hypothesis: two-sided #&gt; #&gt; #&gt; $Height #&gt; #&gt; Asymptotic one-sample Kolmogorov-Smirnov test #&gt; #&gt; data: scale(.x) #&gt; D = 0.1107, p-value = 0.9076 #&gt; alternative hypothesis: two-sided # Mardia&#39;s test, need large sample size for power mardia_test &lt;- mvn( trees, mvnTest = &quot;mardia&quot;, covariance = FALSE, multivariatePlot = &quot;qq&quot; ) mardia_test$multivariateNormality #&gt; Test Statistic p value Result #&gt; 1 Mardia Skewness 29.7248528871795 0.72054426745778 YES #&gt; 2 Mardia Kurtosis -1.67743173185383 0.0934580886477281 YES #&gt; 3 MVN &lt;NA&gt; &lt;NA&gt; YES # Doornik-Hansen&#39;s test dh_test &lt;- mvn( trees, mvnTest = &quot;dh&quot;, covariance = FALSE, multivariatePlot = &quot;qq&quot; ) dh_test$multivariateNormality #&gt; Test E df p value MVN #&gt; 1 Doornik-Hansen 161.9446 10 1.285352e-29 NO # Henze-Zirkler&#39;s test hz_test &lt;- mvn( trees, mvnTest = &quot;hz&quot;, covariance = FALSE, multivariatePlot = &quot;qq&quot; ) hz_test$multivariateNormality #&gt; Test HZ p value MVN #&gt; 1 Henze-Zirkler 0.7591525 0.6398905 YES # The last column indicates whether dataset follows a multivariate normality or not (i.e, YES or NO) at significance level 0.05. # Royston&#39;s test # can only apply for 3 &lt; obs &lt; 5000 (because of Shapiro-Wilk&#39;s test) royston_test &lt;- mvn( trees, mvnTest = &quot;royston&quot;, covariance = FALSE, multivariatePlot = &quot;qq&quot; ) royston_test$multivariateNormality #&gt; Test H p value MVN #&gt; 1 Royston 9.064631 0.08199215 YES # E-statistic estat_test &lt;- mvn( trees, mvnTest = &quot;energy&quot;, covariance = FALSE, multivariatePlot = &quot;qq&quot; ) estat_test$multivariateNormality #&gt; Test Statistic p value MVN #&gt; 1 E-statistic 1.091101 0.532 YES 22.0.2 Mean Vector Inference In the univariate normal distribution, we test \\(H_0: \\mu =\\mu_0\\) by using \\[ T = \\frac{\\bar{y}- \\mu_0}{s/\\sqrt{n}} \\sim t_{n-1} \\] under the null hypothesis. And reject the null if \\(|T|\\) is large relative to \\(t_{(1-\\alpha/2,n-1)}\\) because it means that seeing a value as large as what we observed is rare if the null is true Equivalently, \\[ T^2 = \\frac{(\\bar{y}- \\mu_0)^2}{s^2/n} = n(\\bar{y}- \\mu_0)(s^2)^{-1}(\\bar{y}- \\mu_0) \\sim f_{(1,n-1)} \\] 22.0.2.1 Natural Multivariate Generalization \\[ \\begin{aligned} &amp;H_0: \\mathbf{\\mu} = \\mathbf{\\mu}_0 \\\\ &amp;H_a: \\mathbf{\\mu} \\neq \\mathbf{\\mu}_0 \\end{aligned} \\] Define Hotelling’s \\(T^2\\) by \\[ T^2 = n(\\bar{\\mathbf{y}} - \\mathbf{\\mu}_0)&#39;\\mathbf{S}^{-1}(\\bar{\\mathbf{y}} - \\mathbf{\\mu}_0) \\] which can be viewed as a generalized distance between \\(\\bar{\\mathbf{y}}\\) and \\(\\mathbf{\\mu}_0\\) Under the assumption of normality, \\[ F = \\frac{n-p}{(n-1)p} T^2 \\sim f_{(p,n-p)} \\] and reject the null hypothesis when \\(F &gt; f_{(1-\\alpha, p, n-p)}\\) The \\(T^2\\) test is invariant to changes in measurement units. If \\(\\mathbf{z = Cy + d}\\) where \\(\\mathbf{C}\\) and \\(\\mathbf{d}\\) do not depend on \\(\\mathbf{y}\\), then \\(T^2(\\mathbf{z}) - T^2(\\mathbf{y})\\) The \\(T^2\\) test can be derived as a likelihood ratio test of \\(H_0: \\mu = \\mu_0\\) 22.0.2.2 Confidence Intervals 22.0.2.2.1 Confidence Region An “exact” \\(100(1-\\alpha)\\%\\) confidence region for \\(\\mathbf{\\mu}\\) is the set of all vectors, \\(\\mathbf{v}\\), which are “close enough” to the observed mean vector, \\(\\bar{\\mathbf{y}}\\) to satisfy \\[ n(\\bar{\\mathbf{y}} - \\mathbf{\\mu}_0)&#39;\\mathbf{S}^{-1}(\\bar{\\mathbf{y}} - \\mathbf{\\mu}_0) \\le \\frac{(n-1)p}{n-p} f_{(1-\\alpha, p, n-p)} \\] \\(\\mathbf{v}\\) are just the mean vectors that are not rejected by the \\(T^2\\) test when \\(\\mathbf{\\bar{y}}\\) is observed. In case that you have 2 parameters, the confidence region is a “hyper-ellipsoid”. In this region, it consists of all \\(\\mathbf{\\mu}_0\\) vectors for which the \\(T^2\\) test would not reject \\(H_0\\) at significance level \\(\\alpha\\) Even though the confidence region better assesses the joint knowledge concerning plausible values of \\(\\mathbf{\\mu}\\) , people typically include confidence statement about the individual component means. We’d like all of the separate confidence statements to hold simultaneously with a specified high probability. Simultaneous confidence intervals: intervals against any statement being incorrect 22.0.2.2.1.1 Simultaneous Confidence Statements Intervals based on a rectangular confidence region by projecting the previous region onto the coordinate axes: \\[ \\bar{y}_{i} \\pm \\sqrt{\\frac{(n-1)p}{n-p}f_{(1-\\alpha, p,n-p)}\\frac{s_{ii}}{n}} \\] for all \\(i = 1,..,p\\) which implied confidence region is conservative; it has at least \\(100(1- \\alpha)\\%\\) Generally, simultaneous \\(100(1-\\alpha) \\%\\) confidence intervals for all linear combinations , \\(\\mathbf{a}\\) of the elements of the mean vector are given by \\[ \\mathbf{a&#39;\\bar{y}} \\pm \\sqrt{\\frac{(n-1)p}{n-p}f_{(1-\\alpha, p,n-p)}\\frac{\\mathbf{a&#39;Sa}}{n}} \\] works for any arbitrary linear combination \\(\\mathbf{a&#39;\\mu} = a_1 \\mu_1 + ... + a_p \\mu_p\\), which is a projection onto the axis in the direction of \\(\\mathbf{a}\\) These intervals have the property that the probability that at least one such interval does not contain the appropriate \\(\\mathbf{a&#39; \\mu}\\) is no more than \\(\\alpha\\) These types of intervals can be used for “data snooping” (like \\[Scheffe\\]) 22.0.2.2.1.2 One \\(\\mu\\) at a time One at a time confidence intervals: \\[ \\bar{y}_i \\pm t_{(1 - \\alpha/2, n-1} \\sqrt{\\frac{s_{ii}}{n}} \\] Each of these intervals has a probability of \\(1-\\alpha\\) of covering the appropriate \\(\\mu_i\\) But they ignore the covariance structure of the \\(p\\) variables If we only care about \\(k\\) simultaneous intervals, we can use “one at a time” method with the \\[Bonferroni\\] correction. This method gets more conservative as the number of intervals \\(k\\) increases. 22.0.3 General Hypothesis Testing 22.0.3.1 One-sample Tests \\[ H_0: \\mathbf{C \\mu= 0} \\] where \\(\\mathbf{C}\\) is a \\(c \\times p\\) matrix of rank c where \\(c \\le p\\) We can test this hypothesis using the following statistic \\[ F = \\frac{n - c}{(n-1)c} T^2 \\] where \\(T^2 = n(\\mathbf{C\\bar{y}})&#39; (\\mathbf{CSC&#39;})^{-1} (\\mathbf{C\\bar{y}})\\) Example: \\[ H_0: \\mu_1 = \\mu_2 = ... = \\mu_p \\] Equivalently, \\[ \\begin{aligned} \\mu_1 - \\mu_2 &amp;= 0 \\\\ &amp;\\vdots \\\\ \\mu_{p-1} - \\mu_p &amp;= 0 \\end{aligned} \\] a total of \\(p-1\\) tests. Hence, we have \\(\\mathbf{C}\\) as the \\(p - 1 \\times p\\) matrix \\[ \\mathbf{C} = \\left( \\begin{array} {ccccc} 1 &amp; -1 &amp; 0 &amp; \\ldots &amp; 0 \\\\ 0 &amp; 1 &amp; -1 &amp; \\ldots &amp; 0 \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ 0 &amp; 0 &amp; \\ldots &amp; 1 &amp; -1 \\end{array} \\right) \\] number of rows = \\(c = p -1\\) Equivalently, we can also compare all of the other means to the first mean. Then, we test \\(\\mu_1 - \\mu_2 = 0, \\mu_1 - \\mu_3 = 0,..., \\mu_1 - \\mu_p = 0\\), the \\((p-1) \\times p\\) matrix \\(\\mathbf{C}\\) is \\[ \\mathbf{C} = \\left( \\begin{array} {ccccc} -1 &amp; 1 &amp; 0 &amp; \\ldots &amp; 0 \\\\ -1 &amp; 0 &amp; 1 &amp; \\ldots &amp; 0 \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ -1 &amp; 0 &amp; \\ldots &amp; 0 &amp; 1 \\end{array} \\right) \\] The value of \\(T^2\\) is invariant to these equivalent choices of \\(\\mathbf{C}\\) This is often used for repeated measures designs, where each subject receives each treatment once over successive periods of time (all treatments are administered to each unit). Example: Let \\(y_{ij}\\) be the response from subject i at time j for \\(i = 1,..,n, j = 1,...,T\\). In this case, \\(\\mathbf{y}_i = (y_{i1}, ..., y_{iT})&#39;, i = 1,...,n\\) are a random sample from \\(N_T (\\mathbf{\\mu}, \\mathbf{\\Sigma})\\) Let \\(n=8\\) subjects, \\(T = 6\\). We are interested in \\(\\mu_1, .., \\mu_6\\) \\[ H_0: \\mu_1 = \\mu_2 = ... = \\mu_6 \\] Equivalently, \\[ \\begin{aligned} \\mu_1 - \\mu_2 &amp;= 0 \\\\ \\mu_2 - \\mu_3 &amp;= 0 \\\\ &amp;... \\\\ \\mu_5 - \\mu_6 &amp;= 0 \\end{aligned} \\] We can test orthogonal polynomials for 4 equally spaced time points. To test for example the null hypothesis that quadratic and cubic effects are jointly equal to 0, we would define \\(\\mathbf{C}\\) \\[ \\mathbf{C} = \\left( \\begin{array} {cccc} 1 &amp; -1 &amp; -1 &amp; 1 \\\\ -1 &amp; 3 &amp; -3 &amp; 1 \\end{array} \\right) \\] 22.0.3.2 Two-Sample Tests Consider the analogous two sample multivariate tests. Example: we have data on two independent random samples, one sample from each of two populations \\[ \\begin{aligned} \\mathbf{y}_{1i} &amp;\\sim N_p (\\mathbf{\\mu_1, \\Sigma}) \\\\ \\mathbf{y}_{2j} &amp;\\sim N_p (\\mathbf{\\mu_2, \\Sigma}) \\end{aligned} \\] We assume normality equal variance-covariance matrices independent random samples We can summarize our data using the sufficient statistics \\(\\mathbf{\\bar{y}}_1, \\mathbf{S}_1, \\mathbf{\\bar{y}}_2, \\mathbf{S}_2\\) with respective sample sizes, \\(n_1,n_2\\) Since we assume that \\(\\mathbf{\\Sigma}_1 = \\mathbf{\\Sigma}_2 = \\mathbf{\\Sigma}\\), compute a pooled estimate of the variance-covariance matrix on \\(n_1 + n_2 - 2\\) df \\[ \\mathbf{S} = \\frac{(n_1 - 1)\\mathbf{S}_1 + (n_2-1) \\mathbf{S}_2}{(n_1 -1) + (n_2 - 1)} \\] \\[ \\begin{aligned} &amp;H_0: \\mathbf{\\mu}_1 = \\mathbf{\\mu}_2 \\\\ &amp;H_a: \\mathbf{\\mu}_1 \\neq \\mathbf{\\mu}_2 \\end{aligned} \\] At least one element of the mean vectors is different We use \\(\\mathbf{\\bar{y}}_1 - \\mathbf{\\bar{y}}_2\\) to estimate \\(\\mu_1 - \\mu_2\\) \\(\\mathbf{S}\\) to estimate \\(\\mathbf{\\Sigma}\\) Note: because we assume the two populations are independent, there is no covariance \\(cov(\\mathbf{\\bar{y}}_1 - \\mathbf{\\bar{y}}_2) = var(\\mathbf{\\bar{y}}_1) + var(\\mathbf{\\bar{y}}_2) = \\frac{\\mathbf{\\Sigma_1}}{n_1} + \\frac{\\mathbf{\\Sigma_2}}{n_2} = \\mathbf{\\Sigma}(\\frac{1}{n_1} + \\frac{1}{n_2})\\) Reject \\(H_0\\) if \\[ \\begin{aligned} T^2 &amp;= (\\mathbf{\\bar{y}}_1 - \\mathbf{\\bar{y}}_2)&#39;\\{ \\mathbf{S} (\\frac{1}{n_1} + \\frac{1}{n_2})\\}^{-1} (\\mathbf{\\bar{y}}_1 - \\mathbf{\\bar{y}}_2)\\\\ &amp;= \\frac{n_1 n_2}{n_1 +n_2} (\\mathbf{\\bar{y}}_1 - \\mathbf{\\bar{y}}_2)&#39;\\{ \\mathbf{S} \\}^{-1} (\\mathbf{\\bar{y}}_1 - \\mathbf{\\bar{y}}_2)\\\\ &amp; \\ge \\frac{(n_1 + n_2 -2)p}{n_1 + n_2 - p - 1} f_{(1- \\alpha,n_1 + n_2 - p -1)} \\end{aligned} \\] or equivalently, if \\[ F = \\frac{n_1 + n_2 - p -1}{(n_1 + n_2 -2)p} T^2 \\ge f_{(1- \\alpha, p , n_1 + n_2 -p -1)} \\] A \\(100(1-\\alpha) \\%\\) confidence region for \\(\\mu_1 - \\mu_2\\) consists of all vector \\(\\delta\\) which satisfy \\[ \\frac{n_1 n_2}{n_1 + n_2} (\\mathbf{\\bar{y}}_1 - \\mathbf{\\bar{y}}_2 - \\mathbf{\\delta})&#39; \\mathbf{S}^{-1}(\\mathbf{\\bar{y}}_1 - \\mathbf{\\bar{y}}_2 - \\mathbf{\\delta}) \\le \\frac{(n_1 + n_2 - 2)p}{n_1 + n_2 -p - 1}f_{(1-\\alpha, p , n_1 + n_2 - p -1)} \\] The simultaneous confidence intervals for all linear combinations of \\(\\mu_1 - \\mu_2\\) have the form \\[ \\mathbf{a&#39;}(\\mathbf{\\bar{y}}_1 - \\mathbf{\\bar{y}}_2) \\pm \\sqrt{\\frac{(n_1 + n_2 -2)p}{n_1 + n_2 - p -1}}f_{(1-\\alpha, p, n_1 + n_2 -p -1)} \\times \\sqrt{\\mathbf{a&#39;Sa}(\\frac{1}{n_1} + \\frac{1}{n_2})} \\] Bonferroni intervals, for k combinations \\[ (\\bar{y}_{1i} - \\bar{y}_{2i}) \\pm t_{(1-\\alpha/2k, n_1 + n_2 - 2)}\\sqrt{(\\frac{1}{n_1} + \\frac{1}{n_2})s_{ii}} \\] 22.0.3.3 Model Assumptions If model assumption are not met Unequal Covariance Matrices If \\(n_1 = n_2\\) (large samples) there is little effect on the Type I error rate and power fo the two sample test If \\(n_1 &gt; n_2\\) and the eigenvalues of \\(\\mathbf{\\Sigma}_1 \\mathbf{\\Sigma}^{-1}_2\\) are less than 1, the Type I error level is inflated If \\(n_1 &gt; n_2\\) and some eigenvalues of \\(\\mathbf{\\Sigma}_1 \\mathbf{\\Sigma}_2^{-1}\\) are greater than 1, the Type I error rate is too small, leading to a reduction in power Sample Not Normal Type I error level of the two sample \\(T^2\\) test isn’t much affect by moderate departures from normality if the two populations being sampled have similar distributions One sample \\(T^2\\) test is much more sensitive to lack of normality, especially when the distribution is skewed. Intuitively, you can think that in one sample your distribution will be sensitive, but the distribution of the difference between two similar distributions will not be as sensitive. Solutions: Transform to make the data more normal Large large samples, use the \\(\\chi^2\\) (Wald) test, in which populations don’t need to be normal, or equal sample sizes, or equal variance-covariance matrices \\(H_0: \\mu_1 - \\mu_2 =0\\) use \\((\\mathbf{\\bar{y}}_1 - \\mathbf{\\bar{y}}_2)&#39;( \\frac{1}{n_1} \\mathbf{S}_1 + \\frac{1}{n_2}\\mathbf{S}_2)^{-1}(\\mathbf{\\bar{y}}_1 - \\mathbf{\\bar{y}}_2) \\dot{\\sim} \\chi^2_{(p)}\\) 22.0.3.3.1 Equal Covariance Matrices Tests With independent random samples from k populations of \\(p\\)-dimensional vectors. We compute the sample covariance matrix for each, \\(\\mathbf{S}_i\\), where \\(i = 1,...,k\\) \\[ \\begin{aligned} &amp;H_0: \\mathbf{\\Sigma}_1 = \\mathbf{\\Sigma}_2 = \\ldots = \\mathbf{\\Sigma}_k = \\mathbf{\\Sigma} \\\\ &amp;H_a: \\text{at least 2 are different} \\end{aligned} \\] Assume \\(H_0\\) is true, we would use a pooled estimate of the common covariance matrix, \\(\\mathbf{\\Sigma}\\) \\[ \\mathbf{S} = \\frac{\\sum_{i=1}^k (n_i -1)\\mathbf{S}_i}{\\sum_{i=1}^k (n_i - 1)} \\] with \\(\\sum_{i=1}^k (n_i -1)\\) 22.0.3.3.1.1 Bartlett’s Test (a modification of the likelihood ratio test). Define \\[ N = \\sum_{i=1}^k n_i \\] and (note: \\(| |\\) are determinants here, not absolute value) \\[ M = (N - k) \\log|\\mathbf{S}| - \\sum_{i=1}^k (n_i - 1) \\log|\\mathbf{S}_i| \\] \\[ C^{-1} = 1 - \\frac{2p^2 + 3p - 1}{6(p+1)(k-1)} \\{\\sum_{i=1}^k (\\frac{1}{n_i - 1}) - \\frac{1}{N-k} \\} \\] Reject \\(H_0\\) when \\(MC^{-1} &gt; \\chi^2_{1- \\alpha, (k-1)p(p+1)/2}\\) If not all samples are from normal populations, \\(MC^{-1}\\) has a distribution which is often shifted to the right of the nominal \\(\\chi^2\\) distribution, which means \\(H_0\\) is often rejected even when it is true (the Type I error level is inflated). Hence, it is better to test individual normality first, or then multivariate normality before you do Bartlett’s test. 22.0.3.4 Two-Sample Repeated Measurements Define \\(\\mathbf{y}_{hi} = (y_{hi1}, ..., y_{hit})&#39;\\) to be the observations from the i-th subject in the h-th group for times 1 through T Assume that \\(\\mathbf{y}_{11}, ..., \\mathbf{y}_{1n_1}\\) are iid \\(N_t(\\mathbf{\\mu}_1, \\mathbf{\\Sigma})\\) and that \\(\\mathbf{y}_{21},...,\\mathbf{y}_{2n_2}\\) are iid \\(N_t(\\mathbf{\\mu}_2, \\mathbf{\\Sigma})\\) \\(H_0: \\mathbf{C}(\\mathbf{\\mu}_1 - \\mathbf{\\mu}_2) = \\mathbf{0}_c\\) where \\(\\mathbf{C}\\) is a \\(c \\times t\\) matrix of rank \\(c\\) where \\(c \\le t\\) The test statistic has the form \\[ T^2 = \\frac{n_1 n_2}{n_1 + n_2} (\\mathbf{\\bar{y}}_1 - \\mathbf{\\bar{y}}_2)&#39; \\mathbf{C}&#39;(\\mathbf{CSC}&#39;)^{-1}\\mathbf{C} (\\mathbf{\\bar{y}}_1 - \\mathbf{\\bar{y}}_2) \\] where \\(\\mathbf{S}\\) is the pooled covariance estimate. Then, \\[ F = \\frac{n_1 + n_2 - c -1}{(n_1 + n_2-2)c} T^2 \\sim f_{(c, n_1 + n_2 - c-1)} \\] when \\(H_0\\) is true If the null hypothesis \\(H_0: \\mu_1 = \\mu_2\\) is rejected. A weaker hypothesis is that the profiles for the two groups are parallel. \\[ \\begin{aligned} \\mu_{11} - \\mu_{21} &amp;= \\mu_{12} - \\mu_{22} \\\\ &amp;\\vdots \\\\ \\mu_{1t-1} - \\mu_{2t-1} &amp;= \\mu_{1t} - \\mu_{2t} \\end{aligned} \\] The null hypothesis matrix term is then \\(H_0: \\mathbf{C}(\\mu_1 - \\mu_2) = \\mathbf{0}_c\\) , where \\(c = t - 1\\) and \\[ \\mathbf{C} = \\left( \\begin{array} {ccccc} 1 &amp; -1 &amp; 0 &amp; \\ldots &amp; 0 \\\\ 0 &amp; 1 &amp; -1 &amp; \\ldots &amp; 0 \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ 0 &amp; 0 &amp; 0 &amp; \\ldots &amp; -1 \\end{array} \\right)_{(t-1) \\times t} \\] # One-sample Hotelling&#39;s T^2 test # Create data frame plants &lt;- data.frame( y1 = c(2.11, 2.36, 2.13, 2.78, 2.17), y2 = c(10.1, 35.0, 2.0, 6.0, 2.0), y3 = c(3.4, 4.1, 1.9, 3.8, 1.7) ) # Center the data with # the hypothesized means and make a matrix plants_ctr &lt;- plants %&gt;% transmute(y1_ctr = y1 - 2.85, y2_ctr = y2 - 15.0, y3_ctr = y3 - 6.0) %&gt;% as.matrix() # Use anova.mlm to calculate Wilks&#39; lambda onesamp_fit &lt;- anova(lm(plants_ctr ~ 1), test = &quot;Wilks&quot;) onesamp_fit #&gt; Analysis of Variance Table #&gt; #&gt; Df Wilks approx F num Df den Df Pr(&gt;F) #&gt; (Intercept) 1 0.054219 11.629 3 2 0.08022 . #&gt; Residuals 4 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 can’t reject the null of hypothesized vector of means # Paired-Sample Hotelling&#39;s T^2 test library(ICSNP) # Create data frame waste &lt;- data.frame( case = 1:11, com_y1 = c(6, 6, 18, 8, 11, 34, 28, 71, 43, 33, 20), com_y2 = c(27, 23, 64, 44, 30, 75, 26, 124, 54, 30, 14), state_y1 = c(25, 28, 36, 35, 15, 44, 42, 54, 34, 29, 39), state_y2 = c(15, 13, 22, 29, 31, 64, 30, 64, 56, 20, 21) ) # Calculate the difference between commercial and state labs waste_diff &lt;- waste %&gt;% transmute(y1_diff = com_y1 - state_y1, y2_diff = com_y2 - state_y2) # Run the test paired_fit &lt;- HotellingsT2(waste_diff) # value T.2 in the output corresponds to # the approximate F-value in the output from anova.mlm paired_fit #&gt; #&gt; Hotelling&#39;s one sample T2-test #&gt; #&gt; data: waste_diff #&gt; T.2 = 6.1377, df1 = 2, df2 = 9, p-value = 0.02083 #&gt; alternative hypothesis: true location is not equal to c(0,0) reject the null that the two labs’ measurements are equal # Independent-Sample Hotelling&#39;s T^2 test with Bartlett&#39;s test # Read in data steel &lt;- read.table(&quot;images/steel.dat&quot;) names(steel) &lt;- c(&quot;Temp&quot;, &quot;Yield&quot;, &quot;Strength&quot;) str(steel) #&gt; &#39;data.frame&#39;: 12 obs. of 3 variables: #&gt; $ Temp : int 1 1 1 1 1 2 2 2 2 2 ... #&gt; $ Yield : int 33 36 35 38 40 35 36 38 39 41 ... #&gt; $ Strength: int 60 61 64 63 65 57 59 59 61 63 ... # Plot the data ggplot(steel, aes(x = Yield, y = Strength)) + geom_text(aes(label = Temp), size = 5) + geom_segment(aes( x = 33, y = 57.5, xend = 42, yend = 65 ), col = &quot;red&quot;) # Bartlett&#39;s test for equality of covariance matrices # same thing as Box&#39;s M test in the multivariate setting bart_test &lt;- boxM(steel[, -1], steel$Temp) bart_test # fail to reject the null of equal covariances #&gt; #&gt; Box&#39;s M-test for Homogeneity of Covariance Matrices #&gt; #&gt; data: steel[, -1] #&gt; Chi-Sq (approx.) = 0.38077, df = 3, p-value = 0.9442 # anova.mlm twosamp_fit &lt;- anova(lm(cbind(Yield, Strength) ~ factor(Temp), data = steel), test = &quot;Wilks&quot;) twosamp_fit #&gt; Analysis of Variance Table #&gt; #&gt; Df Wilks approx F num Df den Df Pr(&gt;F) #&gt; (Intercept) 1 0.001177 3818.1 2 9 6.589e-14 *** #&gt; factor(Temp) 1 0.294883 10.8 2 9 0.004106 ** #&gt; Residuals 10 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # ICSNP package twosamp_fit2 &lt;- HotellingsT2(cbind(steel$Yield, steel$Strength) ~ factor(steel$Temp)) twosamp_fit2 #&gt; #&gt; Hotelling&#39;s two sample T2-test #&gt; #&gt; data: cbind(steel$Yield, steel$Strength) by factor(steel$Temp) #&gt; T.2 = 10.76, df1 = 2, df2 = 9, p-value = 0.004106 #&gt; alternative hypothesis: true location difference is not equal to c(0,0) reject null. Hence, there is a difference in the means of the bivariate normal distributions References "],["manova.html", "22.1 MANOVA", " 22.1 MANOVA Multivariate Analysis of Variance One-way MANOVA Compare treatment means for h different populations Population 1: \\(\\mathbf{y}_{11}, \\mathbf{y}_{12}, \\dots, \\mathbf{y}_{1n_1} \\sim idd N_p (\\mathbf{\\mu}_1, \\mathbf{\\Sigma})\\) \\(\\vdots\\) Population h: \\(\\mathbf{y}_{h1}, \\mathbf{y}_{h2}, \\dots, \\mathbf{y}_{hn_h} \\sim idd N_p (\\mathbf{\\mu}_h, \\mathbf{\\Sigma})\\) Assumptions Independent random samples from \\(h\\) different populations Common covariance matrices Each population is multivariate normal Calculate the summary statistics \\(\\mathbf{\\bar{y}}_i, \\mathbf{S}\\) and the pooled estimate of the covariance matrix \\(\\mathbf{S}\\) Similar to the univariate one-way ANVOA, we can use the effects model formulation \\(\\mathbf{\\mu}_i = \\mathbf{\\mu} + \\mathbf{\\tau}_i\\), where \\(\\mathbf{\\mu}_i\\) is the population mean for population i \\(\\mathbf{\\mu}\\) is the overall mean effect \\(\\mathbf{\\tau}_i\\) is the treatment effect of the i-th treatment. For the one-way model: \\(\\mathbf{y}_{ij} = \\mu + \\tau_i + \\epsilon_{ij}\\) for \\(i = 1,..,h; j = 1,..., n_i\\) and \\(\\epsilon_{ij} \\sim N_p(\\mathbf{0, \\Sigma})\\) However, the above model is over-parameterized (i.e., infinite number of ways to define \\(\\mathbf{\\mu}\\) and the \\(\\mathbf{\\tau}_i\\)’s such that they add up to \\(\\mu_i\\). Thus we can constrain by having \\[ \\sum_{i=1}^h n_i \\tau_i = 0 \\] or \\[ \\mathbf{\\tau}_h = 0 \\] The observational equivalent of the effects model is \\[ \\begin{aligned} \\mathbf{y}_{ij} &amp;= \\mathbf{\\bar{y}} + (\\mathbf{\\bar{y}}_i - \\mathbf{\\bar{y}}) + (\\mathbf{y}_{ij} - \\mathbf{\\bar{y}}_i) \\\\ &amp;= \\text{overall sample mean} + \\text{treatement effect} + \\text{residual} \\text{ (under univariate ANOVA)} \\end{aligned} \\] After manipulation \\[ \\sum_{i = 1}^h \\sum_{j = 1}^{n_i} (\\mathbf{\\bar{y}}_{ij} - \\mathbf{\\bar{y}})(\\mathbf{\\bar{y}}_{ij} - \\mathbf{\\bar{y}})&#39; = \\sum_{i = 1}^h n_i (\\mathbf{\\bar{y}}_i - \\mathbf{\\bar{y}})(\\mathbf{\\bar{y}}_i - \\mathbf{\\bar{y}})&#39; + \\sum_{i=1}^h \\sum_{j = 1}^{n_i} (\\mathbf{\\bar{y}}_{ij} - \\mathbf{\\bar{y}})(\\mathbf{\\bar{y}}_{ij} - \\mathbf{\\bar{y}}_i)&#39; \\] LHS = Total corrected sums of squares and cross products (SSCP) matrix RHS = 1st term = Treatment (or between subjects) sum of squares and cross product matrix (denoted H;B) 2nd term = residual (or within subject) SSCP matrix denoted (E;W) Note: \\[ \\mathbf{E} = (n_1 - 1)\\mathbf{S}_1 + ... + (n_h -1) \\mathbf{S}_h = (n-h) \\mathbf{S} \\] MANOVA table MONOVA table Source SSCP df Treatment \\(\\mathbf{H}\\) \\(h -1\\) Residual (error) \\(\\mathbf{E}\\) \\(\\sum_{i= 1}^h n_i - h\\) Total Corrected \\(\\mathbf{H + E}\\) \\(\\sum_{i=1}^h n_i -1\\) \\[ H_0: \\tau_1 = \\tau_2 = \\dots = \\tau_h = \\mathbf{0} \\] We consider the relative “sizes” of \\(\\mathbf{E}\\) and \\(\\mathbf{H+E}\\) Wilk’s Lambda Define Wilk’s Lambda \\[ \\Lambda^* = \\frac{|\\mathbf{E}|}{|\\mathbf{H+E}|} \\] Properties: Wilk’s Lambda is equivalent to the F-statistic in the univariate case The exact distribution of \\(\\Lambda^*\\) can be determined for especial cases. For large sample sizes, reject \\(H_0\\) if \\[ -(\\sum_{i=1}^h n_i - 1 - \\frac{p+h}{2}) \\log(\\Lambda^*) &gt; \\chi^2_{(1-\\alpha, p(h-1))} \\] 22.1.1 Testing General Hypotheses \\(h\\) different treatments with the i-th treatment applied to \\(n_i\\) subjects that are observed for \\(p\\) repeated measures. Consider this a \\(p\\) dimensional obs on a random sample from each of \\(h\\) different treatment populations. \\[ \\mathbf{y}_{ij} = \\mathbf{\\mu} + \\mathbf{\\tau}_i + \\mathbf{\\epsilon}_{ij} \\] for \\(i = 1,..,h\\) and \\(j = 1,..,n_i\\) Equivalently, \\[ \\mathbf{Y} = \\mathbf{XB} + \\mathbf{\\epsilon} \\] where \\(n = \\sum_{i = 1}^h n_i\\) and with restriction \\(\\mathbf{\\tau}_h = 0\\) \\[ \\mathbf{Y}_{(n \\times p)} = \\left[ \\begin{array} {c} \\mathbf{y}_{11}&#39; \\\\ \\vdots \\\\ \\mathbf{y}_{1n_1}&#39; \\\\ \\vdots \\\\ \\mathbf{y}_{hn_h}&#39; \\end{array} \\right], \\mathbf{B}_{(h \\times p)} = \\left[ \\begin{array} {c} \\mathbf{\\mu}&#39; \\\\ \\mathbf{\\tau}_1&#39; \\\\ \\vdots \\\\ \\mathbf{\\tau}_{h-1}&#39; \\end{array} \\right], \\mathbf{\\epsilon}_{(n \\times p)} = \\left[ \\begin{array} {c} \\epsilon_{11}&#39; \\\\ \\vdots \\\\ \\epsilon_{1n_1}&#39; \\\\ \\vdots \\\\ \\epsilon_{hn_h}&#39; \\end{array} \\right] \\] \\[ \\mathbf{X}_{(n \\times h)} = \\left[ \\begin{array} {ccccc} 1 &amp; 1 &amp; 0 &amp; \\ldots &amp; 0 \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; &amp; \\vdots \\\\ 1 &amp; 1 &amp; 0 &amp; \\ldots &amp; 0 \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ldots &amp; \\vdots \\\\ 1 &amp; 0 &amp; 0 &amp; \\ldots &amp; 0 \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; &amp; \\vdots \\\\ 1 &amp; 0 &amp; 0 &amp; \\ldots &amp; 0 \\end{array} \\right] \\] Estimation \\[ \\mathbf{\\hat{B}} = (\\mathbf{X&#39;X})^{-1} \\mathbf{X&#39;Y} \\] Rows of \\(\\mathbf{Y}\\) are independent (i.e., \\(var(\\mathbf{Y}) = \\mathbf{I}_n \\otimes \\mathbf{\\Sigma}\\) , an \\(np \\times np\\) matrix, where \\(\\otimes\\) is the Kronecker product). \\[ \\begin{aligned} &amp;H_0: \\mathbf{LBM} = 0 \\\\ &amp;H_a: \\mathbf{LBM} \\neq 0 \\end{aligned} \\] where \\(\\mathbf{L}\\) is a \\(g \\times h\\) matrix of full row rank (\\(g \\le h\\)) = comparisons across groups \\(\\mathbf{M}\\) is a \\(p \\times u\\) matrix of full column rank (\\(u \\le p\\)) = comparisons across traits The general treatment corrected sums of squares and cross product is \\[ \\mathbf{H} = \\mathbf{M&#39;Y&#39;X(X&#39;X)^{-1}L&#39;[L(X&#39;X)^{-1}L&#39;]^{-1}L(X&#39;X)^{-1}X&#39;YM} \\] or for the null hypothesis \\(H_0: \\mathbf{LBM} = \\mathbf{D}\\) \\[ \\mathbf{H} = (\\mathbf{\\hat{LBM}} - \\mathbf{D})&#39;[\\mathbf{X(X&#39;X)^{-1}L}]^{-1}(\\mathbf{\\hat{LBM}} - \\mathbf{D}) \\] The general matrix of residual sums of squares and cross product \\[ \\mathbf{E} = \\mathbf{M&#39;Y&#39;[I-X(X&#39;X)^{-1}X&#39;]YM} = \\mathbf{M&#39;[Y&#39;Y - \\hat{B}&#39;(X&#39;X)^{-1}\\hat{B}]M} \\] We can compute the following statistic eigenvalues of \\(\\mathbf{HE}^{-1}\\) Wilk’s Criterion: \\(\\Lambda^* = \\frac{|\\mathbf{E}|}{|\\mathbf{H} + \\mathbf{E}|}\\) . The df depend on the rank of \\(\\mathbf{L}, \\mathbf{M}, \\mathbf{X}\\) Lawley-Hotelling Trace: \\(U = tr(\\mathbf{HE}^{-1})\\) Pillai Trace: \\(V = tr(\\mathbf{H}(\\mathbf{H}+ \\mathbf{E}^{-1})\\) Roy’s Maximum Root: largest eigenvalue of \\(\\mathbf{HE}^{-1}\\) If \\(H_0\\) is true and n is large, \\(-(n-1- \\frac{p+h}{2})\\ln \\Lambda^* \\sim \\chi^2_{p(h-1)}\\). Some special values of p and h can give exact F-dist under \\(H_0\\) # One-way MANOVA library(car) library(emmeans) library(profileR) library(tidyverse) ## Read in the data gpagmat &lt;- read.table(&quot;images/gpagmat.dat&quot;) ## Change the variable names names(gpagmat) &lt;- c(&quot;y1&quot;, &quot;y2&quot;, &quot;admit&quot;) ## Check the structure str(gpagmat) #&gt; &#39;data.frame&#39;: 85 obs. of 3 variables: #&gt; $ y1 : num 2.96 3.14 3.22 3.29 3.69 3.46 3.03 3.19 3.63 3.59 ... #&gt; $ y2 : int 596 473 482 527 505 693 626 663 447 588 ... #&gt; $ admit: int 1 1 1 1 1 1 1 1 1 1 ... ## Plot the data gg &lt;- ggplot(gpagmat, aes(x = y1, y = y2)) + geom_text(aes(label = admit, col = as.character(admit))) + scale_color_discrete(name = &quot;Admission&quot;, labels = c(&quot;Admit&quot;, &quot;Do not admit&quot;, &quot;Borderline&quot;)) + scale_x_continuous(name = &quot;GPA&quot;) + scale_y_continuous(name = &quot;GMAT&quot;) ## Fit one-way MANOVA oneway_fit &lt;- manova(cbind(y1, y2) ~ admit, data = gpagmat) summary(oneway_fit, test = &quot;Wilks&quot;) #&gt; Df Wilks approx F num Df den Df Pr(&gt;F) #&gt; admit 1 0.6126 25.927 2 82 1.881e-09 *** #&gt; Residuals 83 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 reject the null of equal multivariate mean vectors between the three admmission groups # Repeated Measures MANOVA ## Create data frame stress &lt;- data.frame( subject = 1:8, begin = c(3, 2, 5, 6, 1, 5, 1, 5), middle = c(3, 4, 3, 7, 4, 7, 1, 2), final = c(6, 7, 4, 7, 6, 7, 3, 5) ) If independent = time with 3 levels -&gt; univariate ANOVA (require sphericity assumption (i.e., the variances for all differences are equal)) If each level of independent time as a separate variable -&gt; MANOVA (does not require sphericity assumption) ## MANOVA stress_mod &lt;- lm(cbind(begin, middle, final) ~ 1, data = stress) idata &lt;- data.frame(time = factor( c(&quot;begin&quot;, &quot;middle&quot;, &quot;final&quot;), levels = c(&quot;begin&quot;, &quot;middle&quot;, &quot;final&quot;) )) repeat_fit &lt;- Anova( stress_mod, idata = idata, idesign = ~ time, icontrasts = &quot;contr.poly&quot; ) summary(repeat_fit) #&gt; #&gt; Type III Repeated Measures MANOVA Tests: #&gt; #&gt; ------------------------------------------ #&gt; #&gt; Term: (Intercept) #&gt; #&gt; Response transformation matrix: #&gt; (Intercept) #&gt; begin 1 #&gt; middle 1 #&gt; final 1 #&gt; #&gt; Sum of squares and products for the hypothesis: #&gt; (Intercept) #&gt; (Intercept) 1352 #&gt; #&gt; Multivariate Tests: (Intercept) #&gt; Df test stat approx F num Df den Df Pr(&gt;F) #&gt; Pillai 1 0.896552 60.66667 1 7 0.00010808 *** #&gt; Wilks 1 0.103448 60.66667 1 7 0.00010808 *** #&gt; Hotelling-Lawley 1 8.666667 60.66667 1 7 0.00010808 *** #&gt; Roy 1 8.666667 60.66667 1 7 0.00010808 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; ------------------------------------------ #&gt; #&gt; Term: time #&gt; #&gt; Response transformation matrix: #&gt; time.L time.Q #&gt; begin -7.071068e-01 0.4082483 #&gt; middle -7.850462e-17 -0.8164966 #&gt; final 7.071068e-01 0.4082483 #&gt; #&gt; Sum of squares and products for the hypothesis: #&gt; time.L time.Q #&gt; time.L 18.062500 6.747781 #&gt; time.Q 6.747781 2.520833 #&gt; #&gt; Multivariate Tests: time #&gt; Df test stat approx F num Df den Df Pr(&gt;F) #&gt; Pillai 1 0.7080717 7.276498 2 6 0.024879 * #&gt; Wilks 1 0.2919283 7.276498 2 6 0.024879 * #&gt; Hotelling-Lawley 1 2.4254992 7.276498 2 6 0.024879 * #&gt; Roy 1 2.4254992 7.276498 2 6 0.024879 * #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Univariate Type III Repeated-Measures ANOVA Assuming Sphericity #&gt; #&gt; Sum Sq num Df Error SS den Df F value Pr(&gt;F) #&gt; (Intercept) 450.67 1 52.00 7 60.6667 0.0001081 *** #&gt; time 20.58 2 24.75 14 5.8215 0.0144578 * #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; #&gt; Mauchly Tests for Sphericity #&gt; #&gt; Test statistic p-value #&gt; time 0.7085 0.35565 #&gt; #&gt; #&gt; Greenhouse-Geisser and Huynh-Feldt Corrections #&gt; for Departure from Sphericity #&gt; #&gt; GG eps Pr(&gt;F[GG]) #&gt; time 0.77429 0.02439 * #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; HF eps Pr(&gt;F[HF]) #&gt; time 0.9528433 0.01611634 can’t reject the null hypothesis of sphericity, hence univariate ANOVA is also appropriate.We also see linear significant time effect, but no quadratic time effect ## Polynomial contrasts # What is the reference for the marginal means? ref_grid(stress_mod, mult.name = &quot;time&quot;) #&gt; &#39;emmGrid&#39; object with variables: #&gt; 1 = 1 #&gt; time = multivariate response levels: begin, middle, final # marginal means for the levels of time contr_means &lt;- emmeans(stress_mod, ~ time, mult.name = &quot;time&quot;) contrast(contr_means, method = &quot;poly&quot;) #&gt; contrast estimate SE df t.ratio p.value #&gt; linear 2.12 0.766 7 2.773 0.0276 #&gt; quadratic 1.38 0.944 7 1.457 0.1885 # MANOVA ## Read in Data heart &lt;- read.table(&quot;images/heart.dat&quot;) names(heart) &lt;- c(&quot;drug&quot;, &quot;y1&quot;, &quot;y2&quot;, &quot;y3&quot;, &quot;y4&quot;) ## Create a subject ID nested within drug heart &lt;- heart %&gt;% group_by(drug) %&gt;% mutate(subject = row_number()) %&gt;% ungroup() str(heart) #&gt; tibble [24 × 6] (S3: tbl_df/tbl/data.frame) #&gt; $ drug : chr [1:24] &quot;ax23&quot; &quot;ax23&quot; &quot;ax23&quot; &quot;ax23&quot; ... #&gt; $ y1 : int [1:24] 72 78 71 72 66 74 62 69 85 82 ... #&gt; $ y2 : int [1:24] 86 83 82 83 79 83 73 75 86 86 ... #&gt; $ y3 : int [1:24] 81 88 81 83 77 84 78 76 83 80 ... #&gt; $ y4 : int [1:24] 77 82 75 69 66 77 70 70 80 84 ... #&gt; $ subject: int [1:24] 1 2 3 4 5 6 7 8 1 2 ... ## Create means summary for profile plot, # pivot longer for plotting with ggplot heart_means &lt;- heart %&gt;% group_by(drug) %&gt;% summarize_at(vars(starts_with(&quot;y&quot;)), mean) %&gt;% ungroup() %&gt;% pivot_longer(-drug, names_to = &quot;time&quot;, values_to = &quot;mean&quot;) %&gt;% mutate(time = as.numeric(as.factor(time))) gg_profile &lt;- ggplot(heart_means, aes(x = time, y = mean)) + geom_line(aes(col = drug)) + geom_point(aes(col = drug)) + ggtitle(&quot;Profile Plot&quot;) + scale_y_continuous(name = &quot;Response&quot;) + scale_x_discrete(name = &quot;Time&quot;) gg_profile ## Fit model heart_mod &lt;- lm(cbind(y1, y2, y3, y4) ~ drug, data = heart) man_fit &lt;- car::Anova(heart_mod) summary(man_fit) #&gt; #&gt; Type II MANOVA Tests: #&gt; #&gt; Sum of squares and products for error: #&gt; y1 y2 y3 y4 #&gt; y1 641.00 601.750 535.250 426.00 #&gt; y2 601.75 823.875 615.500 534.25 #&gt; y3 535.25 615.500 655.875 555.25 #&gt; y4 426.00 534.250 555.250 674.50 #&gt; #&gt; ------------------------------------------ #&gt; #&gt; Term: drug #&gt; #&gt; Sum of squares and products for the hypothesis: #&gt; y1 y2 y3 y4 #&gt; y1 567.00 335.2500 42.7500 387.0 #&gt; y2 335.25 569.0833 404.5417 367.5 #&gt; y3 42.75 404.5417 391.0833 171.0 #&gt; y4 387.00 367.5000 171.0000 316.0 #&gt; #&gt; Multivariate Tests: drug #&gt; Df test stat approx F num Df den Df Pr(&gt;F) #&gt; Pillai 2 1.283456 8.508082 8 38 1.5010e-06 *** #&gt; Wilks 2 0.079007 11.509581 8 36 6.3081e-08 *** #&gt; Hotelling-Lawley 2 7.069384 15.022441 8 34 3.9048e-09 *** #&gt; Roy 2 6.346509 30.145916 4 19 5.4493e-08 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 reject the null hypothesis of no difference in means between treatments ## Contrasts heart$drug &lt;- factor(heart$drug) L &lt;- matrix(c(0, 2, 1, -1,-1, -1), nrow = 3, byrow = T) colnames(L) &lt;- c(&quot;bww9:ctrl&quot;, &quot;ax23:rest&quot;) rownames(L) &lt;- unique(heart$drug) contrasts(heart$drug) &lt;- L contrasts(heart$drug) #&gt; bww9:ctrl ax23:rest #&gt; ax23 0 2 #&gt; bww9 1 -1 #&gt; ctrl -1 -1 # do not set contrast L if you do further analysis (e.g., Anova, lm) # do M matrix instead M &lt;- matrix(c(1, -1, 0, 0, 0, 1, -1, 0, 0, 0, 1, -1), nrow = 4) ## update model to test contrasts heart_mod2 &lt;- update(heart_mod) coef(heart_mod2) #&gt; y1 y2 y3 y4 #&gt; (Intercept) 75.00 78.9583333 77.041667 74.75 #&gt; drugbww9:ctrl 4.50 5.8125000 3.562500 4.25 #&gt; drugax23:rest -2.25 0.7708333 1.979167 -0.75 # Hypothesis test for bww9 vs control after transformation M # same as linearHypothesis(heart_mod, hypothesis.matrix = c(0,1,-1), P = M) bww9vctrl &lt;- car::linearHypothesis(heart_mod2, hypothesis.matrix = c(0, 1, 0), P = M) bww9vctrl #&gt; #&gt; Response transformation matrix: #&gt; [,1] [,2] [,3] #&gt; y1 1 0 0 #&gt; y2 -1 1 0 #&gt; y3 0 -1 1 #&gt; y4 0 0 -1 #&gt; #&gt; Sum of squares and products for the hypothesis: #&gt; [,1] [,2] [,3] #&gt; [1,] 27.5625 -47.25 14.4375 #&gt; [2,] -47.2500 81.00 -24.7500 #&gt; [3,] 14.4375 -24.75 7.5625 #&gt; #&gt; Sum of squares and products for error: #&gt; [,1] [,2] [,3] #&gt; [1,] 261.375 -141.875 28.000 #&gt; [2,] -141.875 248.750 -19.375 #&gt; [3,] 28.000 -19.375 219.875 #&gt; #&gt; Multivariate Tests: #&gt; Df test stat approx F num Df den Df Pr(&gt;F) #&gt; Pillai 1 0.2564306 2.184141 3 19 0.1233 #&gt; Wilks 1 0.7435694 2.184141 3 19 0.1233 #&gt; Hotelling-Lawley 1 0.3448644 2.184141 3 19 0.1233 #&gt; Roy 1 0.3448644 2.184141 3 19 0.1233 bww9vctrl &lt;- car::linearHypothesis(heart_mod, hypothesis.matrix = c(0, 1, -1), P = M) bww9vctrl #&gt; #&gt; Response transformation matrix: #&gt; [,1] [,2] [,3] #&gt; y1 1 0 0 #&gt; y2 -1 1 0 #&gt; y3 0 -1 1 #&gt; y4 0 0 -1 #&gt; #&gt; Sum of squares and products for the hypothesis: #&gt; [,1] [,2] [,3] #&gt; [1,] 27.5625 -47.25 14.4375 #&gt; [2,] -47.2500 81.00 -24.7500 #&gt; [3,] 14.4375 -24.75 7.5625 #&gt; #&gt; Sum of squares and products for error: #&gt; [,1] [,2] [,3] #&gt; [1,] 261.375 -141.875 28.000 #&gt; [2,] -141.875 248.750 -19.375 #&gt; [3,] 28.000 -19.375 219.875 #&gt; #&gt; Multivariate Tests: #&gt; Df test stat approx F num Df den Df Pr(&gt;F) #&gt; Pillai 1 0.2564306 2.184141 3 19 0.1233 #&gt; Wilks 1 0.7435694 2.184141 3 19 0.1233 #&gt; Hotelling-Lawley 1 0.3448644 2.184141 3 19 0.1233 #&gt; Roy 1 0.3448644 2.184141 3 19 0.1233 there is no significant difference in means between the control and bww9 drug # Hypothesis test for ax23 vs rest after transformation M axx23vrest &lt;- car::linearHypothesis(heart_mod2, hypothesis.matrix = c(0, 0, 1), P = M) axx23vrest #&gt; #&gt; Response transformation matrix: #&gt; [,1] [,2] [,3] #&gt; y1 1 0 0 #&gt; y2 -1 1 0 #&gt; y3 0 -1 1 #&gt; y4 0 0 -1 #&gt; #&gt; Sum of squares and products for the hypothesis: #&gt; [,1] [,2] [,3] #&gt; [1,] 438.0208 175.20833 -395.7292 #&gt; [2,] 175.2083 70.08333 -158.2917 #&gt; [3,] -395.7292 -158.29167 357.5208 #&gt; #&gt; Sum of squares and products for error: #&gt; [,1] [,2] [,3] #&gt; [1,] 261.375 -141.875 28.000 #&gt; [2,] -141.875 248.750 -19.375 #&gt; [3,] 28.000 -19.375 219.875 #&gt; #&gt; Multivariate Tests: #&gt; Df test stat approx F num Df den Df Pr(&gt;F) #&gt; Pillai 1 0.855364 37.45483 3 19 3.5484e-08 *** #&gt; Wilks 1 0.144636 37.45483 3 19 3.5484e-08 *** #&gt; Hotelling-Lawley 1 5.913921 37.45483 3 19 3.5484e-08 *** #&gt; Roy 1 5.913921 37.45483 3 19 3.5484e-08 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 axx23vrest &lt;- car::linearHypothesis(heart_mod, hypothesis.matrix = c(2, -1, 1), P = M) axx23vrest #&gt; #&gt; Response transformation matrix: #&gt; [,1] [,2] [,3] #&gt; y1 1 0 0 #&gt; y2 -1 1 0 #&gt; y3 0 -1 1 #&gt; y4 0 0 -1 #&gt; #&gt; Sum of squares and products for the hypothesis: #&gt; [,1] [,2] [,3] #&gt; [1,] 402.5208 127.41667 -390.9375 #&gt; [2,] 127.4167 40.33333 -123.7500 #&gt; [3,] -390.9375 -123.75000 379.6875 #&gt; #&gt; Sum of squares and products for error: #&gt; [,1] [,2] [,3] #&gt; [1,] 261.375 -141.875 28.000 #&gt; [2,] -141.875 248.750 -19.375 #&gt; [3,] 28.000 -19.375 219.875 #&gt; #&gt; Multivariate Tests: #&gt; Df test stat approx F num Df den Df Pr(&gt;F) #&gt; Pillai 1 0.842450 33.86563 3 19 7.9422e-08 *** #&gt; Wilks 1 0.157550 33.86563 3 19 7.9422e-08 *** #&gt; Hotelling-Lawley 1 5.347205 33.86563 3 19 7.9422e-08 *** #&gt; Roy 1 5.347205 33.86563 3 19 7.9422e-08 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 there is a significant difference in means between ax23 drug treatment and the rest of the treatments 22.1.2 Profile Analysis Examine similarities between the treatment effects (between subjects), which is useful for longitudinal analysis. Null is that all treatments have the same average effect. \\[ H_0: \\mu_1 = \\mu_2 = \\dots = \\mu_h \\] Equivalently, \\[ H_0: \\tau_1 = \\tau_2 = \\dots = \\tau_h \\] The exact nature of the similarities and differences between the treatments can be examined under this analysis. Sequential steps in profile analysis: Are the profiles parallel? (i.e., is there no interaction between treatment and time) Are the profiles coincidental? (i.e., are the profiles identical?) Are the profiles horizontal? (i.e., are there no differences between any time points?) If we reject the null hypothesis that the profiles are parallel, we can test Are there differences among groups within some subset of the total time points? Are there differences among time points in a particular group (or groups)? Are there differences within some subset of the total time points in a particular group (or groups)? Example 4 times (p = 4) 3 treatments (h=3) 22.1.2.1 Parallel Profile Are the profiles for each population identical expect for a mean shift? \\[ \\begin{aligned} H_0: \\mu_{11} - \\mu_{21} - \\mu_{12} - \\mu_{22} = &amp;\\dots = \\mu_{1t} - \\mu_{2t} \\\\ \\mu_{11} - \\mu_{31} - \\mu_{12} - \\mu_{32} = &amp;\\dots = \\mu_{1t} - \\mu_{3t} \\\\ &amp;\\dots \\end{aligned} \\] for \\(h-1\\) equations Equivalently, \\[ H_0: \\mathbf{LBM = 0} \\] \\[ \\mathbf{LBM} = \\left[ \\begin{array} {ccc} 1 &amp; -1 &amp; 0 \\\\ 1 &amp; 0 &amp; -1 \\end{array} \\right] \\left[ \\begin{array} {ccc} \\mu_{11} &amp; \\dots &amp; \\mu_{14} \\\\ \\mu_{21} &amp; \\dots &amp; \\mu_{24} \\\\ \\mu_{31} &amp; \\dots &amp; \\mu_{34} \\end{array} \\right] \\left[ \\begin{array} {ccc} 1 &amp; 1 &amp; 1 \\\\ -1 &amp; 0 &amp; 0 \\\\ 0 &amp; -1 &amp; 0 \\\\ 0 &amp; 0 &amp; -1 \\end{array} \\right] = \\mathbf{0} \\] where this is the cell means parameterization of \\(\\mathbf{B}\\) The multiplication of the first 2 matrices \\(\\mathbf{LB}\\) is \\[ \\left[ \\begin{array} {cccc} \\mu_{11} - \\mu_{21} &amp; \\mu_{12} - \\mu_{22} &amp; \\mu_{13} - \\mu_{23} &amp; \\mu_{14} - \\mu_{24}\\\\ \\mu_{11} - \\mu_{31} &amp; \\mu_{12} - \\mu_{32} &amp; \\mu_{13} - \\mu_{33} &amp; \\mu_{14} - \\mu_{34} \\end{array} \\right] \\] which is the differences in treatment means at the same time Multiplying by \\(\\mathbf{M}\\), we get the comparison across time \\[ \\left[ \\begin{array} {ccc} (\\mu_{11} - \\mu_{21}) - (\\mu_{12} - \\mu_{22}) &amp; (\\mu_{11} - \\mu_{21}) -(\\mu_{13} - \\mu_{23}) &amp; (\\mu_{11} - \\mu_{21}) - (\\mu_{14} - \\mu_{24}) \\\\ (\\mu_{11} - \\mu_{31}) - (\\mu_{12} - \\mu_{32}) &amp; (\\mu_{11} - \\mu_{31}) - (\\mu_{13} - \\mu_{33}) &amp; (\\mu_{11} - \\mu_{31}) -(\\mu_{14} - \\mu_{34}) \\end{array} \\right] \\] Alternatively, we can also use the effects parameterization \\[ \\mathbf{LBM} = \\left[ \\begin{array} {cccc} 0 &amp; 1 &amp; -1 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 &amp; -1 \\end{array} \\right] \\left[ \\begin{array} {c} \\mu&#39; \\\\ \\tau&#39;_1 \\\\ \\tau_2&#39; \\\\ \\tau_3&#39; \\end{array} \\right] \\left[ \\begin{array} {ccc} 1 &amp; 1 &amp; 1 \\\\ -1 &amp; 0 &amp; 0 \\\\ 0 &amp; -1 &amp; 0 \\\\ 0 &amp; 0 &amp; -1 \\end{array} \\right] = \\mathbf{0} \\] In both parameterizations, \\(rank(\\mathbf{L}) = h-1\\) and \\(rank(\\mathbf{M}) = p-1\\) We could also choose \\(\\mathbf{L}\\) and \\(\\mathbf{M}\\) in other forms \\[ \\mathbf{L} = \\left[ \\begin{array} {cccc} 0 &amp; 1 &amp; 0 &amp; -1 \\\\ 0 &amp; 0 &amp; 1 &amp; -1 \\end{array} \\right] \\] and \\[ \\mathbf{M} = \\left[ \\begin{array} {ccc} 1 &amp; 0 &amp; 0 \\\\ -1 &amp; 1 &amp; 0 \\\\ 0 &amp; -1 &amp; 1 \\\\ 0 &amp; 0 &amp; -1 \\end{array} \\right] \\] and still obtain the same result. 22.1.2.2 Coincidental Profiles After we have evidence that the profiles are parallel (i.e., fail to reject the parallel profile test), we can ask whether they are identical? Given profiles are parallel, then if the sums of the components of \\(\\mu_i\\) are identical for all the treatments, then the profiles are identical. \\[ H_0: \\mathbf{1&#39;}_p \\mu_1 = \\mathbf{1&#39;}_p \\mu_2 = \\dots = \\mathbf{1&#39;}_p \\mu_h \\] Equivalently, \\[ H_0: \\mathbf{LBM} = \\mathbf{0} \\] where for the cell means parameterization \\[ \\mathbf{L} = \\left[ \\begin{array} {ccc} 1 &amp; 0 &amp; -1 \\\\ 0 &amp; 1 &amp; -1 \\end{array} \\right] \\] and \\[ \\mathbf{M} = \\left[ \\begin{array} {cccc} 1 &amp; 1 &amp; 1 &amp; 1 \\end{array} \\right]&#39; \\] multiplication yields \\[ \\left[ \\begin{array} {c} (\\mu_{11} + \\mu_{12} + \\mu_{13} + \\mu_{14}) - (\\mu_{31} + \\mu_{32} + \\mu_{33} + \\mu_{34}) \\\\ (\\mu_{21} + \\mu_{22} + \\mu_{23} + \\mu_{24}) - (\\mu_{31} + \\mu_{32} + \\mu_{33} + \\mu_{34}) \\end{array} \\right] = \\left[ \\begin{array} {c} 0 \\\\ 0 \\end{array} \\right] \\] Different choices of \\(\\mathbf{L}\\) and \\(\\mathbf{M}\\) can yield the same result 22.1.2.3 Horizontal Profiles Given that we can’t reject the null hypothesis that all \\(h\\) profiles are the same, we can ask whether all of the elements of the common profile equal? (i.e., horizontal) \\[ H_0: \\mathbf{LBM} = \\mathbf{0} \\] \\[ \\mathbf{L} = \\left[ \\begin{array} {ccc} 1 &amp; 0 &amp; 0 \\end{array} \\right] \\] and \\[ \\mathbf{M} = \\left[ \\begin{array} {ccc} 1 &amp; 0 &amp; 0 \\\\ -1 &amp; 1 &amp; 0 \\\\ 0 &amp; -1 &amp; 1 \\\\ 0 &amp; 0 &amp; -1 \\end{array} \\right] \\] hence, \\[ \\left[ \\begin{array} {ccc} (\\mu_{11} - \\mu_{12}) &amp; (\\mu_{12} - \\mu_{13}) &amp; (\\mu_{13} + \\mu_{14}) \\end{array} \\right] = \\left[ \\begin{array} {ccc} 0 &amp; 0 &amp; 0 \\end{array} \\right] \\] Note: If we fail to reject all 3 hypotheses, then we fail to reject the null hypotheses of both no difference between treatments and no differences between traits. Test Equivalent test for Parallel profile Interaction Coincidental profile main effect of between-subjects factor Horizontal profile main effect of repeated measures factor profile_fit &lt;- pbg( data = as.matrix(heart[, 2:5]), group = as.matrix(heart[, 1]), original.names = TRUE, profile.plot = FALSE ) summary(profile_fit) #&gt; Call: #&gt; pbg(data = as.matrix(heart[, 2:5]), group = as.matrix(heart[, #&gt; 1]), original.names = TRUE, profile.plot = FALSE) #&gt; #&gt; Hypothesis Tests: #&gt; $`Ho: Profiles are parallel` #&gt; Multivariate.Test Statistic Approx.F num.df den.df p.value #&gt; 1 Wilks 0.1102861 12.737599 6 38 7.891497e-08 #&gt; 2 Pillai 1.0891707 7.972007 6 40 1.092397e-05 #&gt; 3 Hotelling-Lawley 6.2587852 18.776356 6 36 9.258571e-10 #&gt; 4 Roy 5.9550887 39.700592 3 20 1.302458e-08 #&gt; #&gt; $`Ho: Profiles have equal levels` #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; group 2 328.7 164.35 5.918 0.00915 ** #&gt; Residuals 21 583.2 27.77 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; $`Ho: Profiles are flat` #&gt; F df1 df2 p-value #&gt; 1 14.30928 3 19 4.096803e-05 # reject null hypothesis of parallel profiles # reject the null hypothesis of coincidental profiles # reject the null hypothesis that the profiles are flat 22.1.3 Summary "],["principal-components.html", "22.2 Principal Components", " 22.2 Principal Components Unsupervised learning find important features reduce the dimensions of the data set “decorrelate” multivariate vectors that have dependence. uses eigenvector/eigvenvalue decomposition of covariance (correlation) matrices. According to the “spectral decomposition theorem”, if \\(\\mathbf{\\Sigma}_{p \\times p}\\) i s a positive semi-definite, symmetric, real matrix, then there exists an orthogonal matrix \\(\\mathbf{A}\\) such that \\(\\mathbf{A&#39;\\Sigma A} = \\Lambda\\) where \\(\\Lambda\\) is a diagonal matrix containing the eigenvalues \\(\\mathbf{\\Sigma}\\) \\[ \\mathbf{\\Lambda} = \\left( \\begin{array} {cccc} \\lambda_1 &amp; 0 &amp; \\ldots &amp; 0 \\\\ 0 &amp; \\lambda_2 &amp; \\ldots &amp; 0 \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ 0 &amp; 0 &amp; \\ldots &amp; \\lambda_p \\end{array} \\right) \\] \\[ \\mathbf{A} = \\left( \\begin{array} {cccc} \\mathbf{a}_1 &amp; \\mathbf{a}_2 &amp; \\ldots &amp; \\mathbf{a}_p \\end{array} \\right) \\] the i-th column of \\(\\mathbf{A}\\) , \\(\\mathbf{a}_i\\), is the i-th \\(p \\times 1\\) eigenvector of \\(\\mathbf{\\Sigma}\\) that corresponds to the eigenvalue, \\(\\lambda_i\\) , where \\(\\lambda_1 \\ge \\lambda_2 \\ge \\ldots \\ge \\lambda_p\\) . Alternatively, express in matrix decomposition: \\[ \\mathbf{\\Sigma} = \\mathbf{A \\Lambda A}&#39; \\] \\[ \\mathbf{\\Sigma} = \\mathbf{A} \\left( \\begin{array} {cccc} \\lambda_1 &amp; 0 &amp; \\ldots &amp; 0 \\\\ 0 &amp; \\lambda_2 &amp; \\ldots &amp; 0 \\\\ \\vdots &amp; \\vdots&amp; \\ddots &amp; \\vdots \\\\ 0 &amp; 0 &amp; \\ldots &amp; \\lambda_p \\end{array} \\right) \\mathbf{A}&#39; = \\sum_{i=1}^p \\lambda_i \\mathbf{a}_i \\mathbf{a}_i&#39; \\] where the outer product \\(\\mathbf{a}_i \\mathbf{a}_i&#39;\\) is a \\(p \\times p\\) matrix of rank 1. For example, \\(\\mathbf{x} \\sim N_2(\\mathbf{\\mu}, \\mathbf{\\Sigma})\\) \\[ \\mathbf{\\mu} = \\left( \\begin{array} {c} 5 \\\\ 12 \\end{array} \\right); \\mathbf{\\Sigma} = \\left( \\begin{array} {cc} 4 &amp; 1 \\\\ 1 &amp; 2 \\end{array} \\right) \\] library(MASS) mu = as.matrix(c(5, 12)) Sigma = matrix(c(4, 1, 1, 2), nrow = 2, byrow = T) sim &lt;- mvrnorm(n = 1000, mu = mu, Sigma = Sigma) plot(sim[, 1], sim[, 2]) Here, \\[ \\mathbf{A} = \\left( \\begin{array} {cc} 0.9239 &amp; -0.3827 \\\\ 0.3827 &amp; 0.9239 \\\\ \\end{array} \\right) \\] Columns of \\(\\mathbf{A}\\) are the eigenvectors for the decomposition Under matrix multiplication (\\(\\mathbf{A&#39;\\Sigma A}\\) or \\(\\mathbf{A&#39;A}\\) ), the off-diagonal elements equal to 0 Multiplying data by this matrix (i.e., projecting the data onto the orthogonal axes); the distribution of the resulting data (i.e., “scores”) is \\[ N_2 (\\mathbf{A&#39;\\mu,A&#39;\\Sigma A}) = N_2 (\\mathbf{A&#39;\\mu, \\Lambda}) \\] Equivalently, \\[ \\mathbf{y} = \\mathbf{A&#39;x} \\sim N \\left[ \\left( \\begin{array} {c} 9.2119 \\\\ 9.1733 \\end{array} \\right), \\left( \\begin{array} {cc} 4.4144 &amp; 0 \\\\ 0 &amp; 1.5859 \\end{array} \\right) \\right] \\] A_matrix = matrix(c(0.9239, -0.3827, 0.3827, 0.9239), nrow = 2, byrow = T) t(A_matrix) %*% A_matrix #&gt; [,1] [,2] #&gt; [1,] 1.000051 0.000000 #&gt; [2,] 0.000000 1.000051 sim1 &lt;- mvrnorm( n = 1000, mu = t(A_matrix) %*% mu, Sigma = t(A_matrix) %*% Sigma %*% A_matrix ) plot(sim1[, 1], sim1[, 2]) No more dependence in the data structure, plot Notes: The i-th eigenvalue is the variance of a linear combination of the elements of \\(\\mathbf{x}\\) ; \\(var(y_i) = var(\\mathbf{a&#39;_i x}) = \\lambda_i\\) The values on the transformed set of axes (i.e., the \\(y_i\\)’s) are called the scores. These are the orthogonal projections of the data onto the “new principal component axes Variances of \\(y_1\\) are greater than those for any other possible projection Covariance matrix decomposition and projection onto orthogonal axes = PCA 22.2.1 Population Principal Components \\(p \\times 1\\) vectors \\(\\mathbf{x}_1, \\dots , \\mathbf{x}_n\\) which are iid with \\(var(\\mathbf{x}_i) = \\mathbf{\\Sigma}\\) The first PC is the linear combination \\(y_1 = \\mathbf{a}_1&#39; \\mathbf{x} = a_{11}x_1 + \\dots + a_{1p}x_p\\) with \\(\\mathbf{a}_1&#39; \\mathbf{a}_1 = 1\\) such that \\(var(y_1)\\) is the maximum of all linear combinations of \\(\\mathbf{x}\\) which have unit length The second PC is the linear combination \\(y_1 = \\mathbf{a}_2&#39; \\mathbf{x} = a_{21}x_1 + \\dots + a_{2p}x_p\\) with \\(\\mathbf{a}_2&#39; \\mathbf{a}_2 = 1\\) such that \\(var(y_1)\\) is the maximum of all linear combinations of \\(\\mathbf{x}\\) which have unit length and uncorrelated with \\(y_1\\) (i.e., \\(cov(\\mathbf{a}_1&#39; \\mathbf{x}, \\mathbf{a}&#39;_2 \\mathbf{x}) =0\\) continues for all \\(y_i\\) to \\(y_p\\) \\(\\mathbf{a}_i\\)’s are those that make up the matrix \\(\\mathbf{A}\\) in the symmetric decomposition \\(\\mathbf{A&#39;\\Sigma A} = \\mathbf{\\Lambda}\\) , where \\(var(y_1) = \\lambda_1, \\dots , var(y_p) = \\lambda_p\\) And the total variance of \\(\\mathbf{x}\\) is \\[ \\begin{aligned} var(x_1) + \\dots + var(x_p) &amp;= tr(\\Sigma) = \\lambda_1 + \\dots + \\lambda_p \\\\ &amp;= var(y_1) + \\dots + var(y_p) \\end{aligned} \\] Data Reduction To reduce the dimension of data from p (original) to k dimensions without much “loss of information”, we can use properties of the population principal components Suppose \\(\\mathbf{\\Sigma} \\approx \\sum_{i=1}^k \\lambda_i \\mathbf{a}_i \\mathbf{a}_i&#39;\\) . Even thought the true variance-covariance matrix has rank \\(p\\) , it can be be well approximate by a matrix of rank k (k &lt;p) New “traits” are linear combinations of the measured traits. We can attempt to make meaningful interpretation fo the combinations (with orthogonality constraints). The proportion of the total variance accounted for by the j-th principal component is \\[ \\frac{var(y_j)}{\\sum_{i=1}^p var(y_i)} = \\frac{\\lambda_j}{\\sum_{i=1}^p \\lambda_i} \\] The proportion of the total variation accounted for by the first k principal components is \\(\\frac{\\sum_{i=1}^k \\lambda_i}{\\sum_{i=1}^p \\lambda_i}\\) Above example , we have \\(4.4144/(4+2) = .735\\) of the total variability can be explained by the first principal component 22.2.2 Sample Principal Components Since \\(\\mathbf{\\Sigma}\\) is unknown, we use \\[ \\mathbf{S} = \\frac{1}{n-1}\\sum_{i=1}^n (\\mathbf{x}_i - \\bar{\\mathbf{x}})(\\mathbf{x}_i - \\bar{\\mathbf{x}})&#39; \\] Let \\(\\hat{\\lambda}_1 \\ge \\hat{\\lambda}_2 \\ge \\dots \\ge \\hat{\\lambda}_p \\ge 0\\) be the eigenvalues of \\(\\mathbf{S}\\) and \\(\\hat{\\mathbf{a}}_1, \\hat{\\mathbf{a}}_2, \\dots, \\hat{\\mathbf{a}}_p\\) denote the eigenvectors of \\(\\mathbf{S}\\) Then, the i-th sample principal component score (or principal component or score) is \\[ \\hat{y}_{ij} = \\sum_{k=1}^p \\hat{a}_{ik}x_{kj} = \\hat{\\mathbf{a}}_i&#39;\\mathbf{x}_j \\] Properties of Sample Principal Components The estimated variance of \\(y_i = \\hat{\\mathbf{a}}_i&#39;\\mathbf{x}_j\\) is \\(\\hat{\\lambda}_i\\) The sample covariance between \\(\\hat{y}_i\\) and \\(\\hat{y}_{i&#39;}\\) is 0 when \\(i \\neq i&#39;\\) The proportion of the total sample variance accounted for by the i-th sample principal component is \\(\\frac{\\hat{\\lambda}_i}{\\sum_{k=1}^p \\hat{\\lambda}_k}\\) The estimated correlation between the \\(i\\)-th principal component score and the \\(l\\)-th attribute of \\(\\mathbf{x}\\) is \\[ r_{x_l , \\hat{y}_i} = \\frac{\\hat{a}_{il}\\sqrt{\\lambda_i}}{\\sqrt{s_{ll}}} \\] The correlation coefficient is typically used to interpret the components (i.e., if this correlation is high then it suggests that the l-th original trait is important in the i-th principle component). According to R. A. Johnson, Wichern, et al. (2002), pp.433-434, \\(r_{x_l, \\hat{y}_i}\\) only measures the univariate contribution of an individual X to a component Y without taking into account the presence of the other X’s. Hence, some prefer \\(\\hat{a}_{il}\\) coefficient to interpret the principal component. \\(r_{x_l, \\hat{y}_i} ; \\hat{a}_{il}\\) are referred to as “loadings” To use k principal components, we must calculate the scores for each data vector in the sample \\[ \\mathbf{y}_j = \\left( \\begin{array} {c} y_{1j} \\\\ y_{2j} \\\\ \\vdots \\\\ y_{kj} \\end{array} \\right) = \\left( \\begin{array} {c} \\hat{\\mathbf{a}}_1&#39; \\mathbf{x}_j \\\\ \\hat{\\mathbf{a}}_2&#39; \\mathbf{x}_j \\\\ \\vdots \\\\ \\hat{\\mathbf{a}}_k&#39; \\mathbf{x}_j \\end{array} \\right) = \\left( \\begin{array} {c} \\hat{\\mathbf{a}}_1&#39; \\\\ \\hat{\\mathbf{a}}_2&#39; \\\\ \\vdots \\\\ \\hat{\\mathbf{a}}_k&#39; \\end{array} \\right) \\mathbf{x}_j \\] Issues: Large sample theory exists for eigenvalues and eigenvectors of sample covariance matrices if inference is necessary. But we do not do inference with PCA, we only use it as exploratory or descriptive analysis. PC is not invariant to changes in scale (Exception: if all trait are rescaled by multiplying by the same constant, such as feet to inches). PCA based on the correlation matrix \\(\\mathbf{R}\\) is different than that based on the covariance matrix \\(\\mathbf{\\Sigma}\\) PCA for the correlation matrix is just rescaling each trait to have unit variance Transform \\(\\mathbf{x}\\) to \\(\\mathbf{z}\\) where \\(z_{ij} = (x_{ij} - \\bar{x}_i)/\\sqrt{s_{ii}}\\) where the denominator affects the PCA After transformation, \\(cov(\\mathbf{z}) = \\mathbf{R}\\) PCA on \\(\\mathbf{R}\\) is calculated in the same way as that on \\(\\mathbf{S}\\) (where \\(\\hat{\\lambda}{}_1 + \\dots + \\hat{\\lambda}{}_p = p\\) ) The use of \\(\\mathbf{R}, \\mathbf{S}\\) depends on the purpose of PCA. If the scale of the observations if different, covariance matrix is more preferable. but if they are dramatically different, analysis can still be dominated by the large variance traits. How many PCs to use can be guided by Scree Graphs: plot the eigenvalues against their indices. Look for the “elbow” where the steep decline in the graph suddenly flattens out; or big gaps. minimum Percent of total variation (e.g., choose enough components to have 50% or 90%). can be used for interpretations. Kaiser’s rule: use only those PC with eigenvalues larger than 1 (applied to PCA on the correlation matrix) - ad hoc Compare to the eigenvalue scree plot of data to the scree plot when the data are randomized. 22.2.3 Application PCA on the covariance matrix is usually not preferred due to the fact that PCA is not invariant to changes in scale. Hence, PCA on the correlation matrix is more preferred This also addresses the problem of multicollinearity The eigvenvectors may differ by a multiplication of -1 for different implementation, but same interpretation. library(tidyverse) ## Read in and check data stock &lt;- read.table(&quot;images/stock.dat&quot;) names(stock) &lt;- c(&quot;allied&quot;, &quot;dupont&quot;, &quot;carbide&quot;, &quot;exxon&quot;, &quot;texaco&quot;) str(stock) #&gt; &#39;data.frame&#39;: 100 obs. of 5 variables: #&gt; $ allied : num 0 0.027 0.1228 0.057 0.0637 ... #&gt; $ dupont : num 0 -0.04485 0.06077 0.02995 -0.00379 ... #&gt; $ carbide: num 0 -0.00303 0.08815 0.06681 -0.03979 ... #&gt; $ exxon : num 0.0395 -0.0145 0.0862 0.0135 -0.0186 ... #&gt; $ texaco : num 0 0.0435 0.0781 0.0195 -0.0242 ... ## Covariance matrix of data cov(stock) #&gt; allied dupont carbide exxon texaco #&gt; allied 0.0016299269 0.0008166676 0.0008100713 0.0004422405 0.0005139715 #&gt; dupont 0.0008166676 0.0012293759 0.0008276330 0.0003868550 0.0003109431 #&gt; carbide 0.0008100713 0.0008276330 0.0015560763 0.0004872816 0.0004624767 #&gt; exxon 0.0004422405 0.0003868550 0.0004872816 0.0008023323 0.0004084734 #&gt; texaco 0.0005139715 0.0003109431 0.0004624767 0.0004084734 0.0007587370 ## Correlation matrix of data cor(stock) #&gt; allied dupont carbide exxon texaco #&gt; allied 1.0000000 0.5769244 0.5086555 0.3867206 0.4621781 #&gt; dupont 0.5769244 1.0000000 0.5983841 0.3895191 0.3219534 #&gt; carbide 0.5086555 0.5983841 1.0000000 0.4361014 0.4256266 #&gt; exxon 0.3867206 0.3895191 0.4361014 1.0000000 0.5235293 #&gt; texaco 0.4621781 0.3219534 0.4256266 0.5235293 1.0000000 # cov(scale(stock)) # give the same result ## PCA with covariance cov_pca &lt;- prcomp(stock) # uses singular value decomposition for calculation and an N -1 divisor # alternatively, princomp can do PCA via spectral decomposition, # but it has worse numerical accuracy # eigen values cov_results &lt;- data.frame(eigen_values = cov_pca$sdev ^ 2) cov_results %&gt;% mutate(proportion = eigen_values / sum(eigen_values), cumulative = cumsum(proportion)) #&gt; eigen_values proportion cumulative #&gt; 1 0.0035953867 0.60159252 0.6015925 #&gt; 2 0.0007921798 0.13255027 0.7341428 #&gt; 3 0.0007364426 0.12322412 0.8573669 #&gt; 4 0.0005086686 0.08511218 0.9424791 #&gt; 5 0.0003437707 0.05752091 1.0000000 # first 2 PCs account for 73% variance in the data # eigen vectors cov_pca$rotation # prcomp calls rotation #&gt; PC1 PC2 PC3 PC4 PC5 #&gt; allied 0.5605914 0.73884565 -0.1260222 0.28373183 -0.20846832 #&gt; dupont 0.4698673 -0.09286987 -0.4675066 -0.68793190 0.28069055 #&gt; carbide 0.5473322 -0.65401929 -0.1140581 0.50045312 -0.09603973 #&gt; exxon 0.2908932 -0.11267353 0.6099196 -0.43808002 -0.58203935 #&gt; texaco 0.2842017 0.07103332 0.6168831 0.06227778 0.72784638 # princomp calls loadings. # first PC = overall average # second PC compares Allied to Carbide ## PCA with correlation #same as scale(stock) %&gt;% prcomp cor_pca &lt;- prcomp(stock, scale = T) # eigen values cor_results &lt;- data.frame(eigen_values = cor_pca$sdev ^ 2) cor_results %&gt;% mutate(proportion = eigen_values / sum(eigen_values), cumulative = cumsum(proportion)) #&gt; eigen_values proportion cumulative #&gt; 1 2.8564869 0.57129738 0.5712974 #&gt; 2 0.8091185 0.16182370 0.7331211 #&gt; 3 0.5400440 0.10800880 0.8411299 #&gt; 4 0.4513468 0.09026936 0.9313992 #&gt; 5 0.3430038 0.06860076 1.0000000 # first egiven values corresponds to less variance # than PCA based on the covariance matrix # eigen vectors cor_pca$rotation #&gt; PC1 PC2 PC3 PC4 PC5 #&gt; allied 0.4635405 -0.2408499 0.6133570 -0.3813727 0.4532876 #&gt; dupont 0.4570764 -0.5090997 -0.1778996 -0.2113068 -0.6749814 #&gt; carbide 0.4699804 -0.2605774 -0.3370355 0.6640985 0.3957247 #&gt; exxon 0.4216770 0.5252647 -0.5390181 -0.4728036 0.1794482 #&gt; texaco 0.4213291 0.5822416 0.4336029 0.3812273 -0.3874672 # interpretation of PC2 is different from above: # it is a comparison of Allied, Dupont and Carbid to Exxon and Texaco Covid Example To reduce collinearity problem in this dataset, we can use principal components as regressors. load(&#39;images/MOcovid.RData&#39;) covidpca &lt;- prcomp(ndat[,-1],scale = T,center = T) covidpca$rotation[,1:2] #&gt; PC1 PC2 #&gt; X..Population.in.Rural.Areas 0.32865838 0.05090955 #&gt; Area..sq..miles. 0.12014444 -0.28579183 #&gt; Population.density..sq..miles. -0.29670124 0.28312922 #&gt; Literacy.rate -0.12517700 -0.08999542 #&gt; Families -0.25856941 0.16485752 #&gt; Area.of.farm.land..sq..miles. 0.02101106 -0.31070363 #&gt; Number.of.farms -0.03814582 -0.44809679 #&gt; Average.value.of.all.property.per.farm..dollars. -0.05410709 0.14404306 #&gt; Estimation.of.rurality.. -0.19040210 0.12089501 #&gt; Male.. 0.02182394 -0.09568768 #&gt; Number.of.Physcians.per.100.000 -0.31451606 0.13598026 #&gt; average.age 0.29414708 0.35593459 #&gt; X0.4.age.proportion -0.11431336 -0.23574057 #&gt; X20.44.age.proportion -0.32802128 -0.22718550 #&gt; X65.and.over.age.proportion 0.30585033 0.32201626 #&gt; prop..White..nonHisp 0.35627561 -0.14142646 #&gt; prop..Hispanic -0.16655381 -0.15105342 #&gt; prop..Black -0.33333359 0.24405802 # Variability of each principal component: pr.var pr.var &lt;- covidpca$sdev ^ 2 # Variance explained by each principal component: pve pve &lt;- pr.var / sum(pr.var) plot( pve, xlab = &quot;Principal Component&quot;, ylab = &quot;Proportion of Variance Explained&quot;, ylim = c(0, 0.5), type = &quot;b&quot; ) plot( cumsum(pve), xlab = &quot;Principal Component&quot;, ylab = &quot;Cumulative Proportion of Variance Explained&quot;, ylim = c(0, 1), type = &quot;b&quot; ) # the first six principe account for around 80% of the variance. #using base lm function for PC regression pcadat &lt;- data.frame(covidpca$x[, 1:6]) pcadat$y &lt;- ndat$Y pcr.man &lt;- lm(log(y) ~ ., pcadat) mean(pcr.man$residuals ^ 2) #&gt; [1] 0.03453371 #comparison to lm w/o prin comps lm.fit &lt;- lm(log(Y) ~ ., data = ndat) mean(lm.fit$residuals ^ 2) #&gt; [1] 0.02335128 MSE for the PC-based model is larger than regular regression, because models with a large degree of collinearity can still perform well. pcr function in pls can be used for fitting PC regression (it will select the optimal number of components in the model). References "],["factor-analysis.html", "22.3 Factor Analysis", " 22.3 Factor Analysis Purpose Using a few linear combinations of underlying unobservable (latent) traits, we try to describe the covariance relationship among a large number of measured traits Similar to PCA, but factor analysis is model based More details can be found on PSU stat or UMN stat Let \\(\\mathbf{y}\\) be the set of \\(p\\) measured variables \\(E(\\mathbf{y}) = \\mathbf{\\mu}\\) \\(var(\\mathbf{y}) = \\mathbf{\\Sigma}\\) We have \\[ \\begin{aligned} \\mathbf{y} - \\mathbf{\\mu} &amp;= \\mathbf{Lf} + \\epsilon \\\\ &amp;= \\left( \\begin{array} {c} l_{11}f_1 + l_{12}f_2 + \\dots + l_{tm}f_m \\\\ \\vdots \\\\ l_{p1}f_1 + l_{p2}f_2 + \\dots + l_{pm} f_m \\end{array} \\right) + \\left( \\begin{array} {c} \\epsilon_1 \\\\ \\vdots \\\\ \\epsilon_p \\end{array} \\right) \\end{aligned} \\] where \\(\\mathbf{y} - \\mathbf{\\mu}\\) = the p centered measurements \\(\\mathbf{L}\\) = \\(p \\times m\\) matrix of factor loadings \\(\\mathbf{f}\\) = unobserved common factors for the population \\(\\mathbf{\\epsilon}\\) = random errors (i.e., variation that is not accounted for by the common factors). We want \\(m\\) (the number of factors) to be much smaller than \\(p\\) (the number of measured attributes) Restrictions on the model \\(E(\\epsilon) = \\mathbf{0}\\) \\(var(\\epsilon) = \\Psi_{p \\times p} = diag( \\psi_1, \\dots, \\psi_p)\\) \\(\\mathbf{\\epsilon}, \\mathbf{f}\\) are independent Additional assumption could be \\(E(\\mathbf{f}) = \\mathbf{0}, var(\\mathbf{f}) = \\mathbf{I}_{m \\times m}\\) (known as the orthogonal factor model) , which imposes the following covariance structure on \\(\\mathbf{y}\\) \\[ \\begin{aligned} var(\\mathbf{y}) = \\mathbf{\\Sigma} &amp;= var(\\mathbf{Lf} + \\mathbf{\\epsilon}) \\\\ &amp;= var(\\mathbf{Lf}) + var(\\epsilon) \\\\ &amp;= \\mathbf{L} var(\\mathbf{f}) \\mathbf{L}&#39; + \\mathbf{\\Psi} \\\\ &amp;= \\mathbf{LIL}&#39; + \\mathbf{\\Psi} \\\\ &amp;= \\mathbf{LL}&#39; + \\mathbf{\\Psi} \\end{aligned} \\] Since \\(\\mathbf{\\Psi}\\) is diagonal, the off-diagonal elements of \\(\\mathbf{LL}&#39;\\) are \\(\\sigma_{ij}\\), the co variances in \\(\\mathbf{\\Sigma}\\), which means \\(cov(y_i, y_j) = \\sum_{k=1}^m l_{ik}l_{jk}\\) and the covariance of \\(\\mathbf{y}\\) is completely determined by the m factors ( \\(m &lt;&lt;p\\)) \\(var(y_i) = \\sum_{k=1}^m l_{ik}^2 + \\psi_i\\) where \\(\\psi_i\\) is the specific variance and the summation term is the i-th communality (i.e., portion of the variance of the i-th variable contributed by the \\(m\\) common factors (\\(h_i^2 = \\sum_{k=1}^m l_{ik}^2\\)) The factor model is only uniquely determined up to an orthogonal transformation of the factors. Let \\(\\mathbf{T}_{m \\times m}\\) be an orthogonal matrix \\(\\mathbf{TT}&#39; = \\mathbf{T&#39;T} = \\mathbf{I}\\) then \\[ \\begin{aligned} \\mathbf{y} - \\mathbf{\\mu} &amp;= \\mathbf{Lf} + \\epsilon \\\\ &amp;= \\mathbf{LTT&#39;f} + \\epsilon \\\\ &amp;= \\mathbf{L}^*(\\mathbf{T&#39;f}) + \\epsilon &amp; \\text{where } \\mathbf{L}^* = \\mathbf{LT} \\end{aligned} \\] and \\[ \\begin{aligned} \\mathbf{\\Sigma} &amp;= \\mathbf{LL}&#39; + \\mathbf{\\Psi} \\\\ &amp;= \\mathbf{LTT&#39;L} + \\mathbf{\\Psi} \\\\ &amp;= (\\mathbf{L}^*)(\\mathbf{L}^*)&#39; + \\mathbf{\\Psi} \\end{aligned} \\] Hence, any orthogonal transformation of the factors is an equally good description of the correlations among the observed traits. Let \\(\\mathbf{y} = \\mathbf{Cx}\\) , where \\(\\mathbf{C}\\) is any diagonal matrix, then \\(\\mathbf{L}_y = \\mathbf{CL}_x\\) and \\(\\mathbf{\\Psi}_y = \\mathbf{C\\Psi}_x\\mathbf{C}\\) Hence, we can see that factor analysis is also invariant to changes in scale 22.3.1 Methods of Estimation To estimate \\(\\mathbf{L}\\) Principal Component Method Principal Factor Method 22.3.1.3 22.3.1.1 Principal Component Method Spectral decomposition \\[ \\begin{aligned} \\mathbf{\\Sigma} &amp;= \\lambda_1 \\mathbf{a}_1 \\mathbf{a}_1&#39; + \\dots + \\lambda_p \\mathbf{a}_p \\mathbf{a}_p&#39; \\\\ &amp;= \\mathbf{A\\Lambda A}&#39; \\\\ &amp;= \\sum_{k=1}^m \\lambda+k \\mathbf{a}_k \\mathbf{a}_k&#39; + \\sum_{k= m+1}^p \\lambda_k \\mathbf{a}_k \\mathbf{a}_k&#39; \\\\ &amp;= \\sum_{k=1}^m l_k l_k&#39; + \\sum_{k=m+1}^p \\lambda_k \\mathbf{a}_k \\mathbf{a}_k&#39; \\end{aligned} \\] where \\(l_k = \\mathbf{a}_k \\sqrt{\\lambda_k}\\) and the second term is not diagonal in general. Assume \\[ \\psi_i = \\sigma_{ii} - \\sum_{k=1}^m l_{ik}^2 = \\sigma_{ii} - \\sum_{k=1}^m \\lambda_i a_{ik}^2 \\] then \\[ \\mathbf{\\Sigma} \\approx \\mathbf{LL}&#39; + \\mathbf{\\Psi} \\] To estimate \\(\\mathbf{L}\\) and \\(\\Psi\\) , we use the expected eigenvalues and eigenvectors from \\(\\mathbf{S}\\) or \\(\\mathbf{R}\\) The estimated factor loadings don’t change as the number of actors increases The diagonal elements of \\(\\hat{\\mathbf{L}}\\hat{\\mathbf{L}}&#39; + \\hat{\\mathbf{\\Psi}}\\) are equal to the diagonal elements of \\(\\mathbf{S}\\) and \\(\\mathbf{R}\\), but the covariances may not be exactly reproduced We select \\(m\\) so that the off-diagonal elements close to the values in \\(\\mathbf{S}\\) (or to make the off-diagonal elements of \\(\\mathbf{S} - \\hat{\\mathbf{L}} \\hat{\\mathbf{L}}&#39; + \\hat{\\mathbf{\\Psi}}\\) small) 22.3.1.2 Principal Factor Method Consider modeling the correlation matrix, \\(\\mathbf{R} = \\mathbf{L} \\mathbf{L}&#39; + \\mathbf{\\Psi}\\) . Then \\[ \\mathbf{L} \\mathbf{L}&#39; = \\mathbf{R} - \\mathbf{\\Psi} = \\left( \\begin{array} {cccc} h_1^2 &amp; r_{12} &amp; \\dots &amp; r_{1p} \\\\ r_{21} &amp; h_2^2 &amp; \\dots &amp; r_{2p} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ r_{p1} &amp; r_{p2} &amp; \\dots &amp; h_p^2 \\end{array} \\right) \\] where \\(h_i^2 = 1- \\psi_i\\) (the communality) Suppose that initial estimates are available for the communalities, \\((h_1^*)^2,(h_2^*)^2, \\dots , (h_p^*)^2\\), then we can regress each trait on all the others, and then use the \\(r^2\\) as \\(h^2\\) The estimate of \\(\\mathbf{R} - \\mathbf{\\Psi}\\) at step k is \\[ (\\mathbf{R} - \\mathbf{\\Psi})_k = \\left( \\begin{array} {cccc} (h_1^*)^2 &amp; r_{12} &amp; \\dots &amp; r_{1p} \\\\ r_{21} &amp; (h_2^*)^2 &amp; \\dots &amp; r_{2p} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ r_{p1} &amp; r_{p2} &amp; \\dots &amp; (h_p^*)^2 \\end{array} \\right) = \\mathbf{L}_k^*(\\mathbf{L}_k^*)&#39; \\] where \\[ \\mathbf{L}_k^* = (\\sqrt{\\hat{\\lambda}_1^*\\hat{\\mathbf{a}}_1^* , \\dots \\hat{\\lambda}_m^*\\hat{\\mathbf{a}}_m^*}) \\] and \\[ \\hat{\\psi}_{i,k}^* = 1 - \\sum_{j=1}^m \\hat{\\lambda}_i^* (\\hat{a}_{ij}^*)^2 \\] we used the spectral decomposition on the estimated matrix \\((\\mathbf{R}- \\mathbf{\\Psi})\\) to calculate the \\(\\hat{\\lambda}_i^* s\\) and the \\(\\mathbf{\\hat{a}}_i^* s\\) After updating the values of \\((\\hat{h}_i^*)^2 = 1 - \\hat{\\psi}_{i,k}^*\\) we will use them to form a new \\(\\mathbf{L}_{k+1}^*\\) via another spectral decomposition. Repeat the process Notes: The matrix \\((\\mathbf{R} - \\mathbf{\\Psi})_k\\) is not necessarily positive definite The principal component method is similar to principal factor if one considers the initial communalities are \\(h^2 = 1\\) if \\(m\\) is too large, some communalities may become larger than 1, causing the iterations to terminate. To combat, we can fix any communality that is greater than 1 at 1 and then continues. continue iterations regardless of the size of the communalities. However, results can be outside fo the parameter space. 22.3.1.3 Maximum Likelihood Method Since we need the likelihood function, we make the additional (critical) assumption that \\(\\mathbf{y}_j \\sim N(\\mathbf{\\mu},\\mathbf{\\Sigma})\\) for \\(j = 1,..,n\\) \\(\\mathbf{f} \\sim N(\\mathbf{0}, \\mathbf{I})\\) \\(\\epsilon_j \\sim N(\\mathbf{0}, \\mathbf{\\Psi})\\) and restriction \\(\\mathbf{L}&#39; \\mathbf{\\Psi}^{-1}\\mathbf{L} = \\mathbf{\\Delta}\\) where \\(\\mathbf{\\Delta}\\) is a diagonal matrix. (since the factor loading matrix is not unique, we need this restriction). Notes: Finding MLE can be computationally expensive we typically use other methods for exploratory data analysis Likelihood ratio tests could be used for testing hypotheses in this framework (i.e., Confirmatory Factor Analysis) 22.3.2 Factor Rotation \\(\\mathbf{T}_{m \\times m}\\) is an orthogonal matrix that has the property that \\[ \\hat{\\mathbf{L}} \\hat{\\mathbf{L}}&#39; + \\hat{\\mathbf{\\Psi}} = \\hat{\\mathbf{L}}^*(\\hat{\\mathbf{L}}^*)&#39; + \\hat{\\mathbf{\\Psi}} \\] where \\(\\mathbf{L}^* = \\mathbf{LT}\\) This means that estimated specific variances and communalities are not altered by the orthogonal transformation. Since there are an infinite number of choices for \\(\\mathbf{T}\\), some selection criterion is necessary For example, we can find the orthogonal transformation that maximizes the objective function \\[ \\sum_{j = 1}^m [\\frac{1}{p}\\sum_{i=1}^p (\\frac{l_{ij}^{*2}}{h_i})^2 - \\{\\frac{\\gamma}{p} \\sum_{i=1}^p (\\frac{l_{ij}^{*2}}{h_i})^2 \\}^2] \\] where \\(\\frac{l_{ij}^{*2}}{h_i}\\) are “scaled loadings”, which gives variables with small communalities more influence. Different choices of \\(\\gamma\\) in the objective function correspond to different orthogonal rotation found in the literature; Varimax \\(\\gamma = 1\\) (rotate the factors so that each of the \\(p\\) variables should have a high loading on only one factor, but this is not always possible). Quartimax \\(\\gamma = 0\\) Equimax \\(\\gamma = m/2\\) Parsimax \\(\\gamma = \\frac{p(m-1)}{p+m-2}\\) Promax: non-orthogonal or olique transformations Harris-Kaiser (HK): non-orthogonal or oblique transformations 22.3.3 Estimation of Factor Scores Recall \\[ (\\mathbf{y}_j - \\mathbf{\\mu}) = \\mathbf{L}_{p \\times m}\\mathbf{f}_j + \\epsilon_j \\] If the factor model is correct then \\[ var(\\epsilon_j) = \\mathbf{\\Psi} = diag (\\psi_1, \\dots , \\psi_p) \\] Thus we could consider using weighted least squares to estimate \\(\\mathbf{f}_j\\) , the vector of factor scores for the j-th sampled unit by \\[ \\begin{aligned} \\hat{\\mathbf{f}} &amp;= (\\mathbf{L}&#39;\\mathbf{\\Psi}^{-1} \\mathbf{L})^{-1} \\mathbf{L}&#39; \\mathbf{\\Psi}^{-1}(\\mathbf{y}_j - \\mathbf{\\mu}) \\\\ &amp; \\approx (\\mathbf{L}&#39;\\mathbf{\\Psi}^{-1} \\mathbf{L})^{-1} \\mathbf{L}&#39; \\mathbf{\\Psi}^{-1}(\\mathbf{y}_j - \\mathbf{\\bar{y}}) \\end{aligned} \\] 22.3.3.1 The Regression Method Alternatively, we can use the regression method to estimate the factor scores Consider the joint distribution of \\((\\mathbf{y}_j - \\mathbf{\\mu})\\) and \\(\\mathbf{f}_j\\) assuming multivariate normality, as in the maximum likelihood approach. then, \\[ \\left( \\begin{array} {c} \\mathbf{y}_j - \\mathbf{\\mu} \\\\ \\mathbf{f}_j \\end{array} \\right) \\sim N_{p + m} \\left( \\left[ \\begin{array} {cc} \\mathbf{LL}&#39; + \\mathbf{\\Psi} &amp; \\mathbf{L} \\\\ \\mathbf{L}&#39; &amp; \\mathbf{I}_{m\\times m} \\end{array} \\right] \\right) \\] when the \\(m\\) factor model is correct Hence, \\[ E(\\mathbf{f}_j | \\mathbf{y}_j - \\mathbf{\\mu}) = \\mathbf{L}&#39; (\\mathbf{LL}&#39; + \\mathbf{\\Psi})^{-1}(\\mathbf{y}_j - \\mathbf{\\mu}) \\] notice that \\(\\mathbf{L}&#39; (\\mathbf{LL}&#39; + \\mathbf{\\Psi})^{-1}\\) is an \\(m \\times p\\) matrix of regression coefficients Then, we use the estimated conditional mean vector to estimate the factor scores \\[ \\mathbf{\\hat{f}}_j = \\mathbf{\\hat{L}}&#39;(\\mathbf{\\hat{L}}\\mathbf{\\hat{L}}&#39; + \\mathbf{\\hat{\\Psi}})^{-1}(\\mathbf{y}_j - \\mathbf{\\bar{y}}) \\] Alternatively, we could reduce the effect of possible incorrect determination fo the number of factors \\(m\\) by using \\(\\mathbf{S}\\) as a substitute for \\(\\mathbf{\\hat{L}}\\mathbf{\\hat{L}}&#39; + \\mathbf{\\hat{\\Psi}}\\) then \\[ \\mathbf{\\hat{f}}_j = \\mathbf{\\hat{L}}&#39;\\mathbf{S}^{-1}(\\mathbf{y}_j - \\mathbf{\\bar{y}}) \\] where \\(j = 1,\\dots,n\\) 22.3.4 Model Diagnostic Plots Check for outliers (recall that \\(\\mathbf{f}_j \\sim iid N(\\mathbf{0}, \\mathbf{I}_{m \\times m})\\)) Check for multivariate normality assumption Use univariate tests for normality to check the factor scores Confirmatory Factor Analysis: formal testing of hypotheses about loadings, use MLE and full/reduced model testing paradigm and measures of model fit 22.3.5 Application In the psych package, h2 = the communalities u2 = the uniqueness com = the complexity library(psych) library(tidyverse) ## Load the data from the psych package data(Harman.5) Harman.5 #&gt; population schooling employment professional housevalue #&gt; Tract1 5700 12.8 2500 270 25000 #&gt; Tract2 1000 10.9 600 10 10000 #&gt; Tract3 3400 8.8 1000 10 9000 #&gt; Tract4 3800 13.6 1700 140 25000 #&gt; Tract5 4000 12.8 1600 140 25000 #&gt; Tract6 8200 8.3 2600 60 12000 #&gt; Tract7 1200 11.4 400 10 16000 #&gt; Tract8 9100 11.5 3300 60 14000 #&gt; Tract9 9900 12.5 3400 180 18000 #&gt; Tract10 9600 13.7 3600 390 25000 #&gt; Tract11 9600 9.6 3300 80 12000 #&gt; Tract12 9400 11.4 4000 100 13000 # Correlation matrix cor_mat &lt;- cor(Harman.5) cor_mat #&gt; population schooling employment professional housevalue #&gt; population 1.00000000 0.00975059 0.9724483 0.4388708 0.02241157 #&gt; schooling 0.00975059 1.00000000 0.1542838 0.6914082 0.86307009 #&gt; employment 0.97244826 0.15428378 1.0000000 0.5147184 0.12192599 #&gt; professional 0.43887083 0.69140824 0.5147184 1.0000000 0.77765425 #&gt; housevalue 0.02241157 0.86307009 0.1219260 0.7776543 1.00000000 ## Principal Component Method with Correlation cor_pca &lt;- prcomp(Harman.5, scale = T) # eigen values cor_results &lt;- data.frame(eigen_values = cor_pca$sdev ^ 2) cor_results &lt;- cor_results %&gt;% mutate( proportion = eigen_values / sum(eigen_values), cumulative = cumsum(proportion), number = row_number() ) cor_results #&gt; eigen_values proportion cumulative number #&gt; 1 2.87331359 0.574662719 0.5746627 1 #&gt; 2 1.79666009 0.359332019 0.9339947 2 #&gt; 3 0.21483689 0.042967377 0.9769621 3 #&gt; 4 0.09993405 0.019986811 0.9969489 4 #&gt; 5 0.01525537 0.003051075 1.0000000 5 # Scree plot of Eigenvalues scree_gg &lt;- ggplot(cor_results, aes(x = number, y = eigen_values)) + geom_line(alpha = 0.5) + geom_text(aes(label = number)) + scale_x_continuous(name = &quot;Number&quot;) + scale_y_continuous(name = &quot;Eigenvalue&quot;) + theme_bw() scree_gg screeplot(cor_pca, type = &#39;lines&#39;) ## Keep 2 factors based on scree plot and eigenvalues factor_pca &lt;- principal(Harman.5, nfactors = 2, rotate = &quot;none&quot;) factor_pca #&gt; Principal Components Analysis #&gt; Call: principal(r = Harman.5, nfactors = 2, rotate = &quot;none&quot;) #&gt; Standardized loadings (pattern matrix) based upon correlation matrix #&gt; PC1 PC2 h2 u2 com #&gt; population 0.58 0.81 0.99 0.012 1.8 #&gt; schooling 0.77 -0.54 0.89 0.115 1.8 #&gt; employment 0.67 0.73 0.98 0.021 2.0 #&gt; professional 0.93 -0.10 0.88 0.120 1.0 #&gt; housevalue 0.79 -0.56 0.94 0.062 1.8 #&gt; #&gt; PC1 PC2 #&gt; SS loadings 2.87 1.80 #&gt; Proportion Var 0.57 0.36 #&gt; Cumulative Var 0.57 0.93 #&gt; Proportion Explained 0.62 0.38 #&gt; Cumulative Proportion 0.62 1.00 #&gt; #&gt; Mean item complexity = 1.7 #&gt; Test of the hypothesis that 2 components are sufficient. #&gt; #&gt; The root mean square of the residuals (RMSR) is 0.03 #&gt; with the empirical chi square 0.29 with prob &lt; 0.59 #&gt; #&gt; Fit based upon off diagonal values = 1 # factor 1 = overall socioeconomic health # factor 2 = contrast of the population and employment against school and house value ## Ssquared multiple correlation (SMC) prior, no rotation factor_pca_smc &lt;- fa( Harman.5, nfactors = 2, fm = &quot;pa&quot;, rotate = &quot;none&quot;, SMC = TRUE ) factor_pca_smc #&gt; Factor Analysis using method = pa #&gt; Call: fa(r = Harman.5, nfactors = 2, rotate = &quot;none&quot;, SMC = TRUE, fm = &quot;pa&quot;) #&gt; Standardized loadings (pattern matrix) based upon correlation matrix #&gt; PA1 PA2 h2 u2 com #&gt; population 0.62 0.78 1.00 -0.0027 1.9 #&gt; schooling 0.70 -0.53 0.77 0.2277 1.9 #&gt; employment 0.70 0.68 0.96 0.0413 2.0 #&gt; professional 0.88 -0.15 0.80 0.2017 1.1 #&gt; housevalue 0.78 -0.60 0.96 0.0361 1.9 #&gt; #&gt; PA1 PA2 #&gt; SS loadings 2.76 1.74 #&gt; Proportion Var 0.55 0.35 #&gt; Cumulative Var 0.55 0.90 #&gt; Proportion Explained 0.61 0.39 #&gt; Cumulative Proportion 0.61 1.00 #&gt; #&gt; Mean item complexity = 1.7 #&gt; Test of the hypothesis that 2 factors are sufficient. #&gt; #&gt; df null model = 10 with the objective function = 6.38 with Chi Square = 54.25 #&gt; df of the model are 1 and the objective function was 0.34 #&gt; #&gt; The root mean square of the residuals (RMSR) is 0.01 #&gt; The df corrected root mean square of the residuals is 0.03 #&gt; #&gt; The harmonic n.obs is 12 with the empirical chi square 0.02 with prob &lt; 0.88 #&gt; The total n.obs was 12 with Likelihood Chi Square = 2.44 with prob &lt; 0.12 #&gt; #&gt; Tucker Lewis Index of factoring reliability = 0.596 #&gt; RMSEA index = 0.336 and the 90 % confidence intervals are 0 0.967 #&gt; BIC = -0.04 #&gt; Fit based upon off diagonal values = 1 ## SMC prior, Promax rotation factor_pca_smc_pro &lt;- fa( Harman.5, nfactors = 2, fm = &quot;pa&quot;, rotate = &quot;Promax&quot;, SMC = TRUE ) factor_pca_smc_pro #&gt; Factor Analysis using method = pa #&gt; Call: fa(r = Harman.5, nfactors = 2, rotate = &quot;Promax&quot;, SMC = TRUE, #&gt; fm = &quot;pa&quot;) #&gt; Standardized loadings (pattern matrix) based upon correlation matrix #&gt; PA1 PA2 h2 u2 com #&gt; population -0.11 1.02 1.00 -0.0027 1.0 #&gt; schooling 0.90 -0.11 0.77 0.2277 1.0 #&gt; employment 0.02 0.97 0.96 0.0413 1.0 #&gt; professional 0.75 0.33 0.80 0.2017 1.4 #&gt; housevalue 1.01 -0.14 0.96 0.0361 1.0 #&gt; #&gt; PA1 PA2 #&gt; SS loadings 2.38 2.11 #&gt; Proportion Var 0.48 0.42 #&gt; Cumulative Var 0.48 0.90 #&gt; Proportion Explained 0.53 0.47 #&gt; Cumulative Proportion 0.53 1.00 #&gt; #&gt; With factor correlations of #&gt; PA1 PA2 #&gt; PA1 1.00 0.25 #&gt; PA2 0.25 1.00 #&gt; #&gt; Mean item complexity = 1.1 #&gt; Test of the hypothesis that 2 factors are sufficient. #&gt; #&gt; df null model = 10 with the objective function = 6.38 with Chi Square = 54.25 #&gt; df of the model are 1 and the objective function was 0.34 #&gt; #&gt; The root mean square of the residuals (RMSR) is 0.01 #&gt; The df corrected root mean square of the residuals is 0.03 #&gt; #&gt; The harmonic n.obs is 12 with the empirical chi square 0.02 with prob &lt; 0.88 #&gt; The total n.obs was 12 with Likelihood Chi Square = 2.44 with prob &lt; 0.12 #&gt; #&gt; Tucker Lewis Index of factoring reliability = 0.596 #&gt; RMSEA index = 0.336 and the 90 % confidence intervals are 0 0.967 #&gt; BIC = -0.04 #&gt; Fit based upon off diagonal values = 1 ## SMC prior, varimax rotation factor_pca_smc_var &lt;- fa( Harman.5, nfactors = 2, fm = &quot;pa&quot;, rotate = &quot;varimax&quot;, SMC = TRUE ) ## Make a data frame of the loadings for ggplot2 factors_df &lt;- bind_rows( data.frame( y = rownames(factor_pca_smc$loadings), unclass(factor_pca_smc$loadings) ), data.frame( y = rownames(factor_pca_smc_pro$loadings), unclass(factor_pca_smc_pro$loadings) ), data.frame( y = rownames(factor_pca_smc_var$loadings), unclass(factor_pca_smc_var$loadings) ), .id = &quot;Rotation&quot; ) flag_gg &lt;- ggplot(factors_df) + geom_vline(aes(xintercept = 0)) + geom_hline(aes(yintercept = 0)) + geom_point(aes( x = PA2, y = PA1, col = y, shape = y ), size = 2) + scale_x_continuous(name = &quot;Factor 2&quot;, limits = c(-1.1, 1.1)) + scale_y_continuous(name = &quot;Factor1&quot;, limits = c(-1.1, 1.1)) + facet_wrap(&quot;Rotation&quot;, labeller = labeller(Rotation = c( &quot;1&quot; = &quot;Original&quot;, &quot;2&quot; = &quot;Promax&quot;, &quot;3&quot; = &quot;Varimax&quot; ))) + coord_fixed(ratio = 1) # make aspect ratio of each facet 1 flag_gg # promax and varimax did a good job to assign trait to a particular factor factor_mle_1 &lt;- fa( Harman.5, nfactors = 1, fm = &quot;mle&quot;, rotate = &quot;none&quot;, SMC = TRUE ) factor_mle_1 #&gt; Factor Analysis using method = ml #&gt; Call: fa(r = Harman.5, nfactors = 1, rotate = &quot;none&quot;, SMC = TRUE, fm = &quot;mle&quot;) #&gt; Standardized loadings (pattern matrix) based upon correlation matrix #&gt; ML1 h2 u2 com #&gt; population 0.97 0.950 0.0503 1 #&gt; schooling 0.14 0.021 0.9791 1 #&gt; employment 1.00 0.995 0.0049 1 #&gt; professional 0.51 0.261 0.7388 1 #&gt; housevalue 0.12 0.014 0.9864 1 #&gt; #&gt; ML1 #&gt; SS loadings 2.24 #&gt; Proportion Var 0.45 #&gt; #&gt; Mean item complexity = 1 #&gt; Test of the hypothesis that 1 factor is sufficient. #&gt; #&gt; df null model = 10 with the objective function = 6.38 with Chi Square = 54.25 #&gt; df of the model are 5 and the objective function was 3.14 #&gt; #&gt; The root mean square of the residuals (RMSR) is 0.41 #&gt; The df corrected root mean square of the residuals is 0.57 #&gt; #&gt; The harmonic n.obs is 12 with the empirical chi square 39.41 with prob &lt; 2e-07 #&gt; The total n.obs was 12 with Likelihood Chi Square = 24.56 with prob &lt; 0.00017 #&gt; #&gt; Tucker Lewis Index of factoring reliability = 0.022 #&gt; RMSEA index = 0.564 and the 90 % confidence intervals are 0.374 0.841 #&gt; BIC = 12.14 #&gt; Fit based upon off diagonal values = 0.5 #&gt; Measures of factor score adequacy #&gt; ML1 #&gt; Correlation of (regression) scores with factors 1.00 #&gt; Multiple R square of scores with factors 1.00 #&gt; Minimum correlation of possible factor scores 0.99 factor_mle_2 &lt;- fa( Harman.5, nfactors = 2, fm = &quot;mle&quot;, rotate = &quot;none&quot;, SMC = TRUE ) factor_mle_2 #&gt; Factor Analysis using method = ml #&gt; Call: fa(r = Harman.5, nfactors = 2, rotate = &quot;none&quot;, SMC = TRUE, fm = &quot;mle&quot;) #&gt; Standardized loadings (pattern matrix) based upon correlation matrix #&gt; ML2 ML1 h2 u2 com #&gt; population -0.03 1.00 1.00 0.005 1.0 #&gt; schooling 0.90 0.04 0.81 0.193 1.0 #&gt; employment 0.09 0.98 0.96 0.036 1.0 #&gt; professional 0.78 0.46 0.81 0.185 1.6 #&gt; housevalue 0.96 0.05 0.93 0.074 1.0 #&gt; #&gt; ML2 ML1 #&gt; SS loadings 2.34 2.16 #&gt; Proportion Var 0.47 0.43 #&gt; Cumulative Var 0.47 0.90 #&gt; Proportion Explained 0.52 0.48 #&gt; Cumulative Proportion 0.52 1.00 #&gt; #&gt; Mean item complexity = 1.1 #&gt; Test of the hypothesis that 2 factors are sufficient. #&gt; #&gt; df null model = 10 with the objective function = 6.38 with Chi Square = 54.25 #&gt; df of the model are 1 and the objective function was 0.31 #&gt; #&gt; The root mean square of the residuals (RMSR) is 0.01 #&gt; The df corrected root mean square of the residuals is 0.05 #&gt; #&gt; The harmonic n.obs is 12 with the empirical chi square 0.05 with prob &lt; 0.82 #&gt; The total n.obs was 12 with Likelihood Chi Square = 2.22 with prob &lt; 0.14 #&gt; #&gt; Tucker Lewis Index of factoring reliability = 0.658 #&gt; RMSEA index = 0.307 and the 90 % confidence intervals are 0 0.945 #&gt; BIC = -0.26 #&gt; Fit based upon off diagonal values = 1 #&gt; Measures of factor score adequacy #&gt; ML2 ML1 #&gt; Correlation of (regression) scores with factors 0.98 1.00 #&gt; Multiple R square of scores with factors 0.95 1.00 #&gt; Minimum correlation of possible factor scores 0.91 0.99 factor_mle_3 &lt;- fa( Harman.5, nfactors = 3, fm = &quot;mle&quot;, rotate = &quot;none&quot;, SMC = TRUE ) factor_mle_3 #&gt; Factor Analysis using method = ml #&gt; Call: fa(r = Harman.5, nfactors = 3, rotate = &quot;none&quot;, SMC = TRUE, fm = &quot;mle&quot;) #&gt; Standardized loadings (pattern matrix) based upon correlation matrix #&gt; ML2 ML1 ML3 h2 u2 com #&gt; population -0.12 0.98 -0.11 0.98 0.0162 1.1 #&gt; schooling 0.89 0.15 0.29 0.90 0.0991 1.3 #&gt; employment 0.00 1.00 0.04 0.99 0.0052 1.0 #&gt; professional 0.72 0.52 -0.10 0.80 0.1971 1.9 #&gt; housevalue 0.97 0.13 -0.09 0.97 0.0285 1.1 #&gt; #&gt; ML2 ML1 ML3 #&gt; SS loadings 2.28 2.26 0.11 #&gt; Proportion Var 0.46 0.45 0.02 #&gt; Cumulative Var 0.46 0.91 0.93 #&gt; Proportion Explained 0.49 0.49 0.02 #&gt; Cumulative Proportion 0.49 0.98 1.00 #&gt; #&gt; Mean item complexity = 1.2 #&gt; Test of the hypothesis that 3 factors are sufficient. #&gt; #&gt; df null model = 10 with the objective function = 6.38 with Chi Square = 54.25 #&gt; df of the model are -2 and the objective function was 0 #&gt; #&gt; The root mean square of the residuals (RMSR) is 0 #&gt; The df corrected root mean square of the residuals is NA #&gt; #&gt; The harmonic n.obs is 12 with the empirical chi square 0 with prob &lt; NA #&gt; The total n.obs was 12 with Likelihood Chi Square = 0 with prob &lt; NA #&gt; #&gt; Tucker Lewis Index of factoring reliability = 1.318 #&gt; Fit based upon off diagonal values = 1 #&gt; Measures of factor score adequacy #&gt; ML2 ML1 ML3 #&gt; Correlation of (regression) scores with factors 0.99 1.00 0.82 #&gt; Multiple R square of scores with factors 0.98 1.00 0.68 #&gt; Minimum correlation of possible factor scores 0.96 0.99 0.36 The output info for the null hypothesis of no common factors is in the statement “The degrees of freedom for the null model ..” The output info for the null hypothesis that number of factors is sufficient is in the statement “The total number of observations was …” One factor is not enough, two is sufficient, and not enough data for 3 factors (df of -2 and NA for p-value). Hence, we should use 2-factor model. "],["discriminant-analysis.html", "22.4 Discriminant Analysis", " 22.4 Discriminant Analysis Suppose we have two or more different populations from which observations could come from. Discriminant analysis seeks to determine which of the possible population an observation comes from while making as few mistakes as possible This is an alternative to logistic approaches with the following advantages: when there is clear separation between classes, the parameter estimates for the logic regression model can be surprisingly unstable, while discriminant approaches do not suffer If X is normal in each of the classes and the sample size is small, then discriminant approaches can be more accurate Notation Similar to MANOVA, let \\(\\mathbf{y}_{j1},\\mathbf{y}_{j2},\\dots, \\mathbf{y}_{in_j} \\sim iid f_j (\\mathbf{y})\\) for \\(j = 1,\\dots, h\\) Let \\(f_j(\\mathbf{y})\\) be the density function for population j . Note that each vector \\(\\mathbf{y}\\) contain measurements on all \\(p\\) traits Assume that each observation is from one of \\(h\\) possible populations. We want to form a discriminant rule that will allocate an observation \\(\\mathbf{y}\\) to population j when \\(\\mathbf{y}\\) is in fact from this population 22.4.1 Known Populations The maximum likelihood discriminant rule for assigning an observation \\(\\mathbf{y}\\) to one of the \\(h\\) populations allocates \\(\\mathbf{y}\\) to the population that gives the largest likelihood to \\(\\mathbf{y}\\) Consider the likelihood for a single observation \\(\\mathbf{y}\\), which has the form \\(f_j (\\mathbf{y})\\) where j is the true population. Since \\(j\\) is unknown, to make the likelihood as large as possible, we should choose the value j which causes \\(f_j (\\mathbf{y})\\) to be as large as possible Consider a simple univariate example. Suppose we have data from one of two binomial populations. The first population has \\(n= 10\\) trials with success probability \\(p = .5\\) The second population has \\(n= 10\\) trials with success probability \\(p = .7\\) to which population would we assign an observation of \\(y = 7\\) Note: \\(f(y = 7|n = 10, p = .5) = .117\\) \\(f(y = 7|n = 10, p = .7) = .267\\) where \\(f(.)\\) is the binomial likelihood. Hence, we choose the second population Another example We have 2 populations, where First population: \\(N(\\mu_1, \\sigma^2_1)\\) Second population: \\(N(\\mu_2, \\sigma^2_2)\\) The likelihood for a single observation is \\[ f_j (y) = (2\\pi \\sigma^2_j)^{-1/2} \\exp\\{ -\\frac{1}{2}(\\frac{y - \\mu_j}{\\sigma_j})^2\\} \\] Consider a likelihood ratio rule \\[ \\begin{aligned} \\Lambda &amp;= \\frac{\\text{likelihood of y from pop 1}}{\\text{likelihood of y from pop 2}} \\\\ &amp;= \\frac{f_1(y)}{f_2(y)} \\\\ &amp;= \\frac{\\sigma_2}{\\sigma_1} \\exp\\{-\\frac{1}{2}[(\\frac{y - \\mu_1}{\\sigma_1})^2- (\\frac{y - \\mu_2}{\\sigma_2})^2] \\} \\end{aligned} \\] Hence, we classify into pop 1 if \\(\\Lambda &gt;1\\) pop 2 if \\(\\Lambda &lt;1\\) for ties, flip a coin Another way to think: we classify into population 1 if the “standardized distance” of y from \\(\\mu_1\\) is less than the “standardized distance” of y from \\(\\mu_2\\) which is referred to as a quadratic discriminant rule. (Significant simplification occurs in th special case where \\(\\sigma_1 = \\sigma_2 = \\sigma^2\\)) Thus, we classify into population 1 if \\[ (y - \\mu_2)^2 &gt; (y - \\mu_1)^2 \\] or \\[ |y- \\mu_2| &gt; |y - \\mu_1| \\] and \\[ -2 \\log (\\Lambda) = -2y \\frac{(\\mu_1 - \\mu_2)}{\\sigma^2} + \\frac{(\\mu_1^2 - \\mu_2^2)}{\\sigma^2} = \\beta y + \\alpha \\] Thus, we classify into population 1 if this is less than 0. Discriminant classification rule is linear in y in this case. 22.4.1.1 Multivariate Expansion Suppose that there are 2 populations \\(N_p(\\mathbf{\\mu}_1, \\mathbf{\\Sigma}_1)\\) \\(N_p(\\mathbf{\\mu}_2, \\mathbf{\\Sigma}_2)\\) \\[ \\begin{aligned} -2 \\log(\\frac{f_1 (\\mathbf{x})}{f_2 (\\mathbf{x})}) &amp;= \\log|\\mathbf{\\Sigma}_1| + (\\mathbf{x} - \\mathbf{\\mu}_1)&#39; \\mathbf{\\Sigma}^{-1}_1 (\\mathbf{x} - \\mathbf{\\mu}_1) \\\\ &amp;- [\\log|\\mathbf{\\Sigma}_2|+ (\\mathbf{x} - \\mathbf{\\mu}_2)&#39; \\mathbf{\\Sigma}^{-1}_2 (\\mathbf{x} - \\mathbf{\\mu}_2) ] \\end{aligned} \\] Again, we classify into population 1 if this is less than 0, otherwise, population 2. And like the univariate case with non-equal variances, this is a quadratic discriminant rule. And if the covariance matrices are equal: \\(\\mathbf{\\Sigma}_1 = \\mathbf{\\Sigma}_2 = \\mathbf{\\Sigma}_1\\) classify into population 1 if \\[ (\\mathbf{\\mu}_1 - \\mathbf{\\mu}_2)&#39; \\mathbf{\\Sigma}^{-1}\\mathbf{x} - \\frac{1}{2} (\\mathbf{\\mu}_1 - \\mathbf{\\mu}_2)&#39; \\mathbf{\\Sigma}^{-1} (\\mathbf{\\mu}_1 - \\mathbf{\\mu}_2) \\ge 0 \\] This linear discriminant rule is also referred to as Fisher’s linear discriminant function By assuming the covariance matrices are equal, we assume that the shape and orientation fo the two populations must be the same (which can be a strong restriction) In other words, for each variable, it can have different mean but the same variance. Note: LDA Bayes decision boundary is linear. Hence, quadratic decision boundary might lead to better classification. Moreover, the assumption of same variance/covariance matrix across all classes for Gaussian densities imposes the linear rule, if we allow the predictors in each class to follow MVN distribution with class-specific mean vectors and variance/covariance matrices, then it is Quadratic Discriminant Analysis. But then, you will have more parameters to estimate (which gives more flexibility than LDA) at the cost of more variance (bias -variance tradeoff). When \\(\\mathbf{\\mu}_1, \\mathbf{\\mu}_2, \\mathbf{\\Sigma}\\) are known, the probability of misclassification can be determined: \\[ \\begin{aligned} P(2|1) &amp;= P(\\text{calssify into pop 2| x is from pop 1}) \\\\ &amp;= P((\\mathbf{\\mu}_1 - \\mathbf{\\mu}_2)&#39; \\mathbf{\\Sigma}^{-1} \\mathbf{x} \\le \\frac{1}{2} (\\mathbf{\\mu}_1 - \\mathbf{\\mu}_2)&#39; \\mathbf{\\Sigma}^{-1} (\\mathbf{\\mu}_1 - \\mathbf{\\mu}_2)|\\mathbf{x} \\sim N(\\mu_1, \\mathbf{\\Sigma}) \\\\ &amp;= \\Phi(-\\frac{1}{2} \\delta) \\end{aligned} \\] where \\(\\delta^2 = (\\mathbf{\\mu}_1 - \\mathbf{\\mu}_2)&#39; \\mathbf{\\Sigma}^{-1} (\\mathbf{\\mu}_1 - \\mathbf{\\mu}_2)\\) \\(\\Phi\\) is the standard normal CDF Suppose there are \\(h\\) possible populations, which are distributed as \\(N_p (\\mathbf{\\mu}_p, \\mathbf{\\Sigma})\\). Then, the maximum likelihood (linear) discriminant rule allocates \\(\\mathbf{y}\\) to population j where j minimizes the squared Mahalanobis distance \\[ (\\mathbf{y} - \\mathbf{\\mu}_j)&#39; \\mathbf{\\Sigma}^{-1} (\\mathbf{y} - \\mathbf{\\mu}_j) \\] 22.4.1.2 Bayes Discriminant Rules If we know that population j has prior probabilities \\(\\pi_j\\) (assume \\(\\pi_j &gt;0\\)) we can form the Bayes discriminant rule. This rule allocates an observation \\(\\mathbf{y}\\) to the population for which \\(\\pi_j f_j (\\mathbf{y})\\) is maximized. Note: Maximum likelihood discriminant rule is a special case of the Bayes discriminant rule, where it sets all the \\(\\pi_j = 1/h\\) Optimal Properties of Bayes Discriminant Rules let \\(p_{ii}\\) be the probability of correctly assigning an observation from population i then one rule (with probabilities \\(p_{ii}\\) ) is as good as another rule (with probabilities \\(p_{ii}&#39;\\) ) if \\(p_{ii} \\ge p_{ii}&#39;\\) for all \\(i = 1,\\dots, h\\) The first rule is better than the alternative if \\(p_{ii} &gt; p_{ii}&#39;\\) for at least one i. A rule for which there is no better alternative is called admissible Bayes Discriminant Rules are admissible If we utilized prior probabilities, then we can form the posterior probability of a correct allocation, \\(\\sum_{i=1}^h \\pi_i p_{ii}\\) Bayes Discriminant Rules have the largest possible posterior probability of correct allocation with respect to the prior These properties show that Bayes Discriminant rule is our best approach. Unequal Cost We want to consider the cost misallocation Define \\(c_{ij}\\) to be the cost associated with allocation a member of population j to population i. Assume that \\(c_{ij} &gt;0\\) for all \\(i \\neq j\\) \\(c_{ij} = 0\\) if \\(i = j\\) We could determine the expected amount of loss for an observation allocated to population i as \\(\\sum_j c_{ij} p_{ij}\\) where the \\(p_{ij}s\\) are the probabilities of allocating an observation from population j into population i We want to minimize the amount of loss expected for our rule. Using a Bayes Discrimination, allocate \\(\\mathbf{y}\\) to the population j which minimizes \\(\\sum_{k \\neq j} c_{ij} \\pi_k f_k(\\mathbf{y})\\) We could assign equal probabilities to each group and get a maximum likelihood type rule. here, we would allocate \\(\\mathbf{y}\\) to population j which minimizes \\(\\sum_{k \\neq j}c_{jk} f_k(\\mathbf{y})\\) Example: Two binomial populations, each of size 10, with probabilities \\(p_1 = .5\\) and \\(p_2 = .7\\) And the probability of being in the first population is .9 However, suppose the cost of inappropriately allocating into the first population is 1 and the cost of incorrectly allocating into the second population is 5. In this case, we pick population 1 over population 2 In general, we consider two regions, \\(R_1\\) and \\(R_2\\) associated with population 1 and 2: \\[ R_1: \\frac{f_1 (\\mathbf{x})}{f_2 (\\mathbf{x})} \\ge \\frac{c_{12} \\pi_2}{c_{21} \\pi_1} \\] \\[ R_2: \\frac{f_1 (\\mathbf{x})}{f_2 (\\mathbf{x})} &lt; \\frac{c_{12} \\pi_2}{c_{21} \\pi_1} \\] where \\(c_{12}\\) is the cost of assigning a member of population 2 to population 1. 22.4.1.3 Discrimination Under Estimation Suppose we know the form of the distributions for populations of interests, but we still have to estimate the parameters. Example: we know the distributions are multivariate normal, but we have to estimate the means and variances The maximum likelihood discriminant rule allocates an observation \\(\\mathbf{y}\\) to population j when j maximizes the function \\[ f_j (\\mathbf{y} |\\hat{\\theta}) \\] where \\(\\hat{\\theta}\\) are the maximum likelihood estimates of the unknown parameters For instance, we have 2 multivariate normal populations with distinct means, but common variance covariance matrix MLEs for \\(\\mathbf{\\mu}_1\\) and \\(\\mathbf{\\mu}_2\\) are \\(\\mathbf{\\bar{y}}_1\\) and \\(\\mathbf{\\bar{y}}_2\\)and common \\(\\mathbf{\\Sigma}\\) is \\(\\mathbf{S}\\). Thus, an estimated discriminant rule could be formed by substituting these sample values for the population values 22.4.1.4 Native Bayes The challenge with classification using Bayes’ is that we don’t know the (true) densities, \\(f_k, k = 1, \\dots, K\\), while LDA and QDA make strong multivariate normality assumptions to deal with this. Naive Bayes makes only one assumption: within the k-th class, the p predictors are independent (i.e,, for \\(k = 1,\\dots, K\\) \\[ f_k(x) = f_{k1}(x_1) \\times f_{k2}(x_2) \\times \\dots \\times f_{kp}(x_p) \\] where \\(f_{kj}\\) is the density function of the j-th predictor among observation in the k-th class. This assumption allows the use of joint distribution without the need to account for dependence between observations. However, this (native) assumption can be unrealistic, but still works well in cases where the number of sample (n) is not large relative to the number of features (p). With this assumption, we have \\[ P(Y=k|X=x) = \\frac{\\pi_k \\times f_{k1}(x_1) \\times \\dots \\times f_{kp}(x_p)}{\\sum_{l=1}^K \\pi_l \\times f_{l1}(x_1)\\times \\dots f_{lp}(x_p)} \\] we only need to estimate the one-dimensional density function \\(f_{kj}\\) with either of these approaches: When \\(X_j\\) is quantitative, assume it has a univariate normal distribution (with independence): \\(X_j | Y = k \\sim N(\\mu_{jk}, \\sigma^2_{jk})\\) which is more restrictive than QDA because it assumes predictors are independent (e.g., a diagonal covariance matrix) When \\(X_j\\) is quantitative, use a kernel density estimator Kernel Methods ; which is a smoothed histogram When \\(X_j\\) is qualitative, we count the promotion of training observations for the j-th predictor corresponding to each class. 22.4.1.5 Comparison of Classification Methods Assuming we have K classes and K is the baseline from (James , Witten, Hastie, and Tibshirani book) Comparing the log odds relative to the K class 22.4.1.5.1 Logistic Regression \\[ \\log(\\frac{P(Y=k|X = x)}{P(Y = K| X = x)}) = \\beta_{k0} + \\sum_{j=1}^p \\beta_{kj}x_j \\] 22.4.1.5.2 LDA \\[ \\log(\\frac{P(Y = k | X = x)}{P(Y = K | X = x)} = a_k + \\sum_{j=1}^p b_{kj} x_j \\] where \\(a_k\\) and \\(b_{kj}\\) are functions of \\(\\pi_k, \\pi_K, \\mu_k , \\mu_K, \\mathbf{\\Sigma}\\) Similar to logistic regression, LDA assumes the log odds is linear in \\(x\\) Even though they look like having the same form, the parameters in logistic regression are estimated by MLE, where as LDA linear parameters are specified by the prior and normal distributions We expect LDA to outperform logistic regression when the normality assumption (approximately) holds, and logistic regression to perform better when it does not 22.4.1.5.3 QDA \\[ \\log(\\frac{P(Y=k|X=x}{P(Y=K | X = x}) = a_k + \\sum_{j=1}^{p}b_{kj}x_{j} + \\sum_{j=1}^p \\sum_{l=1}^p c_{kjl}x_j x_l \\] where \\(a_k, b_{kj}, c_{kjl}\\) are functions \\(\\pi_k , \\pi_K, \\mu_k, \\mu_K ,\\mathbf{\\Sigma}_k, \\mathbf{\\Sigma}_K\\) 22.4.1.5.4 Naive Bayes \\[ \\log (\\frac{P(Y = k | X = x)}{P(Y = K | X = x}) = a_k + \\sum_{j=1}^p g_{kj} (x_j) \\] where \\(a_k = \\log (\\pi_k / \\pi_K)\\) and \\(g_{kj}(x_j) = \\log(\\frac{f_{kj}(x_j)}{f_{Kj}(x_j)})\\) which is the form of generalized additive model 22.4.1.5.5 Summary LDA is a special case of QDA LDA is robust when it comes to high dimensions Any classifier with a linear decision boundary is a special case of naive Bayes with \\(g_{kj}(x_j) = b_{kj} x_j\\), which means LDA is a special case of naive Bayes. LDA assumes that the features are normally distributed with a common within-class covariance matrix, and naive Bayes assumes independence of the features. Naive bayes is also a special case of LDA with \\(\\mathbf{\\Sigma}\\) restricted to a diagonal matrix with diagonals, \\(\\sigma^2\\) (another notation \\(diag (\\mathbf{\\Sigma})\\) ) assuming \\(f_{kj}(x_j) = N(\\mu_{kj}, \\sigma^2_j)\\) QDA and naive Bayes are not special case of each other. In principal,e naive Bayes can produce a more flexible fit by the choice of \\(g_{kj}(x_j)\\) , but it’s restricted to only purely additive fit, but QDA includes multiplicative terms of the form \\(c_{kjl}x_j x_l\\) None of these methods uniformly dominates the others: the choice of method depends on the true distribution of the predictors in each of the K classes, n and p (i.e., related to the bias-variance tradeoff). Compare to the non-parametric method (KNN) KNN would outperform both LDA and logistic regression when the decision boundary is highly nonlinear, but can’t say which predictors are most important, and requires many observations KNN is also limited in high-dimensions due to the curse of dimensionality Since QDA is a special type of nonlinear decision boundary (quadratic), it can be considered as a compromise between the linear methods and KNN classification. QDA can have fewer training observations than KNN but not as flexible. From simulation: True decision boundary Best performance Linear LDA + Logistic regression Moderately nonlinear QDA + Naive Bayes Highly nonlinear (many training, p is not large) KNN like linear regression, we can also introduce flexibility by including transformed features \\(\\sqrt{X}, X^2, X^3\\) 22.4.2 Probabilities of Misclassification When the distribution are exactly known, we can determine the misclassification probabilities exactly. however, when we need to estimate the population parameters, we have to estimate the probability of misclassification Naive method Plugging the parameters estimates into the form for the misclassification probabilities results to derive at the estimates of the misclassification probability. But this will tend to be optimistic when the number of samples in one or more populations is small. Resubstitution method Use the proportion of the samples from population i that would be allocated to another population as an estimate of the misclassification probability But also optimistic when the number of samples is small Jack-knife estimates: The above two methods use observation to estimate both parameters and also misclassification probabilities based upon the discriminant rule Alternatively, we determine the discriminant rule based upon all of the data except the k-th observation from the j-th population then, determine if the k-th observation would be misclassified under this rule perform this process for all \\(n_j\\) observation in population j . An estimate fo the misclassification probability would be the fraction of \\(n_j\\) observations which were misclassified repeat the process for other \\(i \\neq j\\) populations This method is more reliable than the others, but also computationally intensive Cross-Validation Summary Consider the group-specific densities \\(f_j (\\mathbf{x})\\) for multivariate vector \\(\\mathbf{x}\\). Assume equal misclassifications costs, the Bayes classification probability of \\(\\mathbf{x}\\) belonging to the j-th population is \\[ p(j |\\mathbf{x}) = \\frac{\\pi_j f_j (\\mathbf{x})}{\\sum_{k=1}^h \\pi_k f_k (\\mathbf{x})} \\] \\(j = 1,\\dots, h\\) where there are \\(h\\) possible groups. We then classify into the group for which this probability of membership is largest Alternatively, we can write this in terms of a generalized squared distance formation \\[ D_j^2 (\\mathbf{x}) = d_j^2 (\\mathbf{x})+ g_1(j) + g_2 (j) \\] where \\(d_j^2(\\mathbf{x}) = (\\mathbf{x} - \\mathbf{\\mu}_j)&#39; \\mathbf{V}_j^{-1} (\\mathbf{x} - \\mathbf{\\mu}_j)\\) is the squared Mahalanobis distance from \\(\\mathbf{x}\\) to the centroid of group j, and \\(\\mathbf{V}_j = \\mathbf{S}_j\\) if the within group covariance matrices are not equal \\(\\mathbf{V}_j = \\mathbf{S}_p\\) if a pooled covariance estimate is appropriate and \\[ g_1(j) = \\begin{cases} \\ln |\\mathbf{S}_j| &amp; \\text{within group covariances are not equal} \\\\ 0 &amp; \\text{pooled covariance} \\end{cases} \\] \\[ g_2(j) = \\begin{cases} -2 \\ln \\pi_j &amp; \\text{prior probabilities are not equal} \\\\ 0 &amp; \\text{prior probabilities are equal} \\end{cases} \\] then, the posterior probability of belonging to group j is \\[ p(j| \\mathbf{x}) = \\frac{\\exp(-.5 D_j^2(\\mathbf{x}))}{\\sum_{k=1}^h \\exp(-.5 D^2_k (\\mathbf{x}))} \\] where \\(j = 1,\\dots , h\\) and \\(\\mathbf{x}\\) is classified into group j if \\(p(j | \\mathbf{x})\\) is largest for \\(j = 1,\\dots,h\\) (or, \\(D_j^2(\\mathbf{x})\\) is smallest). 22.4.2.1 Assessing Classification Performance For binary classification, confusion matrix Predicted class - or Null + or Null Total True Class - or Null True Neg (TN) False Pos (FP) N + or Null False Neg (FN) True Pos (TP) P Total N* P* and table 4.6 from (James et al. 2013) Name Definition Synonyms False Pos rate FP/N Type I error, 1 0 Specificity True Pos. rate TP/P 1 - Type II error, power, sensitivity, recall Pos Pred. value TP/P* Precision, 1 - false discovery promotion Neg. Pred. value TN/N* ROC curve (receiver Operating Characteristics) is a graphical comparison between sensitivity (true positive) and specificity ( = 1 - false positive) y-axis = true positive rate x-axis = false positive rate as we change the threshold rate for classifying an observation as from 0 to 1 AUC (area under the ROC) ideally would equal to 1, a bad classifier would have AUC = 0.5 (pure chance) 22.4.3 Unknown Populations/ Nonparametric Discrimination When your multivariate data are not Gaussian, or known distributional form at all, we can use the following methods 22.4.3.1 Kernel Methods We approximate \\(f_j (\\mathbf{x})\\) by a kernel density estimate \\[ \\hat{f}_j(\\mathbf{x}) = \\frac{1}{n_j} \\sum_{i = 1}^{n_j} K_j (\\mathbf{x} - \\mathbf{x}_i) \\] where \\(K_j (.)\\) is a kernel function satisfying \\(\\int K_j(\\mathbf{z})d\\mathbf{z} =1\\) \\(\\mathbf{x}_i\\) , \\(i = 1,\\dots , n_j\\) is a random sample from the j-th population. Thus, after finding \\(\\hat{f}_j (\\mathbf{x})\\) for each of the \\(h\\) populations, the posterior probability of group membership is \\[ p(j |\\mathbf{x}) = \\frac{\\pi_j \\hat{f}_j (\\mathbf{x})}{\\sum_{k-1}^h \\pi_k \\hat{f}_k (\\mathbf{x})} \\] where \\(j = 1,\\dots, h\\) There are different choices for the kernel function: Uniform Normal Epanechnikov Biweight Triweight We these kernels, we have to pick the “radius” (or variance, width, window width, bandwidth) of the kernel, which is a smoothing parameter (the larger the radius, the more smooth the kernel estimate of the density). To select the smoothness parameter, we can use the following method If we believe the populations were close to multivariate normal, then \\[ R = (\\frac{4/(2p+1)}{n_j})^{1/(p+1} \\] But since we do not know for sure, we might choose several different values and select one that vies the best out of sample or cross-validation discrimination. Moreover, you also have to decide whether to use different kernel smoothness for different populations, which is similar to the individual and pooled covariances in the classical methodology. 22.4.3.2 Nearest Neighbor Methods The nearest neighbor (also known as k-nearest neighbor) method performs the classification of a new observation vector based on the group membership of its nearest neighbors. In practice, we find \\[ d_{ij}^2 (\\mathbf{x}, \\mathbf{x}_i) = (\\mathbf{x}, \\mathbf{x}_i) V_j^{-1}(\\mathbf{x}, \\mathbf{x}_i) \\] which is the distance between the vector \\(\\mathbf{x}\\) and the \\(i\\)-th observation in group \\(j\\) We consider different choices for \\(\\mathbf{V}_j\\) For example, \\[ \\begin{aligned} \\mathbf{V}_j &amp;= \\mathbf{S}_p \\\\ \\mathbf{V}_j &amp;= \\mathbf{S}_j \\\\ \\mathbf{V}_j &amp;= \\mathbf{I} \\\\ \\mathbf{V}_j &amp;= diag (\\mathbf{S}_p) \\end{aligned} \\] We find the \\(k\\) observations that are closest to \\(\\mathbf{x}\\) (where users pick \\(k\\)). Then we classify into the most common population, weighted by the prior. 22.4.3.3 Modern Discriminant Methods Note: Logistic regression (with or without random effects) is a flexible model-based procedure for classification between two populations. The extension of logistic regression to the multi-group setting is polychotomous logistic regression (or, mulinomial regression). The machine learning and pattern recognition are growing with strong focus on nonlinear discriminant analysis methods such as: radial basis function networks support vector machines multiplayer perceptrons (neural networks) The general framework \\[ g_j (\\mathbf{x}) = \\sum_{l = 1}^m w_{jl}\\phi_l (\\mathbf{x}; \\mathbf{\\theta}_l) + w_{j0} \\] where \\(j = 1,\\dots, h\\) \\(m\\) nonlinear basis functions \\(\\phi_l\\), each of which has \\(n_m\\) parameters given by \\(\\theta_l = \\{ \\theta_{lk}: k = 1, \\dots , n_m \\}\\) We assign \\(\\mathbf{x}\\) to the \\(j\\)-th population if \\(g_j(\\mathbf{x})\\) is the maximum for all \\(j = 1,\\dots, h\\) Development usually focuses on the choice and estimation of the basis functions, \\(\\phi_l\\) and the estimation of the weights \\(w_{jl}\\) More details can be found (Webb, Copsey, and Cawley 2011) 22.4.4 Application library(class) library(klaR) library(MASS) library(tidyverse) ## Read in the data crops &lt;- read.table(&quot;images/crops.txt&quot;) names(crops) &lt;- c(&quot;crop&quot;, &quot;y1&quot;, &quot;y2&quot;, &quot;y3&quot;, &quot;y4&quot;) str(crops) #&gt; &#39;data.frame&#39;: 36 obs. of 5 variables: #&gt; $ crop: chr &quot;Corn&quot; &quot;Corn&quot; &quot;Corn&quot; &quot;Corn&quot; ... #&gt; $ y1 : int 16 15 16 18 15 15 12 20 24 21 ... #&gt; $ y2 : int 27 23 27 20 15 32 15 23 24 25 ... #&gt; $ y3 : int 31 30 27 25 31 32 16 23 25 23 ... #&gt; $ y4 : int 33 30 26 23 32 15 73 25 32 24 ... ## Read in test data crops_test &lt;- read.table(&quot;images/crops_test.txt&quot;) names(crops_test) &lt;- c(&quot;crop&quot;, &quot;y1&quot;, &quot;y2&quot;, &quot;y3&quot;, &quot;y4&quot;) str(crops_test) #&gt; &#39;data.frame&#39;: 5 obs. of 5 variables: #&gt; $ crop: chr &quot;Corn&quot; &quot;Soybeans&quot; &quot;Cotton&quot; &quot;Sugarbeets&quot; ... #&gt; $ y1 : int 16 21 29 54 32 #&gt; $ y2 : int 27 25 24 23 32 #&gt; $ y3 : int 31 23 26 21 62 #&gt; $ y4 : int 33 24 28 54 16 22.4.4.1 LDA Default prior is proportional to sample size and lda and qda do not fit a constant or intercept term ## Linear discriminant analysis lda_mod &lt;- lda(crop ~ y1 + y2 + y3 + y4, data = crops) lda_mod #&gt; Call: #&gt; lda(crop ~ y1 + y2 + y3 + y4, data = crops) #&gt; #&gt; Prior probabilities of groups: #&gt; Clover Corn Cotton Soybeans Sugarbeets #&gt; 0.3055556 0.1944444 0.1666667 0.1666667 0.1666667 #&gt; #&gt; Group means: #&gt; y1 y2 y3 y4 #&gt; Clover 46.36364 32.63636 34.18182 36.63636 #&gt; Corn 15.28571 22.71429 27.42857 33.14286 #&gt; Cotton 34.50000 32.66667 35.00000 39.16667 #&gt; Soybeans 21.00000 27.00000 23.50000 29.66667 #&gt; Sugarbeets 31.00000 32.16667 20.00000 40.50000 #&gt; #&gt; Coefficients of linear discriminants: #&gt; LD1 LD2 LD3 LD4 #&gt; y1 -6.147360e-02 0.009215431 -0.02987075 -0.014680566 #&gt; y2 -2.548964e-02 0.042838972 0.04631489 0.054842132 #&gt; y3 1.642126e-02 -0.079471595 0.01971222 0.008938745 #&gt; y4 5.143616e-05 -0.013917423 0.05381787 -0.025717667 #&gt; #&gt; Proportion of trace: #&gt; LD1 LD2 LD3 LD4 #&gt; 0.7364 0.1985 0.0576 0.0075 ## Look at accuracy on the training data lda_fitted &lt;- predict(lda_mod,newdata = crops) # Contingency table lda_table &lt;- table(truth = crops$crop, fitted = lda_fitted$class) lda_table #&gt; fitted #&gt; truth Clover Corn Cotton Soybeans Sugarbeets #&gt; Clover 6 0 3 0 2 #&gt; Corn 0 6 0 1 0 #&gt; Cotton 3 0 1 2 0 #&gt; Soybeans 0 1 1 3 1 #&gt; Sugarbeets 1 1 0 2 2 # accuracy of 0.5 is just random (not good) ## Posterior probabilities of membership crops_post &lt;- cbind.data.frame(crops, crop_pred = lda_fitted$class, lda_fitted$posterior) crops_post &lt;- crops_post %&gt;% mutate(missed = crop != crop_pred) head(crops_post) #&gt; crop y1 y2 y3 y4 crop_pred Clover Corn Cotton Soybeans #&gt; 1 Corn 16 27 31 33 Corn 0.08935164 0.4054296 0.1763189 0.2391845 #&gt; 2 Corn 15 23 30 30 Corn 0.07690181 0.4558027 0.1420920 0.2530101 #&gt; 3 Corn 16 27 27 26 Corn 0.09817815 0.3422454 0.1365315 0.3073105 #&gt; 4 Corn 18 20 25 23 Corn 0.10521511 0.3633673 0.1078076 0.3281477 #&gt; 5 Corn 15 15 31 32 Corn 0.05879921 0.5753907 0.1173332 0.2086696 #&gt; 6 Corn 15 32 32 15 Soybeans 0.09723648 0.3278382 0.1318370 0.3419924 #&gt; Sugarbeets missed #&gt; 1 0.08971545 FALSE #&gt; 2 0.07219340 FALSE #&gt; 3 0.11573442 FALSE #&gt; 4 0.09546233 FALSE #&gt; 5 0.03980738 FALSE #&gt; 6 0.10109590 TRUE # posterior shows that posterior of corn membership is much higher than the prior ## LOOCV # leave-one-out cross validation for linear discriminant analysis # cannot run the predict function using the object with CV = TRUE # because it returns the within sample predictions lda_cv &lt;- lda(crop ~ y1 + y2 + y3 + y4, data = crops, CV = TRUE) # Contingency table lda_table_cv &lt;- table(truth = crops$crop, fitted = lda_cv$class) lda_table_cv #&gt; fitted #&gt; truth Clover Corn Cotton Soybeans Sugarbeets #&gt; Clover 4 3 1 0 3 #&gt; Corn 0 4 1 2 0 #&gt; Cotton 3 0 0 2 1 #&gt; Soybeans 0 1 1 3 1 #&gt; Sugarbeets 2 1 0 2 1 ## Predict the test data lda_pred &lt;- predict(lda_mod, newdata = crops_test) ## Make a contingency table with truth and most likely class table(truth=crops_test$crop, predict=lda_pred$class) #&gt; predict #&gt; truth Clover Corn Cotton Soybeans Sugarbeets #&gt; Clover 0 0 1 0 0 #&gt; Corn 0 1 0 0 0 #&gt; Cotton 0 0 0 1 0 #&gt; Soybeans 0 0 0 1 0 #&gt; Sugarbeets 1 0 0 0 0 LDA didn’t do well on both within sample and out-of-sample data. 22.4.4.2 QDA ## Quadratic discriminant analysis qda_mod &lt;- qda(crop ~ y1 + y2 + y3 + y4, data = crops) ## Look at accuracy on the training data qda_fitted &lt;- predict(qda_mod, newdata = crops) # Contingency table qda_table &lt;- table(truth = crops$crop, fitted = qda_fitted$class) qda_table #&gt; fitted #&gt; truth Clover Corn Cotton Soybeans Sugarbeets #&gt; Clover 9 0 0 0 2 #&gt; Corn 0 7 0 0 0 #&gt; Cotton 0 0 6 0 0 #&gt; Soybeans 0 0 0 6 0 #&gt; Sugarbeets 0 0 1 1 4 ## LOOCV qda_cv &lt;- qda(crop ~ y1 + y2 + y3 + y4, data = crops, CV = TRUE) # Contingency table qda_table_cv &lt;- table(truth = crops$crop, fitted = qda_cv$class) qda_table_cv #&gt; fitted #&gt; truth Clover Corn Cotton Soybeans Sugarbeets #&gt; Clover 9 0 0 0 2 #&gt; Corn 3 2 0 0 2 #&gt; Cotton 3 0 2 0 1 #&gt; Soybeans 3 0 0 2 1 #&gt; Sugarbeets 3 0 1 1 1 ## Predict the test data qda_pred &lt;- predict(qda_mod, newdata = crops_test) ## Make a contingency table with truth and most likely class table(truth = crops_test$crop, predict = qda_pred$class) #&gt; predict #&gt; truth Clover Corn Cotton Soybeans Sugarbeets #&gt; Clover 1 0 0 0 0 #&gt; Corn 0 1 0 0 0 #&gt; Cotton 0 0 1 0 0 #&gt; Soybeans 0 0 0 1 0 #&gt; Sugarbeets 0 0 0 0 1 22.4.4.3 KNN knn uses design matrices of the features. ## Design matrices X_train &lt;- crops %&gt;% dplyr::select(-crop) X_test &lt;- crops_test %&gt;% dplyr::select(-crop) Y_train &lt;- crops$crop Y_test &lt;- crops_test$crop ## Nearest neighbors with 2 neighbors knn_2 &lt;- knn(X_train, X_train, Y_train, k = 2) table(truth = Y_train, fitted = knn_2) #&gt; fitted #&gt; truth Clover Corn Cotton Soybeans Sugarbeets #&gt; Clover 7 0 2 1 1 #&gt; Corn 0 7 0 0 0 #&gt; Cotton 0 0 4 0 2 #&gt; Soybeans 0 0 0 4 2 #&gt; Sugarbeets 1 0 2 0 3 ## Accuracy mean(Y_train==knn_2) #&gt; [1] 0.6944444 ## Performance on test data knn_2_test &lt;- knn(X_train, X_test, Y_train, k = 2) table(truth = Y_test, predict = knn_2_test) #&gt; predict #&gt; truth Clover Corn Cotton Soybeans Sugarbeets #&gt; Clover 1 0 0 0 0 #&gt; Corn 0 1 0 0 0 #&gt; Cotton 0 0 0 0 1 #&gt; Soybeans 0 0 0 1 0 #&gt; Sugarbeets 0 0 0 0 1 ## Accuracy mean(Y_test==knn_2_test) #&gt; [1] 0.8 ## Nearest neighbors with 3 neighbors knn_3 &lt;- knn(X_train, X_train, Y_train, k = 3) table(truth = Y_train, fitted = knn_3) #&gt; fitted #&gt; truth Clover Corn Cotton Soybeans Sugarbeets #&gt; Clover 8 0 1 1 1 #&gt; Corn 0 4 1 2 0 #&gt; Cotton 1 1 3 0 1 #&gt; Soybeans 0 1 1 4 0 #&gt; Sugarbeets 0 0 0 2 4 ## Accuracy mean(Y_train==knn_3) #&gt; [1] 0.6388889 ## Performance on test data knn_3_test &lt;- knn(X_train, X_test, Y_train, k = 3) table(truth = Y_test, predict = knn_3_test) #&gt; predict #&gt; truth Clover Corn Cotton Soybeans Sugarbeets #&gt; Clover 1 0 0 0 0 #&gt; Corn 0 1 0 0 0 #&gt; Cotton 0 0 1 0 0 #&gt; Soybeans 0 0 0 1 0 #&gt; Sugarbeets 0 0 0 0 1 ## Accuracy mean(Y_test==knn_3_test) #&gt; [1] 1 22.4.4.4 Stepwise Stepwise discriminant analysis using the stepclass in function in the klaR package. step &lt;- stepclass( crop ~ y1 + y2 + y3 + y4, data = crops, method = &quot;qda&quot;, improvement = 0.15 ) #&gt; correctness rate: 0.45; in: &quot;y1&quot;; variables (1): y1 #&gt; #&gt; hr.elapsed min.elapsed sec.elapsed #&gt; 0.00 0.00 0.16 step$process #&gt; step var varname result.pm #&gt; 0 start 0 -- 0.00 #&gt; 1 in 1 y1 0.45 step$performance.measure #&gt; [1] &quot;correctness rate&quot; Iris Data library(dplyr) data(&#39;iris&#39;) set.seed(1) samp &lt;- sample.int(nrow(iris), size = floor(0.70 * nrow(iris)), replace = F) train.iris &lt;- iris[samp,] %&gt;% mutate_if(is.numeric,scale) test.iris &lt;- iris[-samp,] %&gt;% mutate_if(is.numeric,scale) library(ggplot2) iris.model &lt;- lda(Species ~ ., data = train.iris) #pred pred.lda &lt;- predict(iris.model, test.iris) table(truth = test.iris$Species, prediction = pred.lda$class) #&gt; prediction #&gt; truth setosa versicolor virginica #&gt; setosa 15 0 0 #&gt; versicolor 0 17 0 #&gt; virginica 0 0 13 plot(iris.model) iris.model.qda &lt;- qda(Species~.,data=train.iris) #pred pred.qda &lt;- predict(iris.model.qda,test.iris) table(truth=test.iris$Species,prediction=pred.qda$class) #&gt; prediction #&gt; truth setosa versicolor virginica #&gt; setosa 15 0 0 #&gt; versicolor 0 16 1 #&gt; virginica 0 0 13 22.4.4.5 PCA with Discriminant Analysis we can use both PCA for dimension reduction in discriminant analysis zeros &lt;- as.matrix(read.table(&quot;images/mnist0_train_b.txt&quot;)) nines &lt;- as.matrix(read.table(&quot;images/mnist9_train_b.txt&quot;)) train &lt;- rbind(zeros[1:1000, ], nines[1:1000, ]) train &lt;- train / 255 #divide by 255 per notes (so ranges from 0 to 1) train &lt;- t(train) #each column is an observation image(matrix(train[, 1], nrow = 28), main = &#39;Example image, unrotated&#39;) test &lt;- rbind(zeros[2501:3000, ], nines[2501:3000, ]) test &lt;- test / 255 test &lt;- t(test) y.train &lt;- c(rep(0, 1000), rep(9, 1000)) y.test &lt;- c(rep(0, 500), rep(9, 500)) library(MASS) pc &lt;- prcomp(t(train)) train.large &lt;- data.frame(cbind(y.train, pc$x[, 1:10])) large &lt;- lda(y.train ~ ., data = train.large) #the test data set needs to be constucted w/ the same 10 princomps test.large &lt;- data.frame(cbind(y.test, predict(pc, t(test))[, 1:10])) pred.lda &lt;- predict(large, test.large) table(truth = test.large$y.test, prediction = pred.lda$class) #&gt; prediction #&gt; truth 0 9 #&gt; 0 491 9 #&gt; 9 5 495 large.qda &lt;- qda(y.train~.,data=train.large) #prediction pred.qda &lt;- predict(large.qda,test.large) table(truth=test.large$y.test,prediction=pred.qda$class) #&gt; prediction #&gt; truth 0 9 #&gt; 0 493 7 #&gt; 9 3 497 References "],["quasi-experimental.html", "Chapter 23 Quasi-experimental", " Chapter 23 Quasi-experimental In most cases, it means that you have pre- and post-intervention data. Great resources for causal inference include Causal Inference Mixtape and Recent Advances in Micro, especially if you like to read about the history of causal inference as a field as well (codes for Stata, R, and Python). Libraries in R: Econometrics Causal Inference Identification strategy for any quasi-experiment (No ways to prove or formal statistical test, but you can provide plausible argument and evidence) Where the exogenous variation comes from (by argument and institutional knowledge) Exclusion restriction: Evidence that the variation in the exogenous shock and the outcome is due to no other factors The stable unit treatment value assumption (SUTVA) states that the treatment of unit \\(i\\) affect only the outcome of unit \\(i\\) (i.e., no spillover to the control groups) All quasi-experimental methods involve a tradeoff between power and support for the exogeneity assumption (i.e., discard variation in the data that is not exogenous). Consequently, we don’t usually look at \\(R^2\\) (Ebbes, Papies, and Van Heerde 2011). And it can even be misleading to use \\(R^2\\) as the basis for model comparison. Clustering should be based on the design, not the expectations of correlation (Abadie et al. 2023). With a small sample, you should use the wild bootstrap procedure (Cameron, Gelbach, and Miller 2008) to correct for the downward bias (see (Cai et al. 2022)for additional assumptions). Typical robustness check: recommended by (Goldfarb, Tucker, and Wang 2022) Different controls: show models with and without controls. Typically, we want to see the change in the estimate of interest. See (Altonji, Elder, and Taber 2005) for a formal assessment based on Rosenbaum bounds (i.e., changes in the estimate and threat of Omitted variables on the estimate). For specific applications in marketing, see (Manchanda, Packard, and Pattabhiramaiah 2015) (Shin, Sudhir, and Yoon 2012) Different functional forms Different window of time (in longitudinal setting) Different dependent variables (those that are related) or different measures of the dependent variables Different control group size (matched vs. un-matched samples) Placebo tests: see each placebo test for each setting below. Showing the mechanism: Mediation analysis Moderation analysis Estimate the model separately (for different groups) Assess whether the three-way interaction between the source of variation (e.g., under DID, cross-sectional and time series) and group membership is significant. External Validity: Assess how representative your sample is Explain the limitation of the design. Use quasi-experimental results in conjunction with structural models: see (J. E. Anderson, Larch, and Yotov 2015; Einav, Finkelstein, and Levin 2010; Chung, Steenburgh, and Sudhir 2014) Limitation What is your identifying assumptions or identification strategy What are threats to the validity of your assumptions? What you do to address it? And maybe how future research can do to address it. References "],["natural-experiments.html", "23.1 Natural Experiments", " 23.1 Natural Experiments Reusing the same natural experiments for research, particularly when employing identical methods to determine the treatment effect in a given setting, can pose problems for hypothesis testing. Simulations show that when \\(N_{\\text{Outcome}} &gt;&gt; N_{\\text{True effect}}\\), more than 50% of statistically significant findings may be false positives (Heath et al. 2023, 2331). Solutions: Bonferroni correction Romano and Wolf (2005) and Romano and Wolf (2016) correction: recommended Benjamini and Yekutieli (2001) correction Alternatively, refer to the rules of thumb from Table AI (Heath et al. 2023, 2356). When applying multiple testing corrections, we can either use (but they will give similar results anyway (Heath et al. 2023, 2335)): Chronological Sequencing: Outcomes are ordered by the date they were first reported, with multiple testing corrections applied in this sequence. This method progressively raises the statistical significance threshold as more outcomes are reviewed over time. Best Foot Forward Policy: Outcomes are ordered from most to least likely to be rejected based on experimental data. Used primarily in clinical trials, this approach gives priority to intended treatment effects, which are subjected to less stringent statistical requirements. New outcomes are added to the sequence as they are linked to the primary treatment effect. # Romano-Wolf correction library(fixest) library(wildrwolf) head(iris) #&gt; Sepal.Length Sepal.Width Petal.Length Petal.Width Species #&gt; 1 5.1 3.5 1.4 0.2 setosa #&gt; 2 4.9 3.0 1.4 0.2 setosa #&gt; 3 4.7 3.2 1.3 0.2 setosa #&gt; 4 4.6 3.1 1.5 0.2 setosa #&gt; 5 5.0 3.6 1.4 0.2 setosa #&gt; 6 5.4 3.9 1.7 0.4 setosa fit1 &lt;- feols(Sepal.Width ~ Sepal.Length , data = iris) fit2 &lt;- feols(Petal.Length ~ Sepal.Length, data = iris) fit3 &lt;- feols(Petal.Width ~ Sepal.Length, data = iris) res &lt;- rwolf( models = list(fit1, fit2, fit3), param = &quot;Sepal.Length&quot;, B = 500 ) #&gt; | | | 0% | |======================= | 33% | |=============================================== | 67% | |======================================================================| 100% res #&gt; model Estimate Std. Error t value Pr(&gt;|t|) RW Pr(&gt;|t|) #&gt; 1 1 -0.0618848 0.04296699 -1.440287 0.1518983 0.139720559 #&gt; 2 2 1.858433 0.08585565 21.64602 1.038667e-47 0.001996008 #&gt; 3 3 0.7529176 0.04353017 17.29645 2.325498e-37 0.001996008 For all other tests, one can use multtest::mt.rawp2adjp which includes: Bonferroni Holm (1979) Šidák (1967) Hochberg (1988) Benjamini and Hochberg (1995) Benjamini and Yekutieli (2001) Adaptive Benjamini and Hochberg (2000) Two-stage Benjamini, Krieger, and Yekutieli (2006) Permutation adjusted p-values for simple multiple testing procedures # BiocManager::install(&quot;multtest&quot;) library(multtest) procs &lt;- c(&quot;Bonferroni&quot;, &quot;Holm&quot;, &quot;Hochberg&quot;, &quot;SidakSS&quot;, &quot;SidakSD&quot;, &quot;BH&quot;, &quot;BY&quot;, &quot;ABH&quot;, &quot;TSBH&quot;) mt.rawp2adjp( # p-values runif(10), procs) |&gt; causalverse::nice_tab() #&gt; adjp.rawp adjp.Bonferroni adjp.Holm adjp.Hochberg adjp.SidakSS adjp.SidakSD #&gt; 1 0.12 1 1 0.75 0.72 0.72 #&gt; 2 0.22 1 1 0.75 0.92 0.89 #&gt; 3 0.24 1 1 0.75 0.94 0.89 #&gt; 4 0.29 1 1 0.75 0.97 0.91 #&gt; 5 0.36 1 1 0.75 0.99 0.93 #&gt; 6 0.38 1 1 0.75 0.99 0.93 #&gt; 7 0.44 1 1 0.75 1.00 0.93 #&gt; 8 0.59 1 1 0.75 1.00 0.93 #&gt; 9 0.65 1 1 0.75 1.00 0.93 #&gt; 10 0.75 1 1 0.75 1.00 0.93 #&gt; adjp.BH adjp.BY adjp.ABH adjp.TSBH_0.05 index h0.ABH h0.TSBH #&gt; 1 0.63 1 0.63 0.63 2 10 10 #&gt; 2 0.63 1 0.63 0.63 6 10 10 #&gt; 3 0.63 1 0.63 0.63 8 10 10 #&gt; 4 0.63 1 0.63 0.63 3 10 10 #&gt; 5 0.63 1 0.63 0.63 10 10 10 #&gt; 6 0.63 1 0.63 0.63 1 10 10 #&gt; 7 0.63 1 0.63 0.63 7 10 10 #&gt; 8 0.72 1 0.72 0.72 9 10 10 #&gt; 9 0.72 1 0.72 0.72 5 10 10 #&gt; 10 0.75 1 0.75 0.75 4 10 10 References "],["regression-discontinuity.html", "Chapter 24 Regression Discontinuity", " Chapter 24 Regression Discontinuity A regression discontinuity occurs when there is a discrete change (jump) in treatment likelihood in the distribution of a continuous (or roughly continuous) variable (i.e., running/forcing/assignment variable). Running variable can also be time, but the argument for time to be continuous is hard to argue because usually we do not see increment of time (e.g., quarterly or annual data). Unless we have minute or hour data, then we might be able to argue for it. Review paper (G. Imbens and Lemieux 2008; Lee and Lemieux 2010) Other readings: https://ies.ed.gov/ncee/wwc/Docs/ReferenceResources/wwc_rd.pdf https://ies.ed.gov/ncee/wwc/Docs/ReferenceResources/wwc_rdd_standards_122315.pdf (Thistlethwaite and Campbell 1960): first paper to use RD in the context of merit awards on future academic outcomes. RD is a localized experiment at the cutoff point Hence, we always have to qualify (perfunctory) our statement in research articles that “our research might not generalize to beyond the bandwidth.” In reality, RD and experimental (from random assignment) estimates are very similar ((Chaplin et al. 2018); Mathematica). But still, it’s hard to prove empirically for every context (there might be future study that finds a huge difference between local estimate - causal - and overall estimate - random assignment. Threats: only valid near threshold: inference at threshold is valid on average. Interestingly, random experiment showed the validity already. Tradeoff between efficiency and bias Regression discontinuity is under the framework of Instrumental Variable (structural IV) argued by (J. D. Angrist and Lavy 1999) and a special case of the Matching Methods (matching at one point) argued by (James J. Heckman, LaLonde, and Smith 1999). The hard part is to find a setting that can apply, but once you find one, it’s easy to apply We can also have multiple cutoff lines. However, for each cutoff line, there can only be one breakup point RD can have multiple coinciding effects (i.e., joint distribution or bundled treatment), then RD effect in this case would be the joint effect. As the running variable becomes more discrete your framework should be Interrupted Time Series, but for more granular levels you can use RD. When you have infinite data (or substantially large) the two frameworks are identical. RD is always better than Interrupted Time Series Multiple alternative model specifications that produce consistent results are more reliable (parametric - linear regression with polynomials terms, and non-parametric - local linear regression). This is according to (Lee and Lemieux 2010), one straightforward method to ease the linearity assumption is by incorporating polynomial functions of the forcing variable. The choice of polynomial terms can be determined based on the data. . According to (Gelman and Imbens 2019), accounting for global high-order polynomials presents three issues: (1) imprecise estimates due to noise, (2) sensitivity to the polynomial’s degree, and (3) inadequate coverage of confidence intervals. To address this, researchers should instead employ estimators that rely on local linear or quadratic polynomials or other smooth functions. RD should be viewed more as a description of a data generating process, rather than a method or approach (similar to a randomized experiment) RD is close to other quasi-experimental methods in the sense that it’s based on the discontinuity at a threshold randomized experiments in the sense that it’s local randomization. There are several types of Regression Discontinuity: Sharp RD: Change in treatment probability at the cutoff point is 1 Kink design: Instead of a discontinuity in the level of running variable, we have a discontinuity in the slope of the function (while the function/level can remain continuous) (Nielsen, Sørensen, and Taber 2010). See (Böckerman, Kanninen, and Suoniemi 2018) for application, and (Card et al. 2015) for theory. Kink RD Fuzzy RD: Change in treatment probability less than 1 Fuzzy Kink RD RDiT: running variable is time. Others: Multiple cutoff Multiple Scores Geographic RD Dynamic Treatments Continuous Treatments Consider \\[ D_i = 1_{X_i &gt; c} \\] \\[ D_i = \\begin{cases} D_i = 1 \\text{ if } X_i &gt; C \\\\ D_i = 0 \\text{ if } X_i &lt; C \\end{cases} \\] where \\(D_i\\) = treatment effect \\(X_i\\) = score variable (continuous) \\(c\\) = cutoff point Identification (Identifying assumptions) of RD: Average Treatment Effect at the cutoff (Continuity-based) \\[ \\begin{aligned} \\alpha_{SRDD} &amp;= E[Y_{1i} - Y_{0i} | X_i = c] \\\\ &amp;= E[Y_{1i}|X_i = c] - E[Y_{0i}|X_i = c]\\\\ &amp;= \\lim_{x \\to c^+} E[Y_{1i}|X_i = c] - \\lim_{x \\to c^=} E[Y_{0i}|X_i = c] \\end{aligned} \\] Average Treatment Effect in a neighborhood (Local Randomization-based): \\[ \\begin{aligned} \\alpha_{LR} &amp;= E[Y_{1i} - Y_{0i}|X_i \\in W] \\\\ &amp;= \\frac{1}{N_1} \\sum_{X_i \\in W, T_i = 1}Y_i - \\frac{1}{N_0}\\sum_{X_i \\in W, T_i =0} Y_i \\end{aligned} \\] RDD estimates the local average treatment effect (LATE), at the cutoff point which is not at the individual or population levels. Since researchers typically care more about the internal validity, than external validity, localness affects only external validity. Assumptions: Independent assignment Continuity of conditional regression functions \\(E[Y(0)|X=x]\\) and \\(E[Y(1)|X=x]\\) are continuous in x. RD is valid if cutpoint is exogenous (i.e., no endogenous selection) and running variable is not manipulable Only treatment(s) (e.g., could be joint distribution of multiple treatments) cause discontinuity or jump in the outcome variable All other factors are smooth through the cutoff (i.e., threshold) value. (we can also test this assumption by seeing no discontinuity in other factors). If they “jump”, they will bias your causal estimate Threats to RD Variables (other than treatment) change discontinuously at the cutoff We can test for jumps in these variables (including pre-treatment outcome) Multiple discontinuities for the assignment variable Manipulation of the assignment variable At the cutoff point, check for continuity in the density of the assignment variable. References "],["estimation-and-inference.html", "24.1 Estimation and Inference", " 24.1 Estimation and Inference 24.1.1 Local Randomization-based Additional Assumption: Local Randomization approach assumes that inside the chosen window \\(W = [c-w, c+w]\\) are assigned to treatment as good as random: Joint probability distribution of scores for units inside the chosen window \\(W\\) is known Potential outcomes are not affected by value of the score This approach is stronger than the Continuity-based because we assume the regressions are continuously at \\(c\\) and unaffected by the running variable within window \\(W\\) Because we can choose the window \\(W\\) (within which random assignment is plausible), the sample size can typically be small. To choose the window \\(W\\), we can base on either where the pre-treatment covariate-balance is observed independent tests between outcome and score domain knowledge To make inference, we can either use (Fisher) randomization inference (Neyman) design-based 24.1.2 Continuity-based also known as the local polynomial method as the name suggests, global polynomial regression is not recommended (because of lack of robustness, and over-fitting and Runge’s phenomenon) Step to estimate local polynomial regression Choose polynomial order and weighting scheme Choose bandwidth that has optimal MSE or coverage error Estimate the parameter of interest Examine robust bias-correct inference "],["specification-checks.html", "24.2 Specification Checks", " 24.2 Specification Checks Balance Checks Sorting/Bunching/Manipulation Placebo Tests Sensitivity to Bandwidth Choice 24.2.1 Balance Checks Also known as checking for Discontinuities in Average Covariates Null Hypothesis: The average effect of covariates on pseudo outcomes (i.e., those qualitatively cannot be affected by the treatment) is 0. If this hypothesis is rejected, you better have a good reason to why because it can cast serious doubt on your RD design. 24.2.2 Sorting/Bunching/Manipulation Also known as checking for A Discontinuity in the Distribution of the Forcing Variable Also known as clustering or density test Formal test is McCrary sorting test (McCrary 2008) or (Cattaneo, Idrobo, and Titiunik 2019) Since human subjects can manipulate the running variable to be just above or below the cutoff (assuming that the running variable is manipulable), especially when the cutoff point is known in advance for all subjects, this can result in a discontinuity in the distribution of the running variable at the cutoff (i.e., we will see “bunching” behavior right before or after the cutoff)&gt; People would like to sort into treatment if it’s desirable. The density of the running variable would be 0 just below the threshold People would like to be out of treatment if it’s undesirable (McCrary 2008) proposes a density test (i.e., a formal test for manipulation of the assignment variable). \\(H_0\\): The continuity of the density of the running variable (i.e., the covariate that underlies the assignment at the discontinuity point) \\(H_a\\): A jump in the density function at that point Even though it’s not a requirement that the density of the running must be continuous at the cutoff, but a discontinuity can suggest manipulations. (J. L. Zhang and Rubin 2003; Lee 2009; Aronow, Baron, and Pinson 2019) offers a guide to know when you should warrant the manipulation Usually it’s better to know your research design inside out so that you can suspect any manipulation attempts. We would suspect the direction of the manipulation. And typically, it’s one-way manipulation. In cases where we might have both ways, theoretically they would cancel each other out. We could also observe partial manipulation in reality (e.g., when subjects can only imperfectly manipulate). But typically, as we treat it like fuzzy RD, we would not have identification problems. But complete manipulation would lead to serious identification issues. Remember: even in cases where we fail to reject the null hypothesis for the density test, we could not rule out completely that identification problem exists (just like any other hypotheses) Bunching happens when people self-select to a specific value in the range of a variable (e.g., key policy thresholds). Review paper (Kleven 2016) This test can only detect manipulation that changes the distribution of the running variable. If you can choose the cutoff point or you have 2-sided manipulation, this test will fail to detect it. Histogram in bunching is similar to a density curve (we want narrower bins, wider bins bias elasticity estimates) We can also use bunching method to study individuals’ or firm’s responsiveness to changes in policy. Under RD, we assume that we don’t have any manipulation in the running variable. However, bunching behavior is a manipulation by firms or individuals. Thus, violating this assumption. Bunching can fix this problem by estimating what densities of individuals would have been without manipulation (i.e., manipulation-free counterfactual). The fraction of persons who manipulated is then calculated by comparing the observed distribution to manipulation-free counterfactual distributions. Under RD, we do not need this step because the observed and manipulation-free counterfactual distributions are assumed to be the same. RD assume there is no manipulation (i.e., assume the manipulation-free counterfactual distribution) When running variable and outcome variable are simultaneously determined, we can use a modified RDD estimator to have consistent estimate. (Bajari et al. 2011) Assumptions: Manipulation is one-sided: People move one way (i.e., either below the threshold to above the threshold or vice versa, but not to or away the threshold), which is similar to the monotonicity assumption under instrumental variable 33.1.3.1 Manipulation is bounded (also known as regularity assumption): so that we can use people far away from this threshold to derive at our counterfactual distribution [Blomquist et al. (2021)](Bertanha, McCallum, and Seegert 2021) Steps: Identify the window in which the running variable contains bunching behavior. We can do this step empirically based on Bosch, Dekker, and Strohmaier (2020). Additionally robustness test is needed (i.e., varying the manipulation window). Estimate the manipulation-free counterfactual Calculating the standard errors for inference can follow (Chetty, Hendren, and Katz 2016) where we bootstrap re-sampling residuals in the estimation of the counts of individuals within bins (large data can render this step unnecessary). If we pass the bunching test, we can move on to the Placebo Test McCrary (2008) test A jump in the density at the threshold (i.e., discontinuity) hold can serve as evidence for sorting around the cutoff point library(rdd) # you only need the runing variable and the cutoff point # Example by the package&#39;s authors #No discontinuity x&lt;-runif(1000,-1,1) DCdensity(x,0) #&gt; [1] 0.6126802 #Discontinuity x&lt;-runif(1000,-1,1) x&lt;-x+2*(runif(1000,-1,1)&gt;0&amp;x&lt;0) DCdensity(x,0) #&gt; [1] 0.0008519227 Cattaneo, Idrobo, and Titiunik (2019) test library(rddensity) # Example by the package&#39;s authors # Continuous Density set.seed(1) x &lt;- rnorm(2000, mean = -0.5) rdd &lt;- rddensity(X = x, vce = &quot;jackknife&quot;) summary(rdd) #&gt; #&gt; Manipulation testing using local polynomial density estimation. #&gt; #&gt; Number of obs = 2000 #&gt; Model = unrestricted #&gt; Kernel = triangular #&gt; BW method = estimated #&gt; VCE method = jackknife #&gt; #&gt; c = 0 Left of c Right of c #&gt; Number of obs 1376 624 #&gt; Eff. Number of obs 354 345 #&gt; Order est. (p) 2 2 #&gt; Order bias (q) 3 3 #&gt; BW est. (h) 0.514 0.609 #&gt; #&gt; Method T P &gt; |T| #&gt; Robust -0.6798 0.4966 #&gt; #&gt; #&gt; P-values of binomial tests (H0: p=0.5). #&gt; #&gt; Window Length / 2 &lt;c &gt;=c P&gt;|T| #&gt; 0.036 28 20 0.3123 #&gt; 0.072 46 39 0.5154 #&gt; 0.107 68 59 0.4779 #&gt; 0.143 94 79 0.2871 #&gt; 0.179 122 103 0.2301 #&gt; 0.215 145 130 0.3986 #&gt; 0.250 163 156 0.7370 #&gt; 0.286 190 176 0.4969 #&gt; 0.322 214 200 0.5229 #&gt; 0.358 249 218 0.1650 # you have to specify your own plot (read package manual) 24.2.3 Placebo Tests Also known as Discontinuities in Average Outcomes at Other Values We should not see any jumps at other values (either \\(X_i &lt;c\\) or \\(X_i \\ge c\\)) Use the same bandwidth you use for the cutoff, and move it along the running variable: testing for a jump in the conditional mean of the outcome at the median of the running variable. Also known as falsification checks Before and after the cutoff point, we can run the placebo test to see whether X’s are different). The placebo test is where you expect your coefficients to be not different from 0. This test can be used for Testing no discontinuity in predetermined variables: Testing other discontinuities Placebo outcomes: we should see any changes in other outcomes that shouldn’t have changed. Inclusion and exclusion of covariates: RDD parameter estimates should not be sensitive to the inclusion or exclusion of other covariates. This is analogous to Experimental Design where we cannot only test whether the observables are similar in both treatment and control groups (if we reject this, then we don’t have random assignment), but we cannot test unobservables. Balance on observable characteristics on both sides \\[ Z_i = \\alpha_0 + \\alpha_1 f(x_i) + [I(x_i \\ge c)] \\alpha_2 + [f(x_i) \\times I(x_i \\ge c)]\\alpha_3 + u_i \\] where \\(x_i\\) is the running variable \\(Z_i\\) is other characteristics of people (e.g., age, etc) Theoretically, \\(Z_i\\) should no be affected by treatment. Hence, \\(E(\\alpha_2) = 0\\) Moreover, when you have multiple \\(Z_i\\), you typically have to simulate joint distribution (to avoid having significant coefficient based on chance). The only way that you don’t need to generate joint distribution is when all \\(Z_i\\)’s are independent (unlikely in reality). Under RD, you shouldn’t have to do any Matching Methods. Because just like when you have random assignment, there is no need to make balanced dataset before and after the cutoff. If you have to do balancing, then your RD assumptions are probably wrong in the first place. 24.2.4 Sensitivity to Bandwidth Choice Methods for bandwidth selection Ad-hoc or substantively driven Data driven: cross validation Conservative approach: (Calonico, Cattaneo, and Farrell 2020) The objective is to minimize the mean squared error between the estimated and actual treatment effects. Then, we need to see how sensitive our results will be dependent on the choice of bandwidth. In some cases, the best bandwidth for testing covariates may not be the best bandwidth for treating them, but it may be close. # find optimal bandwidth by Imbens-Kalyanaraman rdd::IKbandwidth(running_var, outcome_var, cutpoint = &quot;&quot;, kernel = &quot;triangular&quot;) # can also pick other kernels 24.2.5 Manipulation Robust Regression Discontinuity Bounds McCrary (2008) linked density jumps at cutoffs in RD studies to potential manipulation. If no jump is detected, researchers proceed with RD analysis; if detected, they halt using the cutoff for inference. Some studies use the “doughnut-hole” method, excluding near-cutoff observations and extrapolating, which contradicts RD principles. False negative could be due to a small sample size and can lead to biased estimates, as units near the cutoff may still differ in unobserved ways. Even correct rejections of no manipulation may overlook that the data can still be informative despite modest manipulation. Gerard, Rokkanen, and Rothe (2020) introduces a systematic approach to handle potentially manipulated variables in RD designs, addressing both concerns. The model introduces two types of unobservable units in RD designs: always-assigned units, which are always on one side of the cutoff, potentially-assigned units, which fit traditional RD assumptions. The standard RD model is a subset of this broader model, which assumes no always-assigned units. Identifying assumption: manipulation occurs through one-sided selection. The approach does not make a binary decision on manipulation in RD designs but assesses its extent and worst-case impact. Two steps are used: Determining the proportion of always-assigned units using the discontinuity at the cutoff Bounding treatment effects based on the most extreme feasible outcomes for these units. For sharp RD designs, bounds are established by trimming extreme outcomes near the cutoff; for fuzzy designs, the process involves more complex adjustments due to additional model constraints. Extensions of the study use covariate information and economic behavior assumptions to refine these bounds and identify covariate distributions among unit types at the cutoff. Setup Independent data points \\((X_i, Y_i, D_i)\\), where \\(X_i\\) is the running variable, \\(Y_i\\) is the outcome, and \\(D_i\\) indicates treatment status (1 if treated, 0 otherwise). Treatment is assigned based on \\(X_i \\geq c\\). The design is sharp if \\(D_i = I(X_i \\geq c)\\) and fuzzy otherwise. The population is divided into: Potentially-assigned units (\\(M_i = 0\\)): Follow the standard RD framework, with potential outcomes \\(Y_i(d)\\) and potential treatment states \\(D_i(x)\\). Always-assigned units (\\(M_i = 1\\)): These units do not require potential outcomes or states, and always have \\(X_i\\) values beyond the cutoff. Assumptions Local Independence and Continuity: \\(P(D = 1|X = c^+, M = 0) &gt; P(D = 1|X = c^-, M = 0)\\) No defiers: \\(P(D^+ \\geq D^-|X = c, M = 0) = 1\\) Continuity in potential outcomes and states at \\(c\\). \\(F_{X|M=0}(x)\\) is differentiable at \\(c\\), with a positive derivative. Smoothness of the Running Variable among Potentially-Assigned Units: The derivative of \\(F_{X|M=0}(x)\\) is continuous at \\(c\\). Restrictions on Always-Assigned Units: \\(P(X \\geq c|M = 1) = 1\\) and \\(F_{X|M=1}(x)\\) is right-differentiable (or left-differentiable) at \\(c\\). This (local) one-sided manipulation assumption allows identification of the proportion of always-assigned units among all units close to the cutoff. When always-assigned unit exist, the RD design is fuzzy because we have Treated and untreated units among the potentially-assigned (below and above the cutoff) Always-assigned units (above the cutoff). Causal Effects of Interest causal effects among potentially-assigned units: \\[ \\Gamma = E[Y(1) - Y(0) | X = c, D^+ &gt; D^-, M = 0] \\] This parameter represents the local average treatment effect (LATE) for the subgroup of “compliers”—units that receive treatment if and only if their running variable \\(X_i\\) exceeds a certain cutoff. The parameter \\(\\Gamma\\) captures the causal effect of changes in the cutoff level on treatment status among potentially-assigned compliers. RD designs with a manipulated running variable “Doughnut-Hole” RD Designs: Focuses on actual observations at the cutoff, not hypothetical true values. Provides a direct and observable estimate of causal effects, without reliance on hypothetical constructs. Exclude observations around the cutoff and use extrapolation from the trends outside this excluded range to infer causal effects at the cutoff Assumes a hypothetical population existing in a counterfactual scenario without manipulation. Requires strong assumptions about the nature of manipulation and the minimal impact of extrapolation biases. Identification of \\(\\tau\\) in RD Designs Identification challenges arise due to the inability to distinguish always-assigned from potentially-assigned units, thus Γ is not point identified. We establish sharp bounds on Γ These bounds are supported by the stochastic dominance of the potential outcome CDFs over observed distributions. Unit Types and Notation: \\(C_0\\): Potentially-assigned compliers. \\(A_0\\): Potentially-assigned always-takers. \\(N_0\\): Potentially-assigned never-takers. \\(T_1\\): Always-assigned treated units. \\(U_1\\): Always-assigned untreated units. The measure \\(\\tau\\) , representing the proportion of always-assigned units near the cutoff, is point identified by the discontinuity in the observed running variable density \\(f_X\\) at the cutoff Sharp RD: Units to the left of the cutoff are potentially assigned units. The distribution of their observed outcomes (\\(Y\\)) are the outcomes \\(Y(0)\\) of potentially-assigned compliers (\\(C_0\\)) at the cutoff. To determine the bounds on the treatment effect (\\(\\Gamma\\)), we need to assess the distribution of treated outcomes (\\(Y(1)\\)) for the same potentially-assigned compliers at the cutoff. Information regarding the treated outcomes (\\(Y(1)\\)) comes exclusively from the subpopulation of treated units, which includes both potentially-assigned compliers (\\(C_0\\)) and those always assigned units (\\(T_1\\)). With \\(\\tau\\) point identified, we can estimate sharp bounds on \\(\\Gamma\\). Fuzzy RD: Note: Table on page 848 (Gerard, Rokkanen, and Rothe 2020) Subpopulation Types of units \\(X = c^+, D = 1\\) \\(C_0, A_0, T_1\\) \\(X = c^-, D = 1\\) \\(A_0\\) \\(X= c^+, D = 0\\) \\(N_0, U_1\\) \\(X = c^-, D = 0\\) \\(C_0, N_0\\) Unit Types and Combinations: There are five distinct unit types and four combinations of treatment assignments and decisions relevant to the analysis. These distinctions are important because they affect how potential outcomes are analyzed and bounded. Outcome Distributions: The analysis involves estimating the distribution of potential outcomes (both treated and untreated) among potentially-assigned compliers at the cutoff. Three-Step Process: Potential Outcomes Under Treatment: Bounds on the distribution of treated outcomes are determined using data from treated units. Potential Outcomes Under Non-Treatment: Bounds on the distribution of untreated outcomes are derived using data from untreated units. Bounds on Parameters of Interest: Using the bounds from the first two steps, sharp upper and lower bounds on the local average treatment effect are derived. Extreme Value Consideration: The bounds for treatment effects are based on “extreme” scenarios under worst-case assumptions about the distribution of potential outcomes, making them sharp but empirically relevant within the data constraints. Extensions: Quantile Treatment Effects: alternative to average effects by focusing on different quantiles of the outcome distribution, which are less affected by extreme values. Applicability to Discrete Outcomes Behavioral Assumptions Impact: Assuming a high likelihood of treatment among always-assigned units can narrow the bounds of treatment effects by refining the analysis of potential outcomes. Utilization of Covariates: Incorporating covariates measured prior to treatment can refine the bounds on treatment effects and help target policies by identifying covariate distributions among different unit types. Notes: Quantile Treatment Effects (QTEs): QTE bounds are less sensitive to the tails of the outcome distribution, making them tighter than ATE bounds. Inference on ATEs is sensitive to the extent of manipulation, with confidence intervals widening significantly with small degrees of assumed manipulation. Inference on QTEs is less affected by manipulation, remaining meaningful even with larger degrees of manipulation. Alternative Inference Strategy when manipulation is believed to be unlikely. Try different hypothetical values of \\(\\tau\\) devtools::install_github(&quot;francoisgerard/rdbounds/R&quot;) library(formattable) library(data.table) library(rdbounds) set.seed(123) df &lt;- rdbounds_sampledata(10000, covs = FALSE) #&gt; [1] &quot;True tau: 0.117999815082062&quot; #&gt; [1] &quot;True treatment effect on potentially-assigned: 2&quot; #&gt; [1] &quot;True treatment effect on right side of cutoff: 2.35399944524618&quot; head(df) #&gt; x y treatment #&gt; 1 -1.2532616 3.489563 0 #&gt; 2 -0.5146925 3.365232 0 #&gt; 3 3.4853777 6.193533 0 #&gt; 4 0.1576616 8.820440 1 #&gt; 5 0.2890962 4.791972 0 #&gt; 6 3.8350019 7.316907 0 rdbounds_est &lt;- rdbounds( y = df$y, x = df$x, # covs = as.factor(df$cov), treatment = df$treatment, c = 0, discrete_x = FALSE, discrete_y = FALSE, bwsx = c(.2, .5), bwy = 1, # for median effect use # type = &quot;qte&quot;, # percentiles = .5, kernel = &quot;epanechnikov&quot;, orders = 1, evaluation_ys = seq(from = 0, to = 15, by = 1), refinement_A = TRUE, refinement_B = TRUE, right_effects = TRUE, yextremes = c(0, 15), num_bootstraps = 5 ) #&gt; [1] &quot;The proportion of always-assigned units just to the right of the cutoff is estimated to be 0.04209&quot; #&gt; [1] &quot;2024-05-13 19:12:33 Estimating CDFs for point estimates&quot; #&gt; [1] &quot;2024-05-13 19:12:33 .....Estimating CDFs for units just to the right of the cutoff&quot; #&gt; [1] &quot;2024-05-13 19:12:35 Estimating CDFs with nudged tau (tau_star)&quot; #&gt; [1] &quot;2024-05-13 19:12:35 .....Estimating CDFs for units just to the right of the cutoff&quot; #&gt; [1] &quot;2024-05-13 19:12:38 Beginning parallelized output by bootstrap..&quot; #&gt; [1] &quot;2024-05-13 19:12:42 Computing Confidence Intervals&quot; #&gt; [1] &quot;2024-05-13 19:12:51 Time taken:0.3 minutes&quot; rdbounds_summary(rdbounds_est, title_prefix = &quot;Sample Data Results&quot;) #&gt; [1] &quot;Time taken: 0.3 minutes&quot; #&gt; [1] &quot;Sample size: 10000&quot; #&gt; [1] &quot;Local Average Treatment Effect:&quot; #&gt; $tau_hat #&gt; [1] 0.04209028 #&gt; #&gt; $tau_hat_CI #&gt; [1] 0.1671043 0.7765031 #&gt; #&gt; $takeup_increase #&gt; [1] 0.7521208 #&gt; #&gt; $takeup_increase_CI #&gt; [1] 0.7065353 0.7977063 #&gt; #&gt; $TE_SRD_naive #&gt; [1] 1.770963 #&gt; #&gt; $TE_SRD_naive_CI #&gt; [1] 1.541314 2.000612 #&gt; #&gt; $TE_SRD_bounds #&gt; [1] 1.569194 1.912681 #&gt; #&gt; $TE_SRD_CI #&gt; [1] -0.1188634 3.5319468 #&gt; #&gt; $TE_SRD_covs_bounds #&gt; [1] NA NA #&gt; #&gt; $TE_SRD_covs_CI #&gt; [1] NA NA #&gt; #&gt; $TE_FRD_naive #&gt; [1] 2.356601 #&gt; #&gt; $TE_FRD_naive_CI #&gt; [1] 1.995430 2.717772 #&gt; #&gt; $TE_FRD_bounds #&gt; [1] 1.980883 2.362344 #&gt; #&gt; $TE_FRD_CI #&gt; [1] -0.6950823 4.6112538 #&gt; #&gt; $TE_FRD_bounds_refinementA #&gt; [1] 1.980883 2.357499 #&gt; #&gt; $TE_FRD_refinementA_CI #&gt; [1] -0.6950823 4.6112538 #&gt; #&gt; $TE_FRD_bounds_refinementB #&gt; [1] 1.980883 2.351411 #&gt; #&gt; $TE_FRD_refinementB_CI #&gt; [1] -0.6152215 4.2390830 #&gt; #&gt; $TE_FRD_covs_bounds #&gt; [1] NA NA #&gt; #&gt; $TE_FRD_covs_CI #&gt; [1] NA NA #&gt; #&gt; $TE_SRD_CIs_manipulation #&gt; [1] NA NA #&gt; #&gt; $TE_FRD_CIs_manipulation #&gt; [1] NA NA #&gt; #&gt; $TE_SRD_right_bounds #&gt; [1] 1.376392 2.007746 #&gt; #&gt; $TE_SRD_right_CI #&gt; [1] -5.036752 5.889137 #&gt; #&gt; $TE_FRD_right_bounds #&gt; [1] 1.721121 2.511504 #&gt; #&gt; $TE_FRD_right_CI #&gt; [1] -6.663269 7.414185 rdbounds_est_tau &lt;- rdbounds( y = df$y, x = df$x, # covs = as.factor(df$cov), treatment = df$treatment, c = 0, discrete_x = FALSE, discrete_y = FALSE, bwsx = c(.2, .5), bwy = 1, kernel = &quot;epanechnikov&quot;, orders = 1, evaluation_ys = seq(from = 0, to = 15, by = 1), refinement_A = TRUE, refinement_B = TRUE, right_effects = TRUE, potential_taus = c(.025, .05, .1, .2), yextremes = c(0, 15), num_bootstraps = 5 ) #&gt; [1] &quot;The proportion of always-assigned units just to the right of the cutoff is estimated to be 0.04209&quot; #&gt; [1] &quot;2024-05-13 19:12:52 Estimating CDFs for point estimates&quot; #&gt; [1] &quot;2024-05-13 19:12:52 .....Estimating CDFs for units just to the right of the cutoff&quot; #&gt; [1] &quot;2024-05-13 19:12:53 Estimating CDFs with nudged tau (tau_star)&quot; #&gt; [1] &quot;2024-05-13 19:12:53 .....Estimating CDFs for units just to the right of the cutoff&quot; #&gt; [1] &quot;2024-05-13 19:12:56 Beginning parallelized output by bootstrap..&quot; #&gt; [1] &quot;2024-05-13 19:13:02 Estimating CDFs with fixed tau value of: 0.025&quot; #&gt; [1] &quot;2024-05-13 19:13:02 Estimating CDFs with fixed tau value of: 0.05&quot; #&gt; [1] &quot;2024-05-13 19:13:02 Estimating CDFs with fixed tau value of: 0.1&quot; #&gt; [1] &quot;2024-05-13 19:13:02 Estimating CDFs with fixed tau value of: 0.2&quot; #&gt; [1] &quot;2024-05-13 19:13:03 Beginning parallelized output by bootstrap x fixed tau..&quot; #&gt; [1] &quot;2024-05-13 19:13:09 Computing Confidence Intervals&quot; #&gt; [1] &quot;2024-05-13 19:13:19 Time taken:0.46 minutes&quot; causalverse::plot_rd_aa_share(rdbounds_est_tau) # For SRD (default) # causalverse::plot_rd_aa_share(rdbounds_est_tau, rd_type = &quot;FRD&quot;) # For FRD References "],["fuzzy-rd-design.html", "24.3 Fuzzy RD Design", " 24.3 Fuzzy RD Design When you have cutoff that does not perfectly determine treatment, but creates a discontinuity in the likelihood of receiving the treatment, you need another instrument For those that are close to the cutoff, we create an instrument for \\(D_i\\) \\[ Z_i= \\begin{cases} 1 &amp; \\text{if } X_i \\ge c \\\\ 0 &amp; \\text{if } X_c &lt; c \\end{cases} \\] Then, we can estimate the effect of the treatment for compliers only (i.e., those treatment \\(D_i\\) depends on \\(Z_i\\)) The LATE parameter \\[ \\lim_{c - \\epsilon \\le X \\le c + \\epsilon, \\epsilon \\to 0}( \\frac{E(Y |Z = 1) - E(Y |Z=0)}{E(D|Z = 1) - E(D|Z = 0)}) \\] equivalently, the canonical parameter: \\[ \\frac{lim_{x \\downarrow c}E(Y|X = x) - \\lim_{x \\uparrow c} E(Y|X = x)}{\\lim_{x \\downarrow c } E(D |X = x) - \\lim_{x \\uparrow c}E(D |X=x)} \\] Two equivalent ways to estimate First Sharp RDD for \\(Y\\) Sharp RDD for \\(D\\) Take the estimate from step 1 divide by that of step 2 Second: Subset those observations that are close to \\(c\\) and run instrumental variable \\(Z\\) "],["regression-kink-design.html", "24.4 Regression Kink Design", " 24.4 Regression Kink Design If the slope of the treatment intensity changes at the cutoff (instead of the level of treatment assignment), we can have regression kink design Example: unemployment benefits Sharp Kink RD parameter \\[ \\alpha_{KRD} = \\frac{\\lim_{x \\downarrow c} \\frac{d}{dx}E[Y_i |X_i = x]- \\lim_{x \\uparrow c} \\frac{d}{dx}E[Y_i |X_i = x]}{\\lim_{x \\downarrow c} \\frac{d}{dx}b(x) - \\lim_{x \\uparrow c} \\frac{d}{dx}b(x)} \\] where \\(b(x)\\) is a known function inducing “kink” Fuzzy Kink RD parameter \\[ \\alpha_{KRD} = \\frac{\\lim_{x \\downarrow c} \\frac{d}{dx}E[Y_i |X_i = x]- \\lim_{x \\uparrow c} \\frac{d}{dx}E[Y_i |X_i = x]}{\\lim_{x \\downarrow c} \\frac{d}{dx}E[D_i |X_i = x]- \\lim_{x \\uparrow c} \\frac{d}{dx}E[D_i |X_i = x]} \\] "],["multi-cutoff.html", "24.5 Multi-cutoff", " 24.5 Multi-cutoff \\[ \\tau (x,c)= E[Y_{1i} - Y_{0i}|X_i = x, C_i = c] \\] "],["multi-score.html", "24.6 Multi-score", " 24.6 Multi-score Multi-score (in multiple dimensions) (e.g., math and English cutoff for certain honor class): \\[ \\tau (x_1, x_2) = E[Y_{1i} - Y_{0i}|X_{1i} = x_1, X_{2i} = x] \\] "],["steps-for-sharp-rd.html", "24.7 Steps for Sharp RD", " 24.7 Steps for Sharp RD Graph the data by computing the average value of the outcome variable over a set of bins (large enough to see a smooth graph, and small enough to make the jump around the cutoff clear). Run regression on both sides of the cutoff to get the treatment effect Robustness checks: Assess possible jumps in other variables around the cutoff Hypothesis testing for bunching Placebo tests Varying bandwidth "],["steps-for-fuzzy-rd.html", "24.8 Steps for Fuzzy RD", " 24.8 Steps for Fuzzy RD Graph the data by computing the average value of the outcome variable over a set of bins (large enough to see a smooth graph, and small enough to make the jump around the cutoff clear). Graph the probability of treatment Estimate the treatment effect using 2SLS Robustness checks: Assess possible jumps in other variables around the cutoff Hypothesis testing for bunching Placebo tests Varying bandwidth "],["steps-for-rdit-regression-discontinuity-in-time.html", "24.9 Steps for RDiT (Regression Discontinuity in Time)", " 24.9 Steps for RDiT (Regression Discontinuity in Time) Notes: Additional assumption: Time-varying confounders change smoothly across the cutoff date Typically used in policy implementation in the same date for all subjects, but can also be used for cases where implementation dates are different between subjects. In the second case, researchers typically use different RDiT specification for each time series. Sometimes the date of implementation is not randomly assigned by chosen strategically. Hence, RDiT should be thought of as the “discontinuity at a threshold” interpretation of RD (not as “local randomization”). (C. Hausman and Rapson 2018, 8) Normal RD uses variation in the \\(N\\) dimension, while RDiT uses variation in the \\(T\\) dimension Choose polynomials based on BIC typically. And can have either global polynomial or pre-period and post-period polynomial for each time series (but usually the global one will perform better) Could use augmented local linear outlined by (C. Hausman and Rapson 2018, 12), where estimate the model with all the control first then take the residuals to include in the model with the RDiT treatment (remember to use bootstrapping method to account for the first-stage variance in the second stage). Pros: can overcome cases where there is no cross-sectional variation in treatment implementation (DID is not feasible) There are papers that use both RDiT and DID to (1) see the differential treatment effects across individuals/ space (Auffhammer and Kellogg 2011) or (2) compare the 2 estimates where the control group’s validity is questionable (Gallego, Montero, and Salas 2013). Better than pre/post comparison because it can include flexible controls Better than event studies because it can use long-time horizons (may not be too relevant now since the development long-time horizon event studies), and it can use higher-order polynomials time control variables. Cons: Taking observation for from the threshold (in time) can bias your estimates because of unobservables and time-series properties of the data generating process. (McCrary 2008) test is not possible (see Sorting/Bunching/Manipulation) because when the density of the running (time) is uniform, you can’t use the test. Time-varying unobservables may impact the dependent variable discontinuously Error terms are likely to include persistence (serially correlated errors) Researchers cannot model time-varying treatment under RDiT In a small enough window, the local linear specification is fine, but the global polynomials can either be too big or too small (C. Hausman and Rapson 2018) Biases Time-Varying treatment Effects increase sample size either by more granular data (greater frequency): will not increase power because of the problem of serial correlation increasing time window: increases bias from other confounders 2 additional assumption: Model is correctly specified (with all confoudners or global polynomial approximation) Treatment effect is correctly specified (whether it’s smooth and constant, or varies) These 2 assumptions do not interact ( we don’t want them to interact - i.e., we don’t want the polynomial correlated with the unobserved variation in the treatment effect) There usually a difference between short-run and long-run treatment effects, but it’s also possibly that the bias can stem from the over-fitting problem of the polynomial specification. (C. Hausman and Rapson 2018, 544) Autoregression (serial dependence) Need to use clustered standard errors to account for serial dependence in the residuals In the case of serial dependence in \\(\\epsilon_{it}\\), we don’t have a solution, including a lagged dependent variable would misspecify the model (probably find another research project) In the case of serial dependence in \\(y_{it}\\), with long window, it becomes fuzzy to what you try to recover. You can include the lagged dependent variable (bias can still come from the time-varying treatment or over-fitting of the global polynomial) Sorting and Anticipation Effects Cannot run the (McCrary 2008) because the density of the time running variable is uniform Can still run tests to check discontinuities in other covariates (you want no discontinuities) and discontinuities in the outcome variable at other placebo thresholds ( you don’t want discontinuities) Hence, it’s hard to argue for the causal effect here because it could be the total effect of the causal treatment and the unobserved sorting/anticipation/adaptation/avoidance effects. You can only argue that there is no such behavior Recommendations for robustness check following (C. Hausman and Rapson 2018, 549) Plot the raw data and residuals (after removing confounders or trend). With varying polynomial and local linear controls, inconsistent results can be a sign of time-varying treatment effects. Using global polynomial, you could overfit, then show polynomial with different order and alternative local linear bandwidths. If the results are consistent, you’re okay Placebo Tests: estimate another RD (1) on another location or subject (that did not receive the treatment) or (2) use another date. Plot RD discontinuity on continuous controls Donut RD to see if avoiding the selection close to the cutoff would yield better results (Barreca et al. 2011) Test for auto-regression (using only pre-treatment data). If there is evidence for autoregression, include the lagged dependent variable Augmented local linear (no need to use global polynomial and avoid over-fitting) Use full sample to exclude the effect of important predictors Estimate the conditioned second stage on a smaller sample bandwidth Examples from (C. Hausman and Rapson 2018, 534) in econ (Davis 2008): Air quality (Auffhammer and Kellogg 2011): Air quality (H. Chen et al. 2018): Air quality (De Paola, Scoppa, and Falcone 2013): car accidents (Gallego, Montero, and Salas 2013): air quality (Bento et al. 2014): Traffic (M. L. Anderson 2014): Traffic (Burger, Kaffine, and Yu 2014): Car accidents (Brodeur et al. 2021): Covid19 lock-downs on well-being marketing M. R. Busse et al. (2013): Vehicle prices (X. Chen et al. 2009): Customer Satisfaction (M. R. Busse, Simester, and Zettelmeyer 2010): Vehicle prices (Davis and Kahn 2010): vehicle prices References "],["evaluation-of-an-rd.html", "24.10 Evaluation of an RD", " 24.10 Evaluation of an RD Evidence for (either formal tests or graphs) Treatment and outcomes change discontinuously at the cutoff, while other variables and pre-treatment outcomes do not. No manipulation of the assignment variable. Results are robust to various functional forms of the forcing variable Is there any other (unobserved) confound that could cause the discontinuous change at the cutoff (i.e., multiple forcing variables / bundling of institutions)? External Validity: How likely the result at the cutoff will generalize? General Model \\[ Y_i = \\beta_0 + f(x_i) \\beta_1 + [I(x_i \\ge c)]\\beta_2 + \\epsilon_i \\] where \\(f(x_i)\\) is any functional form of \\(x_i\\) Simple case When \\(f(x_i) = x_i\\) (linear function) \\[ Y_i = \\beta_0 + x_i \\beta_1 + [I(x_i \\ge c)]\\beta_2 + \\epsilon_i \\] RD gives you \\(\\beta_2\\) (causal effect) of \\(X\\) on \\(Y\\) at the cutoff point In practice, everyone does \\[ Y_i = \\alpha_0 + f(x) \\alpha _1 + [I(x_i \\ge c)]\\alpha_2 + [f(x_i)\\times [I(x_i \\ge c)]\\alpha_3 + u_i \\] where we estimate different slope on different sides of the line and if you estimate \\(\\alpha_3\\) to be no different from 0 then we return to the simple case Notes: Sparse data can make \\(\\alpha_3\\) large differential effect People are very skeptical when you have complex \\(f(x_i)\\), usual simple function forms (e.g., linear, squared term, etc.) should be good. However, if you still insist, then non-parametric estimation can be your best bet. Bandwidth of \\(c\\) (window) Closer to \\(c\\) can give you lower bias, but also efficiency Wider \\(c\\) can increase bias, but higher efficiency. Optimal bandwidth is very controversial, but usually we have to do it in the appendix for research article anyway. We can either drop observations outside of bandwidth or weight depends on how far and close to \\(c\\) "],["applications.html", "24.11 Applications", " 24.11 Applications Examples in marketing: (Narayanan and Kalyanam 2015) (Hartmann, Nair, and Narayanan 2011): nonparametric estimation and guide to identifying causal marketing mix effects Packages in R (see (Thoemmes, Liao, and Jin 2017) for detailed comparisons): all can handle both sharp and fuzzy RD rdd rdrobust estimation, inference and plot rddensity discontinuity in density tests (Sorting/Bunching/Manipulation) using local polynomials and binomial test rdlocrand covariate balance, binomial tests, window selection rdmulti multiple cutoffs and multiple scores rdpower power, sample selection rddtools Package rdd rdrobust rddtools Coefficient estimator Local linear regression local polynomial regression local polynomial regression bandwidth selectors (G. Imbens and Kalyanaraman 2012) (Calonico, Cattaneo, and Farrell 2020) (G. Imbens and Kalyanaraman 2012) (Calonico, Cattaneo, and Titiunik 2014) (G. Imbens and Kalyanaraman 2012) Kernel functions Triangular Rectangular Epanechnikov Gaussian Epanechnikov Gaussian Bias Correction Local polynomial regression Covariate options Include Include Include Residuals Assumptions testing McCrary sorting McCrary sorting Equality of covariates distribution and mean based on table 1 (Thoemmes, Liao, and Jin 2017) (p. 347) 24.11.1 Example 1 Example by Leihua Ye \\[ Y_i = \\beta_0 + \\beta_1 X_i + \\beta_2 W_i + u_i \\] \\[ X_i = \\begin{cases} 1, W_i \\ge c \\\\ 0, W_i &lt; c \\end{cases} \\] #cutoff point = 3.5 GPA &lt;- runif(1000, 0, 4) future_success &lt;- 10 + 2 * GPA + 10 * (GPA &gt;= 3.5) + rnorm(1000) #install and load the package ‘rddtools’ #install.packages(“rddtools”) library(rddtools) data &lt;- rdd_data(future_success, GPA, cutpoint = 3.5) # plot the dataset plot( data, col = &quot;red&quot;, cex = 0.1, xlab = &quot;GPA&quot;, ylab = &quot;future_success&quot; ) # estimate the sharp RDD model rdd_mod &lt;- rdd_reg_lm(rdd_object = data, slope = &quot;same&quot;) summary(rdd_mod) #&gt; #&gt; Call: #&gt; lm(formula = y ~ ., data = dat_step1, weights = weights) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -2.90364 -0.70348 0.00278 0.66828 3.00603 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 16.90704 0.06637 254.75 &lt;2e-16 *** #&gt; D 10.09058 0.11063 91.21 &lt;2e-16 *** #&gt; x 1.97078 0.03281 60.06 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 0.9908 on 997 degrees of freedom #&gt; Multiple R-squared: 0.9654, Adjusted R-squared: 0.9654 #&gt; F-statistic: 1.392e+04 on 2 and 997 DF, p-value: &lt; 2.2e-16 # plot the RDD model along with binned observations plot( rdd_mod, cex = 0.1, col = &quot;red&quot;, xlab = &quot;GPA&quot;, ylab = &quot;future_success&quot; ) 24.11.2 Example 2 Bowblis and Smith (2021) Occupational licensing can either increase or decrease market efficiency: More information means more efficiency Increased entry barriers (i.e., friction) increase efficiency Components of RD Running variable Cutoff: 120 beds or above Treatment: you have to have the treatment before the cutoff point. Under OLS \\[ Y_i = \\alpha_0 + X_i \\alpha_1 + LW_i \\alpha_2 + \\epsilon_i \\] where \\(LW_i\\) Licensed/certified workers (in fraction format for each center). \\(Y_i\\) = Quality of service Bias in \\(\\alpha_2\\) Mitigation-based: terrible quality can lead to more hiring, which negatively bias \\(\\alpha_2\\) Preference-based: places that have higher quality staff want to keep high quality staffs. Under RD \\[ \\begin{aligned} Y_{ist} &amp;= \\beta_0 + [I(Bed \\ge121)_{ist}]\\beta_1 + f(Size_{ist}) \\beta_2\\\\ &amp;+ [f(Size_{ist}) \\times I(Bed \\ge 121)_{ist}] \\beta_3 \\\\ &amp;+ X_{it} \\delta + \\gamma_s + \\theta_t + \\epsilon_{ist} \\end{aligned} \\] where \\(s\\) = state \\(t\\) = year \\(i\\) = hospital This RD is fuzzy If right near the threshold (bandwidth), we have states with different sorting (i.e., non-random), then we need the fixed-effect for state \\(s\\). But then your RD assumption wrong anyway, then you won’t do it in the first place Technically, we could also run the fixed-effect regression, but because it’s lower in the causal inference hierarchy. Hence, we don’t do it. Moreover, in the RD framework, we don’t include \\(t\\) before treatment (but in the FE we have to include before and after) If we include \\(\\pi_i\\) for each hospital, then we don’t have variation in the causal estimates (because hardly any hospital changes their bed size in the panel) When you have \\(\\beta_1\\) as the intent to treat (because the treatment effect does not coincide with the intent to treat) You cannot take those fuzzy cases out, because it will introduce the selection bias. Note that we cannot drop cases based on behavioral choice (because we will exclude non-compliers), but we can drop when we have particular behaviors ((e.g., people like round numbers). Thus, we have to use Instrument variable 33.1.3.1 Stage 1: \\[ \\begin{aligned} QSW_{ist} &amp;= \\alpha_0 + [I(Bed \\ge121)_{ist}]\\alpha_1 + f(Size_{ist}) \\alpha_2\\\\ &amp;+ [f(Size_{ist}) \\times I(Bed \\ge 121)_{ist}] \\alpha_3 \\\\ &amp;+ X_{it} \\delta + \\gamma_s + \\theta_t + \\epsilon_{ist} \\end{aligned} \\] (Note: you should have different fixed effects and error term - \\(\\delta, \\gamma_s, \\theta_t, \\epsilon_{ist}\\) from the first equation, but I ran out of Greek letters) Stage 2: \\[ \\begin{aligned} Y_{ist} &amp;= \\gamma_0 + \\gamma_1 \\hat{QWS}_{ist} + f(Size_{ist}) \\delta_2 \\\\ &amp;+ [f(Size_{ist}) \\times I(Bed \\ge 121)] \\delta_3 \\\\ &amp;+ X_{it} \\lambda + \\eta_s + \\tau_t + u_{ist} \\end{aligned} \\] The bigger the jump (discontinuity), the more similar the 2 coefficients (\\(\\gamma_1 \\approx \\beta_1\\)) where \\(\\gamma_1\\) is the average treatment effect (of exposing to the policy) \\(\\beta_1\\) will always be closer to 0 than \\(\\gamma_1\\) Figure 1 shows bunching at every 5 units cutoff, but 120 is still out there. If we have manipulable bunching, there should be decrease at 130 Since we have limited number of mass points (at the round numbers), we should clustered standard errors by the mass point 24.11.3 Example 3 Replication of (Carpenter and Dobkin 2009) by Philipp Leppert, dataset from here 24.11.4 Example 4 For a detailed application, see (Thoemmes, Liao, and Jin 2017) where they use rdd, rdrobust, rddtools References "],["synthetic-difference-in-differences.html", "Chapter 25 Synthetic Difference-in-Differences", " Chapter 25 Synthetic Difference-in-Differences by (Arkhangelsky et al. 2021) also known as weighted double-differencing estimators Setting: Researchers use panel data to study effects of policy changes. Panel data: repeated observations across time for various units. Some units exposed to policy at different times than others. Policy changes often aren’t random across units or time. Challenge: Observed covariates might not lead to credible conclusions of no confounding (G. W. Imbens and Rubin 2015) To estimate the effects, either Difference-in-differences (DID) method widely used in applied economics. Synthetic Control (SC) methods offer alternative approach for comparative case studies. Difference between DID and SC: DID: used with many policy-exposed units; relies on “parallel trends” assumption. SC: used with few policy-exposed units; compensates lack of parallel trends by reweighting units based on pre-exposure trends. New proposition: Synthetic Difference in Differences (SDID). Combines features of DID and SC. Reweights and matches pre-exposure trends (similar to SC). Invariant to additive unit-level shifts, valid for large-panel inference (like DID). Attractive features: SDID provides consistent and asymptotically normal estimates. SDID performs on par with or better than DID in traditional DID settings. where DID can only handle completely random treatment assignment, SDID can handle cases where treatment assignment is correlated with some time or unit latent factors. Similarly, SDID is as good as or better than SC in traditional SC settings. Uniformly random treatment assignment results in unbiased outcomes for all methods, but SDID is more precise. SDID reduces bias effectively for non-uniformly random assignments. SDID’s double robustness is akin to the augmented inverse probability weighting estimator Scharfstein, Rotnitzky, and Robins (1999). Very much similar to augmented SC estimator by (Ben-Michael, Feller, and Rothstein 2021; Arkhangelsky et al. 2021, 4112) Ideal case to use SDID estimator is when \\(N_{ctr} \\approx T_{pre}\\) Small \\(T_{post}\\) \\(N_{tr} &lt;\\sqrt{N_{ctr}}\\) Applications in marketing: Lambrecht, Tucker, and Zhang (2024): TV ads on online browsing and sales. Keller, Guyt, and Grewal (2024): soda tax on marketing effectiveness. References "],["understanding.html", "25.1 Understanding", " 25.1 Understanding Consider a traditional time-series cross-sectional data Let \\(Y_{it}\\) denote the outcome for unit \\(i\\) in period \\(t\\) A balanced panel of \\(N\\) units and \\(T\\) time periods \\(W_{it} \\in \\{0, 1\\}\\) is the binary treatment \\(N_c\\) never-treated units (control) \\(N_t\\) treated units after time \\(T_{pre}\\) Steps: Find unit weights \\(\\hat{w}^{sdid}\\) such that \\(\\sum_{i = 1}^{N_c} \\hat{w}_i^{sdid} Y_{it} \\approx N_t^{-1} \\sum_{i = N_c + 1}^N Y_{it} \\forall t = 1, \\dots, T_{pre}\\) (i.e., pre-treatment trends in outcome of the treated similar to those of control units) (similar to SC). Find time weights \\(\\hat{\\lambda}_t\\) such that we have a balanced window (i.e., posttreatment outcomes for control units differ consistently from their weighted average pretreatment outcomes). Estimate the average causal effect of treatment \\[ (\\hat{\\tau}^{sdid}, \\hat{\\mu}, \\hat{\\alpha}, \\hat{\\beta}) = \\arg \\min_{\\tau, \\mu, \\alpha, \\beta} \\{ \\sum_{i = 1}^N \\sum_{t = 1}^T (Y_{it} - \\mu - \\alpha_i - \\beta_ t - W_{it} \\tau)^2 \\hat{w}_i^{sdid} \\hat{\\lambda}_t^{sdid} \\} \\] Better than DiD estimator because \\(\\tau^{did}\\) does not consider time or unit weights \\[ (\\hat{\\tau}^{did}, \\hat{\\mu}, \\hat{\\alpha}, \\hat{\\beta}) = \\arg \\min_{\\tau, \\mu, \\alpha, \\beta} \\{ \\sum_{i = 1}^N \\sum_{t = 1}^T (Y_{it} - \\mu - \\alpha_i - \\beta_ t - W_{it} \\tau)^2 \\} \\] Better than SC estimator because \\(\\tau^{sc}\\) lacks unit fixed effete and time weights \\[ (\\hat{\\tau}^{sc}, \\hat{\\mu}, \\hat{\\beta}) = \\arg \\min_{\\tau, \\mu, \\beta} \\{ \\sum_{i = 1}^N \\sum_{t = 1}^T (Y_{it} - \\mu - \\beta_ t - W_{it} \\tau)^2 \\hat{w}_i^{sdid} \\} \\] DID SC SDID Primary Assumption Absence of intervention leads to parallel evolution across states. Reweights unexposed states to match pre-intervention outcomes of treated state. Reweights control units to ensure a parallel time trend with the treated pre-intervention trend. Reliability Concern Can be unreliable when pre-intervention trends aren’t parallel. Accounts for non-parallel pre-intervention trends by reweighting. Uses reweighting to adjust for non-parallel pre-intervention trends. Treatment of Time Periods All pre-treatment periods are given equal weight. Doesn’t specifically emphasize equal weight for pre-treatment periods. Focuses only on a subset of pre-intervention time periods, selected based on historical outcomes. Goal with Reweighting N/A (doesn’t use reweighting). To match treated state as closely as possible before the intervention. Make trends of control units parallel (not necessarily identical) to the treated pre-intervention. Alternatively, think of our parameter of interest as: \\[ \\hat{\\tau} = \\hat{\\delta}_t - \\sum_{i = 1}^{N_c} \\hat{w}_i \\hat{\\delta}_i \\] where \\(\\hat{\\delta}_t = \\frac{1}{N_t} \\sum_{i = N_c + 1}^N \\hat{\\delta}_i\\) Method Sample Weight Adjusted outcomes (\\(\\hat{\\delta}_i\\)) Interpretation SC \\(\\hat{w}^{sc} = \\min_{w \\in R}l_{unit}(w)\\) \\(\\frac{1}{T_{post}} \\sum_{t = T_{pre} + 1}^T Y_{it}\\) Unweighted treatment period averages DID \\(\\hat{w}_i^{did} = N_c^{-1}\\) \\(\\frac{1}{T_{post}} \\sum_{t = T_{pre}+ 1}^T Y_{it} - \\frac{1}{T_{pre}} \\sum_{t = 1}^{T_{pre}}Y_{it}\\) Unweighted differences between average treatment period and pretreatment outcome SDID \\((\\hat{w}_0, \\hat{w}^{sdid}) = \\min l_{unit}(w_0, w)\\) \\(\\frac{1}{T_{post}} \\sum_{t = T_{pre} + 1}^T Y_{it} - \\sum_{t = 1}^{T_{pre}} \\hat{\\lambda}_t^{sdid} Y_{it}\\) Weighted differences between average treatment period and pretreatment outcome The SDID estimator uses weights: Makes two-way fixed effect regression “local.” Emphasizes units similar in their past to treated units. Prioritizes periods resembling treated periods. Benefits of this localization: Robustness: Using similar units and periods boosts estimator’s robustness. Improved Precision: Weights can eliminate predictable outcome components. The SEs of SDID are smaller than those of SC and DID Caveat: If there’s minor systematic heterogeneity in outcomes, unequal weighting might reduce precision compared to standard DID. Weight Design: Unit Weights: Makes average outcome for treated units roughly parallel to the weighted average for control units. Time Weights: Ensures posttreatment outcomes for control units differ consistently from their weighted average pretreatment outcomes. Weights enhance DID’s plausibility: Raw data often lacks parallel time trends for treated/control units. Similar techniques (e.g., adjusting for covariates or selecting specific time periods) were used before (Callaway and Sant’Anna 2021). SDID automates this process, applying a similar logic to weight both units and time periods. Time Weights in SDID: Removes bias and boosts precision (i.e., minimizes the influence of time periods vastly different from posttreatment periods). Argument for Unit Fixed Effects: Flexibility: Increases model flexibility and thereby bolsters robustness. Enhanced Precision: Unit fixed effects explain a significant portion of outcome variation. SC Weighting &amp; Unit Fixed Effects: Under certain conditions, SC weighting can inherently account for unit fixed effects. For example, when the weighted average outcome for control units in pretreatment is the same as that of the treated units. (unlikely in reality) The use of unit fixed effect in synthetic control regression (i.e., synthetic control with intercept) was proposed before in Doudchenko and Imbens (2016) and Ferman and Pinto (2021) (called DIFP) More details on application Choose unit weights Regularization Parameter: Equal to the size of a typical one-period outcome change for control units in the pre-period, then multiplied by a scaling factor (Arkhangelsky et al. 2021, 4092). Relation to SC Weights: SDID weights are similar to those used in (Abadie, Diamond, and Hainmueller 2010) except two distinctions: Inclusion of an Intercept Term: The weights in SynthDiD do not necessarily make the control pre-trends perfectly match the treated trends, just make them parallel. This flexibility comes from the use of unit fixed effects, which can absorb any consistent differences between units. Regularization Penalty: Adopted from Doudchenko and Imbens (2016) . Enhances the dispersion and ensures the uniqueness of the weights. DID weights are identical to those used in (Abadie, Diamond, and Hainmueller 2010) without intercept and regularization penalty and 1 treated unit. Choose time weights Also include an intercept term, but no regularization (because correlated observations within time periods for the same unit is plausible, but not across units within the same period). Note: To account for time-varying variables in the weights, one can use the residuals of the regression of the observed outcome on these time-varying variables, instead of the observed outcomes themselves (\\(Y_{it}^{res} = Y_{it} - X_{it} \\hat{\\beta}\\), where \\(\\hat{\\beta}\\) come from \\(Y = \\beta X_{it}\\)). The SDID method can account for systematic effects, often referred to as unit effects or unit heterogeneity, which influence treatment assignment (i.e., when treatment assignment is correlated with these systematic effects). Consequently, it provides unbiased estimates, especially valuable when there’s a suspicion that the treatment might be influenced by persistent, unit-specific attributes. Even in cases where we have completely random assignment, SDID, DiD, and SC are unbiased, but SynthDiD has the smallest SE. References "],["application-11.html", "25.2 Application", " 25.2 Application SDID Algorithm Compute regularization parameter \\(\\zeta\\) \\[ \\zeta = (N_{t}T_{post})^{1/4} \\hat{\\sigma} \\] where \\[ \\hat{\\sigma}^2 = \\frac{1}{N_c(T_{pre}- 1)} \\sum_{i = 1}^{N_c} \\sum_{t = 1}^{T_{re}-1}(\\Delta_{it} - \\hat{\\Delta})^2 \\] \\(\\Delta_{it} = Y_{i(t + 1)} - Y_{it}\\) \\(\\hat{\\Delta} = \\frac{1}{N_c(T_{pre} - 1)}\\sum_{i = 1}^{N_c}\\sum_{t = 1}^{T_{pre}-1} \\Delta_{it}\\) Compute unit weights \\(\\hat{w}^{sdid}\\) \\[ (\\hat{w}_0, \\hat{w}^{sidid}) = \\arg \\min_{w_0 \\in R, w \\in \\Omega}l_{unit}(w_0, w) \\] where \\(l_{unit} (w_0, w) = \\sum_{t = 1}^{T_{pre}}(w_0 + \\sum_{i = 1}^{N_c}w_i Y_{it} - \\frac{1}{N_t}\\sum_{i = N_c + 1}^NY_{it})^2 + \\zeta^2 T_{pre}||w||_2^2\\) \\(\\Omega = \\{w \\in R_+^N: \\sum_{i = 1}^{N_c} w_i = 1, w_i = N_t^{-1} \\forall i = N_c + 1, \\dots, N \\}\\) Compute time weights \\(\\hat{\\lambda}^{sdid}\\) \\[ (\\hat{\\lambda}_0 , \\hat{\\lambda}^{sdid}) = \\arg \\min_{\\lambda_0 \\in R, \\lambda \\in \\Lambda} l_{time}(\\lambda_0, \\lambda) \\] where \\(l_{time} (\\lambda_0, \\lambda) = \\sum_{i = 1}^{N_c}(\\lambda_0 + \\sum_{t = 1}^{T_{pre}} \\lambda_t Y_{it} - \\frac{1}{T_{post}} \\sum_{t = T_{pre} + 1}^T Y_{it})^2\\) \\(\\Lambda = \\{ \\lambda \\in R_+^T: \\sum_{t = 1}^{T_{pre}} \\lambda_t = 1, \\lambda_t = T_{post}^{-1} \\forall t = T_{pre} + 1, \\dots, T\\}\\) Compute the SDID estimator \\[ (\\hat{\\tau}^{sdid}, \\hat{\\mu}, \\hat{\\alpha}, \\hat{\\beta}) = \\arg \\min_{\\tau, \\mu, \\alpha, \\beta}\\{ \\sum_{i = 1}^N \\sum_{t = 1}^T (Y_{it} - \\mu - \\alpha_i - \\beta_t - W_{it} \\tau)^2 \\hat{w}_i^{sdid}\\hat{\\lambda}_t^{sdid} \\] SE Estimation Under certain assumptions (errors, samples, and interaction properties between time and unit fixed effects) detailed in (Arkhangelsky et al. 2019, 4107), SDID is asymptotically normal and zero-centered Using its asymptotic variance, conventional confidence intervals can be applied to SDID. \\[ \\tau \\in \\hat{\\tau}^{sdid} \\pm z_{\\alpha/2}\\sqrt{\\hat{V}_\\tau} \\] There are 3 approaches for variance estimation in confidence intervals: Clustered Bootstrap (Efron 1992): Independently resample units. Advantages: Simple to use; robust performance in large panels due to natural approach to inference with panel data where observations of the same unit might be correlated. Disadvantage: Computationally expensive. Jackknife (Miller 1974): Applied to weighted SDID regression with fixed weights. Generally conservative and precise when treated and control units are sufficiently similar. Not recommended for some methods, like the SC estimator, due to potential biases. Appropriate for jackknifing DID without random weights. Placebo Variance Estimation: Can used in cases with only one treated unit or large panels. Placebo evaluations swap out the treated unit for untreated ones to estimate noise. Relies on homoskedasticity across units. Depends on homoskedasticity across units. It hinges on the empirical distribution of residuals from placebo estimators on control units. The validity of the placebo method hinges on consistent noise distribution across units. One treated unit makes nonparametric variance estimation difficult, necessitating homoskedasticity for feasible inference. Detailed analysis available in Conley and Taber (2011). All algorithms are from Arkhangelsky et al. (2021), p. 4109: Bootstrap Variance Estimation For each \\(b\\) from \\(1 \\to B\\): Sample \\(N\\) rows from \\((\\mathbf{Y}, \\mathbf{W})\\) to get (\\(\\mathbf{Y}^{(b)}, \\mathbf{W}^{(b)}\\)) with replacement. If the sample lacks treated or control units, resample. Calculate \\(\\tau^{(b)}\\) using (\\(\\mathbf{Y}^{(b)}, \\mathbf{W}^{(b)}\\)). Calculate variance: \\(\\hat{V}_\\tau = \\frac{1}{B} \\sum_{b = 1}^B (\\hat{\\tau}^{b} - \\frac{1}{B} \\sum_{b = 1}^B \\hat{\\tau}^b)^2\\) Jackknife Variance Estimation For each \\(i\\) from \\(1 \\to N\\): Calculate \\(\\hat{\\tau}^{(-i)}\\): \\(\\arg\\min_{\\tau, \\{\\alpha_j, \\beta_t\\}} \\sum_{j \\neq, i, t}(\\mathbf{Y}_{jt} - \\alpha_j - \\beta_t - \\tau \\mathbf{W}_{it})^2 \\hat{w}_j \\hat{\\lambda}_t\\) Calculate: \\(\\hat{V}_{\\tau} = (N - 1) N^{-1} \\sum_{i = 1}^N (\\hat{\\tau}^{(-i)} - \\hat{\\tau})^2\\) Placebo Variance Estimation For each \\(b\\) from \\(1 \\to B\\) Sample \\(N_t\\) out of \\(N_c\\) without replacement to get the “placebo” treatment Construct a placebo treatment matrix \\(\\mathbf{W}_c^b\\) for the controls Calculate \\(\\hat{\\tau}\\) based on \\((\\mathbf{Y}_c, \\mathbf{W}_c^b)\\) Calculate \\(\\hat{V}_\\tau = \\frac{1}{B}\\sum_{b = 1}^B (\\hat{\\tau}^b - \\frac{1}{B} \\sum_{b = 1}^B \\hat{\\tau}^b)^2\\) 25.2.1 Block Treatment Code provided by the synthdid package library(synthdid) library(tidyverse) # Estimate the effect of California Proposition 99 on cigarette consumption data(&#39;california_prop99&#39;) setup = synthdid::panel.matrices(synthdid::california_prop99) tau.hat = synthdid::synthdid_estimate(setup$Y, setup$N0, setup$T0) # se = sqrt(vcov(tau.hat, method = &#39;placebo&#39;)) plot(tau.hat) + causalverse::ama_theme() setup = synthdid::panel.matrices(synthdid::california_prop99) # Run for specific estimators results_selected = causalverse::panel_estimate(setup, selected_estimators = c(&quot;synthdid&quot;, &quot;did&quot;, &quot;sc&quot;)) results_selected #&gt; $synthdid #&gt; $synthdid$estimate #&gt; synthdid: -15.604 +- NA. Effective N0/N0 = 16.4/38~0.4. Effective T0/T0 = 2.8/19~0.1. N1,T1 = 1,12. #&gt; #&gt; $synthdid$std.error #&gt; [1] 10.05324 #&gt; #&gt; #&gt; $did #&gt; $did$estimate #&gt; synthdid: -27.349 +- NA. Effective N0/N0 = 38.0/38~1.0. Effective T0/T0 = 19.0/19~1.0. N1,T1 = 1,12. #&gt; #&gt; $did$std.error #&gt; [1] 15.81479 #&gt; #&gt; #&gt; $sc #&gt; $sc$estimate #&gt; synthdid: -19.620 +- NA. Effective N0/N0 = 3.8/38~0.1. Effective T0/T0 = Inf/19~Inf. N1,T1 = 1,12. #&gt; #&gt; $sc$std.error #&gt; [1] 11.16422 # to access more details in the estimate object summary(results_selected$did$estimate) #&gt; $estimate #&gt; [1] -27.34911 #&gt; #&gt; $se #&gt; [,1] #&gt; [1,] NA #&gt; #&gt; $controls #&gt; estimate 1 #&gt; Wyoming 0.026 #&gt; Wisconsin 0.026 #&gt; West Virginia 0.026 #&gt; Virginia 0.026 #&gt; Vermont 0.026 #&gt; Utah 0.026 #&gt; Texas 0.026 #&gt; Tennessee 0.026 #&gt; South Dakota 0.026 #&gt; South Carolina 0.026 #&gt; Rhode Island 0.026 #&gt; Pennsylvania 0.026 #&gt; Oklahoma 0.026 #&gt; Ohio 0.026 #&gt; North Dakota 0.026 #&gt; North Carolina 0.026 #&gt; New Mexico 0.026 #&gt; New Hampshire 0.026 #&gt; Nevada 0.026 #&gt; Nebraska 0.026 #&gt; Montana 0.026 #&gt; Missouri 0.026 #&gt; Mississippi 0.026 #&gt; Minnesota 0.026 #&gt; Maine 0.026 #&gt; Louisiana 0.026 #&gt; Kentucky 0.026 #&gt; Kansas 0.026 #&gt; Iowa 0.026 #&gt; Indiana 0.026 #&gt; Illinois 0.026 #&gt; Idaho 0.026 #&gt; Georgia 0.026 #&gt; Delaware 0.026 #&gt; Connecticut 0.026 #&gt; #&gt; $periods #&gt; estimate 1 #&gt; 1988 0.053 #&gt; 1987 0.053 #&gt; 1986 0.053 #&gt; 1985 0.053 #&gt; 1984 0.053 #&gt; 1983 0.053 #&gt; 1982 0.053 #&gt; 1981 0.053 #&gt; 1980 0.053 #&gt; 1979 0.053 #&gt; 1978 0.053 #&gt; 1977 0.053 #&gt; 1976 0.053 #&gt; 1975 0.053 #&gt; 1974 0.053 #&gt; 1973 0.053 #&gt; 1972 0.053 #&gt; 1971 0.053 #&gt; #&gt; $dimensions #&gt; N1 N0 N0.effective T1 T0 T0.effective #&gt; 1 38 38 12 19 19 causalverse::process_panel_estimate(results_selected) #&gt; Method Estimate SE #&gt; 1 SYNTHDID -15.60 10.05 #&gt; 2 DID -27.35 15.81 #&gt; 3 SC -19.62 11.16 25.2.2 Staggered Adoption To apply to staggered adoption settings using the SDID estimator (see examples in Arkhangelsky et al. (2021), p. 4115 similar to Ben-Michael, Feller, and Rothstein (2022)), we can: Apply the SDID estimator repeatedly, once for every adoption date. Using Ben-Michael, Feller, and Rothstein (2022) ’s method, form matrices for each adoption date. Apply SDID and average based on treated unit/time-period fractions. Create multiple samples by splitting the data up by time periods. Each sample should have a consistent adoption date. For a formal note on this special case, see Porreca (2022). It compares the outcomes from using SynthDiD with those from other estimators: Two-Way Fixed Effects (TWFE), The group time average treatment effect estimator from Callaway and Sant’Anna (2021), The partially pooled synthetic control method estimator from Ben-Michael, Feller, and Rothstein (2021), in a staggered treatment adoption context. The findings reveal that SynthDiD produces a different estimate of the average treatment effect compared to the other methods. Simulation results suggest that these differences could be due to the SynthDiD’s data generating process assumption (a latent factor model) aligning more closely with the actual data than the additive fixed effects model assumed by traditional DiD methods. To explore heterogeneity of treatment effect, we can do subgroup analysis (Berman and Israeli 2022, 1092) Method Advantages Disadvantages Procedure Split Data into Subsets Compares treated units to control units within the same subgroup. Each subset uses a different synthetic control, making it challenging to compare effects across subgroups. Split the data into separate subsets for each subgroup. Compute synthetic DID effects for each subset. Control Group Comprising All Non-adopters Control weights match pretrends well for each treated subgroup. Each control unit receives a different weight for each treatment subgroup, making it difficult to compare results due to varying synthetic controls. Use a control group consisting of all non-adopters in each balanced panel cohort analysis. Switch treatment units to the subgroup being analyzed. Perform synthdid analysis. Use All Data to Estimate Synthetic Control Weights (recommend) All units have the same synthetic control. Pretrend match may not be as accurate since it aims to match the average outcome of all treated units, not just a specific subgroup. Use all the data to estimate the synthetic DID control weights. Compute treatment effects using only the treated subgroup units as the treatment units. library(tidyverse) df &lt;- fixest::base_stagg |&gt; dplyr::mutate(treatvar = if_else(time_to_treatment &gt;= 0, 1, 0)) |&gt; dplyr::mutate(treatvar = as.integer(if_else(year_treated &gt; (5 + 2), 0, treatvar))) est &lt;- causalverse::synthdid_est_ate( data = df, adoption_cohorts = 5:7, lags = 2, leads = 2, time_var = &quot;year&quot;, unit_id_var = &quot;id&quot;, treated_period_var = &quot;year_treated&quot;, treat_stat_var = &quot;treatvar&quot;, outcome_var = &quot;y&quot; ) #&gt; adoption_cohort: 5 #&gt; Treated units: 5 Control units: 65 #&gt; adoption_cohort: 6 #&gt; Treated units: 5 Control units: 60 #&gt; adoption_cohort: 7 #&gt; Treated units: 5 Control units: 55 data.frame( Period = names(est$TE_mean_w), ATE = est$TE_mean_w, SE = est$SE_mean_w ) |&gt; causalverse::nice_tab() #&gt; Period ATE SE #&gt; 1 -2 -0.05 0.22 #&gt; 2 -1 0.05 0.22 #&gt; 3 0 -5.07 0.80 #&gt; 4 1 -4.68 0.51 #&gt; 5 2 -3.70 0.79 #&gt; 6 cumul.0 -5.07 0.80 #&gt; 7 cumul.1 -4.87 0.55 #&gt; 8 cumul.2 -4.48 0.53 causalverse::synthdid_plot_ate(est) est_sub &lt;- causalverse::synthdid_est_ate( data = df, adoption_cohorts = 5:7, lags = 2, leads = 2, time_var = &quot;year&quot;, unit_id_var = &quot;id&quot;, treated_period_var = &quot;year_treated&quot;, treat_stat_var = &quot;treatvar&quot;, outcome_var = &quot;y&quot;, # a vector of subgroup id (from unit id) subgroup = c( # some are treated &quot;11&quot;, &quot;30&quot;, &quot;49&quot; , # some are control within this period &quot;20&quot;, &quot;25&quot;, &quot;21&quot;) ) #&gt; adoption_cohort: 5 #&gt; Treated units: 3 Control units: 65 #&gt; adoption_cohort: 6 #&gt; Treated units: 0 Control units: 60 #&gt; adoption_cohort: 7 #&gt; Treated units: 0 Control units: 55 data.frame( Period = names(est_sub$TE_mean_w), ATE = est_sub$TE_mean_w, SE = est_sub$SE_mean_w ) |&gt; causalverse::nice_tab() #&gt; Period ATE SE #&gt; 1 -2 0.32 0.44 #&gt; 2 -1 -0.32 0.44 #&gt; 3 0 -4.29 1.68 #&gt; 4 1 -4.00 1.52 #&gt; 5 2 -3.44 2.90 #&gt; 6 cumul.0 -4.29 1.68 #&gt; 7 cumul.1 -4.14 1.52 #&gt; 8 cumul.2 -3.91 1.82 causalverse::synthdid_plot_ate(est) Plot different estimators library(causalverse) methods &lt;- c(&quot;synthdid&quot;, &quot;did&quot;, &quot;sc&quot;, &quot;sc_ridge&quot;, &quot;difp&quot;, &quot;difp_ridge&quot;) estimates &lt;- lapply(methods, function(method) { synthdid_est_ate( data = df, adoption_cohorts = 5:7, lags = 2, leads = 2, time_var = &quot;year&quot;, unit_id_var = &quot;id&quot;, treated_period_var = &quot;year_treated&quot;, treat_stat_var = &quot;treatvar&quot;, outcome_var = &quot;y&quot;, method = method ) }) plots &lt;- lapply(seq_along(estimates), function(i) { causalverse::synthdid_plot_ate(estimates[[i]], title = methods[i], theme = causalverse::ama_theme(base_size = 6)) }) gridExtra::grid.arrange(grobs = plots, ncol = 2) References "],["difference-in-differences.html", "Chapter 26 Difference-in-differences", " Chapter 26 Difference-in-differences List of packages Examples in marketing (Liaukonyte, Teixeira, and Wilbur 2015): TV ad on online shopping (Yanwen Wang, Lewis, and Schweidel 2018): political ad source and message tone on vote shares and turnout using discontinuities in the level of political ads at the borders (Datta, Knox, and Bronnenberg 2018): streaming service on total music consumption using timing of users adoption of a music streaming service (Janakiraman, Lim, and Rishika 2018): data breach announcement affect customer spending using timing of data breach and variation whether customer info was breached in that event (Israeli 2018): digital monitoring and enforcement on violations using enforcement of min ad price policies (Ramani and Srinivasan 2019): firms respond to foreign direct investment liberalization using India’s reform in 1991. (Pattabhiramaiah, Sriram, and Manchanda 2019): paywall affects readership (Akca and Rao 2020): aggregators for airlines business effect (Lim et al. 2020): nutritional labels on nutritional quality for other brands in a category using variation in timing of adoption of nutritional labels across categories (Guo, Sriram, and Manchanda 2020): payment disclosure laws effect on physician prescription behavior using Timing of the Massachusetts open payment law as the exogenous shock (S. He, Hollenbeck, and Proserpio 2022): using Amazon policy change to examine the causal impact of fake reviews on sales, average ratings. (Peukert et al. 2022): using European General data protection Regulation, examine the impact of policy change on website usage. Examples in econ: (Rosenzweig and Wolpin 2000) (J. D. Angrist and Krueger 2001) (Fuchs-Schündeln and Hassan 2016): macro Show the mechanism via Mediation Under DiD analysis: see (Habel, Alavi, and Linsenmayer 2021) Moderation analysis: see (Goldfarb and Tucker 2011) Steps to trust DID: Visualize the treatment rollout (e.g., panelView). Document the number of treated units in each cohort (e.g., control and treated). Visualize the trajectory of average outcomes across cohorts (if you have multiple periods). Parallel Trends Conduct an event-study analysis with and without covariates. For the case with covariates, check for overlap in covariates between treated and control groups to ensure control group validity (e.g., if the control is relatively small than the treated group, you might not have overlap, and you have to make extrapolation). Conduct sensitivity analysis for parallel trend violations (e.g., honestDiD). References "],["visualization.html", "26.1 Visualization", " 26.1 Visualization library(panelView) library(fixest) library(tidyverse) base_stagg &lt;- fixest::base_stagg |&gt; # treatment status dplyr::mutate(treat_stat = dplyr::if_else(time_to_treatment &lt; 0, 0, 1)) |&gt; select(id, year, treat_stat, y) head(base_stagg) #&gt; id year treat_stat y #&gt; 2 90 1 0 0.01722971 #&gt; 3 89 1 0 -4.58084528 #&gt; 4 88 1 0 2.73817174 #&gt; 5 87 1 0 -0.65103066 #&gt; 6 86 1 0 -5.33381664 #&gt; 7 85 1 0 0.49562631 panelView::panelview( y ~ treat_stat, data = base_stagg, index = c(&quot;id&quot;, &quot;year&quot;), xlab = &quot;Year&quot;, ylab = &quot;Unit&quot;, display.all = F, gridOff = T, by.timing = T ) # alternatively specification panelView::panelview( Y = &quot;y&quot;, D = &quot;treat_stat&quot;, data = base_stagg, index = c(&quot;id&quot;, &quot;year&quot;), xlab = &quot;Year&quot;, ylab = &quot;Unit&quot;, display.all = F, gridOff = T, by.timing = T ) # Average outcomes for each cohort panelView::panelview( data = base_stagg, Y = &quot;y&quot;, D = &quot;treat_stat&quot;, index = c(&quot;id&quot;, &quot;year&quot;), by.timing = T, display.all = F, type = &quot;outcome&quot;, by.cohort = T ) #&gt; Number of unique treatment histories: 10 "],["simple-dif-n-dif.html", "26.2 Simple Dif-n-dif", " 26.2 Simple Dif-n-dif A tool developed intuitively to study “natural experiment”, but its uses are much broader. Fixed Effects Estimator is the foundation for DID Why is dif-in-dif attractive? Identification strategy: Inter-temporal variation between groups Cross-sectional estimator helps avoid omitted (unobserved) common trends Time-series estimator helps overcome omitted (unobserved) cross-sectional differences Consider \\(D_i = 1\\) treatment group \\(D_i = 0\\) control group \\(T= 1\\) After the treatment \\(T =0\\) Before the treatment After (T = 1) Before (T = 0) Treated \\(D_i =1\\) \\(E[Y_{1i}(1)|D_i = 1]\\) \\(E[Y_{0i}(0)|D)i=1]\\) Control \\(D_i = 0\\) \\(E[Y_{0i}(1) |D_i =0]\\) \\(E[Y_{0i}(0)|D_i=0]\\) missing \\(E[Y_{0i}(1)|D=1]\\) The Average Treatment Effect on Treated (ATT) \\[ \\begin{aligned} E[Y_1(1) - Y_0(1)|D=1] &amp;= \\{E[Y(1)|D=1] - E[Y(1)|D=0] \\} \\\\ &amp;- \\{E[Y(0)|D=1] - E[Y(0)|D=0] \\} \\end{aligned} \\] More elaboration: For the treatment group, we isolate the difference between being treated and not being treated. If the untreated group would have been affected in a different way, the DiD design and estimate would tell us nothing. Alternatively, because we can’t observe treatment variation in the control group, we can’t say anything about the treatment effect on this group. Extension More than 2 groups (multiple treatments and multiple controls), and more than 2 period (pre and post) \\[ Y_{igt} = \\alpha_g + \\gamma_t + \\beta I_{gt} + \\delta X_{igt} + \\epsilon_{igt} \\] where \\(\\alpha_g\\) is the group-specific fixed effect \\(\\gamma_t\\) = time specific fixed effect \\(\\beta\\) = dif-in-dif effect \\(I_{gt}\\) = interaction terms (n treatment indicators x n post-treatment dummies) (capture effect heterogeneity over time) This specification is the “two-way fixed effects DiD” - TWFE (i.e., 2 sets of fixed effects: group + time). However, if you have Staggered Dif-n-dif (i.e., treatment is applied at different times to different groups). TWFE is really bad. Long-term Effects To examine the dynamic treatment effects (that are not under rollout/staggered design), we can create a centered time variable, Centered Time Variable Period … \\(t = -1\\) 2 periods before treatment period \\(t = 0\\) Last period right before treatment period Remember to use this period as reference group \\(t = 1\\) Treatment period … By interacting this factor variable, we can examine the dynamic effect of treatment (i.e., whether it’s fading or intensifying) \\[ \\begin{aligned} Y &amp;= \\alpha_0 + \\alpha_1 Group + \\alpha_2 Time \\\\ &amp;+ \\beta_{-T_1} Treatment+ \\beta_{-(T_1 -1)} Treatment + \\dots + \\beta_{-1} Treatment \\\\ &amp;+ \\beta_1 + \\dots + \\beta_{T_2} Treatment \\end{aligned} \\] where \\(\\beta_0\\) is used as the reference group (i.e., drop from the model) \\(T_1\\) is the pre-treatment period \\(T_2\\) is the post-treatment period With more variables (i.e., interaction terms), coefficients estimates can be less precise (i.e., higher SE). DiD on the relationship, not levels. Technically, we can apply DiD research design not only on variables, but also on coefficients estimates of some other regression models with before and after a policy is implemented. Goal: Pre-treatment coefficients should be non-significant \\(\\beta_{-T_1}, \\dots, \\beta_{-1} = 0\\) (similar to the Placebo Test) Post-treatment coefficients are expected to be significant \\(\\beta_1, \\dots, \\beta_{T_2} \\neq0\\) You can now examine the trend in post-treatment coefficients (i.e., increasing or decreasing) library(tidyverse) library(fixest) od &lt;- causaldata::organ_donations %&gt;% # Treatment variable dplyr::mutate(California = State == &#39;California&#39;) %&gt;% # centered time variable dplyr::mutate(center_time = as.factor(Quarter_Num - 3)) # where 3 is the reference period precedes the treatment period class(od$California) #&gt; [1] &quot;logical&quot; class(od$State) #&gt; [1] &quot;character&quot; cali &lt;- feols(Rate ~ i(center_time, California, ref = 0) | State + center_time, data = od) etable(cali) #&gt; cali #&gt; Dependent Var.: Rate #&gt; #&gt; California x center_time = -2 -0.0029 (0.0051) #&gt; California x center_time = -1 0.0063** (0.0023) #&gt; California x center_time = 1 -0.0216*** (0.0050) #&gt; California x center_time = 2 -0.0203*** (0.0045) #&gt; California x center_time = 3 -0.0222* (0.0100) #&gt; Fixed-Effects: ------------------- #&gt; State Yes #&gt; center_time Yes #&gt; _____________________________ ___________________ #&gt; S.E.: Clustered by: State #&gt; Observations 162 #&gt; R2 0.97934 #&gt; Within R2 0.00979 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 iplot(cali, pt.join = T) coefplot(cali) "],["notes-1.html", "26.3 Notes", " 26.3 Notes Matching Methods Match treatment and control based on pre-treatment observables Modify SEs appropriately (James J. Heckman, Ichimura, and Todd 1997). It’s might be easier to just use the Doubly Robust DiD (Sant’Anna and Zhao 2020) where you just need either matching or regression to work in order to identify your treatment effect Whereas the group fixed effects control for the group time-invariant effects, it does not control for selection bias (i.e., certain groups are more likely to be treated than others). Hence, with these backdoor open (i.e., selection bias) between (1) propensity to be treated and (2) dynamics evolution of the outcome post-treatment, matching can potential close these backdoor. Be careful when matching time-varying covariates because you might encounter “regression to the mean” problem, where pre-treatment periods can have an unusually bad or good time (that is out of the ordinary), then the post-treatment period outcome can just be an artifact of the regression to the mean (Daw and Hatfield 2018). This problem is not of concern to time-invariant variables. Matching and DiD can use pre-treatment outcomes to correct for selection bias. From real world data and simulation, (Chabé-Ferret 2015) found that matching generally underestimates the average causal effect and gets closer to the true effect with more number of pre-treatment outcomes. When selection bias is symmetric around the treatment date, DID is still consistent when implemented symmetrically (i.e., the same number of period before and after treatment). In cases where selection bias is asymmetric, the MC simulations show that Symmetric DiD still performs better than Matching. It’s always good to show results with and without controls because If the controls are fixed within group or within time, then those should be absorbed under those fixed effects If the controls are dynamic across group and across, then your parallel trends assumption is not plausible. Under causal inference, \\(R^2\\) is not so important. For count data, one can use the fixed-effects Poisson pseudo-maximum likelihood estimator (PPML) Puhani (2012) (For applied papers, see Burtch, Carnahan, and Greenwood (2018) in management and C. He et al. (2021) in marketing). This also allows for robust standard errors under over-dispersion (Wooldridge 1999). This estimator outperforms a log OLS when data have many 0s(Silva and Tenreyro 2011), since log-OLS can produce biased estimates (O’Hara and Kotze 2010) under heteroskedascity (Silva and Tenreyro 2006). For those thinking of negative binomial with fixed effects, there isn’t an estimator right now (Allison and Waterman 2002). For [Zero-valued Outcomes], we have to distinguish the treatment effect on the intensive (outcome: 10 to 11) vs. extensive margins (outcome: 0 to 1), and we can’t readily interpret the treatment coefficient of log-transformed outcome regression as percentage change (J. Chen and Roth 2023). Alternatively, we can either focus on Proportional treatment effects: \\(\\theta_{ATT\\%} = \\frac{E(Y_{it}(1) | D_i = 1, Post_t = 1) - E(Y_{it}(0) |D_i = 1, Post_t = 1)}{E(Y_{it}(0) | D_i = 1 , Post_t = 1}\\) (i.e., percentage change in treated group’s average post-treatment outcome). Instead of relying on the parallel trends assumption in levels, we could also rely on parallel trends assumption in ratio (Wooldridge 2023). We can use Poisson QMLE to estimate the treatment effect: \\(Y_{it} = \\exp(\\beta_0 + D_i \\times \\beta_1 Post_t + \\beta_2 D_i + \\beta_3 Post_t + X_{it}) \\epsilon_{it}\\) and \\(\\hat{\\theta}_{ATT \\%} = \\exp(\\hat{\\beta}_1-1)\\). To examine the parallel trends assumption in ratio holds, we can also estimate a dynamic version of the Poisson QMLE: \\(Y_{it} = \\exp(\\lambda_t + \\beta_2 D_i + \\sum_{r \\neq -1} \\beta_r D_i \\times (RelativeTime_t = r)\\), we would expect \\(\\exp(\\hat{\\beta_r}) - 1 = 0\\) for \\(r &lt; 0\\). Even if we see the plot of these coefficients are 0, we still should run sensitivity analysis (Rambachan and Roth 2023) to examine violation of this assumption (see Prior Parallel Trends Test). Log Effects with Calibrated Extensive-margin value: due to problem with the mean value interpretation of the proportional treatment effects with outcomes that are heavy-tailed, we might be interested in the extensive margin effect. Then, we can explicit model how much weight we put on the intensive vs. extensive margin (J. Chen and Roth 2023, 39). Proportional treatment effects set.seed(123) # For reproducibility n &lt;- 500 # Number of observations per group (treated and control) # Generating IDs for a panel setup ID &lt;- rep(1:n, times = 2) # Defining groups and periods Group &lt;- rep(c(&quot;Control&quot;, &quot;Treated&quot;), each = n) Time &lt;- rep(c(&quot;Before&quot;, &quot;After&quot;), times = n) Treatment &lt;- ifelse(Group == &quot;Treated&quot;, 1, 0) Post &lt;- ifelse(Time == &quot;After&quot;, 1, 0) # Step 1: Generate baseline outcomes with a zero-inflated model lambda &lt;- 20 # Average rate of occurrence zero_inflation &lt;- 0.5 # Proportion of zeros Y_baseline &lt;- ifelse(runif(2 * n) &lt; zero_inflation, 0, rpois(2 * n, lambda)) # Step 2: Apply DiD treatment effect on the treated group in the post-treatment period Treatment_Effect &lt;- Treatment * Post Y_treatment &lt;- ifelse(Treatment_Effect == 1, rpois(n, lambda = 2), 0) # Incorporating a simple time trend, ensuring outcomes are non-negative Time_Trend &lt;- ifelse(Time == &quot;After&quot;, rpois(2 * n, lambda = 1), 0) # Step 3: Combine to get the observed outcomes Y_observed &lt;- Y_baseline + Y_treatment + Time_Trend # Ensure no negative outcomes after the time trend Y_observed &lt;- ifelse(Y_observed &lt; 0, 0, Y_observed) # Create the final dataset data &lt;- data.frame( ID = ID, Treatment = Treatment, Period = Post, Outcome = Y_observed ) # Viewing the first few rows of the dataset head(data) #&gt; ID Treatment Period Outcome #&gt; 1 1 0 0 0 #&gt; 2 2 0 1 25 #&gt; 3 3 0 0 0 #&gt; 4 4 0 1 20 #&gt; 5 5 0 0 19 #&gt; 6 6 0 1 0 library(fixest) res_pois &lt;- fepois(Outcome ~ Treatment + Period + Treatment * Period, data = data, vcov = &quot;hetero&quot;) etable(res_pois) #&gt; res_pois #&gt; Dependent Var.: Outcome #&gt; #&gt; Constant 2.249*** (0.0717) #&gt; Treatment 0.1743. (0.0932) #&gt; Period 0.0662 (0.0960) #&gt; Treatment x Period 0.0314 (0.1249) #&gt; __________________ _________________ #&gt; S.E. type Heteroskeda.-rob. #&gt; Observations 1,000 #&gt; Squared Cor. 0.01148 #&gt; Pseudo R2 0.00746 #&gt; BIC 15,636.8 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # Average percentage change exp(coefficients(res_pois)[&quot;Treatment:Period&quot;]) - 1 #&gt; Treatment:Period #&gt; 0.03191643 # SE using delta method exp(coefficients(res_pois)[&quot;Treatment:Period&quot;]) * sqrt(res_pois$cov.scaled[&quot;Treatment:Period&quot;, &quot;Treatment:Period&quot;]) #&gt; Treatment:Period #&gt; 0.1288596 In this example, the DID coefficient is not significant. However, say that it’s significant, we can interpret the coefficient as 3 percent increase in posttreatment period due to the treatment. library(fixest) base_did_log0 &lt;- base_did |&gt; mutate(y = if_else(y &gt; 0, y, 0)) res_pois_es &lt;- fepois(y ~ x1 + i(period, treat, 5) | id + period, data = base_did_log0, vcov = &quot;hetero&quot;) etable(res_pois_es) #&gt; res_pois_es #&gt; Dependent Var.: y #&gt; #&gt; x1 0.1895*** (0.0108) #&gt; treat x period = 1 -0.2769 (0.3545) #&gt; treat x period = 2 -0.2699 (0.3533) #&gt; treat x period = 3 0.1737 (0.3520) #&gt; treat x period = 4 -0.2381 (0.3249) #&gt; treat x period = 6 0.3724 (0.3086) #&gt; treat x period = 7 0.7739* (0.3117) #&gt; treat x period = 8 0.5028. (0.2962) #&gt; treat x period = 9 0.9746** (0.3092) #&gt; treat x period = 10 1.310*** (0.3193) #&gt; Fixed-Effects: ------------------ #&gt; id Yes #&gt; period Yes #&gt; ___________________ __________________ #&gt; S.E. type Heteroskedas.-rob. #&gt; Observations 1,080 #&gt; Squared Cor. 0.51131 #&gt; Pseudo R2 0.34836 #&gt; BIC 5,868.8 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 iplot(res_pois_es) This parallel trend is the “ratio” version as in Wooldridge (2023) : \\[ \\frac{E(Y_{it}(0) |D_i = 1, Post_t = 1)}{E(Y_{it}(0) |D_i = 1, Post_t = 0)} = \\frac{E(Y_{it}(0) |D_i = 0, Post_t = 1)}{E(Y_{it}(0) |D_i =0, Post_t = 0)} \\] which means without treatment, the average percentage change in the mean outcome for treated group is identical to that of the control group. Log Effects with Calibrated Extensive-margin value If we want to study the treatment effect on a concave transformation of the outcome that is less influenced by those in the distribution’s tail, then we can perform this analysis. Steps: Normalize the outcomes such that 1 represents the minimum non-zero and positve value (i.e., divide the outcome by its minimum non-zero and positive value). Estimate the treatment effects for the new outcome \\[ m(y) = \\begin{cases} \\log(y) &amp; \\text{for } y &gt;0 \\\\ -x &amp; \\text{for } y = 0 \\end{cases} \\] The choice of \\(x\\) depends on what the researcher is interested in: Value of \\(x\\) Interest \\(x = 0\\) The treatment effect in logs where all zero-valued outcomes are set to equal the minimum non-zero value (i.e., we exclude the extensive-margin change between 0 and \\(y_{min}\\) ) \\(x&gt;0\\) Setting the change between 0 and \\(y_{min}\\) to be valued as the equivalent of a \\(x\\) log point change along the intensive margin. library(fixest) base_did_log0_cali &lt;- base_did_log0 |&gt; # get min mutate(min_y = min(y[y &gt; 0])) |&gt; # normalized the outcome mutate(y_norm = y / min_y) my_regression &lt;- function(x) { base_did_log0_cali &lt;- base_did_log0_cali %&gt;% mutate(my = ifelse(y_norm == 0,-x, log(y_norm))) my_reg &lt;- feols( fml = my ~ x1 + i(period, treat, 5) | id + period, data = base_did_log0_cali, vcov = &quot;hetero&quot; ) return(my_reg) } xvec &lt;- c(0, .1, .5, 1, 3) reg_list &lt;- purrr::map(.x = xvec, .f = my_regression) iplot(reg_list, pt.col = 1:length(xvec), pt.pch = 1:length(xvec)) legend(&quot;topleft&quot;, col = 1:length(xvec), pch = 1:length(xvec), legend = as.character(xvec)) etable( reg_list, headers = list(&quot;Extensive-margin value (x)&quot; = as.character(xvec)), digits = 2, digits.stats = 2 ) #&gt; model 1 model 2 model 3 #&gt; Extensive-margin value (x) 0 0.1 0.5 #&gt; Dependent Var.: my my my #&gt; #&gt; x1 0.43*** (0.02) 0.44*** (0.02) 0.46*** (0.03) #&gt; treat x period = 1 -0.92 (0.67) -0.94 (0.69) -1.0 (0.73) #&gt; treat x period = 2 -0.41 (0.66) -0.42 (0.67) -0.43 (0.71) #&gt; treat x period = 3 -0.34 (0.67) -0.35 (0.68) -0.38 (0.73) #&gt; treat x period = 4 -1.0 (0.67) -1.0 (0.68) -1.1 (0.73) #&gt; treat x period = 6 0.44 (0.66) 0.44 (0.67) 0.45 (0.72) #&gt; treat x period = 7 1.1. (0.64) 1.1. (0.65) 1.2. (0.70) #&gt; treat x period = 8 1.1. (0.64) 1.1. (0.65) 1.1 (0.69) #&gt; treat x period = 9 1.7** (0.65) 1.7** (0.66) 1.8* (0.70) #&gt; treat x period = 10 2.4*** (0.62) 2.4*** (0.63) 2.5*** (0.68) #&gt; Fixed-Effects: -------------- -------------- -------------- #&gt; id Yes Yes Yes #&gt; period Yes Yes Yes #&gt; __________________________ ______________ ______________ ______________ #&gt; S.E. type Heterosk.-rob. Heterosk.-rob. Heterosk.-rob. #&gt; Observations 1,080 1,080 1,080 #&gt; R2 0.43 0.43 0.43 #&gt; Within R2 0.26 0.26 0.25 #&gt; #&gt; model 4 model 5 #&gt; Extensive-margin value (x) 1 3 #&gt; Dependent Var.: my my #&gt; #&gt; x1 0.49*** (0.03) 0.62*** (0.04) #&gt; treat x period = 1 -1.1 (0.79) -1.5 (1.0) #&gt; treat x period = 2 -0.44 (0.77) -0.51 (0.99) #&gt; treat x period = 3 -0.43 (0.78) -0.60 (1.0) #&gt; treat x period = 4 -1.2 (0.78) -1.5 (1.0) #&gt; treat x period = 6 0.45 (0.77) 0.46 (1.0) #&gt; treat x period = 7 1.2 (0.75) 1.3 (0.97) #&gt; treat x period = 8 1.2 (0.74) 1.3 (0.96) #&gt; treat x period = 9 1.8* (0.75) 2.1* (0.97) #&gt; treat x period = 10 2.7*** (0.73) 3.2*** (0.94) #&gt; Fixed-Effects: -------------- -------------- #&gt; id Yes Yes #&gt; period Yes Yes #&gt; __________________________ ______________ ______________ #&gt; S.E. type Heterosk.-rob. Heterosk.-rob. #&gt; Observations 1,080 1,080 #&gt; R2 0.42 0.41 #&gt; Within R2 0.25 0.24 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 We have the dynamic treatment effects for different hypothesized extensive-margin value of \\(x \\in (0, .1, .5, 1, 3, 5)\\) The first column is when the zero-valued outcome equal to \\(y_{min, y&gt;0}\\) (i.e., there is no different between the minimum outcome and zero outcome - \\(x = 0\\)) For this particular example, as the extensive margin increases, we see an increase in the effect magnitude. The second column is when we assume an extensive-margin change from 0 to \\(y_{min, y &gt;0}\\) is equivalent to a 10 (i.e., \\(0.1 \\times 100\\)) log point change along the intensive margin. References "],["standard-errors-2.html", "26.4 Standard Errors", " 26.4 Standard Errors Serial correlation is a big problem in DiD because (Bertrand, Duflo, and Mullainathan 2004) DiD often uses long time series Outcomes are often highly positively serially correlated Minimal variation in the treatment variable over time within a group (e.g., state). To overcome this problem: Using parametric correction (standard AR correction) is not good. Using nonparametric (e.g., block bootstrap- keep all obs from the same group such as state together) is good when number of groups is large. Remove time series dimension (i.e., aggregate data into 2 periods: pre and post). This still works with small number of groups (See (Donald and Lang 2007) for more notes on small-sample aggregation). Empirical and arbitrary variance-covariance matrix corrections work only in large samples. References "],["examples.html", "26.5 Examples", " 26.5 Examples Example by Philipp Leppert replicating Card and Krueger (1994) Example by Anthony Schmidt 26.5.1 Example by Doleac and Hansen (2020) The purpose of banning a checking box for ex-criminal was banned because we thought that it gives more access to felons Even if we ban the box, employers wouldn’t just change their behaviors. But then the unintended consequence is that employers statistically discriminate based on race 3 types of ban the box Public employer only Private employer with government contract All employers Main identification strategy If any county in the Metropolitan Statistical Area (MSA) adopts ban the box, it means the whole MSA is treated. Or if the state adopts “ban the ban,” every county is treated Under Simple Dif-n-dif \\[ Y_{it} = \\beta_0 + \\beta_1 Post_t + \\beta_2 treat_i + \\beta_2 (Post_t \\times Treat_i) + \\epsilon_{it} \\] But if there is no common post time, then we should use Staggered Dif-n-dif \\[ \\begin{aligned} E_{imrt} &amp;= \\alpha + \\beta_1 BTB_{imt} W_{imt} + \\beta_2 BTB_{mt} + \\beta_3 BTB_{mt} H_{imt}\\\\ &amp;+ \\delta_m + D_{imt} \\beta_5 + \\lambda_{rt} + \\delta_m\\times f(t) \\beta_7 + e_{imrt} \\end{aligned} \\] where \\(i\\) = person; \\(m\\) = MSA; \\(r\\) = region (US regions e.g., Midwest) ; \\(r\\) = region; \\(t\\) = year \\(W\\) = White; \\(B\\) = Black; \\(H\\) = Hispanic \\(\\beta_1 BTB_{imt} W_{imt} + \\beta_2 BTB_{mt} + \\beta_3 BTB_{mt} H_{imt}\\) are the 3 dif-n-dif variables (\\(BTB\\) = “ban the box”) \\(\\delta_m\\) = dummy for MSI \\(D_{imt}\\) = control for people \\(\\lambda_{rt}\\) = region by time fixed effect \\(\\delta_m \\times f(t)\\) = linear time trend within MSA (but we should not need this if we have good pre-trend) If we put \\(\\lambda_r - \\lambda_t\\) (separately) we will more broad fixed effect, while \\(\\lambda_{rt}\\) will give us deeper and narrower fixed effect. Before running this model, we have to drop all other races. And \\(\\beta_1, \\beta_2, \\beta_3\\) are not collinear because there are all interaction terms with \\(BTB_{mt}\\) If we just want to estimate the model for black men, we will modify it to be \\[ E_{imrt} = \\alpha + BTB_{mt} \\beta_1 + \\delta_m + D_{imt} \\beta_5 + \\lambda_{rt} + (\\delta_m \\times f(t)) \\beta_7 + e_{imrt} \\] \\[ \\begin{aligned} E_{imrt} &amp;= \\alpha + BTB_{m (t - 3t)} \\theta_1 + BTB_{m(t-2)} \\theta_2 + BTB_{mt} \\theta_4 \\\\ &amp;+ BTB_{m(t+1)}\\theta_5 + BTB_{m(t+2)}\\theta_6 + BTB_{m(t+3t)}\\theta_7 \\\\ &amp;+ [\\delta_m + D_{imt}\\beta_5 + \\lambda_r + (\\delta_m \\times (f(t))\\beta_7 + e_{imrt}] \\end{aligned} \\] We have to leave \\(BTB_{m(t-1)}\\theta_3\\) out for the category would not be perfect collinearity So the year before BTB (\\(\\theta_1, \\theta_2, \\theta_3\\)) should be similar to each other (i.e., same pre-trend). Remember, we only run for places with BTB. If \\(\\theta_2\\) is statistically different from \\(\\theta_3\\) (baseline), then there could be a problem, but it could also make sense if we have pre-trend announcement. 26.5.2 Example from Princeton library(foreign) mydata = read.dta(&quot;http://dss.princeton.edu/training/Panel101.dta&quot;) %&gt;% # create a dummy variable to indicate the time when the treatment started dplyr::mutate(time = ifelse(year &gt;= 1994, 1, 0)) %&gt;% # create a dummy variable to identify the treatment group dplyr::mutate(treated = ifelse(country == &quot;E&quot; | country == &quot;F&quot; | country == &quot;G&quot; , 1, 0)) %&gt;% # create an interaction between time and treated dplyr::mutate(did = time * treated) estimate the DID estimator didreg = lm(y ~ treated + time + did, data = mydata) summary(didreg) #&gt; #&gt; Call: #&gt; lm(formula = y ~ treated + time + did, data = mydata) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -9.768e+09 -1.623e+09 1.167e+08 1.393e+09 6.807e+09 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 3.581e+08 7.382e+08 0.485 0.6292 #&gt; treated 1.776e+09 1.128e+09 1.575 0.1200 #&gt; time 2.289e+09 9.530e+08 2.402 0.0191 * #&gt; did -2.520e+09 1.456e+09 -1.731 0.0882 . #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 2.953e+09 on 66 degrees of freedom #&gt; Multiple R-squared: 0.08273, Adjusted R-squared: 0.04104 #&gt; F-statistic: 1.984 on 3 and 66 DF, p-value: 0.1249 The did coefficient is the differences-in-differences estimator. Treat has a negative effect 26.5.3 Example by Card and Krueger (1993) found that increase in minimum wage increases employment Experimental Setting: New Jersey (treatment) increased minimum wage Penn (control) did not increase minimum wage After Before Treatment NJ A B A - B Control PA C D C - D A - C B - D (A - B) - (C - D) where A - B = treatment effect + effect of time (additive) C - D = effect of time (A - B) - (C - D) = dif-n-dif The identifying assumptions: Can’t have switchers PA is the control group is a good counter factual is what NJ would look like if they hadn’t had the treatment \\[ Y_{jt} = \\beta_0 + NJ_j \\beta_1 + POST_t \\beta_2 + (NJ_j \\times POST_t)\\beta_3+ X_{jt}\\beta_4 + \\epsilon_{jt} \\] where \\(j\\) = restaurant \\(NJ\\) = dummy where \\(1 = NJ\\), and \\(0 = PA\\) \\(POST\\) = dummy where \\(1 = post\\), and \\(0 = pre\\) Notes: We don’t need \\(\\beta_4\\) in our model to have unbiased \\(\\beta_3\\), but including it would give our coefficients efficiency If we use \\(\\Delta Y_{jt}\\) as the dependent variable, we don’t need \\(POST_t \\beta_2\\) anymore Alternative model specification is that the authors use NJ high wage restaurant as control group (still choose those that are close to the border) The reason why they can’t control for everything (PA + NJ high wage) is because it’s hard to interpret the causal treatment Dif-n-dif utilizes similarity in pretrend of the dependent variables. However, this is neither a necessary nor sufficient for the identifying assumption. It’s not sufficient because they can have multiple treatments (technically, you could include more control, but your treatment can’t interact) It’s not necessary because trends can be parallel after treatment However, we can’t never be certain; we just try to find evidence consistent with our theory so that dif-n-dif can work. Notice that we don’t need before treatment the levels of the dependent variable to be the same (e.g., same wage average in both NJ and PA), dif-n-dif only needs pre-trend (i.e., slope) to be the same for the two groups. 26.5.4 Example by Butcher, McEwan, and Weerapana (2014) Theory: Highest achieving students are usually in hard science. Why? Hard to give students students the benefit of doubt for hard science How unpleasant and how easy to get a job. Degrees with lower market value typically want to make you feel more pleasant Under OLS \\[ E_{ij} = \\beta_0 + X_i \\beta_1 + G_j \\beta_2 + \\epsilon_{ij} \\] where \\(X_i\\) = student attributes \\(\\beta_2\\) = causal estimate (from grade change) \\(E_{ij}\\) = Did you choose to enroll in major \\(j\\) \\(G_j\\) = grade given in major \\(j\\) Examine \\(\\hat{\\beta}_2\\) Negative bias: Endogenous response because department with lower enrollment rate will give better grade Positive bias: hard science is already having best students (i.e., ability), so if they don’t their grades can be even lower Under dif-n-dif \\[ Y_{idt} = \\beta_0 + POST_t \\beta_1 + Treat_d \\beta_2 + (POST_t \\times Treat_d)\\beta_3 + X_{idt} + \\epsilon_{idt} \\] where \\(Y_{idt}\\) = grade average Intercept Treat Post Treat*Post Treat Pre 1 1 0 0 Treat Post 1 1 1 1 Control Pre 1 0 0 0 Control Post 1 0 1 0 Average for pre-control \\(\\beta_0\\) A more general specification of the dif-n-dif is that \\[ Y_{idt} = \\alpha_0 + (POST_t \\times Treat_d) \\alpha_1 + \\theta_d + \\delta_t + X_{idt} + u_{idt} \\] where \\((\\theta_d + \\delta_t)\\) richer , more df than \\(Treat_d \\beta_2 + Post_t \\beta_1\\) (because fixed effects subsume Post and treat) \\(\\alpha_1\\) should be equivalent to \\(\\beta_3\\) (if your model assumptions are correct) References "],["one-difference.html", "26.6 One Difference", " 26.6 One Difference The regression formula is as follows (Liaukonytė, Tuchman, and Zhu 2023): \\[ y_{ut} = \\beta \\text{Post}_t + \\gamma_u + \\gamma_w(t) + \\gamma_l + \\gamma_g(u)p(t) + \\epsilon_{ut} \\] where \\(y_{ut}\\): Outcome of interest for unit u in time t. \\(\\text{Post}_t\\): Dummy variable representing a specific post-event period. \\(\\beta\\): Coefficient measuring the average change in the outcome after the event relative to the pre-period. \\(\\gamma_u\\): Fixed effects for each unit. \\(\\gamma_w(t)\\): Time-specific fixed effects to account for periodic variations. \\(\\gamma_l\\): Dummy variable for a specific significant period (e.g., a major event change). \\(\\gamma_g(u)p(t)\\): Group x period fixed effects for flexible trends that may vary across different categories (e.g., geographical regions) and periods. \\(\\epsilon_{ut}\\): Error term. This model can be used to analyze the impact of an event on the outcome of interest while controlling for various fixed effects and time-specific variations, but using units themselves pre-treatment as controls. References "],["two-way-fixed-effects.html", "26.7 Two-way Fixed-effects", " 26.7 Two-way Fixed-effects A generalization of the dif-n-dif model is the two-way fixed-effects models where you have multiple groups and time effects. But this is not a designed-based, non-parametric causal estimator (Imai and Kim 2021) When applying TWFE to multiple groups and multiple periods, the supposedly causal coefficient is the weighted average of all two-group/two-period DiD estimators in the data where some of the weights can be negative. More specifically, the weights are proportional to group sizes and treatment indicator’s variation in each pair, where units in the middle of the panel have the highest weight. The canonical/standard TWFE only works when Effects are homogeneous across units and across time periods (i.e., no dynamic changes in the effects of treatment). See (Goodman-Bacon 2021; Clément De Chaisemartin and d’Haultfoeuille 2020; L. Sun and Abraham 2021; Borusyak, Jaravel, and Spiess 2021) for details. Similarly, it relies on the assumption of linear additive effects (Imai and Kim 2021) Have to argue why treatment heterogeneity is not a problem (e.g., plot treatment timing and decompose treatment coefficient using Goodman-Bacon Decomposition) know the percentage of observation are never treated (because as the never-treated group increases, the bias of TWFE decreases, with 80% sample to be never-treated, bias is negligible). The problem is worsen when you have long-run effects. Need to manually drop two relative time periods if everyone is eventually treated (to avoid multicollinearity). Programs might do this randomly and if it chooses to drop a post-treatment period, it will create biases. The choice usually -1, and -2 periods. Treatment heterogeneity can come in because (1) it might take some time for a treatment to have measurable changes in outcomes or (2) for each period after treatment, the effect can be different (phase in or increasing effects). 2 time periods. Within this setting, TWFE works because, using the baseline (e.g., control units where their treatment status is unchanged across time periods), the comparison can be Good for Newly treated units vs. control Newly treated units vs not-yet treated Bad for Newly treated vs. already treated (because already treated cannot serve as the potential outcome for the newly treated). Strict exogeneity (i.e., time-varying confounders, feedback from past outcome to treatment) (Imai and Kim 2019) Specific functional forms (i.e., treatment effect homogeneity and no carryover effects or anticipation effects) (Imai and Kim 2019) Note: Notation for this section is consistent with (2020) \\[ Y_{it} = \\alpha_i + \\lambda_t + \\tau W_{it} + \\beta X_{it} + \\epsilon_{it} \\] where \\(Y_{it}\\) is the outcome \\(\\alpha_i\\) is the unit FE \\(\\lambda_t\\) is the time FE \\(\\tau\\) is the causal effect of treatment \\(W_{it}\\) is the treatment indicator \\(X_{it}\\) are covariates When \\(T = 2\\), the TWFE is the traditional DiD model Under the following assumption, \\(\\hat{\\tau}_{OLS}\\) is unbiased: homogeneous treatment effect parallel trends assumptions linear additive effects (Imai and Kim 2021) Remedies for TWFE’s shortcomings (Goodman-Bacon 2021): diagnostic robustness tests of the TWFE DiD and identify influential observations to the DiD estimate (Goodman-Bacon Decomposition) (Callaway and Sant’Anna 2021): 2-step estimation with a bootstrap procedure that can account for autocorrelation and clustering, the parameters of interest are the group-time average treatment effects, where each group is defined by when it was first treated (Multiple periods and variation in treatment timing) Comparing post-treatment outcomes fo groups treated in a period against a similar group that is never treated (using matching). Treatment status cannot switch (once treated, stay treated for the rest of the panel) Package: did (L. Sun and Abraham 2021): a specialization of (Callaway and Sant’Anna 2021) in the event-study context. They include lags and leads in their design have cohort-specific estimates (similar to group-time estimates in (Callaway and Sant’Anna 2021) They propose the “interaction-weighted” estimator. Package: fixest (Imai and Kim 2021) Different from (Callaway and Sant’Anna 2021) because they allow units to switch in and out of treatment. Based on matching methods, to have weighted TWFE Package: wfe and PanelMatch (Gardner 2022): two-stage DiD did2s In cases with an unaffected unit (i.e., never-treated), using the exposure-adjusted difference-in-differences estimators can recover the average treatment effect (Clément De Chaisemartin and d’Haultfoeuille 2020). However, if you want to see the treatment effect heterogeneity (in cases where the true heterogeneous treatment effects vary by the exposure rate), exposure-adjusted did still fails (L. Sun and Shapiro 2022). (2020): see below To be robust against time- and unit-varying effects We can use the reshaped inverse probability weighting (RIPW)- TWFE estimator With the following assumptions: SUTVA Binary treatment: \\(\\mathbf{W}_i = (W_{i1}, \\dots, W_{it})\\) where \\(\\mathbf{W}_i \\sim \\mathbf{\\pi}_i\\) generalized propensity score (i.e., each person treatment likelihood follow \\(\\pi\\) regardless of the period) Then, the unit-time specific effect is \\(\\tau_{it} = Y_{it}(1) - Y_{it}(0)\\) Then the Doubly Average Treatment Effect (DATE) is \\[ \\tau(\\xi) = \\sum_{T=1}^T \\xi_t \\left(\\frac{1}{n} \\sum_{i = 1}^n \\tau_{it} \\right) \\] where \\(\\frac{1}{n} \\sum_{i = 1}^n \\tau_{it}\\) is the unweighted effect of treatment across units (i.e., time-specific ATE). \\(\\xi = (\\xi_1, \\dots, \\xi_t)\\) are user-specific weights for each time period. This estimand is called DATE because it’s weighted (averaged) across both time and units. A special case of DATE is when both time and unit-weights are equal \\[ \\tau_{eq} = \\frac{1}{nT} \\sum_{t=1}^T \\sum_{i = 1}^n \\tau_{it} \\] Borrowing the idea of inverse propensity-weighted least squares estimator in the cross-sectional case that we reweight the objective function via the treatment assignment mechanism: \\[ \\hat{\\tau} \\triangleq \\arg \\min_{\\tau} \\sum_{i = 1}^n (Y_i -\\mu - W_i \\tau)^2 \\frac{1}{\\pi_i (W_i)} \\] where the first term is the least squares objective the second term is the propensity score In the panel data case, the IPW estimator will be \\[ \\hat{\\tau}_{IPW} \\triangleq \\arg \\min_{\\tau} \\sum_{i = 1}^n \\sum_{t =1}^T (Y_{i t}-\\alpha_i - \\lambda_t - W_{it} \\tau)^2 \\frac{1}{\\pi_i (W_i)} \\] Then, to have DATE that users can specify the structure of time weight, we use reshaped IPW estimator (2020) \\[ \\hat{\\tau}_{RIPW} (\\Pi) \\triangleq \\arg \\min_{\\tau} \\sum_{i = 1}^n \\sum_{t =1}^T (Y_{i t}-\\alpha_i - \\lambda_t - W_{it} \\tau)^2 \\frac{\\Pi(W_i)}{\\pi_i (W_i)} \\] where it’s a function of a data-independent distribution \\(\\Pi\\) that depends on the support of the treatment path \\(\\mathbb{S} = \\cup_i Supp(W_i)\\) This generalization can transform to IPW-TWFE estimator when \\(\\Pi \\sim Unif(\\mathbb{S})\\) randomized experiment when \\(\\Pi = \\pi_i\\) To choose \\(\\Pi\\), we don’t need to data, we just need possible assignments in your setting. For most practical problems (DiD, staggered, transient), we have closed form solutions For generic solver, we can use nonlinear programming (e..g, BFGS algorithm) As argued in (Imai and Kim 2021) that TWFE is not a non-parametric approach, it can be subjected to incorrect model assumption (i.e., model dependence). Hence, they advocate for matching methods for time-series cross-sectional data (Imai and Kim 2021) Use wfe and PanelMatch to apply their paper. This package is based on (Somaini and Wolak 2016) # dataset library(bacondecomp) df &lt;- bacondecomp::castle # devtools::install_github(&quot;paulosomaini/xtreg2way&quot;) library(xtreg2way) # output &lt;- xtreg2way(y, # data.frame(x1, x2), # iid, # tid, # w, # noise = &quot;1&quot;, # se = &quot;1&quot;) # equilvalently output &lt;- xtreg2way(l_homicide ~ post, df, iid = df$state, # group id tid = df$year, # time id # w, # vector of weight se = &quot;1&quot;) output$betaHat #&gt; [,1] #&gt; l_homicide 0.08181162 output$aVarHat #&gt; [,1] #&gt; [1,] 0.003396724 # to save time, you can use your structure in the # last output for a new set of variables # output2 &lt;- xtreg2way(y, x1, struc=output$struc) Standard errors estimation options Set Estimation se = \"0\" Assume homoskedasticity and no within group correlation or serial correlation se = \"1\" (default) robust to heteroskadasticity and serial correlation (Arellano 1987) se = \"2\" robust to heteroskedasticity, but assumes no correlation within group or serial correlation se = \"11\" Aerllano SE with df correction performed by Stata xtreg (Somaini and Wolak 2021) Alternatively, you can also do it manually or with the plm package, but you have to be careful with how the SEs are estimated library(multiwayvcov) # get vcov matrix library(lmtest) # robust SEs estimation # manual output3 &lt;- lm(l_homicide ~ post + factor(state) + factor(year), data = df) # get variance-covariance matrix vcov_tw &lt;- multiwayvcov::cluster.vcov(output3, cbind(df$state, df$year), use_white = F, df_correction = F) # get coefficients coeftest(output3, vcov_tw)[2,] #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; 0.08181162 0.05671410 1.44252696 0.14979397 # using the plm package library(plm) output4 &lt;- plm(l_homicide ~ post, data = df, index = c(&quot;state&quot;, &quot;year&quot;), model = &quot;within&quot;, effect = &quot;twoways&quot;) # get coefficients coeftest(output4, vcov = vcovHC, type = &quot;HC1&quot;) #&gt; #&gt; t test of coefficients: #&gt; #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; post 0.081812 0.057748 1.4167 0.1572 As you can see, differences stem from SE estimation, not the coefficient estimate. References "],["multiple-periods-and-variation-in-treatment-timing.html", "26.8 Multiple periods and variation in treatment timing", " 26.8 Multiple periods and variation in treatment timing This is an extension of the DiD framework to settings where you have more than 2 time periods different treatment timing When treatment effects are heterogeneous across time or units, the standard Two-way Fixed-effects is inappropriate. Notation is consistent with did package (Callaway and Sant’Anna 2021) \\(Y_{it}(0)\\) is the potential outcome for unit \\(i\\) \\(Y_{it}(g)\\) is the potential outcome for unit \\(i\\) in time period \\(t\\) if it’s treated in period \\(g\\) \\(Y_{it}\\) is the observed outcome for unit \\(i\\) in time period \\(t\\) \\[ Y_{it} = \\begin{cases} Y_{it} = Y_{it}(0) &amp; \\forall i \\in \\text{never-treated group} \\\\ Y_{it} = 1\\{G_i &gt; t\\} Y_{it}(0) + 1\\{G_i \\le t \\}Y_{it}(G_i) &amp; \\forall i \\in \\text{other groups} \\end{cases} \\] \\(G_i\\) is the time period when \\(i\\) is treated \\(C_i\\) is a dummy when \\(i\\) belongs to the never-treated group \\(D_{it}\\) is a dummy for whether \\(i\\) is treated in period \\(t\\) Assumptions: Staggered treatment adoption: once treated, a unit cannot be untreated (revert) Parallel trends assumptions (conditional on covariates): Based on never-treated units: \\(E[Y_t(0)- Y_{t-1}(0)|G= g] = E[Y_t(0) - Y_{t-1}(0)|C=1]\\) Without treatment, the average potential outcomes for group \\(g\\) equals the average potential outcomes for the never-treated group (i.e., control group), which means that we have (1) enough data on the never-treated group (2) the control group is similar to the eventually treated group. Based on not-yet treated units: \\(E[Y_t(0) - Y_{t-1}(0)|G = g] = E[Y_t(0) - Y_{t-1}(0)|D_s = 0, G \\neq g]\\) Not-yet treated units by time \\(s\\) ( \\(s \\ge t\\)) can be used as comparison groups to calculate the average treatment effects for the group first treated in time \\(g\\) Additional assumption: pre-treatment trends across groups (Marcus and Sant’Anna 2021) Random sampling Irreversibility of treatment (once treated, cannot be untreated) Overlap (the treatment propensity \\(e \\in [0,1]\\)) Group-Time ATE This is the equivalent of the average treatment effect in the standard case (2 groups, 2 periods) under multiple time periods. \\[ ATT(g,t) = E[Y_t(g) - Y_t(0) |G = g] \\] which is the average treatment effect for group \\(g\\) in period \\(t\\) Identification: When the parallel trends assumption based on Never-treated units: \\(ATT(g,t) = E[Y_t - Y_{g-1} |G = g] - E[Y_t - Y_{g-1}|C=1] \\forall t \\ge g\\) Not-yet-treated units: \\(ATT(g,t) = E[Y_t - Y_{g-1}|G= g] - E[Y_t - Y_{g-1}|D_t = 0, G \\neq g] \\forall t \\ge g\\) Identification: when the parallel trends assumption only holds conditional on covariates and based on Never-treated units: \\(ATT(g,t) = E[Y_t - Y_{g-1} |X, G = g] - E[Y_t - Y_{g-1}|X, C=1] \\forall t \\ge g\\) Not-yet-treated units: \\(ATT(g,t) = E[Y_t - Y_{g-1}|X, G= g] - E[Y_t - Y_{g-1}|X, D_t = 0, G \\neq g] \\forall t \\ge g\\) This is plausible when you have suspected selection bias that can be corrected by using covariates (i.e., very much similar to matching methods to have plausible parallel trends). Possible parameters of interest are: Average treatment effect per group \\[ \\theta_S(g) = \\frac{1}{\\tau - g + 1} \\sum_{t = 2}^\\tau \\mathbb{1} \\{ \\le t \\} ATT(g,t) \\] Average treatment effect across groups (that were treated) (similar to average treatment effect on the treated in the canonical case) \\[ \\theta_S^O := \\sum_{g=2}^\\tau \\theta_S(g) P(G=g) \\] Average treatment effect dynamics (i.e., average treatment effect for groups that have been exposed to the treatment for \\(e\\) time periods): \\[ \\theta_D(e) := \\sum_{g=2}^\\tau \\mathbb{1} \\{g + e \\le \\tau \\}ATT(g,g + e) P(G = g|G + e \\le \\tau) \\] Average treatment effect in period \\(t\\) for all groups that have treated by period \\(t\\)) \\[ \\theta_C(t) = \\sum_{g=2}^\\tau \\mathbb{1}\\{g \\le t\\} ATT(g,t) P(G = g|g \\le t) \\] Average treatment effect by calendar time \\[ \\theta_C = \\frac{1}{\\tau-1}\\sum_{t=2}^\\tau \\theta_C(t) \\] References "],["staggered-dif-n-dif.html", "26.9 Staggered Dif-n-dif", " 26.9 Staggered Dif-n-dif See Wing et al. (2024) checklist. Recommendations by Baker, Larcker, and Wang (2022) TWFE DiD regressions are suitable for single treatment periods or when treatment effects are homogeneous, provided there’s a solid rationale for effect homogeneity. For TWFE staggered DiD, researchers should evaluate bias risks, plot treatment timings to check for variations, and use decompositions like Goodman-Bacon (2021) when possible. If decompositions aren’t feasible (e.g., unbalanced panel), the percentage of never-treated units can indicate bias severity. Expected treatment effect variability should also be discussed. In TWFE staggered DiD event studies, avoid binning time periods without evidence of uniform effects. Use full relative-time indicators, justify reference periods, and be wary of multicollinearity causing bias. To address treatment timing and bias concerns, use alternative estimators like stacked regressions, L. Sun and Abraham (2021), Callaway and Sant’Anna (2021), or separate regressions for each event with “clean” controls. Justify the selection of comparison groups (not-yet treated, last treated, never treated) and ensure the parallel-trends assumption holds, especially when anticipating no effects for certain groups. Notes: When subjects are treated at different point in time (variation in treatment timing across units), we have to use staggered DiD (also known as DiD event study or dynamic DiD). For design where a treatment is applied and units are exposed to this treatment at all time afterward, see (Athey and Imbens 2022) For example, basic design (Stevenson and Wolfers 2006) \\[ \\begin{aligned} Y_{it} &amp;= \\sum_k \\beta_k Treatment_{it}^k + \\sum_i \\eta_i State_i \\\\ &amp;+ \\sum_t \\lambda_t Year_t + Controls_{it} + \\epsilon_{it} \\end{aligned} \\] where \\(Treatment_{it}^k\\) is a series of dummy variables equal to 1 if state \\(i\\) is treated \\(k\\) years ago in period \\(t\\) SE is usually clustered at the group level (occasionally time level). To avoid collinearity, the period right before treatment is usually chosen to drop. The more general form of TWFE (L. Sun and Abraham 2021): First, define the relative period bin indicator as \\[ D_{it}^l = \\mathbf{1}(t - E_i = l) \\] where it’s an indicator function of unit \\(i\\) being \\(l\\) periods from its first treatment at time \\(t\\) Static specification \\[ Y_{it} = \\alpha_i + \\lambda_t + \\mu_g \\sum_{l \\ge0} D_{it}^l + \\epsilon_{it} \\] where \\(\\alpha_i\\) is the the unit FE \\(\\lambda_t\\) is the time FE \\(\\mu_g\\) is the coefficient of interest \\(g = [0,T)\\) we exclude all periods before first adoption. Dynamic specification \\[ Y_{it} = \\alpha_i + \\lambda_t + \\sum_{\\substack{l = -K \\\\ l \\neq -1}}^{L} \\mu_l D_{it}^l + \\epsilon_{it} \\] where we have to exclude some relative periods to avoid multicollinearity problem (e.g., either period right before treatment, or the treatment period). In this setting, we try to show that the treatment and control groups are not statistically different (i.e., the coefficient estimates before treatment are not different from 0) to show pre-treatment parallel trends. However, this two-way fixed effects design has been criticized by L. Sun and Abraham (2021); Callaway and Sant’Anna (2021); Goodman-Bacon (2021). When researchers include leads and lags of the treatment to see the long-term effects of the treatment, these leads and lags can be biased by effects from other periods, and pre-trends can falsely arise due to treatment effects heterogeneity. Applying the new proposed method, finance and accounting researchers find that in many cases, the causal estimates turn out to be null (Baker, Larcker, and Wang 2022). Assumptions of Staggered DID Rollout Exogeneity (i.e., exogeneity of treatment adoption): if the treatment is randomly implemented over time (i.e., unrelated to variables that could also affect our dependent variables) Evidence: Regress adoption on pre-treatment variables. And if you find evidence of correlation, include linear trends interacted with pre-treatment variables (Hoynes and Schanzenbach 2009) Evidence: (Deshpande and Li 2019, 223) Treatment is random: Regress treatment status at the unit level to all pre-treatment observables. If you have some that are predictive of treatment status, you might have to argue why it’s not a worry. At best, you want this. Treatment timing is random: Conditional on treatment, regress timing of the treatment on pre-treatment observables. At least, you want this. No confounding events Exclusion restrictions No-anticipation assumption: future treatment time do not affect current outcomes Invariance-to-history assumption: the time a unit under treatment does not affect the outcome (i.e., the time exposed does not matter, just whether exposed or not). This presents causal effect of early or late adoption on the outcome. And all the assumptions in listed in the Multiple periods and variation in treatment timing Auxiliary assumptions: Constant treatment effects across units Constant treatment effect over time Random sampling Effect Additivity Remedies for staggered DiD (Baker, Larcker, and Wang 2022): Each treated cohort is compared to appropriate controls (not-yet-treated, never-treated) (Goodman-Bacon 2021) (Callaway and Sant’Anna 2021) consistent for average ATT. more complicated but also more flexible than (L. Sun and Abraham 2021) (L. Sun and Abraham 2021) (a special case of (Callaway and Sant’Anna 2021)) (Clément De Chaisemartin and d’Haultfoeuille 2020) (Borusyak, Jaravel, and Spiess 2021) Stacked DID (biased but simple): (Gormley and Matsa 2011) (Cengiz et al. 2019) (Deshpande and Li 2019) 26.9.1 Stacked DID Notations following these slides \\[ Y_{it} = \\beta_{FE} D_{it} + A_i + B_t + \\epsilon_{it} \\] where \\(A_i\\) is the group fixed effects \\(B_t\\) is the period fixed effects Steps Choose Event Window Enumerate Sub-experiments Define Inclusion Criteria Stack Data Specify Estimating Equation Event Window Let \\(\\kappa_a\\) be the length of the pre-event window \\(\\kappa_b\\) be the length of the post-event window By setting a common event window for the analysis, we essentially exclude all those events that do not meet this criteria. Sub-experiments Let \\(T_1\\) be the earliest period in the dataset \\(T_T\\) be the last period in the dataset Then, the collection of all policy adoption periods that are under our event window is \\[ \\Omega_A = \\{ A_i |T_1 + \\kappa_a \\le A_i \\le T_T - \\kappa_b\\} \\] where these events exist at least \\(\\kappa_a\\) periods after the earliest period at least \\(\\kappa_b\\) periods before the last period Let \\(d = 1, \\dots, D\\) be the index column of the sub-experiments in \\(\\Omega_A\\) and \\(\\omega_d\\) be the event date of the d-th sub-experiment (e.g., \\(\\omega_1\\) = adoption date of the 1st experiment) Inclusion Criteria Valid treated Units Within sub-experiment \\(d\\), all treated units have the same adoption date This makes sure a unit can only serve as a treated unit in only 1 sub-experiment Clean controls Only units satisfying \\(A_i &gt;\\omega_d + \\kappa_b\\) are included as controls in sub-experiment d This ensures controls are only never treated units units that are treated in far future But a unit can be control unit in multiple sub-experiments (need to correct SE) Valid Time Periods All observations within sub-experiment d are from time periods within the sub-experiment’s event window This ensures in sub-experiment d, only observations satisfying \\(\\omega_d - \\kappa_a \\le t \\le \\omega_d + \\kappa_b\\) are included library(did) library(tidyverse) library(fixest) data(base_stagg) # first make the stacked datasets # get the treatment cohorts cohorts &lt;- base_stagg %&gt;% select(year_treated) %&gt;% # exclude never-treated group filter(year_treated != 10000) %&gt;% unique() %&gt;% pull() # make formula to create the sub-datasets getdata &lt;- function(j, window) { #keep what we need base_stagg %&gt;% # keep treated units and all units not treated within -5 to 5 # keep treated units and all units not treated within -window to window filter(year_treated == j | year_treated &gt; j + window) %&gt;% # keep just year -window to window filter(year &gt;= j - window &amp; year &lt;= j + window) %&gt;% # create an indicator for the dataset mutate(df = j) } # get data stacked stacked_data &lt;- map_df(cohorts, ~ getdata(., window = 5)) %&gt;% mutate(rel_year = if_else(df == year_treated, time_to_treatment, NA_real_)) %&gt;% fastDummies::dummy_cols(&quot;rel_year&quot;, ignore_na = TRUE) %&gt;% mutate(across(starts_with(&quot;rel_year_&quot;), ~ replace_na(., 0))) # get stacked value stacked &lt;- feols( y ~ `rel_year_-5` + `rel_year_-4` + `rel_year_-3` + `rel_year_-2` + rel_year_0 + rel_year_1 + rel_year_2 + rel_year_3 + rel_year_4 + rel_year_5 | id ^ df + year ^ df, data = stacked_data )$coefficients stacked_se = feols( y ~ `rel_year_-5` + `rel_year_-4` + `rel_year_-3` + `rel_year_-2` + rel_year_0 + rel_year_1 + rel_year_2 + rel_year_3 + rel_year_4 + rel_year_5 | id ^ df + year ^ df, data = stacked_data )$se # add in 0 for omitted -1 stacked &lt;- c(stacked[1:4], 0, stacked[5:10]) stacked_se &lt;- c(stacked_se[1:4], 0, stacked_se[5:10]) cs_out &lt;- att_gt( yname = &quot;y&quot;, data = base_stagg, gname = &quot;year_treated&quot;, idname = &quot;id&quot;, # xformla = &quot;~x1&quot;, tname = &quot;year&quot; ) cs &lt;- aggte( cs_out, type = &quot;dynamic&quot;, min_e = -5, max_e = 5, bstrap = FALSE, cband = FALSE ) res_sa20 = feols(y ~ sunab(year_treated, year) | id + year, base_stagg) sa = tidy(res_sa20)[5:14, ] %&gt;% pull(estimate) sa = c(sa[1:4], 0, sa[5:10]) sa_se = tidy(res_sa20)[6:15, ] %&gt;% pull(std.error) sa_se = c(sa_se[1:4], 0, sa_se[5:10]) compare_df_est = data.frame( period = -5:5, cs = cs$att.egt, sa = sa, stacked = stacked ) compare_df_se = data.frame( period = -5:5, cs = cs$se.egt, sa = sa_se, stacked = stacked_se ) compare_df_longer &lt;- compare_df_est %&gt;% pivot_longer(!period, names_to = &quot;estimator&quot;, values_to = &quot;est&quot;) %&gt;% full_join(compare_df_se %&gt;% pivot_longer(!period, names_to = &quot;estimator&quot;, values_to = &quot;se&quot;)) %&gt;% mutate(upper = est + 1.96 * se, lower = est - 1.96 * se) ggplot(compare_df_longer) + geom_ribbon(aes( x = period, ymin = lower, ymax = upper, group = estimator )) + geom_line(aes( x = period, y = est, group = estimator, col = estimator ), linewidth = 1) + causalverse::ama_theme() Stack Data Estimating Equation \\[ Y_{itd} = \\beta_0 + \\beta_1 T_{id} + \\beta_2 P_{td} + \\beta_3 (T_{id} \\times P_{td}) + \\epsilon_{itd} \\] where \\(T_{id}\\) = 1 if unit \\(i\\) is treated in sub-experiment \\(d\\), 0 if control \\(P_{td}\\) = 1 if it’s the period after the treatment in sub-experiment \\(d\\) Equivalently, \\[ Y_{itd} = \\beta_3 (T_{id} \\times P_{td}) + \\theta_{id} + \\gamma_{td} + \\epsilon_{itd} \\] \\(\\beta_3\\) averages all the time-varying effects into a single number (can’t see the time-varying effects) Stacked Event Study Let \\(YSE_{td} = t - \\omega_d\\) be the “time since event” variable in sub-experiment \\(d\\) Then, \\(YSE_{td} = -\\kappa_a, \\dots, 0, \\dots, \\kappa_b\\) in every sub-experiment In each sub-experiment, we can fit \\[ Y_{it}^d = \\sum_{j = -\\kappa_a}^{\\kappa_b} \\beta_j^d \\times 1(TSE_{td} = j) + \\sum_{m = -\\kappa_a}^{\\kappa_b} \\delta_j^d (T_{id} \\times 1 (TSE_{td} = j)) + \\theta_i^d + \\epsilon_{it}^d \\] Different set of event study coefficients in each sub-experiment \\[ Y_{itd} = \\sum_{j = -\\kappa_a}^{\\kappa_b} \\beta_j \\times 1(TSE_{td} = j) + \\sum_{m = -\\kappa_a}^{\\kappa_b} \\delta_j (T_{id} \\times 1 (TSE_{td} = j)) + \\theta_{id} + \\epsilon_{itd} \\] Clustering Clustered at the unit x sub-experiment level (Cengiz et al. 2019) Clustered at the unit level (Deshpande and Li 2019) 26.9.2 Goodman-Bacon Decomposition Paper: (Goodman-Bacon 2021) For an excellent explanation slides by the author, see Takeaways: A pairwise DID (\\(\\tau\\)) gets more weight if the change is close to the middle of the study window A pairwise DID (\\(\\tau\\)) gets more weight if it includes more observations. Code from bacondecomp vignette library(bacondecomp) library(tidyverse) data(&quot;castle&quot;) castle &lt;- bacondecomp::castle %&gt;% dplyr::select(&quot;l_homicide&quot;, &quot;post&quot;, &quot;state&quot;, &quot;year&quot;) head(castle) #&gt; l_homicide post state year #&gt; 1 2.027356 0 Alabama 2000 #&gt; 2 2.164867 0 Alabama 2001 #&gt; 3 1.936334 0 Alabama 2002 #&gt; 4 1.919567 0 Alabama 2003 #&gt; 5 1.749841 0 Alabama 2004 #&gt; 6 2.130440 0 Alabama 2005 df_bacon &lt;- bacon( l_homicide ~ post, data = castle, id_var = &quot;state&quot;, time_var = &quot;year&quot; ) #&gt; type weight avg_est #&gt; 1 Earlier vs Later Treated 0.05976 -0.00554 #&gt; 2 Later vs Earlier Treated 0.03190 0.07032 #&gt; 3 Treated vs Untreated 0.90834 0.08796 # weighted average of the decomposition sum(df_bacon$estimate * df_bacon$weight) #&gt; [1] 0.08181162 Two-way Fixed effect estimate library(broom) fit_tw &lt;- lm(l_homicide ~ post + factor(state) + factor(year), data = bacondecomp::castle) head(tidy(fit_tw)) #&gt; # A tibble: 6 × 5 #&gt; term estimate std.error statistic p.value #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 (Intercept) 1.95 0.0624 31.2 2.84e-118 #&gt; 2 post 0.0818 0.0317 2.58 1.02e- 2 #&gt; 3 factor(state)Alaska -0.373 0.0797 -4.68 3.77e- 6 #&gt; 4 factor(state)Arizona 0.0158 0.0797 0.198 8.43e- 1 #&gt; 5 factor(state)Arkansas -0.118 0.0810 -1.46 1.44e- 1 #&gt; 6 factor(state)California -0.108 0.0810 -1.34 1.82e- 1 Hence, naive TWFE fixed effect equals the weighted average of the Bacon decomposition (= 0.08). library(ggplot2) ggplot(df_bacon) + aes( x = weight, y = estimate, # shape = factor(type), color = type ) + labs(x = &quot;Weight&quot;, y = &quot;Estimate&quot;, shape = &quot;Type&quot;) + geom_point() + causalverse::ama_theme() With time-varying controls that can identify variation within-treatment timing group, the”early vs. late” and “late vs. early” estimates collapse to just one estimate (i.e., both treated). 26.9.3 DID with in and out treatment condition 26.9.3.1 Panel Match Imai and Kim (2021) This case generalizes the staggered adoption setting, allowing units to vary in treatment over time. For \\(N\\) units across \\(T\\) time periods (with potentially unbalanced panels), let \\(X_{it}\\) represent treatment and \\(Y_{it}\\) the outcome for unit \\(i\\) at time \\(t\\). We use the two-way linear fixed effects model: \\[ Y_{it} = \\alpha_i + \\gamma_t + \\beta X_{it} + \\epsilon_{it} \\] for \\(i = 1, \\dots, N\\) and \\(t = 1, \\dots, T\\). Here, \\(\\alpha_i\\) and \\(\\gamma_t\\) are unit and time fixed effects. They capture time-invariant unit-specific and unit-invariant time-specific unobserved confounders, respectively. We can express these as \\(\\alpha_i = h(\\mathbf{U}_i)\\) and \\(\\gamma_t = f(\\mathbf{V}_t)\\), with \\(\\mathbf{U}_i\\) and \\(\\mathbf{V}_t\\) being the confounders. The model doesn’t assume a specific form for \\(h(.)\\) and \\(f(.)\\), but that they’re additive and separable given binary treatment. The least squares estimate of \\(\\beta\\) leverages the covariance in outcome and treatment (Imai and Kim 2021, 406). Specifically, it uses the within-unit and within-time variations. Many researchers prefer the two fixed effects (2FE) estimator because it adjusts for both types of unobserved confounders without specific functional-form assumptions, but this is wrong (Imai and Kim 2019). We do need functional-form assumption (i.e., linearity assumption) for the 2FE to work (Imai and Kim 2021, 406) Two-Way Matching Estimator: It can lead to mismatches; units with the same treatment status get matched when estimating counterfactual outcomes. Observations need to be matched with opposite treatment status for correct causal effects estimation. Mismatches can cause attenuation bias. The 2FE estimator adjusts for this bias using the factor \\(K\\), which represents the net proportion of proper matches between observations with opposite treatment status. Weighting in 2FE: Observation \\((i,t)\\) is weighted based on how often it acts as a control unit. The weighted 2FE estimator still has mismatches, but fewer than the standard 2FE estimator. Adjustments are made based on observations that neither belong to the same unit nor the same time period as the matched observation. This means there are challenges in adjusting for unit-specific and time-specific unobserved confounders under the two-way fixed effect framework. Equivalence &amp; Assumptions: Equivalence between the 2FE estimator and the DID estimator is dependent on the linearity assumption. The multi-period DiD estimator is described as an average of two-time-period, two-group DiD estimators applied during changes from control to treatment. Comparison with DiD: In simple settings (two time periods, treatment given to one group in the second period), the standard nonparametric DiD estimator equals the 2FE estimator. This doesn’t hold in multi-period DiD designs where units change treatment status multiple times at different intervals. Contrary to popular belief, the unweighted 2FE estimator isn’t generally equivalent to the multi-period DiD estimator. While the multi-period DiD can be equivalent to the weighted 2FE, some control observations may have negative regression weights. Conclusion: Justifying the 2FE estimator as the DID estimator isn’t warranted without imposing the linearity assumption. Application (Imai, Kim, and Wang 2021) Matching Methods: Enhance the validity of causal inference. Reduce model dependence and provide intuitive diagnostics (Ho et al. 2007) Rarely utilized in analyzing time series cross-sectional data. The proposed matching estimators are more robust than the standard two-way fixed effects estimator, which can be biased if mis-specified Better than synthetic controls (e.g., (Xu 2017)) because it needs less data to achieve good performance and and adapt the the context of unit switching treatment status multiple times. Notes: Potential carryover effects (treatment may have a long-term effect), leading to post-treatment bias. Proposed Approach: Treated observations are matched with control observations from other units in the same time period with the same treatment history up to a specified number of lags. Standard matching and weighting techniques are employed to further refine the matched set. Apply a DiD estimator to adjust for time trend. The goal is to have treated and matched control observations with similar covariate values. Assessment: The quality of matches is evaluated through covariate balancing. Estimation: Both short-term and long-term average treatment effects on the treated (ATT) are estimated. library(PanelMatch) Treatment Variation plot Visualize the variation of the treatment across space and time Aids in discerning whether the treatment fluctuates adequately over time and units or if the variation is primarily clustered in a subset of data. DisplayTreatment( unit.id = &quot;wbcode2&quot;, time.id = &quot;year&quot;, legend.position = &quot;none&quot;, xlab = &quot;year&quot;, ylab = &quot;Country Code&quot;, treatment = &quot;dem&quot;, hide.x.tick.label = TRUE, hide.y.tick.label = TRUE, # dense.plot = TRUE, data = dem ) Select \\(F\\) (i.e., the number of leads - time periods after treatment). Driven by what authors are interested in estimating: \\(F = 0\\) is the contemporaneous effect (short-term effect) \\(F = n\\) is the the treatment effect on the outcome two time periods after the treatment. (cumulative or long-term effect) Select \\(L\\) (number of lags to adjust). Driven by the identification assumption. Balances bias-variance tradeoff. Higher \\(L\\) values increase credibility but reduce efficiency by limiting potential matches. Model assumption: No spillover effect assumed. Carryover effect allowed up to \\(L\\) periods. Potential outcome for a unit depends neither on others’ treatment status nor on its past treatment after \\(L\\) periods. After defining causal quantity with parameters \\(L\\) and \\(F\\). Focus on the average treatment effect of treatment status change. \\(\\delta(F,L)\\) is the average causal effect of treatment change (ATT), \\(F\\) periods post-treatment, considering treatment history up to \\(L\\) periods. Causal quantity considers potential future treatment reversals, meaning treatment could revert to control before outcome measurement. Also possible to estimate the average treatment effect of treatment reversal on the reversed (ART). Choose \\(L,F\\) based on specific needs. A large \\(L\\) value: Increases the credibility of the limited carryover effect assumption. Allows more past treatments (up to \\(t−L\\)) to influence the outcome \\(Y_{i,t+F}\\). Might reduce the number of matches and lead to less precise estimates. Selecting an appropriate number of lags Researchers should base this choice on substantive knowledge. Sensitivity of empirical results to this choice should be examined. The choice of \\(F\\) should be: Substantively motivated. Decides whether the interest lies in short-term or long-term causal effects. A large \\(F\\) value can complicate causal effect interpretation, especially if many units switch treatment status during the \\(F\\) lead time period. Identification Assumption Parallel trend assumption conditioned on treatment, outcome (excluding immediate lag), and covariate histories. Doesn’t require strong unconfoundedness assumption. Cannot account for unobserved time-varying confounders. Essential to examine outcome time trends. Check if they’re parallel between treated and matched control units using pre-treatment data Constructing the Matched Sets: For each treated observation, create matched control units with identical treatment history from \\(t−L\\) to \\(t−1\\). Matching based on treatment history helps control for carryover effects. Past treatments often act as major confounders, but this method can correct for it. Exact matching on time period adjusts for time-specific unobserved confounders. Unlike staggered adoption methods, units can change treatment status multiple times. Matched set allows treatment switching in and out of treatment Refining the Matched Sets: Initially, matched sets adjust only for treatment history. Parallel trend assumption requires adjustments for other confounders like past outcomes and covariates. Matching methods: Match each treated observation with up to \\(J\\) control units. Distance measures like Mahalanobis distance or propensity score can be used. Match based on estimated propensity score, considering pretreatment covariates. Refined matched set selects most similar control units based on observed confounders. Weighting methods: Assign weight to each control unit in a matched set. Weights prioritize more similar units. Inverse propensity score weighting method can be applied. Weighting is a more generalized method than matching. The Difference-in-Differences Estimator: Using refined matched sets, the ATT (Average Treatment Effect on the Treated) of policy change is estimated. For each treated observation, estimate the counterfactual outcome using the weighted average of control units in the refined set. The DiD estimate of the ATT is computed for each treated observation, then averaged across all such observations. For noncontemporaneous treatment effects where \\(F &gt; 0\\): The ATT doesn’t specify future treatment sequence. Matched control units might have units receiving treatment between time \\(t\\) and \\(t + F\\). Some treated units could return to control conditions between these times. Checking Covariate Balance: The proposed methodology offers the advantage of checking covariate balance between treated and matched control observations. This check helps to see if treated and matched control observations are comparable with respect to observed confounders. Once matched sets are refined, covariate balance examination becomes straightforward. Examine the mean difference of each covariate between a treated observation and its matched controls for each pretreatment time period. Standardize this difference using the standard deviation of each covariate across all treated observations in the dataset. Aggregate this covariate balance measure across all treated observations for each covariate and pretreatment time period. Examine balance for lagged outcome variables over multiple pretreatment periods and time-varying covariates. This helps evaluate the validity of the parallel trend assumption underlying the proposed DiD estimator. Relations with Linear Fixed Effects Regression Estimators: The standard DiD estimator is equivalent to the linear two-way fixed effects regression estimator when: Only two time periods exist. Treatment is given to some units exclusively in the second period. This equivalence doesn’t extend to multiperiod DiD designs, where: More than two time periods are considered. Units might receive treatment multiple times. Despite this, many researchers relate the use of the two-way fixed effects estimator to the DiD design. Standard Error Calculation: Approach: Condition on the weights implied by the matching process. These weights denote how often an observation is utilized in matching (G. W. Imbens and Rubin 2015) Context: Analogous to the conditional variance seen in regression models. Resulting standard errors don’t factor in uncertainties around the matching procedure. They can be viewed as a measure of uncertainty conditional upon the matching process (Ho et al. 2007). Key Findings: Even in conditions favoring OLS, the proposed matching estimator displayed higher robustness to omitted relevant lags than the linear regression model with fixed effects. The robustness offered by matching came at a cost - reduced statistical power. This emphasizes the classic statistical tradeoff between bias (where matching has an advantage) and variance (where regression models might be more efficient). Data Requirements The treatment variable is binary: 0 signifies “assignment” to control. 1 signifies assignment to treatment. Variables identifying units in the data must be: Numeric or integer. Variables identifying time periods should be: Consecutive numeric/integer data. Data format requirement: Must be provided as a standard data.frame object. Basic functions: Utilize treatment histories to create matching sets of treated and control units. Refine these matched sets by determining weights for each control unit in the set. Units with higher weights have a larger influence during estimations. Matching on Treatment History: Goal is to match units transitioning from untreated to treated status with control units that have similar past treatment histories. Setting the Quantity of Interest (qoi =) att average treatment effect on treated units atc average treatment effect of treatment on the control units art average effect of treatment reversal for units that experience treatment reversal ate average treatment effect library(PanelMatch) # All examples follow the package&#39;s vignette # Create the matched sets PM.results.none &lt;- PanelMatch( lag = 4, time.id = &quot;year&quot;, unit.id = &quot;wbcode2&quot;, treatment = &quot;dem&quot;, refinement.method = &quot;none&quot;, data = dem, match.missing = TRUE, size.match = 5, qoi = &quot;att&quot;, outcome.var = &quot;y&quot;, lead = 0:4, forbid.treatment.reversal = FALSE, use.diagonal.variance.matrix = TRUE ) # visualize the treated unit and matched controls DisplayTreatment( unit.id = &quot;wbcode2&quot;, time.id = &quot;year&quot;, legend.position = &quot;none&quot;, xlab = &quot;year&quot;, ylab = &quot;Country Code&quot;, treatment = &quot;dem&quot;, data = dem, matched.set = PM.results.none$att[1], # highlight the particular set show.set.only = TRUE ) Control units and the treated unit have identical treatment histories over the lag window (1988-1991) DisplayTreatment( unit.id = &quot;wbcode2&quot;, time.id = &quot;year&quot;, legend.position = &quot;none&quot;, xlab = &quot;year&quot;, ylab = &quot;Country Code&quot;, treatment = &quot;dem&quot;, data = dem, matched.set = PM.results.none$att[2], # highlight the particular set show.set.only = TRUE ) This set is more limited than the first one, but we can still see that we have exact past histories. Refining Matched Sets Refinement involves assigning weights to control units. Users must: Specify a method for calculating unit similarity/distance. Choose variables for similarity/distance calculations. Select a Refinement Method Users determine the refinement method via the refinement.method argument. Options include: mahalanobis ps.match CBPS.match ps.weight CBPS.weight ps.msm.weight CBPS.msm.weight none Methods with “match” in the name and Mahalanobis will assign equal weights to similar control units. “Weighting” methods give higher weights to control units more similar to treated units. Variable Selection Users need to define which covariates will be used through the covs.formula argument, a one-sided formula object. Variables on the right side of the formula are used for calculations. “Lagged” versions of variables can be included using the format: I(lag(name.of.var, 0:n)). Understanding PanelMatch and matched.set objects The PanelMatch function returns a PanelMatch object. The most crucial element within the PanelMatch object is the matched.set object. Within the PanelMatch object, the matched.set object will have names like att, art, or atc. If qoi = ate, there will be two matched.set objects: att and atc. Matched.set Object Details matched.set is a named list with added attributes. Attributes include: Lag Names of treatment Unit and time variables Each list entry represents a matched set of treated and control units. Naming follows a structure: [id variable].[time variable]. Each list element is a vector of control unit ids that match the treated unit mentioned in the element name. Since it’s a matching method, weights are only given to the size.match most similar control units based on distance calculations. # PanelMatch without any refinement PM.results.none &lt;- PanelMatch( lag = 4, time.id = &quot;year&quot;, unit.id = &quot;wbcode2&quot;, treatment = &quot;dem&quot;, refinement.method = &quot;none&quot;, data = dem, match.missing = TRUE, size.match = 5, qoi = &quot;att&quot;, outcome.var = &quot;y&quot;, lead = 0:4, forbid.treatment.reversal = FALSE, use.diagonal.variance.matrix = TRUE ) # Extract the matched.set object msets.none &lt;- PM.results.none$att # PanelMatch with refinement PM.results.maha &lt;- PanelMatch( lag = 4, time.id = &quot;year&quot;, unit.id = &quot;wbcode2&quot;, treatment = &quot;dem&quot;, refinement.method = &quot;mahalanobis&quot;, # use Mahalanobis distance data = dem, match.missing = TRUE, covs.formula = ~ tradewb, size.match = 5, qoi = &quot;att&quot; , outcome.var = &quot;y&quot;, lead = 0:4, forbid.treatment.reversal = FALSE, use.diagonal.variance.matrix = TRUE ) msets.maha &lt;- PM.results.maha$att # these 2 should be identical because weights are not shown msets.none |&gt; head() #&gt; wbcode2 year matched.set.size #&gt; 1 4 1992 74 #&gt; 2 4 1997 2 #&gt; 3 6 1973 63 #&gt; 4 6 1983 73 #&gt; 5 7 1991 81 #&gt; 6 7 1998 1 msets.maha |&gt; head() #&gt; wbcode2 year matched.set.size #&gt; 1 4 1992 74 #&gt; 2 4 1997 2 #&gt; 3 6 1973 63 #&gt; 4 6 1983 73 #&gt; 5 7 1991 81 #&gt; 6 7 1998 1 # summary(msets.none) # summary(msets.maha) Visualizing Matched Sets with the plot method Users can visualize the distribution of the matched set sizes. A red line, by default, indicates the count of matched sets where treated units had no matching control units (i.e., empty matched sets). Plot adjustments can be made using graphics::plot. plot(msets.none) Comparing Methods of Refinement Users are encouraged to: Use substantive knowledge for experimentation and evaluation. Consider the following when configuring PanelMatch: The number of matched sets. The number of controls matched to each treated unit. Achieving covariate balance. Note: Large numbers of small matched sets can lead to larger standard errors during the estimation stage. Covariates that aren’t well balanced can lead to undesirable comparisons between treated and control units. Aspects to consider include: Refinement method. Variables for weight calculation. Size of the lag window. Procedures for addressing missing data (refer to match.missing and listwise.delete arguments). Maximum size of matched sets (for matching methods). Supportive Features: print, plot, and summary methods assist in understanding matched sets and their sizes. get_covariate_balance helps evaluate covariate balance: Lower values in the covariate balance calculations are preferred. PM.results.none &lt;- PanelMatch( lag = 4, time.id = &quot;year&quot;, unit.id = &quot;wbcode2&quot;, treatment = &quot;dem&quot;, refinement.method = &quot;none&quot;, data = dem, match.missing = TRUE, size.match = 5, qoi = &quot;att&quot;, outcome.var = &quot;y&quot;, lead = 0:4, forbid.treatment.reversal = FALSE, use.diagonal.variance.matrix = TRUE ) PM.results.maha &lt;- PanelMatch( lag = 4, time.id = &quot;year&quot;, unit.id = &quot;wbcode2&quot;, treatment = &quot;dem&quot;, refinement.method = &quot;mahalanobis&quot;, data = dem, match.missing = TRUE, covs.formula = ~ I(lag(tradewb, 1:4)) + I(lag(y, 1:4)), size.match = 5, qoi = &quot;att&quot;, outcome.var = &quot;y&quot;, lead = 0:4, forbid.treatment.reversal = FALSE, use.diagonal.variance.matrix = TRUE ) # listwise deletion used for missing data PM.results.listwise &lt;- PanelMatch( lag = 4, time.id = &quot;year&quot;, unit.id = &quot;wbcode2&quot;, treatment = &quot;dem&quot;, refinement.method = &quot;mahalanobis&quot;, data = dem, match.missing = FALSE, listwise.delete = TRUE, covs.formula = ~ I(lag(tradewb, 1:4)) + I(lag(y, 1:4)), size.match = 5, qoi = &quot;att&quot;, outcome.var = &quot;y&quot;, lead = 0:4, forbid.treatment.reversal = FALSE, use.diagonal.variance.matrix = TRUE ) # propensity score based weighting method PM.results.ps.weight &lt;- PanelMatch( lag = 4, time.id = &quot;year&quot;, unit.id = &quot;wbcode2&quot;, treatment = &quot;dem&quot;, refinement.method = &quot;ps.weight&quot;, data = dem, match.missing = FALSE, listwise.delete = TRUE, covs.formula = ~ I(lag(tradewb, 1:4)) + I(lag(y, 1:4)), size.match = 5, qoi = &quot;att&quot;, outcome.var = &quot;y&quot;, lead = 0:4, forbid.treatment.reversal = FALSE ) get_covariate_balance( PM.results.none$att, data = dem, covariates = c(&quot;tradewb&quot;, &quot;y&quot;), plot = FALSE ) #&gt; tradewb y #&gt; t_4 -0.07245466 0.291871990 #&gt; t_3 -0.20930129 0.208654876 #&gt; t_2 -0.24425207 0.107736647 #&gt; t_1 -0.10806125 -0.004950238 get_covariate_balance( PM.results.maha$att, data = dem, covariates = c(&quot;tradewb&quot;, &quot;y&quot;), plot = FALSE ) #&gt; tradewb y #&gt; t_4 0.04558637 0.09701606 #&gt; t_3 -0.03312750 0.10844046 #&gt; t_2 -0.01396793 0.08890753 #&gt; t_1 0.10474894 0.06618865 get_covariate_balance( PM.results.listwise$att, data = dem, covariates = c(&quot;tradewb&quot;, &quot;y&quot;), plot = FALSE ) #&gt; tradewb y #&gt; t_4 0.05634922 0.05223623 #&gt; t_3 -0.01104797 0.05217896 #&gt; t_2 0.01411473 0.03094133 #&gt; t_1 0.06850180 0.02092209 get_covariate_balance( PM.results.ps.weight$att, data = dem, covariates = c(&quot;tradewb&quot;, &quot;y&quot;), plot = FALSE ) #&gt; tradewb y #&gt; t_4 0.014362590 0.04035905 #&gt; t_3 0.005529734 0.04188731 #&gt; t_2 0.009410044 0.04195008 #&gt; t_1 0.027907540 0.03975173 get_covariate_balance Function Options: Allows for the generation of plots displaying covariate balance using plot = TRUE. Plots can be customized using arguments typically used with the base R plot method. Option to set use.equal.weights = TRUE for: Obtaining the balance of unrefined sets. Facilitating understanding of the refinement’s impact. # Use equal weights get_covariate_balance( PM.results.ps.weight$att, data = dem, use.equal.weights = TRUE, covariates = c(&quot;tradewb&quot;, &quot;y&quot;), plot = TRUE, # visualize by setting plot to TRUE ylim = c(-1, 1) ) # Compare covariate balance to refined sets # See large improvement in balance get_covariate_balance( PM.results.ps.weight$att, data = dem, covariates = c(&quot;tradewb&quot;, &quot;y&quot;), plot = TRUE, # visualize by setting plot to TRUE ylim = c(-1, 1) ) balance_scatter( matched_set_list = list(PM.results.maha$att, PM.results.ps.weight$att), data = dem, covariates = c(&quot;y&quot;, &quot;tradewb&quot;) ) PanelEstimate Standard Error Calculation Methods There are different methods available: Bootstrap (default method with 1000 iterations). Conditional: Assumes independence across units, but not time. Unconditional: Doesn’t make assumptions of independence across units or time. For qoi values set to att, art, or atc (Imai, Kim, and Wang 2021): You can use analytical methods for calculating standard errors, which include both “conditional” and “unconditional” methods. PE.results &lt;- PanelEstimate( sets = PM.results.ps.weight, data = dem, se.method = &quot;bootstrap&quot;, number.iterations = 1000, confidence.level = .95 ) # point estimates PE.results[[&quot;estimates&quot;]] #&gt; t+0 t+1 t+2 t+3 t+4 #&gt; 0.2609565 0.9630847 1.2851017 1.7370930 1.4871846 # standard errors PE.results[[&quot;standard.error&quot;]] #&gt; t+0 t+1 t+2 t+3 t+4 #&gt; 0.6399349 1.0304938 1.3825265 1.7625951 2.1672629 # use conditional method PE.results &lt;- PanelEstimate( sets = PM.results.ps.weight, data = dem, se.method = &quot;conditional&quot;, confidence.level = .95 ) # point estimates PE.results[[&quot;estimates&quot;]] #&gt; t+0 t+1 t+2 t+3 t+4 #&gt; 0.2609565 0.9630847 1.2851017 1.7370930 1.4871846 # standard errors PE.results[[&quot;standard.error&quot;]] #&gt; t+0 t+1 t+2 t+3 t+4 #&gt; 0.4844805 0.8170604 1.1171942 1.4116879 1.7172143 summary(PE.results) #&gt; Weighted Difference-in-Differences with Propensity Score #&gt; Matches created with 4 lags #&gt; #&gt; Standard errors computed with conditional method #&gt; #&gt; Estimate of Average Treatment Effect on the Treated (ATT) by Period: #&gt; $summary #&gt; estimate std.error 2.5% 97.5% #&gt; t+0 0.2609565 0.4844805 -0.6886078 1.210521 #&gt; t+1 0.9630847 0.8170604 -0.6383243 2.564494 #&gt; t+2 1.2851017 1.1171942 -0.9045586 3.474762 #&gt; t+3 1.7370930 1.4116879 -1.0297644 4.503950 #&gt; t+4 1.4871846 1.7172143 -1.8784937 4.852863 #&gt; #&gt; $lag #&gt; [1] 4 #&gt; #&gt; $qoi #&gt; [1] &quot;att&quot; plot(PE.results) Moderating Variables # moderating variable dem$moderator &lt;- 0 dem$moderator &lt;- ifelse(dem$wbcode2 &gt; 100, 1, 2) PM.results &lt;- PanelMatch( lag = 4, time.id = &quot;year&quot;, unit.id = &quot;wbcode2&quot;, treatment = &quot;dem&quot;, refinement.method = &quot;mahalanobis&quot;, data = dem, match.missing = TRUE, covs.formula = ~ I(lag(tradewb, 1:4)) + I(lag(y, 1:4)), size.match = 5, qoi = &quot;att&quot;, outcome.var = &quot;y&quot;, lead = 0:4, forbid.treatment.reversal = FALSE, use.diagonal.variance.matrix = TRUE ) PE.results &lt;- PanelEstimate(sets = PM.results, data = dem, moderator = &quot;moderator&quot;) # Each element in the list corresponds to a level in the moderator plot(PE.results[[1]]) plot(PE.results[[2]]) To write up for journal submission, you can follow the following report: In this study, closely aligned with the research by (Acemoglu et al. 2019), two key effects of democracy on economic growth are estimated: the impact of democratization and that of authoritarian reversal. The treatment variable, \\(X_{it}\\), is defined to be one if country \\(i\\) is democratic in year \\(t\\), and zero otherwise. The Average Treatment Effect for the Treated (ATT) under democratization is formulated as follows: \\[ \\begin{aligned} \\delta(F, L) &amp;= \\mathbb{E} \\left\\{ Y_{i, t + F} (X_{it} = 1, X_{i, t - 1} = 0, \\{X_{i,t-l}\\}_{l=2}^L) \\right. \\\\ &amp;\\left. - Y_{i, t + F} (X_{it} = 0, X_{i, t - 1} = 0, \\{X_{i,t-l}\\}_{l=2}^L) | X_{it} = 1, X_{i, t - 1} = 0 \\right\\} \\end{aligned} \\] In this framework, the treated observations are countries that transition from an authoritarian regime \\(X_{it-1} = 0\\) to a democratic one \\(X_{it} = 1\\). The variable \\(F\\) represents the number of leads, denoting the time periods following the treatment, and \\(L\\) signifies the number of lags, indicating the time periods preceding the treatment. The ATT under authoritarian reversal is given by: \\[ \\begin{aligned} &amp;\\mathbb{E} \\left[ Y_{i, t + F} (X_{it} = 0, X_{i, t - 1} = 1, \\{ X_{i, t - l}\\}_{l=2}^L ) \\right. \\\\ &amp;\\left. - Y_{i, t + F} (X_{it} = 1, X_{it-1} = 1, \\{X_{i, t - l} \\}_{l=2}^L ) | X_{it} = 0, X_{i, t - 1} = 1 \\right] \\end{aligned} \\] The ATT is calculated conditioning on 4 years of lags (\\(L = 4\\)) and up to 4 years following the policy change \\(F = 1, 2, 3, 4\\). Matched sets for each treated observation are constructed based on its treatment history, with the number of matched control units generally decreasing when considering a 4-year treatment history as compared to a 1-year history. To enhance the quality of matched sets, methods such as Mahalanobis distance matching, propensity score matching, and propensity score weighting are utilized. These approaches enable us to evaluate the effectiveness of each refinement method. In the process of matching, we employ both up-to-five and up-to-ten matching to investigate how sensitive our empirical results are to the maximum number of allowed matches. For more information on the refinement process, please see the Web Appendix The Mahalanobis distance is expressed through a specific formula. We aim to pair each treated unit with a maximum of \\(J\\) control units, permitting replacement, denoted as \\(| \\mathcal{M}_{it} \\le J|\\). The average Mahalanobis distance between a treated and each control unit over time is computed as: \\[ S_{it} (i&#39;) = \\frac{1}{L} \\sum_{l = 1}^L \\sqrt{(\\mathbf{V}_{i, t - l} - \\mathbf{V}_{i&#39;, t -l})^T \\mathbf{\\Sigma}_{i, t - l}^{-1} (\\mathbf{V}_{i, t - l} - \\mathbf{V}_{i&#39;, t -l})} \\] For a matched control unit \\(i&#39; \\in \\mathcal{M}_{it}\\), \\(\\mathbf{V}_{it&#39;}\\) represents the time-varying covariates to adjust for, and \\(\\mathbf{\\Sigma}_{it&#39;}\\) is the sample covariance matrix for \\(\\mathbf{V}_{it&#39;}\\). Essentially, we calculate a standardized distance using time-varying covariates and average this across different time intervals. In the context of propensity score matching, we employ a logistic regression model with balanced covariates to derive the propensity score. Defined as the conditional likelihood of treatment given pre-treatment covariates (Rosenbaum and Rubin 1983), the propensity score is estimated by first creating a data subset comprised of all treated and their matched control units from the same year. This logistic regression model is then fitted as follows: \\[ \\begin{aligned} &amp; e_{it} (\\{\\mathbf{U}_{i, t - l} \\}^L_{l = 1}) \\\\ &amp;= Pr(X_{it} = 1| \\mathbf{U}_{i, t -1}, \\ldots, \\mathbf{U}_{i, t - L}) \\\\ &amp;= \\frac{1}{1 = \\exp(- \\sum_{l = 1}^L \\beta_l^T \\mathbf{U}_{i, t - l})} \\end{aligned} \\] where \\(\\mathbf{U}_{it&#39;} = (X_{it&#39;}, \\mathbf{V}_{it&#39;}^T)^T\\). Given this model, the estimated propensity score for all treated and matched control units is then computed. This enables the adjustment for lagged covariates via matching on the calculated propensity score, resulting in the following distance measure: \\[ S_{it} (i&#39;) = | \\text{logit} \\{ \\hat{e}_{it} (\\{ \\mathbf{U}_{i, t - l}\\}^L_{l = 1})\\} - \\text{logit} \\{ \\hat{e}_{i&#39;t}( \\{ \\mathbf{U}_{i&#39;, t - l} \\}^L_{l = 1})\\} | \\] Here, \\(\\hat{e}_{i&#39;t} (\\{ \\mathbf{U}_{i, t - l}\\}^L_{l = 1})\\) represents the estimated propensity score for each matched control unit \\(i&#39; \\in \\mathcal{M}_{it}\\). Once the distance measure \\(S_{it} (i&#39;)\\) has been determined for all control units in the original matched set, we fine-tune this set by selecting up to \\(J\\) closest control units, which meet a researcher-defined caliper constraint \\(C\\). All other control units receive zero weight. This results in a refined matched set for each treated unit \\((i, t)\\): \\[ \\mathcal{M}_{it}^* = \\{i&#39; : i&#39; \\in \\mathcal{M}_{it}, S_{it} (i&#39;) &lt; C, S_{it} \\le S_{it}^{(J)}\\} \\] \\(S_{it}^{(J)}\\) is the \\(J\\)th smallest distance among the control units in the original set \\(\\mathcal{M}_{it}\\). For further refinement using weighting, a weight is assigned to each control unit \\(i&#39;\\) in a matched set corresponding to a treated unit \\((i, t)\\), with greater weight accorded to more similar units. We utilize inverse propensity score weighting, based on the propensity score model mentioned earlier: \\[ w_{it}^{i&#39;} \\propto \\frac{\\hat{e}_{i&#39;t} (\\{ \\mathbf{U}_{i, t-l} \\}^L_{l = 1} )}{1 - \\hat{e}_{i&#39;t} (\\{ \\mathbf{U}_{i, t-l} \\}^L_{l = 1} )} \\] In this model, \\(\\sum_{i&#39; \\in \\mathcal{M}_{it}} w_{it}^{i&#39;} = 1\\) and \\(w_{it}^{i&#39;} = 0\\) for \\(i&#39; \\notin \\mathcal{M}_{it}\\). The model is fitted to the complete sample of treated and matched control units. Checking Covariate Balance A distinct advantage of the proposed methodology over regression methods is the ability it offers researchers to inspect the covariate balance between treated and matched control observations. This facilitates the evaluation of whether treated and matched control observations are comparable regarding observed confounders. To investigate the mean difference of each covariate (e.g., \\(V_{it&#39;j}\\), representing the \\(j\\)-th variable in \\(\\mathbf{V}_{it&#39;}\\)) between the treated observation and its matched control observation at each pre-treatment time period (i.e., \\(t&#39; &lt; t\\)), we further standardize this difference. For any given pretreatment time period, we adjust by the standard deviation of each covariate across all treated observations in the dataset. Thus, the mean difference is quantified in terms of standard deviation units. Formally, for each treated observation \\((i,t)\\) where \\(D_{it} = 1\\), we define the covariate balance for variable \\(j\\) at the pretreatment time period \\(t - l\\) as: \\[\\begin{equation} B_{it}(j, l) = \\frac{V_{i, t- l,j}- \\sum_{i&#39; \\in \\mathcal{M}_{it}}w_{it}^{i&#39;}V_{i&#39;, t-l,j}}{\\sqrt{\\frac{1}{N_1 - 1} \\sum_{i&#39;=1}^N \\sum_{t&#39; = L+1}^{T-F}D_{i&#39;t&#39;}(V_{i&#39;, t&#39;-l, j} - \\bar{V}_{t&#39; - l, j})^2}} \\label{eq:covbalance} \\end{equation}\\] where \\(N_1 = \\sum_{i&#39;= 1}^N \\sum_{t&#39; = L+1}^{T-F} D_{i&#39;t&#39;}\\) denotes the total number of treated observations and \\(\\bar{V}_{t-l,j} = \\sum_{i=1}^N D_{i,t-l,j}/N\\). We then aggregate this covariate balance measure across all treated observations for each covariate and pre-treatment time period: \\[\\begin{equation} \\bar{B}(j, l) = \\frac{1}{N_1} \\sum_{i=1}^N \\sum_{t = L+ 1}^{T-F}D_{it} B_{it}(j,l) \\label{eq:aggbalance} \\end{equation}\\] Lastly, we evaluate the balance of lagged outcome variables over several pre-treatment periods and that of time-varying covariates. This examination aids in assessing the validity of the parallel trend assumption integral to the DiD estimator justification. In Figure ??, we demonstrate the enhancement of covariate balance thank to the refinement of matched sets. Each scatter plot contrasts the absolute standardized mean difference, as detailed in Equation (??), before (horizontal axis) and after (vertical axis) this refinement. Points below the 45-degree line indicate an improved standardized mean balance for certain time-varying covariates post-refinement. The majority of variables benefit from this refinement process. Notably, the propensity score weighting (bottom panel) shows the most significant improvement, whereas Mahalanobis matching (top panel) yields a more modest improvement. library(PanelMatch) library(causalverse) runPanelMatch &lt;- function(method, lag, size.match=NULL, qoi=&quot;att&quot;) { # Default parameters for PanelMatch common.args &lt;- list( lag = lag, time.id = &quot;year&quot;, unit.id = &quot;wbcode2&quot;, treatment = &quot;dem&quot;, data = dem, covs.formula = ~ I(lag(tradewb, 1:4)) + I(lag(y, 1:4)), qoi = qoi, outcome.var = &quot;y&quot;, lead = 0:4, forbid.treatment.reversal = FALSE, size.match = size.match # setting size.match here for all methods ) if(method == &quot;mahalanobis&quot;) { common.args$refinement.method &lt;- &quot;mahalanobis&quot; common.args$match.missing &lt;- TRUE common.args$use.diagonal.variance.matrix &lt;- TRUE } else if(method == &quot;ps.match&quot;) { common.args$refinement.method &lt;- &quot;ps.match&quot; common.args$match.missing &lt;- FALSE common.args$listwise.delete &lt;- TRUE } else if(method == &quot;ps.weight&quot;) { common.args$refinement.method &lt;- &quot;ps.weight&quot; common.args$match.missing &lt;- FALSE common.args$listwise.delete &lt;- TRUE } return(do.call(PanelMatch, common.args)) } methods &lt;- c(&quot;mahalanobis&quot;, &quot;ps.match&quot;, &quot;ps.weight&quot;) lags &lt;- c(1, 4) sizes &lt;- c(5, 10) You can either do it sequentailly res_pm &lt;- list() for(method in methods) { for(lag in lags) { for(size in sizes) { name &lt;- paste0(method, &quot;.&quot;, lag, &quot;lag.&quot;, size, &quot;m&quot;) res_pm[[name]] &lt;- runPanelMatch(method, lag, size) } } } # Now, you can access res_pm using res_pm[[&quot;mahalanobis.1lag.5m&quot;]] etc. # for treatment reversal res_pm_rev &lt;- list() for(method in methods) { for(lag in lags) { for(size in sizes) { name &lt;- paste0(method, &quot;.&quot;, lag, &quot;lag.&quot;, size, &quot;m&quot;) res_pm_rev[[name]] &lt;- runPanelMatch(method, lag, size, qoi = &quot;art&quot;) } } } or in parallel library(foreach) library(doParallel) registerDoParallel(cores = 4) # Initialize an empty list to store results res_pm &lt;- list() # Replace nested for-loops with foreach results &lt;- foreach( method = methods, .combine = &#39;c&#39;, .multicombine = TRUE, .packages = c(&quot;PanelMatch&quot;, &quot;causalverse&quot;) ) %dopar% { tmp &lt;- list() for (lag in lags) { for (size in sizes) { name &lt;- paste0(method, &quot;.&quot;, lag, &quot;lag.&quot;, size, &quot;m&quot;) tmp[[name]] &lt;- runPanelMatch(method, lag, size) } } tmp } # Collate results for (name in names(results)) { res_pm[[name]] &lt;- results[[name]] } # Treatment reversal # Initialize an empty list to store results res_pm_rev &lt;- list() # Replace nested for-loops with foreach results_rev &lt;- foreach( method = methods, .combine = &#39;c&#39;, .multicombine = TRUE, .packages = c(&quot;PanelMatch&quot;, &quot;causalverse&quot;) ) %dopar% { tmp &lt;- list() for (lag in lags) { for (size in sizes) { name &lt;- paste0(method, &quot;.&quot;, lag, &quot;lag.&quot;, size, &quot;m&quot;) tmp[[name]] &lt;- runPanelMatch(method, lag, size, qoi = &quot;art&quot;) } } tmp } # Collate results for (name in names(results_rev)) { res_pm_rev[[name]] &lt;- results_rev[[name]] } stopImplicitCluster() library(gridExtra) # Updated plotting function create_balance_plot &lt;- function(method, lag, sizes, res_pm, dem) { matched_set_lists &lt;- lapply(sizes, function(size) { res_pm[[paste0(method, &quot;.&quot;, lag, &quot;lag.&quot;, size, &quot;m&quot;)]]$att }) return( balance_scatter_custom( matched_set_list = matched_set_lists, legend.title = &quot;Possible Matches&quot;, set.names = as.character(sizes), legend.position = c(0.2, 0.8), # for compiled plot, you don&#39;t need x,y, or main labs x.axis.label = &quot;&quot;, y.axis.label = &quot;&quot;, main = &quot;&quot;, data = dem, dot.size = 5, # show.legend = F, them_use = causalverse::ama_theme(base_size = 32), covariates = c(&quot;y&quot;, &quot;tradewb&quot;) ) ) } plots &lt;- list() for (method in methods) { for (lag in lags) { plots[[paste0(method, &quot;.&quot;, lag, &quot;lag&quot;)]] &lt;- create_balance_plot(method, lag, sizes, res_pm, dem) } } # # Arranging plots in a 3x2 grid # grid.arrange(plots[[&quot;mahalanobis.1lag&quot;]], # plots[[&quot;mahalanobis.4lag&quot;]], # plots[[&quot;ps.match.1lag&quot;]], # plots[[&quot;ps.match.4lag&quot;]], # plots[[&quot;ps.weight.1lag&quot;]], # plots[[&quot;ps.weight.4lag&quot;]], # ncol=2, nrow=3) # Standardized Mean Difference of Covariates library(gridExtra) library(grid) # Create column and row labels using textGrob col_labels &lt;- c(&quot;1-year Lag&quot;, &quot;4-year Lag&quot;) row_labels &lt;- c(&quot;Maha Matching&quot;, &quot;PS Matching&quot;, &quot;PS Weigthing&quot;) major.axes.fontsize = 40 minor.axes.fontsize = 30 png( file.path(getwd(), &quot;images&quot;, &quot;did_balance_scatter.png&quot;), width = 1200, height = 1000 ) # Create a list-of-lists, where each inner list represents a row grid_list &lt;- list( list( nullGrob(), textGrob(col_labels[1], gp = gpar(fontsize = minor.axes.fontsize)), textGrob(col_labels[2], gp = gpar(fontsize = minor.axes.fontsize)) ), list(textGrob( row_labels[1], gp = gpar(fontsize = minor.axes.fontsize), rot = 90 ), plots[[&quot;mahalanobis.1lag&quot;]], plots[[&quot;mahalanobis.4lag&quot;]]), list(textGrob( row_labels[2], gp = gpar(fontsize = minor.axes.fontsize), rot = 90 ), plots[[&quot;ps.match.1lag&quot;]], plots[[&quot;ps.match.4lag&quot;]]), list(textGrob( row_labels[3], gp = gpar(fontsize = minor.axes.fontsize), rot = 90 ), plots[[&quot;ps.weight.1lag&quot;]], plots[[&quot;ps.weight.4lag&quot;]]) ) # &quot;Flatten&quot; the list-of-lists into a single list of grobs grobs &lt;- do.call(c, grid_list) grid.arrange( grobs = grobs, ncol = 3, nrow = 4, widths = c(0.15, 0.42, 0.42), heights = c(0.15, 0.28, 0.28, 0.28) ) grid.text( &quot;Before Refinement&quot;, x = 0.5, y = 0.03, gp = gpar(fontsize = major.axes.fontsize) ) grid.text( &quot;After Refinement&quot;, x = 0.03, y = 0.5, rot = 90, gp = gpar(fontsize = major.axes.fontsize) ) dev.off() #&gt; png #&gt; 2 Note: Scatter plots display the standardized mean difference of each covariate \\(j\\) and lag year \\(l\\) as defined in Equation (??) before (x-axis) and after (y-axis) matched set refinement. Each plot includes varying numbers of possible matches for each matching method. Rows represent different matching/weighting methods, while columns indicate adjustments for various lag lengths. # Step 1: Define configurations configurations &lt;- list( list(refinement.method = &quot;none&quot;, qoi = &quot;att&quot;), list(refinement.method = &quot;none&quot;, qoi = &quot;art&quot;), list(refinement.method = &quot;mahalanobis&quot;, qoi = &quot;att&quot;), list(refinement.method = &quot;mahalanobis&quot;, qoi = &quot;art&quot;), list(refinement.method = &quot;ps.match&quot;, qoi = &quot;att&quot;), list(refinement.method = &quot;ps.match&quot;, qoi = &quot;art&quot;), list(refinement.method = &quot;ps.weight&quot;, qoi = &quot;att&quot;), list(refinement.method = &quot;ps.weight&quot;, qoi = &quot;art&quot;) ) # Step 2: Use lapply or loop to generate results results &lt;- lapply(configurations, function(config) { PanelMatch( lag = 4, time.id = &quot;year&quot;, unit.id = &quot;wbcode2&quot;, treatment = &quot;dem&quot;, data = dem, match.missing = FALSE, listwise.delete = TRUE, size.match = 5, outcome.var = &quot;y&quot;, lead = 0:4, forbid.treatment.reversal = FALSE, refinement.method = config$refinement.method, covs.formula = ~ I(lag(tradewb, 1:4)) + I(lag(y, 1:4)), qoi = config$qoi ) }) # Step 3: Get covariate balance and plot plots &lt;- mapply(function(result, config) { df &lt;- get_covariate_balance( if (config$qoi == &quot;att&quot;) result$att else result$art, data = dem, covariates = c(&quot;tradewb&quot;, &quot;y&quot;), plot = F ) causalverse::plot_covariate_balance_pretrend(df, main = &quot;&quot;, show_legend = F) }, results, configurations, SIMPLIFY = FALSE) # Set names for plots names(plots) &lt;- sapply(configurations, function(config) { paste(config$qoi, config$refinement.method, sep = &quot;.&quot;) }) To export library(gridExtra) library(grid) # Column and row labels col_labels &lt;- c(&quot;None&quot;, &quot;Mahalanobis&quot;, &quot;Propensity Score Matching&quot;, &quot;Propensity Score Weighting&quot;) row_labels &lt;- c(&quot;ATT&quot;, &quot;ART&quot;) # Specify your desired fontsize for labels minor.axes.fontsize &lt;- 16 major.axes.fontsize &lt;- 20 png(file.path(getwd(), &quot;images&quot;, &quot;p_covariate_balance.png&quot;), width=1200, height=1000) # Create a list-of-lists, where each inner list represents a row grid_list &lt;- list( list( nullGrob(), textGrob(col_labels[1], gp = gpar(fontsize = minor.axes.fontsize)), textGrob(col_labels[2], gp = gpar(fontsize = minor.axes.fontsize)), textGrob(col_labels[3], gp = gpar(fontsize = minor.axes.fontsize)), textGrob(col_labels[4], gp = gpar(fontsize = minor.axes.fontsize)) ), list( textGrob( row_labels[1], gp = gpar(fontsize = minor.axes.fontsize), rot = 90 ), plots$att.none, plots$att.mahalanobis, plots$att.ps.match, plots$att.ps.weight ), list( textGrob( row_labels[2], gp = gpar(fontsize = minor.axes.fontsize), rot = 90 ), plots$art.none, plots$art.mahalanobis, plots$art.ps.match, plots$art.ps.weight ) ) # &quot;Flatten&quot; the list-of-lists into a single list of grobs grobs &lt;- do.call(c, grid_list) # Arrange your plots with text labels grid.arrange( grobs = grobs, ncol = 5, nrow = 3, widths = c(0.1, 0.225, 0.225, 0.225, 0.225), heights = c(0.1, 0.45, 0.45) ) # Add main x and y axis titles grid.text( &quot;Refinement Methods&quot;, x = 0.5, y = 0.01, gp = gpar(fontsize = major.axes.fontsize) ) grid.text( &quot;Quantities of Interest&quot;, x = 0.02, y = 0.5, rot = 90, gp = gpar(fontsize = major.axes.fontsize) ) dev.off() library(knitr) include_graphics(file.path(getwd(), &quot;images&quot;, &quot;p_covariate_balance.png&quot;)) Note: Each graph displays the standardized mean difference, as outlined in Equation (??), plotted on the vertical axis across a pre-treatment duration of four years represented on the horizontal axis. The leftmost column illustrates the balance prior to refinement, while the subsequent three columns depict the covariate balance post the application of distinct refinement techniques. Each individual line signifies the balance of a specific variable during the pre-treatment phase.The red line is tradewb and blue line is the lagged outcome variable. In Figure ??, we observe a marked improvement in covariate balance due to the implemented matching procedures during the pre-treatment period. Our analysis prioritizes methods that adjust for time-varying covariates over a span of four years preceding the treatment initiation. The two rows delineate the standardized mean balance for both treatment modalities, with individual lines representing the balance for each covariate. Across all scenarios, the refinement attributed to matched sets significantly enhances balance. Notably, using propensity score weighting considerably mitigates imbalances in confounders. While some degree of imbalance remains evident in the Mahalanobis distance and propensity score matching techniques, the standardized mean difference for the lagged outcome remains stable throughout the pre-treatment phase. This consistency lends credence to the validity of the proposed DiD estimator. Estimation Results We now detail the estimated ATTs derived from the matching techniques. Figure below offers visual representations of the impacts of treatment initiation (upper panel) and treatment reversal (lower panel) on the outcome variable for a duration of 5 years post-transition, specifically, (F = 0, 1, …, 4). Across the five methods (columns), it becomes evident that the point estimates of effects associated with treatment initiation consistently approximate zero over the 5-year window. In contrast, the estimated outcomes of treatment reversal are notably negative and maintain statistical significance through all refinement techniques during the initial year of transition and the 1 to 4 years that follow, provided treatment reversal is permissible. These effects are notably pronounced, pointing to an estimated reduction of roughly X% in the outcome variable. Collectively, these findings indicate that the transition into the treated state from its absence doesn’t invariably lead to a heightened outcome. Instead, the transition from the treated state back to its absence exerts a considerable negative effect on the outcome variable in both the short and intermediate terms. Hence, the positive effect of the treatment (if we were to use traditional DiD) is actually driven by the negative effect of treatment reversal. # sequential # Step 1: Apply PanelEstimate function # Initialize an empty list to store results res_est &lt;- vector(&quot;list&quot;, length(res_pm)) # Iterate over each element in res_pm for (i in 1:length(res_pm)) { res_est[[i]] &lt;- PanelEstimate( res_pm[[i]], data = dem, se.method = &quot;bootstrap&quot;, number.iterations = 1000, confidence.level = .95 ) # Transfer the name of the current element to the res_est list names(res_est)[i] &lt;- names(res_pm)[i] } # Step 2: Apply plot_PanelEstimate function # Initialize an empty list to store plot results res_est_plot &lt;- vector(&quot;list&quot;, length(res_est)) # Iterate over each element in res_est for (i in 1:length(res_est)) { res_est_plot[[i]] &lt;- plot_PanelEstimate(res_est[[i]], main = &quot;&quot;, theme_use = causalverse::ama_theme(base_size = 14)) # Transfer the name of the current element to the res_est_plot list names(res_est_plot)[i] &lt;- names(res_est)[i] } # check results # res_est_plot$mahalanobis.1lag.5m # Step 1: Apply PanelEstimate function for res_pm_rev # Initialize an empty list to store results res_est_rev &lt;- vector(&quot;list&quot;, length(res_pm_rev)) # Iterate over each element in res_pm_rev for (i in 1:length(res_pm_rev)) { res_est_rev[[i]] &lt;- PanelEstimate( res_pm_rev[[i]], data = dem, se.method = &quot;bootstrap&quot;, number.iterations = 1000, confidence.level = .95 ) # Transfer the name of the current element to the res_est_rev list names(res_est_rev)[i] &lt;- names(res_pm_rev)[i] } # Step 2: Apply plot_PanelEstimate function for res_est_rev # Initialize an empty list to store plot results res_est_plot_rev &lt;- vector(&quot;list&quot;, length(res_est_rev)) # Iterate over each element in res_est_rev for (i in 1:length(res_est_rev)) { res_est_plot_rev[[i]] &lt;- plot_PanelEstimate(res_est_rev[[i]], main = &quot;&quot;, theme_use = causalverse::ama_theme(base_size = 14)) # Transfer the name of the current element to the res_est_plot_rev list names(res_est_plot_rev)[i] &lt;- names(res_est_rev)[i] } # parallel library(doParallel) library(foreach) # Detect the number of cores to use for parallel processing num_cores &lt;- 4 # Register the parallel backend cl &lt;- makeCluster(num_cores) registerDoParallel(cl) # Step 1: Apply PanelEstimate function in parallel res_est &lt;- foreach(i = 1:length(res_pm), .packages = &quot;PanelMatch&quot;) %dopar% { PanelEstimate( res_pm[[i]], data = dem, se.method = &quot;bootstrap&quot;, number.iterations = 1000, confidence.level = .95 ) } # Transfer names from res_pm to res_est names(res_est) &lt;- names(res_pm) # Step 2: Apply plot_PanelEstimate function in parallel res_est_plot &lt;- foreach( i = 1:length(res_est), .packages = c(&quot;PanelMatch&quot;, &quot;causalverse&quot;, &quot;ggplot2&quot;) ) %dopar% { plot_PanelEstimate(res_est[[i]], main = &quot;&quot;, theme_use = causalverse::ama_theme(base_size = 10)) } # Transfer names from res_est to res_est_plot names(res_est_plot) &lt;- names(res_est) # Step 1: Apply PanelEstimate function for res_pm_rev in parallel res_est_rev &lt;- foreach(i = 1:length(res_pm_rev), .packages = &quot;PanelMatch&quot;) %dopar% { PanelEstimate( res_pm_rev[[i]], data = dem, se.method = &quot;bootstrap&quot;, number.iterations = 1000, confidence.level = .95 ) } # Transfer names from res_pm_rev to res_est_rev names(res_est_rev) &lt;- names(res_pm_rev) # Step 2: Apply plot_PanelEstimate function for res_est_rev in parallel res_est_plot_rev &lt;- foreach( i = 1:length(res_est_rev), .packages = c(&quot;PanelMatch&quot;, &quot;causalverse&quot;, &quot;ggplot2&quot;) ) %dopar% { plot_PanelEstimate(res_est_rev[[i]], main = &quot;&quot;, theme_use = causalverse::ama_theme(base_size = 10)) } # Transfer names from res_est_rev to res_est_plot_rev names(res_est_plot_rev) &lt;- names(res_est_rev) # Stop the cluster stopCluster(cl) To export library(gridExtra) library(grid) # Column and row labels col_labels &lt;- c(&quot;Mahalanobis 5m&quot;, &quot;Mahalanobis 10m&quot;, &quot;PS Matching 5m&quot;, &quot;PS Matching 10m&quot;, &quot;PS Weighting 5m&quot;) row_labels &lt;- c(&quot;ATT&quot;, &quot;ART&quot;) # Specify your desired fontsize for labels minor.axes.fontsize &lt;- 16 major.axes.fontsize &lt;- 20 png(file.path(getwd(), &quot;images&quot;, &quot;p_did_est_in_n_out.png&quot;), width=1200, height=1000) # Create a list-of-lists, where each inner list represents a row grid_list &lt;- list( list( nullGrob(), textGrob(col_labels[1], gp = gpar(fontsize = minor.axes.fontsize)), textGrob(col_labels[2], gp = gpar(fontsize = minor.axes.fontsize)), textGrob(col_labels[3], gp = gpar(fontsize = minor.axes.fontsize)), textGrob(col_labels[4], gp = gpar(fontsize = minor.axes.fontsize)), textGrob(col_labels[5], gp = gpar(fontsize = minor.axes.fontsize)) ), list( textGrob(row_labels[1], gp = gpar(fontsize = minor.axes.fontsize), rot = 90), res_est_plot$mahalanobis.1lag.5m, res_est_plot$mahalanobis.1lag.10m, res_est_plot$ps.match.1lag.5m, res_est_plot$ps.match.1lag.10m, res_est_plot$ps.weight.1lag.5m ), list( textGrob(row_labels[2], gp = gpar(fontsize = minor.axes.fontsize), rot = 90), res_est_plot_rev$mahalanobis.1lag.5m, res_est_plot_rev$mahalanobis.1lag.10m, res_est_plot_rev$ps.match.1lag.5m, res_est_plot_rev$ps.match.1lag.10m, res_est_plot_rev$ps.weight.1lag.5m ) ) # &quot;Flatten&quot; the list-of-lists into a single list of grobs grobs &lt;- do.call(c, grid_list) # Arrange your plots with text labels grid.arrange( grobs = grobs, ncol = 6, nrow = 3, widths = c(0.1, 0.18, 0.18, 0.18, 0.18, 0.18), heights = c(0.1, 0.45, 0.45) ) # Add main x and y axis titles grid.text( &quot;Methods&quot;, x = 0.5, y = 0.02, gp = gpar(fontsize = major.axes.fontsize) ) grid.text( &quot;&quot;, x = 0.02, y = 0.5, rot = 90, gp = gpar(fontsize = major.axes.fontsize) ) dev.off() library(knitr) include_graphics(file.path(getwd(), &quot;images&quot;, &quot;p_did_est_in_n_out.png&quot;)) 26.9.3.2 Counterfactual Estimators Also known as imputation approach (Liu, Wang, and Xu 2022) This class of estimator consider observation treatment as missing data. Models are built using data from the control units to impute conterfactuals for the treated observations. It’s called counterfactual estimators because they predict outcomes as if the treated observations had not received the treatment. Advantages: Avoids negative weights and biases by not using treated observations for modeling and applying uniform weights. Supports various models, including those that may relax strict exogeneity assumptions. Methods including Fixed-effects conterfactual estimator (FEct) (DiD is a special case): Based on the Two-way Fixed-effects, where assumes linear additive functional form of unobservables based on unit and time FEs. But FEct fixes the improper weighting of TWFE by comparing within each matched pair (where each pair is the treated observation and its predicted counterfactual that is the weighted sum of all untreated observations). Interactive Fixed Effects conterfactual estimator (IFEct) Xu (2017): When we suspect unobserved time-varying confounder, FEct fails. Instead, IFEct uses the factor-augmented models to relax the strict exogeneity assumption where the effects of unobservables can be decomposed to unit FE + time FE + unit x time FE. Generalized Synthetic Controls are a subset of IFEct when treatments don’t revert. Matrix completion (MC) (Athey et al. 2021): Generalization of factor-augmented models. Different from IFEct which uses hard impute, MC uses soft impute to regularize the singular values when decomposing the residual matrix. Only when latent factors (of unobservables) are strong and sparse, IFEct outperforms MC. [Synthetic Controls] (case studies) Identifying Assumptions: Function Form: Additive separability of observables, unobservables, and idiosyncratic error term. Hence, these models are scale dependent (Athey and Imbens 2006) (e.g., log-transform outcome can invadiate this assumption). Strict Exogeneity: Conditional on observables and unobservables, potential outcomes are independent of treatment assignment (i.e., baseline quasi-randomization) In DiD, where unobservables = unit + time FEs, this assumption is the parallel trends assumption Low-dimensional Decomposition (Feasibility Assumption): Unobservable effects can be decomposed in low-dimension. For the case that \\(U_{it} = f_t \\times \\lambda_i\\) where \\(f_t\\) = common time trend (time FE), and \\(\\lambda_i\\) = unit heterogeneity (unit FE). If \\(U_{it} = f_t \\times \\lambda_i\\) , DiD can satisfy this assumption. But this assumption is weaker than that of DID, and allows us to control for unobservables based on data. Estimation Procedure: Using all control observations, estimate the functions of both observable and unobservable variables (relying on Assumptions 1 and 3). Predict the counterfactual outcomes for each treated unit using the obtained functions. Calculate the difference in treatment effect for each treated individual. By averaging over all treated individuals, you can obtain the Average Treatment Effect on the Treated (ATT). Notes: Use jackknife when number of treated units is small (Liu, Wang, and Xu 2022, 166). 26.9.3.2.1 Imputation Method Liu, Wang, and Xu (2022) can also account for treatment reversals and heterogeneous treatment effects. Other imputation estimators include [@gardner2022two and @borusyak2021revisiting] N. Brown, Butts, and Westerlund (2023) library(fect) PanelMatch::dem model.fect &lt;- fect( Y = &quot;y&quot;, D = &quot;dem&quot;, X = &quot;tradewb&quot;, data = na.omit(PanelMatch::dem), method = &quot;fe&quot;, index = c(&quot;wbcode2&quot;, &quot;year&quot;), se = TRUE, parallel = TRUE, seed = 1234, # twfe force = &quot;two-way&quot; ) print(model.fect$est.avg) plot(model.fect) plot(model.fect, stats = &quot;F.p&quot;) F-test \\(H_0\\): residual averages in the pre-treatment periods = 0 To see treatment reversal effects plot(model.fect, stats = &quot;F.p&quot;, type = &#39;exit&#39;) 26.9.3.2.2 Placebo Test By selecting a part of the data and excluding observations within a specified range to improve the model fitting, we then evaluate whether the estimated Average Treatment Effect (ATT) within this range significantly differs from zero. This approach helps us analyze the periods before treatment. If this test fails, either the functional form or strict exogeneity assumption is problematic. out.fect.p &lt;- fect( Y = &quot;y&quot;, D = &quot;dem&quot;, X = &quot;tradewb&quot;, data = na.omit(PanelMatch::dem), method = &quot;fe&quot;, index = c(&quot;wbcode2&quot;, &quot;year&quot;), se = TRUE, placeboTest = TRUE, # using 3 periods placebo.period = c(-2, 0) ) plot(out.fect.p, proportion = 0.1, stats = &quot;placebo.p&quot;) 26.9.3.2.3 (No) Carryover Effects Test The placebo test can be adapted to assess carryover effects by masking several post-treatment periods instead of pre-treatment ones. If no carryover effects are present, the average prediction error should approximate zero. For the carryover test, set carryoverTest = TRUE. Specify a post-treatment period range in carryover.period to exclude observations for model fitting, then evaluate if the estimated ATT significantly deviates from zero. Even if we have carryover effects, in most cases of the staggered adoption setting, researchers are interested in the cumulative effects, or aggregated treatment effects, so it’s okay. out.fect.c &lt;- fect( Y = &quot;y&quot;, D = &quot;dem&quot;, X = &quot;tradewb&quot;, data = na.omit(PanelMatch::dem), method = &quot;fe&quot;, index = c(&quot;wbcode2&quot;, &quot;year&quot;), se = TRUE, carryoverTest = TRUE, # how many periods of carryover carryover.period = c(1, 3) ) plot(out.fect.c, stats = &quot;carryover.p&quot;) We have evidence of carryover effects. 26.9.3.3 Matrix Completion Applications in marketing: Bronnenberg, Dubé, and Sanders (2020) To estimate average causal effects in panel data with units exposed to treatment intermittently, two literatures are pivotal: Unconfoundedness (G. W. Imbens and Rubin 2015): Imputes missing potential control outcomes for treated units using observed outcomes from similar control units in previous periods. Synthetic Control (Abadie, Diamond, and Hainmueller 2010): Imputes missing control outcomes for treated units using weighted averages from control units, matching lagged outcomes between treated and control units. Both exploit missing potential outcomes under different assumptions: Unconfoundedness assumes time patterns are stable across units. Synthetic control assumes unit patterns are stable over time. Once regularization is applied, both approaches are applicable in similar settings (Athey et al. 2021). Matrix Completion method, nesting both, is based on matrix factorization, focusing on imputing missing matrix elements assuming: Complete matrix = low-rank matrix + noise. Missingness is completely at random. It’s distinguished by not imposing factorization restrictions but utilizing regularization to define the estimator, particularly effective with the nuclear norm as a regularizer for complex missing patterns (Athey et al. 2021). Contributions of Athey et al. (2021) matrix completion include: Recognizing structured missing patterns allowing time correlation, enabling staggered adoption. Modifying estimators for unregularized unit and time fixed effects. Performing well across various \\(T\\) and \\(N\\) sizes, unlike unconfoundedness and synthetic control, which falter when \\(T &gt;&gt; N\\) or \\(N &gt;&gt; T\\), respectively. Identifying Assumptions: SUTVA: Potential outcomes indexed only by the unit’s contemporaneous treatment. No dynamic effects (it’s okay under staggered adoption, it gives a different interpretation of estimand). Setup: \\(Y_{it}(0)\\) and \\(Y_{it}(1)\\) represent potential outcomes of \\(Y_{it}\\). \\(W_{it}\\) is a binary treatment indicator. Aim to estimate the average effect for the treated: \\[ \\tau = \\frac{\\sum_{(i,t): W_{it} = 1}[Y_{it}(1) - Y_{it}(0)]}{\\sum_{i,t}W_{it}} \\] We observe all relevant values for \\(Y_{it}(1)\\) We want to impute missing entries in the \\(Y(0)\\) matrix for treated units with \\(W_{it} = 1\\). Define \\(\\mathcal{M}\\) as the set of pairs of indices \\((i,t)\\), where \\(i \\in N\\) and \\(t \\in T\\), corresponding to missing entries with \\(W_{it} = 1\\); \\(\\mathcal{O}\\) as the set of pairs of indices corresponding to observed entries in \\(Y(0)\\) with \\(W_{it} = 0\\). Data is conceptualized as two \\(N \\times T\\) matrices, one incomplete and one complete: \\[ Y = \\begin{pmatrix} Y_{11} &amp; Y_{12} &amp; ? &amp; \\cdots &amp; Y_{1T} \\\\ ? &amp; ? &amp; Y_{23} &amp; \\cdots &amp; ? \\\\ Y_{31} &amp; ? &amp; Y_{33} &amp; \\cdots &amp; ? \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ Y_{N1} &amp; ? &amp; Y_{N3} &amp; \\cdots &amp; ? \\end{pmatrix}, \\] and \\[ W = \\begin{pmatrix} 0 &amp; 0 &amp; 1 &amp; \\cdots &amp; 0 \\\\ 1 &amp; 1 &amp; 0 &amp; \\cdots &amp; 1 \\\\ 0 &amp; 1 &amp; 0 &amp; \\cdots &amp; 1 \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ 0 &amp; 1 &amp; 0 &amp; \\cdots &amp; 1 \\end{pmatrix}, \\] where \\[ W_{it} = \\begin{cases} 1 &amp; \\text{if } (i,t) \\in \\mathcal{M}, \\\\ 0 &amp; \\text{if } (i,t) \\in \\mathcal{O}, \\end{cases} \\] is an indicator for the event that the corresponding component of \\(Y\\), that is \\(Y_{it}\\), is missing. Patterns of missing data in \\(\\mathbf{Y}\\): Block (treatment) structure with 2 special cases Single-treated-period block structure (G. W. Imbens and Rubin 2015) Single-treated-unit block structure (Abadie, Diamond, and Hainmueller 2010) Staggered Adoption Shape of matrix \\(\\mathbf{Y}\\): Thin (\\(N &gt;&gt; T\\)) Fat (\\(T &gt;&gt; N\\)) Square (\\(N \\approx T\\)) Combinations of patterns of missingness and shape create different literatures: Horizontal Regression = Thin matrix + single-treated-period block (focusing on cross-section correlation patterns) Vertical Regression = Fat matrix + single-treated-unit block (focusing on time-series correlation patterns) TWFE = Square matrix To combine, we can exploit both stable patterns over time, and across units (e.g., TWFE, interactive FEs or matrix completion). For the same factor model \\[ \\mathbf{Y = UV}^T + \\mathbf{\\epsilon} \\] where \\(\\mathbf{U}\\) is \\(N \\times R\\) and \\(\\mathbf{V}\\) is \\(T\\times R\\) The interactive FE literature focuses on a fixed number of factors \\(R\\) in \\(\\mathbf{U, V}\\), while matrix completion focuses on impute \\(\\mathbf{Y}\\) using some forms regularization (e.g., nuclear norm). We can also estimate the number of factors \\(R\\) Moon and Weidner (2015) To use the nuclear norm minimization estimator, we must add a penalty term to regularize the objective function. However, before doing so, we need to explicitly estimate the time (\\(\\lambda_t\\)) and unit (\\(\\mu_i\\)) fixed effects implicitly embedded in the missing data matrix to reduce the bias of the regularization term. Specifically, \\[ Y_{it} =L_{it} + \\sum_{p = 1}^P \\sum_{q= 1}^Q X_{ip} H_{pq}Z_{qt} + \\mu_i + \\lambda_t + V_{it} \\beta + \\epsilon_{it} \\] where \\(X_{ip}\\) is a matrix of \\(p\\) variables for unit \\(i\\) \\(Z_{qt}\\) is a matrix of \\(q\\) variables for time \\(t\\) \\(V_{it}\\) is a matrix of time-varying variables. Lasso-type \\(l_1\\) norm (\\(||H|| = \\sum_{p = 1}^p \\sum_{q = 1}^Q |H_{pq}|\\)) is used to shrink \\(H \\to 0\\) There are several options to regularize \\(L\\): Frobenius (i.e., Ridge): not informative since it imputes missing values as 0. Nuclear Norm (i.e., Lasso): computationally feasible (using SOFT-IMPUTE algorithm (Mazumder, Hastie, and Tibshirani 2010)). Rank (i.e., Subset selection): not computationally feasible This method allows to use more covariates leverage data from treated units (can be used when treatment effect is constant and pattern of missing is not complex). have autocorrelated errors have weighted loss function (i.e., take into account the probability of outcomes for a unit being missing) 26.9.4 Gardner (2022) and Borusyak, Jaravel, and Spiess (2021) Estimate the time and unit fixed effects separately Known as the imputation method (Borusyak, Jaravel, and Spiess 2021) or two-stage DiD (Gardner 2022) # remotes::install_github(&quot;kylebutts/did2s&quot;) library(did2s) library(ggplot2) library(fixest) library(tidyverse) data(base_stagg) est &lt;- did2s( data = base_stagg |&gt; mutate(treat = if_else(time_to_treatment &gt;= 0, 1, 0)), yname = &quot;y&quot;, first_stage = ~ x1 | id + year, second_stage = ~ i(time_to_treatment, ref = c(-1,-1000)), treatment = &quot;treat&quot; , cluster_var = &quot;id&quot; ) fixest::esttable(est) #&gt; est #&gt; Dependent Var.: y #&gt; #&gt; time_to_treatment = -9 0.3518** (0.1332) #&gt; time_to_treatment = -8 -0.3130* (0.1213) #&gt; time_to_treatment = -7 0.0894 (0.2367) #&gt; time_to_treatment = -6 0.0312 (0.2176) #&gt; time_to_treatment = -5 -0.2079 (0.1519) #&gt; time_to_treatment = -4 -0.1152 (0.1438) #&gt; time_to_treatment = -3 -0.0127 (0.1483) #&gt; time_to_treatment = -2 0.1503 (0.1440) #&gt; time_to_treatment = 0 -5.139*** (0.3680) #&gt; time_to_treatment = 1 -3.480*** (0.3784) #&gt; time_to_treatment = 2 -2.021*** (0.3055) #&gt; time_to_treatment = 3 -0.6965. (0.3947) #&gt; time_to_treatment = 4 1.070** (0.3501) #&gt; time_to_treatment = 5 2.173*** (0.4456) #&gt; time_to_treatment = 6 4.449*** (0.3680) #&gt; time_to_treatment = 7 4.864*** (0.3698) #&gt; time_to_treatment = 8 6.187*** (0.2702) #&gt; ______________________ __________________ #&gt; S.E. type Custom #&gt; Observations 950 #&gt; R2 0.62486 #&gt; Adj. R2 0.61843 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 fixest::iplot( est, main = &quot;Event study&quot;, xlab = &quot;Time to treatment&quot;, ref.line = -1 ) coefplot(est) mult_est &lt;- did2s::event_study( data = fixest::base_stagg |&gt; dplyr::mutate(year_treated = dplyr::if_else(year_treated == 10000, 0, year_treated)), gname = &quot;year_treated&quot;, idname = &quot;id&quot;, tname = &quot;year&quot;, yname = &quot;y&quot;, estimator = &quot;all&quot; ) #&gt; Error in purrr::map(., function(y) { : ℹ In index: 1. #&gt; ℹ With name: y. #&gt; Caused by error in `.subset2()`: #&gt; ! no such index at level 1 did2s::plot_event_study(mult_est) Borusyak, Jaravel, and Spiess (2021) didimputation This version is currently not working library(didimputation) library(fixest) data(&quot;base_stagg&quot;) did_imputation( data = base_stagg, yname = &quot;y&quot;, gname = &quot;year_treated&quot;, tname = &quot;year&quot;, idname = &quot;id&quot; ) 26.9.5 Clément De Chaisemartin and d’Haultfoeuille (2020) use twowayfeweights from GitHub (Clément De Chaisemartin and d’Haultfoeuille 2020) Average instant treatment effect of changes in the treatment This relaxes the no-carryover-effect assumption. Drawbacks: Cannot observe treatment effects that manifest over time. There still isn’t a good package for this estimator. # remotes::install_github(&quot;shuo-zhang-ucsb/did_multiplegt&quot;) library(DIDmultiplegt) library(fixest) library(tidyverse) data(&quot;base_stagg&quot;) res &lt;- did_multiplegt( df = base_stagg |&gt; dplyr::mutate(treatment = dplyr::if_else(time_to_treatment &lt; 0, 0, 1)), Y = &quot;y&quot;, G = &quot;year_treated&quot;, T = &quot;year&quot;, D = &quot;treatment&quot;, controls = &quot;x1&quot;, # brep = 20, # getting SE will take forever placebo = 5, dynamic = 5, average_effect = &quot;simple&quot; ) head(res) #&gt; $effect #&gt; treatment #&gt; -5.214207 #&gt; #&gt; $N_effect #&gt; [1] 675 #&gt; #&gt; $N_switchers_effect #&gt; [1] 45 #&gt; #&gt; $dynamic_1 #&gt; [1] -3.63556 #&gt; #&gt; $N_dynamic_1 #&gt; [1] 580 #&gt; #&gt; $N_switchers_effect_1 #&gt; [1] 40 I don’t recommend the TwoWayFEWeights since it only gives the aggregated average treatment effect over all post-treatment periods, but not for each period. library(TwoWayFEWeights) res &lt;- twowayfeweights( data = base_stagg |&gt; dplyr::mutate(treatment = dplyr::if_else(time_to_treatment &lt; 0, 0, 1)), Y = &quot;y&quot;, G = &quot;year_treated&quot;, T = &quot;year&quot;, D = &quot;treatment&quot;, summary_measures = T ) print(res) #&gt; Under the common trends assumption, beta estimates a weighted sum of 45 ATTs. #&gt; 41 ATTs receive a positive weight, and 4 receive a negative weight. #&gt; #&gt; ────────────────────────────────────────── #&gt; Treat. var: treatment ATTs Σ weights #&gt; ────────────────────────────────────────── #&gt; Positive weights 41 1.0238 #&gt; Negative weights 4 -0.0238 #&gt; ────────────────────────────────────────── #&gt; Total 45 1 #&gt; ────────────────────────────────────────── #&gt; #&gt; Summary Measures: #&gt; TWFE Coefficient (β_fe): -3.4676 #&gt; min σ(Δ) compatible with β_fe and Δ_TR = 0: 4.8357 #&gt; min σ(Δ) compatible with β_fe and Δ_TR of a different sign: 36.1549 #&gt; Reference: Corollary 1, de Chaisemartin, C and D&#39;Haultfoeuille, X (2020a) #&gt; #&gt; The development of this package was funded by the European Union (ERC, REALLYCREDIBLE,GA N. 101043899). 26.9.6 Callaway and Sant’Anna (2021) staggered package Group-time average treatment effect library(staggered) library(fixest) data(&quot;base_stagg&quot;) # simple weighted average staggered( df = base_stagg, i = &quot;id&quot;, t = &quot;year&quot;, g = &quot;year_treated&quot;, y = &quot;y&quot;, estimand = &quot;simple&quot; ) #&gt; estimate se se_neyman #&gt; 1 -0.7110941 0.2211943 0.2214245 # cohort weighted average staggered( df = base_stagg, i = &quot;id&quot;, t = &quot;year&quot;, g = &quot;year_treated&quot;, y = &quot;y&quot;, estimand = &quot;cohort&quot; ) #&gt; estimate se se_neyman #&gt; 1 -2.724242 0.2701093 0.2701745 # calendar weighted average staggered( df = base_stagg, i = &quot;id&quot;, t = &quot;year&quot;, g = &quot;year_treated&quot;, y = &quot;y&quot;, estimand = &quot;calendar&quot; ) #&gt; estimate se se_neyman #&gt; 1 -0.5861831 0.1768297 0.1770729 res &lt;- staggered( df = base_stagg, i = &quot;id&quot;, t = &quot;year&quot;, g = &quot;year_treated&quot;, y = &quot;y&quot;, estimand = &quot;eventstudy&quot;, eventTime = -9:8 ) head(res) #&gt; estimate se se_neyman eventTime #&gt; 1 0.20418779 0.1045821 0.1045821 -9 #&gt; 2 -0.06215104 0.1669703 0.1670886 -8 #&gt; 3 0.02744671 0.1413273 0.1420377 -7 #&gt; 4 -0.02131747 0.2203695 0.2206338 -6 #&gt; 5 -0.30690897 0.2015697 0.2036412 -5 #&gt; 6 0.05594029 0.1908101 0.1921745 -4 ggplot( res |&gt; mutate( ymin_ptwise = estimate + 1.96 * se, ymax_ptwise = estimate - 1.96 * se ), aes(x = eventTime, y = estimate) ) + geom_pointrange(aes(ymin = ymin_ptwise, ymax = ymax_ptwise)) + geom_hline(yintercept = 0) + xlab(&quot;Event Time&quot;) + ylab(&quot;Estimate&quot;) + causalverse::ama_theme() # Callaway and Sant&#39;Anna estimator for the simple weighted average staggered_cs( df = base_stagg, i = &quot;id&quot;, t = &quot;year&quot;, g = &quot;year_treated&quot;, y = &quot;y&quot;, estimand = &quot;simple&quot; ) #&gt; estimate se se_neyman #&gt; 1 -0.7994889 0.4484987 0.4486122 # Sun and Abraham estimator for the simple weighted average staggered_sa( df = base_stagg, i = &quot;id&quot;, t = &quot;year&quot;, g = &quot;year_treated&quot;, y = &quot;y&quot;, estimand = &quot;simple&quot; ) #&gt; estimate se se_neyman #&gt; 1 -0.7551901 0.4407818 0.4409525 Fisher’s Randomization Test (i.e., permutation test) \\(H_0\\): \\(TE = 0\\) staggered( df = base_stagg, i = &quot;id&quot;, t = &quot;year&quot;, g = &quot;year_treated&quot;, y = &quot;y&quot;, estimand = &quot;simple&quot;, compute_fisher = T, num_fisher_permutations = 100 ) #&gt; estimate se se_neyman fisher_pval fisher_pval_se_neyman #&gt; 1 -0.7110941 0.2211943 0.2214245 0 0 #&gt; num_fisher_permutations #&gt; 1 100 26.9.7 L. Sun and Abraham (2021) This paper utilizes the Cohort Average Treatment Effects on the Treated (CATT), which measures the cohort-specific average difference in outcomes relative to those never treated, offering a more detailed analysis than Goodman-Bacon (2021). In scenarios lacking a never-treated group, this method designates the last cohort to be treated as the control group. Parameter of interest is the cohort-specific ATT \\(l\\) periods from int ital treatment period \\(e\\) \\[ CATT = E[Y_{i, e + I} - Y_{i, e + I}^\\infty|E_i = e] \\] This paper uses an interaction-weighted estimator in a panel data setting, where the original paper Gibbons, Suárez Serrato, and Urbancic (2018) used the same idea in a cross-sectional setting. Callaway and Sant’Anna (2021) explores group-time average treatment effects, employing cohorts that have not yet been treated as controls, and permits conditioning on time-varying covariates. Athey and Imbens (2022) examines the treatment effect in relation to the counterfactual outcome of the always-treated group, diverging from the conventional focus on the never-treated. Borusyak, Jaravel, and Spiess (2021) presumes a uniform treatment effect across cohorts, effectively simplifying CATT to ATT. Identifying Assumptions for dynamic TWFE: Parallel Trends: Baseline outcomes follow parallel trends across cohorts before treatment. This gives us all CATT (including own, included bins, and excluded bins) No Anticipatory Behavior: There is no effect of the treatment during pre-treatment periods, indicating that outcomes are not influenced by the anticipation of treatment. Treatment Effect Homogeneity: The treatment effect is consistent across cohorts for each relative period. Each adoption cohort should have the same path of treatment effects. In other words, the trajectory of each treatment cohort is similar. Compare to other designs: Athey and Imbens (2022) assume heterogeneity of treatment effects vary over adoption cohorts, but not over time. Borusyak, Jaravel, and Spiess (2021) assume heterogeneity of treatment effects vary over time, but not over adoption cohorts. Callaway and Sant’Anna (2021) assume heterogeneity of treatment effects vary over time and across cohorts. Clement De Chaisemartin and D’haultfœuille (2023) assume heterogeneity of treatment effects vary across groups and over time. Goodman-Bacon (2021) assume heterogeneity either “vary across units but not over time” or “vary over time but not across units”. L. Sun and Abraham (2021) allows for treatment effect heterogeneity across units and time. Sources of Heterogeneous Treatment Effects Adoption cohorts can differ based on certain covariates. Similarly, composition of units within each adoption cohort is different. The response to treatment varies among cohorts if units self-select their initial treatment timing based on anticipated treatment effects. However, this self-selection is still compatible with the parallel trends assumption. This is true if units choose based on an evaluation of baseline outcomes - that is, if baseline outcomes are similar (following parallel trends), then we might not see selection into treatment based on the evaluation of the baseline outcome. Treatment effects can vary across cohorts due to calendar time-varying effects, such as changes in economic conditions. Notes: If you do TWFE, you actually have to drop 2 terms to avoid multicollinearity: Period right before treatment (this one was known before this paper) Drop or bin or trim a distant lag period (this one was clarified by the paper). The reason is before of the multicollinearity in the linear relationship between TWFE and the relative period indicators. Contamination of the treatment effect estimates from excluded periods is a type of “normalization”. To avoid this, we have to assume that all pre-treatment periods have the same CATT. L. Sun and Abraham (2021) estimation method gives reasonable weights to CATT (i..e, weights that sum to 1, and are non negative). They estimate the weighted average of CATT where the weights are shares of cohorts that experience at least \\(l\\) periods after to treatment, normalized by the size of total periods \\(g\\). Aggregation of CATT is similar to that of Callaway and Sant’Anna (2021) Application can use fixest in r with sunab function library(fixest) data(&quot;base_stagg&quot;) res_sa20 = feols(y ~ x1 + sunab(year_treated, year) | id + year, base_stagg) iplot(res_sa20) summary(res_sa20, agg = &quot;att&quot;) #&gt; OLS estimation, Dep. Var.: y #&gt; Observations: 950 #&gt; Fixed-effects: id: 95, year: 10 #&gt; Standard-errors: Clustered (id) #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; x1 0.994678 0.018378 54.12293 &lt; 2.2e-16 *** #&gt; ATT -1.133749 0.205070 -5.52858 2.882e-07 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; RMSE: 0.921817 Adj. R2: 0.887984 #&gt; Within R2: 0.876406 summary(res_sa20, agg = c(&quot;att&quot; = &quot;year::[^-]&quot;)) #&gt; OLS estimation, Dep. Var.: y #&gt; Observations: 950 #&gt; Fixed-effects: id: 95, year: 10 #&gt; Standard-errors: Clustered (id) #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; x1 0.994678 0.018378 54.122928 &lt; 2.2e-16 *** #&gt; year::-9:cohort::10 0.351766 0.359073 0.979649 3.2977e-01 #&gt; year::-8:cohort::9 0.033914 0.471437 0.071937 9.4281e-01 #&gt; year::-8:cohort::10 -0.191932 0.352896 -0.543876 5.8781e-01 #&gt; year::-7:cohort::8 -0.589387 0.736910 -0.799809 4.2584e-01 #&gt; year::-7:cohort::9 0.872995 0.493427 1.769249 8.0096e-02 . #&gt; year::-7:cohort::10 0.019512 0.603411 0.032336 9.7427e-01 #&gt; year::-6:cohort::7 -0.042147 0.865736 -0.048683 9.6127e-01 #&gt; year::-6:cohort::8 -0.657571 0.573257 -1.147078 2.5426e-01 #&gt; year::-6:cohort::9 0.877743 0.533331 1.645775 1.0315e-01 #&gt; year::-6:cohort::10 -0.403635 0.347412 -1.161832 2.4825e-01 #&gt; year::-5:cohort::6 -0.658034 0.913407 -0.720418 4.7306e-01 #&gt; year::-5:cohort::7 -0.316974 0.697939 -0.454158 6.5076e-01 #&gt; year::-5:cohort::8 -0.238213 0.469744 -0.507113 6.1326e-01 #&gt; year::-5:cohort::9 0.301477 0.604201 0.498968 6.1897e-01 #&gt; year::-5:cohort::10 -0.564801 0.463214 -1.219308 2.2578e-01 #&gt; year::-4:cohort::5 -0.983453 0.634492 -1.549984 1.2451e-01 #&gt; year::-4:cohort::6 0.360407 0.858316 0.419900 6.7552e-01 #&gt; year::-4:cohort::7 -0.430610 0.661356 -0.651102 5.1657e-01 #&gt; year::-4:cohort::8 -0.895195 0.374901 -2.387816 1.8949e-02 * #&gt; year::-4:cohort::9 -0.392478 0.439547 -0.892914 3.7418e-01 #&gt; year::-4:cohort::10 0.519001 0.597880 0.868069 3.8757e-01 #&gt; year::-3:cohort::4 0.591288 0.680169 0.869324 3.8688e-01 #&gt; year::-3:cohort::5 -1.000650 0.971741 -1.029749 3.0577e-01 #&gt; year::-3:cohort::6 0.072188 0.652641 0.110609 9.1216e-01 #&gt; year::-3:cohort::7 -0.836820 0.804275 -1.040465 3.0079e-01 #&gt; year::-3:cohort::8 -0.783148 0.701312 -1.116691 2.6697e-01 #&gt; year::-3:cohort::9 0.811285 0.564470 1.437251 1.5397e-01 #&gt; year::-3:cohort::10 0.527203 0.320051 1.647250 1.0285e-01 #&gt; year::-2:cohort::3 0.036941 0.673771 0.054828 9.5639e-01 #&gt; year::-2:cohort::4 0.832250 0.859544 0.968246 3.3541e-01 #&gt; year::-2:cohort::5 -1.574086 0.525563 -2.995051 3.5076e-03 ** #&gt; year::-2:cohort::6 0.311758 0.832095 0.374666 7.0875e-01 #&gt; year::-2:cohort::7 -0.558631 0.871993 -0.640638 5.2332e-01 #&gt; year::-2:cohort::8 0.429591 0.305270 1.407250 1.6265e-01 #&gt; year::-2:cohort::9 1.201899 0.819186 1.467188 1.4566e-01 #&gt; year::-2:cohort::10 -0.002429 0.682087 -0.003562 9.9717e-01 #&gt; att -1.133749 0.205070 -5.528584 2.8820e-07 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; RMSE: 0.921817 Adj. R2: 0.887984 #&gt; Within R2: 0.876406 # alternatively summary(res_sa20, agg = c(&quot;att&quot; = &quot;year::[012345678]&quot;)) |&gt; etable(digits = 2) #&gt; summary(res_.. #&gt; Dependent Var.: y #&gt; #&gt; x1 0.99*** (0.02) #&gt; year = -9 x cohort = 10 0.35 (0.36) #&gt; year = -8 x cohort = 9 0.03 (0.47) #&gt; year = -8 x cohort = 10 -0.19 (0.35) #&gt; year = -7 x cohort = 8 -0.59 (0.74) #&gt; year = -7 x cohort = 9 0.87. (0.49) #&gt; year = -7 x cohort = 10 0.02 (0.60) #&gt; year = -6 x cohort = 7 -0.04 (0.87) #&gt; year = -6 x cohort = 8 -0.66 (0.57) #&gt; year = -6 x cohort = 9 0.88 (0.53) #&gt; year = -6 x cohort = 10 -0.40 (0.35) #&gt; year = -5 x cohort = 6 -0.66 (0.91) #&gt; year = -5 x cohort = 7 -0.32 (0.70) #&gt; year = -5 x cohort = 8 -0.24 (0.47) #&gt; year = -5 x cohort = 9 0.30 (0.60) #&gt; year = -5 x cohort = 10 -0.56 (0.46) #&gt; year = -4 x cohort = 5 -0.98 (0.63) #&gt; year = -4 x cohort = 6 0.36 (0.86) #&gt; year = -4 x cohort = 7 -0.43 (0.66) #&gt; year = -4 x cohort = 8 -0.90* (0.37) #&gt; year = -4 x cohort = 9 -0.39 (0.44) #&gt; year = -4 x cohort = 10 0.52 (0.60) #&gt; year = -3 x cohort = 4 0.59 (0.68) #&gt; year = -3 x cohort = 5 -1.0 (0.97) #&gt; year = -3 x cohort = 6 0.07 (0.65) #&gt; year = -3 x cohort = 7 -0.84 (0.80) #&gt; year = -3 x cohort = 8 -0.78 (0.70) #&gt; year = -3 x cohort = 9 0.81 (0.56) #&gt; year = -3 x cohort = 10 0.53 (0.32) #&gt; year = -2 x cohort = 3 0.04 (0.67) #&gt; year = -2 x cohort = 4 0.83 (0.86) #&gt; year = -2 x cohort = 5 -1.6** (0.53) #&gt; year = -2 x cohort = 6 0.31 (0.83) #&gt; year = -2 x cohort = 7 -0.56 (0.87) #&gt; year = -2 x cohort = 8 0.43 (0.31) #&gt; year = -2 x cohort = 9 1.2 (0.82) #&gt; year = -2 x cohort = 10 -0.002 (0.68) #&gt; att -1.1*** (0.21) #&gt; Fixed-Effects: -------------- #&gt; id Yes #&gt; year Yes #&gt; _______________________ ______________ #&gt; S.E.: Clustered by: id #&gt; Observations 950 #&gt; R2 0.90982 #&gt; Within R2 0.87641 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Using the same syntax as fixest # devtools::install_github(&quot;kylebutts/fwlplot&quot;) library(fwlplot) fwl_plot(y ~ x1, data = base_stagg) fwl_plot(y ~ x1 | id + year, data = base_stagg, n_sample = 100) fwl_plot(y ~ x1 | id + year, data = base_stagg, n_sample = 100, fsplit = ~ treated) 26.9.8 Wooldridge (2022) use etwfe(Extended two-way Fixed Effects) (Wooldridge 2022) 26.9.9 Doubly Robust DiD Also known as the locally efficient doubly robust DiD (Sant’Anna and Zhao 2020) Code example by the authors The package (not method) is rather limited application: Use OLS (cannot handle glm) Canonical DiD only (cannot handle DDD). library(DRDID) data(&quot;nsw_long&quot;) eval_lalonde_cps &lt;- subset(nsw_long, nsw_long$treated == 0 | nsw_long$sample == 2) head(eval_lalonde_cps) #&gt; id year treated age educ black married nodegree dwincl re74 hisp #&gt; 1 1 1975 NA 42 16 0 1 0 NA 0.000 0 #&gt; 2 1 1978 NA 42 16 0 1 0 NA 0.000 0 #&gt; 3 2 1975 NA 20 13 0 0 0 NA 2366.794 0 #&gt; 4 2 1978 NA 20 13 0 0 0 NA 2366.794 0 #&gt; 5 3 1975 NA 37 12 0 1 0 NA 25862.322 0 #&gt; 6 3 1978 NA 37 12 0 1 0 NA 25862.322 0 #&gt; early_ra sample experimental re #&gt; 1 NA 2 0 0.0000 #&gt; 2 NA 2 0 100.4854 #&gt; 3 NA 2 0 3317.4678 #&gt; 4 NA 2 0 4793.7451 #&gt; 5 NA 2 0 22781.8555 #&gt; 6 NA 2 0 25564.6699 # locally efficient doubly robust DiD Estimators for the ATT out &lt;- drdid( yname = &quot;re&quot;, tname = &quot;year&quot;, idname = &quot;id&quot;, dname = &quot;experimental&quot;, xformla = ~ age + educ + black + married + nodegree + hisp + re74, data = eval_lalonde_cps, panel = TRUE ) summary(out) #&gt; Call: #&gt; drdid(yname = &quot;re&quot;, tname = &quot;year&quot;, idname = &quot;id&quot;, dname = &quot;experimental&quot;, #&gt; xformla = ~age + educ + black + married + nodegree + hisp + #&gt; re74, data = eval_lalonde_cps, panel = TRUE) #&gt; ------------------------------------------------------------------ #&gt; Further improved locally efficient DR DID estimator for the ATT: #&gt; #&gt; ATT Std. Error t value Pr(&gt;|t|) [95% Conf. Interval] #&gt; -901.2703 393.6247 -2.2897 0.022 -1672.7747 -129.766 #&gt; ------------------------------------------------------------------ #&gt; Estimator based on panel data. #&gt; Outcome regression est. method: weighted least squares. #&gt; Propensity score est. method: inverse prob. tilting. #&gt; Analytical standard error. #&gt; ------------------------------------------------------------------ #&gt; See Sant&#39;Anna and Zhao (2020) for details. # Improved locally efficient doubly robust DiD estimator # for the ATT, with panel data # drdid_imp_panel() # Locally efficient doubly robust DiD estimator for the ATT, # with panel data # drdid_panel() # Locally efficient doubly robust DiD estimator for the ATT, # with repeated cross-section data # drdid_rc() # Improved locally efficient doubly robust DiD estimator for the ATT, # with repeated cross-section data # drdid_imp_rc() 26.9.10 Augmented/Forward DID DID Methods for Limited Pre-Treatment Periods: Method Scenario Approach Augmented DID (K. T. Li and Van den Bulte 2023) Treatment outcome is outside the range of control units Constructs the treatment counterfactual using a scaled average of control units Forward DID (K. T. Li 2024) Treatment outcome is within the range of control units Uses a forward selection algorithm to choose relevant control units before applying DID References "],["multiple-treatments.html", "26.10 Multiple Treatments", " 26.10 Multiple Treatments When you have 2 treatments in a setting, you should always try to model both of them under one regression to see whether they are significantly different. Never use one treated groups as control for the other, and run separate regression. Could check this answer \\[ \\begin{aligned} Y_{it} &amp;= \\alpha + \\gamma_1 Treat1_{i} + \\gamma_2 Treat2_{i} + \\lambda Post_t \\\\ &amp;+ \\delta_1(Treat1_i \\times Post_t) + \\delta_2(Treat2_i \\times Post_t) + \\epsilon_{it} \\end{aligned} \\] (Fricke 2017) (Clement De Chaisemartin and D’haultfœuille 2023) video code References "],["mediation-under-did.html", "26.11 Mediation Under DiD", " 26.11 Mediation Under DiD Check this post "],["assumptions-1.html", "26.12 Assumptions", " 26.12 Assumptions Parallel Trends: Difference between the treatment and control groups remain constant if there were no treatment. should be used in cases where you observe before and after an event you have treatment and control groups not in cases where treatment is not random confounders. To support we use Placebo test Prior Parallel Trends Test Linear additive effects (of group/unit specific and time-specific): If they are not additively interact, we have to use the weighted 2FE estimator (Imai and Kim 2021) Typically seen in the Staggered Dif-n-dif No anticipation: There is no causal effect of the treatment before its implementation. Possible issues Estimate dependent on functional form: When the size of the response depends (nonlinearly) on the size of the intervention, we might want to look at the the difference in the group with high intensity vs. low. Selection on (time–varying) unobservables Can use the overall sensitivity of coefficient estimates to hidden bias using Rosenbaum Bounds Long-term effects Parallel trends are more likely to be observed over shorter period (window of observation) Heterogeneous effects Different intensity (e.g., doses) for different groups. Ashenfelter dip (Ashenfelter and Card 1985) (job training program participant are more likely to experience an earning drop prior enrolling in these programs) Participants are systemically different from nonparticipants before the treatment, leading to the question of permanent or transitory changes. A fix to this transient endogeneity is to calculate long-run differences (exclude a number of periods symmetrically around the adoption/ implementation date). If we see a sustained impact, then we have strong evidence for the causal impact of a policy. (Proserpio and Zervas 2017b) (James J. Heckman and Smith 1999) (Jepsen, Troske, and Coomes 2014) (X. Li, Gan, and Hu 2011) Response to event might not be immediate (can’t be observed right away in the dependent variable) Using lagged dependent variable \\(Y_{it-1}\\) might be more appropriate (Blundell and Bond 1998) Other factors that affect the difference in trends between the two groups (i.e., treatment and control) will bias your estimation. Correlated observations within a group or time Incidental parameters problems (Lancaster 2000): it’s always better to use individual and time fixed effect. When examining the effects of variation in treatment timing, we have to be careful because negative weights (per group) can be negative if there is a heterogeneity in the treatment effects over time. Example: [Athey and Imbens (2022)](Borusyak, Jaravel, and Spiess 2021)(Goodman-Bacon 2021). In this case you should use new estimands proposed by @callaway2021difference(Clément De Chaisemartin and d’Haultfoeuille 2020), in the did package. If you expect lags and leads, see (L. Sun and Abraham 2021) (Gibbons, Suárez Serrato, and Urbancic 2018) caution when we suspect the treatment effect and treatment variance vary across groups 26.12.1 Prior Parallel Trends Test Plot the average outcomes over time for both treatment and control group before and after the treatment in time. Statistical test for difference in trends (using data from before the treatment period) \\[ Y = \\alpha_g + \\beta_1 T + \\beta_2 T\\times G + \\epsilon \\] where \\(Y\\) = the outcome variable \\(\\alpha_g\\) = group fixed effects \\(T\\) = time (e.g., specific year, or month) \\(\\beta_2\\) = different time trends for each group Hence, if \\(\\beta_2 =0\\) provides evidence that there are no differences in the trend for the two groups prior the time treatment. You can also use different functional forms (e..g, polynomial or nonlinear). If \\(\\beta_2 \\neq 0\\) statistically, possible reasons can be: Statistical significance can be driven by large sample Or the trends are so consistent, and just one period deviation can throw off the trends. Hence, statistical statistical significance. Technically, we can still salvage the research by including time fixed effects, instead of just the before-and-after time fixed effect (actually, most researchers do this mechanically anyway nowadays). However, a side effect can be that the time fixed effects can also absorb some part your treatment effect as well, especially in cases where the treatment effects vary with time (i.e., stronger or weaker over time) (Wolfers 2003). Debate: (Kahn-Lang and Lang 2020) argue that DiD will be more plausible when the treatment and control groups are similar not only in trends, but also in levels. Because when we observe dissimilar in levels prior to the treatment, why is it okay to think that this will not affect future trends? Show a plot of the dependent variable’s time series for treated and control groups and also a similar plot with matched sample. (Ryan et al. 2019) show evidence of matched DiD did well in the setting of non-parallel trends (at least in health care setting). In the case that we don’t have similar levels ex ante between treatment and control groups, functional form assumptions matter and we need justification for our choice. Pre-trend statistical tests: (Roth 2022) provides evidence that these test are usually under powered. See PretrendsPower and pretrends packages for correcting this. Parallel trends assumption is specific to both the transformation and units of the outcome (Roth and Sant’Anna 2023) See falsification test (\\(H_0\\): parallel trends is insensitive to functional form). library(tidyverse) library(fixest) od &lt;- causaldata::organ_donations %&gt;% # Use only pre-treatment data filter(Quarter_Num &lt;= 3) %&gt;% # Treatment variable dplyr::mutate(California = State == &#39;California&#39;) # use my package causalverse::plot_par_trends( data = od, metrics_and_names = list(&quot;Rate&quot; = &quot;Rate&quot;), treatment_status_var = &quot;California&quot;, time_var = list(Quarter_Num = &quot;Time&quot;), display_CI = F ) #&gt; [[1]] # do it manually # always good but plot the dependent out od |&gt; # group by treatment status and time dplyr::group_by(California, Quarter) |&gt; dplyr::summarize_all(mean) |&gt; dplyr::ungroup() |&gt; # view() ggplot2::ggplot(aes(x = Quarter_Num, y = Rate, color = California)) + ggplot2::geom_line() + causalverse::ama_theme() # but it&#39;s also important to use statistical test prior_trend &lt;- fixest::feols(Rate ~ i(Quarter_Num, California) | State + Quarter, data = od) fixest::coefplot(prior_trend, grid = F) fixest::iplot(prior_trend, grid = F) This is alarming since one of the periods is significantly different from 0, which means that our parallel trends assumption is not plausible. In cases where you might have violations of parallel trends assumption, check (Rambachan and Roth 2023) Impose restrictions on how different the post-treatment violations of parallel trends can be from the pre-trends. Partial identification of causal parameter Sensitivity analysis # https://github.com/asheshrambachan/HonestDiD # remotes::install_github(&quot;asheshrambachan/HonestDiD&quot;) # library(HonestDiD) Alternatively, Ban and Kedagni (2022) propose a method that with an information set (i.e., pre-treatment covariates), and an assumption on the selection bias in the post-treatment period (i.e., lies within the convex hull of all selection biases), they can still identify a set of ATT, and with stricter assumption on selection bias from the policymakers perspective, they can also have a point estimate. Alternatively, we can use the pretrends package to examine our assumptions (Roth 2022) 26.12.2 Placebo Test Procedure: Sample data only in the period before the treatment in time. Consider different fake cutoff in time, either Try the whole sequence in time Generate random treatment period, and use randomization inference to account for sampling distribution of the fake effect. Estimate the DiD model but with the post-time = 1 with the fake cutoff A significant DiD coefficient means that you violate the parallel trends! You have a big problem. Alternatively, When data have multiple control groups, drop the treated group, and assign another control group as a “fake” treated group. But even if it fails (i.e., you find a significant DiD effect) among the control groups, it can still be fine. However, this method is used under Synthetic Control Code by theeffectbook.net library(tidyverse) library(fixest) od &lt;- causaldata::organ_donations %&gt;% # Use only pre-treatment data dplyr::filter(Quarter_Num &lt;= 3) %&gt;% # Create fake treatment variables dplyr::mutate( FakeTreat1 = State == &#39;California&#39; &amp; Quarter %in% c(&#39;Q12011&#39;, &#39;Q22011&#39;), FakeTreat2 = State == &#39;California&#39; &amp; Quarter == &#39;Q22011&#39; ) clfe1 &lt;- fixest::feols(Rate ~ FakeTreat1 | State + Quarter, data = od) clfe2 &lt;- fixest::feols(Rate ~ FakeTreat2 | State + Quarter, data = od) fixest::etable(clfe1,clfe2) #&gt; clfe1 clfe2 #&gt; Dependent Var.: Rate Rate #&gt; #&gt; FakeTreat1TRUE 0.0061 (0.0051) #&gt; FakeTreat2TRUE -0.0017 (0.0028) #&gt; Fixed-Effects: --------------- ---------------- #&gt; State Yes Yes #&gt; Quarter Yes Yes #&gt; _______________ _______________ ________________ #&gt; S.E.: Clustered by: State by: State #&gt; Observations 81 81 #&gt; R2 0.99377 0.99376 #&gt; Within R2 0.00192 0.00015 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 We would like the “supposed” DiD to be insignificant. 26.12.3 Assumption Violations Endogenous Timing If the timing of units can be influenced by strategic decisions in a DID analysis, an instrumental variable approach with a control function can be used to control for endogeneity in timing. Questionable Counterfactuals In situations where the control units may not serve as a reliable counterfactual for the treated units, matching methods such as propensity score matching or generalized random forest can be utilized. Additional methods can be found in Matching Methods. 26.12.4 Robustness Checks Placebo DiD (if the DiD estimate \\(\\neq 0\\), parallel trend is violated, and original DiD is biased): Group: Use fake treatment groups: A population that was not affect by the treatment Time: Redo the DiD analysis for period before the treatment (expected treatment effect is 0) (e.g., for previous year or period). Possible alternative control group: Expected results should be similar Try different windows (further away from the treatment point, other factors can creep in and nullify your effect). Treatment Reversal (what if we don’t see the treatment event) Higher-order polynomial time trend (to relax linearity assumption) Test whether other dependent variables that should not be affected by the event are indeed unaffected. Use the same control and treatment period (DiD \\(\\neq0\\), there is a problem) The triple-difference strategy involves examining the interaction between the treatment variable and the probability of being affected by the program, and the group-level participation rate. The identification assumption is that there are no differential trends between high and low participation groups in early versus late implementing countries. References "],["changes-in-changes.html", "Chapter 27 Changes-in-Changes", " Chapter 27 Changes-in-Changes Introduction The Changes-in-Changes (CiC) estimator, introduced by Athey and Imbens (2006), is an alternative to the Difference-in-Differences (DiD) strategy. Unlike traditional DiD, which estimates the Average Treatment Effect on the Treated (ATT), CiC focuses on the Quantile Treatment Effect on the Treated (QTT). QTT captures the difference between potential outcome distributions for treated units at a specific quantile. Beyond Averages: Policymakers often look beyond average program impacts, considering how benefits are distributed across different groups. Job Training Example: Two programs with the same negative average impact may be treated differently: one benefiting high earners might be rejected, while one benefiting low earners could be approved. Traditional Methods’ Limitations: Methods like linear regression, which assume uniform effects, fail to capture important distributional differences. QTEs’ Advantage: QTE methods are tailored for analyzing how treatment effects vary across different segments of a population. QTE vs. ATE: While QTEs provide detailed insights into distributional impacts, they also allow for the recovery of ATEs. However, ATEs are usually identified under weaker assumptions, making QTEs more suitable for exploring the shape of treatment effects rather than just their central tendency. Key Concepts Quantile Treatment Effect on the Treated (QTT): Difference in quantiles of treated units’ potential outcome distributions. Rank Preservation: Assumes each unit’s rank remains constant across potential outcome distributions—this is a strong assumption. Counterfactual Distribution: Estimation focuses on determining this distribution for the treated units in period 1. Estimating QTT CiC uses four distributions from a 2x2 DiD design: \\(F_{Y(0),00}\\): CDF of \\(Y(0)\\) for control units in period 0. \\(F_{Y(0),10}\\): CDF of \\(Y(0)\\) for treatment units in period 0. \\(F_{Y(0),01}\\): CDF of \\(Y(0)\\) for control units in period 1. \\(F_{Y(1),11}\\): CDF of \\(Y(1)\\) for treatment units in period 1. QTT is defined as the difference between the inverses of \\(F_{Y(1),11}\\) and the counterfactual distribution \\(F_{Y(0),11}\\) at quantile \\(q\\): \\[ \\Delta_\\theta^{QTT} = F_{Y(1), 11}^{-1} (\\theta) - F_{Y (0), 11}^{-1} (\\theta) \\] Estimation Process Counterfactual CDF: \\[ \\hat{F}_{Y(0),11}(y) = F_{y,01}\\left(F^{-1}_{y,00}\\left(F_{y,10}(y)\\right)\\right) \\] Equivalent Expression: \\[ \\hat{F}^{-1}_{Y(0),11}(\\theta) = F^{-1}_{y,01}\\left(F_{y,00}\\left(F^{-1}_{y,10}(\\theta)\\right)\\right) \\] Treatment Effect Estimate: \\[ \\hat{\\Delta}^{CIC}_{\\theta} = F^{-1}_{Y(1),11}(\\theta) - \\hat{F}^{-1}_{Y(0),11}(\\theta) \\] Equivalently: \\(\\Delta^{CIC}_{\\theta}\\) is the difference between two QTE estimates: \\[ \\Delta^{CIC}_{\\theta} = \\Delta^{QTE}_{\\theta,1} - \\Delta^{QTE}_{\\theta&#39;,0} \\] where: \\(\\Delta^{QTT}_{\\theta,1}\\) = change over time in \\(y\\) at quantile \\(\\theta\\) for \\(D = 1\\) group. \\(\\Delta^{QTU}_{\\theta&#39;,0}\\) = change over time in \\(y\\) at quantile \\(\\theta&#39;\\) for \\(D = 0\\) group, where \\(q&#39;\\) is the quantile in the \\(D = 0, T = 0\\) distribution corresponding to the value of \\(y\\) associated with quantile \\(\\theta\\) in the \\(D = 1, T = 0\\) distribution. Marketing Example Suppose a company implements a new online marketing strategy aimed at improving customer retention rates. QTT: The goal is to estimate the effect of the strategy on customer retention rates at different quantiles (e.g., median retention rate). Rank Preservation: Assumes customers’ rank in retention distribution remains the same, regardless of the strategy—this assumption is strong and should be carefully considered. Counterfactual: CiC helps estimate how retention rates would have changed without the new strategy by comparing it with a control group. References Athey and Imbens (2006) Frölich and Melly (2013): IV-based Callaway and Li (2019): panel data M. Huber, Schelker, and Strittmatter (2022) Additional Resources Code examples available in Stata. References "],["application-12.html", "27.1 Application", " 27.1 Application 27.1.1 ECIC package library(ecic) data(dat, package = &quot;ecic&quot;) mod = ecic( yvar = lemp, # dependent variable gvar = first.treat, # group indicator tvar = year, # time indicator ivar = countyreal, # unit ID dat = dat, # dataset boot = &quot;weighted&quot;, # bootstrap proceduce (&quot;no&quot;, &quot;normal&quot;, or &quot;weighted&quot;) nReps = 3 # number of bootstrap runs ) mod_res &lt;- summary(mod) mod_res #&gt; perc coefs se #&gt; 1 0.1 1.206140 0.021351711 #&gt; 2 0.2 1.316599 0.009225026 #&gt; 3 0.3 1.449963 0.001859468 #&gt; 4 0.4 1.583415 0.015296156 #&gt; 5 0.5 1.739932 0.011240454 #&gt; 6 0.6 1.915558 0.013060348 #&gt; 7 0.7 2.114966 0.014482208 #&gt; 8 0.8 2.363105 0.005173865 #&gt; 9 0.9 2.779202 0.020831180 ecic_plot(mod_res) 27.1.2 QTE package library(qte) data(lalonde) # randomized setting # qte is identical to qtet jt.rand &lt;- ci.qtet( re78 ~ treat, data = lalonde.exp, iters = 10 ) summary(jt.rand) #&gt; #&gt; Quantile Treatment Effect: #&gt; #&gt; tau QTE Std. Error #&gt; 0.05 0.00 0.00 #&gt; 0.1 0.00 0.00 #&gt; 0.15 0.00 0.00 #&gt; 0.2 0.00 18.33 #&gt; 0.25 338.65 377.74 #&gt; 0.3 846.40 470.45 #&gt; 0.35 1451.51 515.86 #&gt; 0.4 1177.72 869.19 #&gt; 0.45 1396.08 918.39 #&gt; 0.5 1123.55 925.74 #&gt; 0.55 1181.54 938.82 #&gt; 0.6 1466.51 951.64 #&gt; 0.65 2115.04 892.16 #&gt; 0.7 1795.12 842.66 #&gt; 0.75 2347.49 678.45 #&gt; 0.8 2278.12 971.21 #&gt; 0.85 2178.28 973.90 #&gt; 0.9 3239.60 1889.23 #&gt; 0.95 3979.62 2872.52 #&gt; #&gt; Average Treatment Effect: 1794.34 #&gt; Std. Error: 665.59 ggqte(jt.rand) # conditional independence assumption (CIA) jt.cia &lt;- ci.qte( re78 ~ treat, xformla = ~ age + education, data = lalonde.psid, iters = 10 ) summary(jt.cia) #&gt; #&gt; Quantile Treatment Effect: #&gt; #&gt; tau QTE Std. Error #&gt; 0.05 0.00 0.00 #&gt; 0.1 0.00 0.00 #&gt; 0.15 -4433.18 710.76 #&gt; 0.2 -8219.15 419.90 #&gt; 0.25 -10435.74 793.20 #&gt; 0.3 -12232.03 1037.03 #&gt; 0.35 -12428.30 1425.39 #&gt; 0.4 -14195.24 1793.20 #&gt; 0.45 -14248.66 1907.98 #&gt; 0.5 -15538.67 2095.11 #&gt; 0.55 -16550.71 2329.67 #&gt; 0.6 -15595.02 2686.45 #&gt; 0.65 -15827.52 2745.62 #&gt; 0.7 -16090.32 3390.26 #&gt; 0.75 -16091.49 3376.67 #&gt; 0.8 -17864.76 3245.52 #&gt; 0.85 -16756.71 3533.91 #&gt; 0.9 -17914.99 2305.10 #&gt; 0.95 -23646.22 2003.55 #&gt; #&gt; Average Treatment Effect: -13435.40 #&gt; Std. Error: 1259.01 ggqte(jt.cia) jt.ciat &lt;- ci.qtet( re78 ~ treat, xformla = ~ age + education, data = lalonde.psid, iters = 10 ) summary(jt.ciat) #&gt; #&gt; Quantile Treatment Effect: #&gt; #&gt; tau QTE Std. Error #&gt; 0.05 0.00 0.00 #&gt; 0.1 -1018.15 614.29 #&gt; 0.15 -3251.00 1557.37 #&gt; 0.2 -7240.86 1433.54 #&gt; 0.25 -8379.94 475.33 #&gt; 0.3 -8758.82 345.53 #&gt; 0.35 -9897.44 606.54 #&gt; 0.4 -10239.57 747.91 #&gt; 0.45 -10751.39 736.39 #&gt; 0.5 -10570.14 899.75 #&gt; 0.55 -11348.96 898.80 #&gt; 0.6 -11550.84 687.20 #&gt; 0.65 -12203.56 780.92 #&gt; 0.7 -13277.72 979.47 #&gt; 0.75 -14011.74 993.28 #&gt; 0.8 -14373.95 706.69 #&gt; 0.85 -14499.18 1048.62 #&gt; 0.9 -15008.63 2201.11 #&gt; 0.95 -15954.05 2655.30 #&gt; #&gt; Average Treatment Effect: 4266.19 #&gt; Std. Error: 600.51 ggqte(jt.ciat) QTE compares quantiles of the entire population under treatment and control, whereas QTET compares quantiles within the treated group itself. This difference means that QTE reflects the overall population-level impact, while QTET focuses on the treated group’s specific impact. CIA enables identification of both QTE and QTET, but since QTET is conditional on treatment, it might reflect different effects than QTE, especially when the treatment effect is heterogeneous across different subpopulations. For example, the QTE could show a more generalized effect across all individuals, while the QTET may reveal stronger or weaker effects for the subgroup that actually received the treatment. These are DID-like models With the distributional difference-in-differences assumption Callaway and Li (2019), which is an extension of the parallel trends assumption, we can estimate QTET. # distributional DiD assumption jt.pqtet &lt;- panel.qtet( re ~ treat, t = 1978, tmin1 = 1975, tmin2 = 1974, tname = &quot;year&quot;, idname = &quot;id&quot;, data = lalonde.psid.panel, iters = 10 ) summary(jt.pqtet) #&gt; #&gt; Quantile Treatment Effect: #&gt; #&gt; tau QTE Std. Error #&gt; 0.05 4779.21 1222.37 #&gt; 0.1 1987.35 776.82 #&gt; 0.15 842.95 3332.09 #&gt; 0.2 -7366.04 4852.87 #&gt; 0.25 -8449.96 3522.70 #&gt; 0.3 -7992.15 1201.51 #&gt; 0.35 -7429.21 1161.43 #&gt; 0.4 -6597.37 1288.64 #&gt; 0.45 -5519.45 1391.04 #&gt; 0.5 -4702.88 1129.80 #&gt; 0.55 -3904.52 1131.23 #&gt; 0.6 -2741.80 1157.60 #&gt; 0.65 -1507.31 1223.03 #&gt; 0.7 -771.12 1264.45 #&gt; 0.75 707.81 1280.34 #&gt; 0.8 580.00 793.09 #&gt; 0.85 821.75 969.38 #&gt; 0.9 -250.77 1662.49 #&gt; 0.95 -1874.54 2706.67 #&gt; #&gt; Average Treatment Effect: 2326.51 #&gt; Std. Error: 795.44 ggqte(jt.pqtet) With 2 periods, the distributional DiD assumption can partially identify QTET with bounds (Fan and Yu 2012) res_bound &lt;- bounds( re ~ treat, t = 1978, tmin1 = 1975, data = lalonde.psid.panel, idname = &quot;id&quot;, tname = &quot;year&quot; ) summary(res_bound) #&gt; #&gt; Bounds on the Quantile Treatment Effect on the Treated: #&gt; #&gt; tau Lower Bound Upper Bound #&gt; tau Lower Bound Upper Bound #&gt; 0.05 -51.72 0 #&gt; 0.1 -1220.84 0 #&gt; 0.15 -1881.9 0 #&gt; 0.2 -2601.32 0 #&gt; 0.25 -2916.38 485.23 #&gt; 0.3 -3080.16 943.05 #&gt; 0.35 -3327.89 1505.98 #&gt; 0.4 -3240.59 2133.59 #&gt; 0.45 -2982.51 2616.84 #&gt; 0.5 -3108.01 2566.2 #&gt; 0.55 -3342.66 2672.82 #&gt; 0.6 -3491.4 3065.7 #&gt; 0.65 -3739.74 3349.74 #&gt; 0.7 -4647.82 2992.03 #&gt; 0.75 -4826.78 3219.32 #&gt; 0.8 -5801.7 2702.33 #&gt; 0.85 -6588.61 2499.41 #&gt; 0.9 -8953.84 2020.84 #&gt; 0.95 -14283.61 397.04 #&gt; #&gt; Average Treatment Effect on the Treated: 2326.51 plot(res_bound) With a restrictive assumption that difference in the quantiles of the distribution of potential outcomes for the treated and untreated groups be the same for all values of quantiles, we can have the mean DiD model jt.mdid &lt;- ddid2( re ~ treat, t = 1978, tmin1 = 1975, tname = &quot;year&quot;, idname = &quot;id&quot;, data = lalonde.psid.panel, iters = 10 ) summary(jt.mdid) #&gt; #&gt; Quantile Treatment Effect: #&gt; #&gt; tau QTE Std. Error #&gt; 0.05 10616.61 744.99 #&gt; 0.1 5019.83 447.82 #&gt; 0.15 2388.12 334.57 #&gt; 0.2 1033.23 365.01 #&gt; 0.25 485.23 445.95 #&gt; 0.3 943.05 631.10 #&gt; 0.35 931.45 756.72 #&gt; 0.4 945.35 888.69 #&gt; 0.45 1205.88 903.88 #&gt; 0.5 1362.11 778.89 #&gt; 0.55 1279.05 871.73 #&gt; 0.6 1618.13 734.08 #&gt; 0.65 1834.30 674.83 #&gt; 0.7 1326.06 793.46 #&gt; 0.75 1586.35 714.42 #&gt; 0.8 1256.09 591.37 #&gt; 0.85 723.10 871.86 #&gt; 0.9 251.36 1703.13 #&gt; 0.95 -1509.92 2033.88 #&gt; #&gt; Average Treatment Effect: 2326.51 #&gt; Std. Error: 514.81 plot(jt.mdid) On top of the distributional DiD assumption, we need copula stability assumption (i.e., If, before the treatment, the units with the highest outcomes were improving the most, we would expect to see them improving the most in the current period too.) for these models: Aspect QDiD CiC Treatment of Time and Group Symmetric Asymmetric QTET Computation Not inherently scale-invariant Outcome Variable Scale-Invariant jt.qdid &lt;- QDiD( re ~ treat, t = 1978, tmin1 = 1975, tname = &quot;year&quot;, idname = &quot;id&quot;, data = lalonde.psid.panel, iters = 10, panel = T ) jt.cic &lt;- CiC( re ~ treat, t = 1978, tmin1 = 1975, tname = &quot;year&quot;, idname = &quot;id&quot;, data = lalonde.psid.panel, iters = 10, panel = T ) References "],["synthetic-control.html", "Chapter 28 Synthetic Control", " Chapter 28 Synthetic Control Examples in marketing: (Tirunillai and Tellis 2017): offline TV ad on Online Chatter (Yanwen Wang, Wu, and Zhu 2019): mobile hailing technology adoption on drivers’ hourly earnings (Guo, Sriram, and Manchanda 2020): payment disclosure laws effect on physician prescription behavior using Timing of the Massachusetts open payment law as the exogenous shock (Adalja et al. 2023): mandatory GMO labels had no impact on consumer demand (Using Vermont as a mandatory state) Notes The SC method provides asymptotically normal estimators for various linear panel data models, given sufficiently large pre-treatment periods, making it a natural alternative to the Difference-in-differences model (Arkhangelsky and Hirshberg 2023). SCM is superior than Matching Methods because it not only matches on covariates (i.e., pre-treatment variables), but also outcomes. For a review of the method, see (Abadie 2021) SCMs can also be used under the Bayesian framework (Bayesian Synthetic Control) where we do not have to impose any restrictive priori (S. Kim, Lee, and Gupta 2020) Different from Matching Methods because SCMs match on the pre-treatment outcomes in each period while Matching Methods match on the number of covariates. A data driven procedure to construct more comparable control groups (i.e., black box). To do causal inference with control and treatment group using Matching Methods, you typically have to have similar covariates in the control and the treated groups. However, if you don’t methods like Propensity Scores and DID can perform rather poorly (i.e., large bias). Advantages over Difference-in-differences Maximization of the observable similarity between control and treatment (maybe also unobservables) Can also be used in cases where no untreated case with similar on matching dimensions with treated cases Objective selection of controls. Advantages over linear regression Regression weights for the estimator will be outside of [0,1] (because regression allows extrapolation), and it will not be sparse (i.e., can be less than 0). No extrapolation under SCMs Explicitly state the fit (i.e., the weight) Can be estimated without the post-treatment outcomes for the control group (can’t p-hack) Advantages: From the selection criteria, researchers can understand the relative importance of each candidate Post-intervention outcomes are not used in synthetic. Hence, you can’t retro-fit. Observable similarity between control and treatment cases is maximized Disadvantages: It’s hard to argue for the weights you use to create the “synthetic control” SCM is recommended when Social events to evaluate large-scale program or policy Only one treated case with several control candidates. Assumptions Donor subject is a good match for the synthetic control (i.e., gap between the dependent of the donor subject and that of the synthetic control should be 0 before treatment) Only the treated subject undergoes the treatment and not any of the subjects in the donor pool. No other changes to the subjects during the whole window. The counterfactual outcome of the treatment group can be imputed in a linear combination of control groups. Identification: The exclusion restriction is met conditional on the pre-treatment outcomes. Synth provides an algorithm that finds weighted combination of the comparison units where the weights are chosen such that it best resembles the values of predictors of the outcome variable for the affected units before the intervention Setting (notation followed professor Alberto Abadie) \\(J + 1\\) units in periods \\(1, \\dots, T\\) The first unit is the treated one during \\(T_0 + 1, \\dots, T\\) \\(J\\) units are called a donor pool \\(Y_{it}^I\\) is the outcome for unit \\(i\\) if it’s exposed to the treatment during \\(T_0 + 1 , \\dots T\\) \\(Y_{it}^N\\) is the outcome for unit \\(i\\) if it’s not exposed to the treatment We try to estimate the effect of treatment on the treated unit \\[ \\tau_{1t} = Y_{1t}^I - Y_{1t}^N \\] where we observe the first treated unit already \\(Y_{1t}^I = Y_{1t}\\) To construct the synthetic control unit, we have to find appropriate weight for each donor in the donor pool by finding \\(\\mathbf{W} = (w_2, \\dots, w_{J=1})&#39;\\) where \\(w_j \\ge 0\\) for \\(j = 2, \\dots, J+1\\) \\(w_2 + \\dots + w_{J+1} = 1\\) The “appropriate” vector \\(\\mathbf{W}\\) here is constrained to \\[ \\min||\\mathbf{X}_1 - \\mathbf{X}_0 \\mathbf{W}|| \\] where \\(\\mathbf{X}_1\\) is the \\(k \\times 1\\) vector of pre-treatment characteristics for the treated unit \\(\\mathbf{X}_0\\) is the \\(k \\times J\\) matrix of pre-treatment characteristics for the untreated units For simplicity, researchers usually use \\[ \\begin{aligned} &amp;\\min||\\mathbf{X}_1 - \\mathbf{X}_0 \\mathbf{W}|| \\\\ &amp;= (\\sum_{h=1}^k v_h(X_{h1}- w_2 X-{h2} - \\dots - w_{J+1} X_{hJ +1})^{1/2} \\end{aligned} \\] where \\(v_1, \\dots, v_k\\) is a vector positive constants that represent the predictive power of the \\(k\\) predictors on \\(Y_{1t}^N\\) (i.e., the potential outcome of the treated without treatment) and it can be chosen either explicitly by the researcher or by data-driven methods For penalized synthetic control (Abadie and L’hour 2021), the minimization problem becomes \\[ \\min_{\\mathbf{W}} ||\\mathbf{X}_1 - \\sum_{j=2}^{J + 1}W_j \\mathbf{X}_j ||^2 + \\lambda \\sum_{j=2}^{J+1} W_j ||\\mathbf{X}_1 - \\mathbf{X}_j||^2 \\] where \\(W_j \\ge 0\\) and \\(\\sum_{j=2}^{J+1} W_j = 1\\) \\(\\lambda &gt;0\\) balances over-fitting of the treated and minimize the sum of pairwise distances \\(\\lambda \\to 0\\): pure synthetic control (i.e solution for the unpenalized estimator) \\(\\lambda \\to \\infty\\): nearest neighbor matching Advantages: For \\(\\lambda &gt;0\\), you have unique and sparse solution Reduces the interpolation bias when averaging dissimilar units Penalized SC never uses dissimilar units Then the synthetic control estimator is \\[ \\hat{\\tau}_{1t} = Y_{1t} - \\sum_{j=2}^{J+1} w_j^* Y_{jt} \\] where \\(Y_{jt}\\) is the outcome for unit \\(j\\) at time \\(t\\) Consideration Under the factor model (Abadie, Diamond, and Hainmueller 2010) \\[ Y_{it}^N = \\mathbf{\\theta}_t \\mathbf{Z}_i + \\mathbf{\\lambda}_t \\mathbf{\\mu}_i + \\epsilon_{it} \\] where \\(Z_i\\) = observables \\(\\mu_i\\) = unobservables \\(\\epsilon_{it}\\) = unit-level transitory shock (i.e., random noise) with assumptions of \\(\\mathbf{W}^*\\) such that \\[ \\begin{aligned} \\sum_{j=2}^{J+1} w_j^* \\mathbf{Z}_j &amp;= \\mathbf{Z}_1 \\\\ &amp;\\dots \\\\ \\sum_{j=2}^{J+1} w_j^* Y_{j1} &amp;= Y_{11} \\\\ \\sum_{j=2}^{J+1} w_j^* Y_{jT_0} &amp;= Y_{1T_0} \\end{aligned} \\] Basically, we assume that the synthetic control is a good counterfactual when the treated unit is not exposed to the treatment. Then, the bias bound depends on close fit, which is controlled by the ratio between \\(\\epsilon_{it}\\) (transitory shock) and \\(T_0\\) (the number of pre-treatment periods). In other words, you should have good fit for \\(Y_{1t}\\) for pre-treatment period (i.e., \\(T_0\\) should be large while small variance in \\(\\epsilon_{it}\\)) When you have poor fit, you have to use bias correction version of the synthetic control. See Ben-Michael, Feller, and Rothstein (2020) Overfitting can be the result of small \\(T_0\\) (the number of pre-treatment periods), large \\(J\\) (the number of units in the donor pool), and large \\(\\epsilon_{it}\\) (noise) Mitigation: put only similar units (to the treated one) in the donor pool To make inference, we have to create a permutation distribution (by iteratively reassigning the treatment to the units in the donor pool and estimate the placebo effects in each iteration). We say there is an effect of the treatment when the magnitude of value of the treatment effect on the treated unit is extreme relative to the permutation distribution. It’s recommended to use one-sided inference. And the permutation distribution is superior to the p-values alone (because sampling-based inference is hard under SCMs either because of undefined sampling mechanism or the sample is the population). For benchmark (permutation) distribution (e.g., uniform), see (Firpo and Possebom 2018) References "],["applications-1.html", "28.1 Applications", " 28.1 Applications 28.1.1 Example 1 by Danilo Freire # install.packages(&quot;Synth&quot;) # install.packages(&quot;gsynth&quot;) library(&quot;Synth&quot;) library(&quot;gsynth&quot;) simulate data for 10 states and 30 years. State A receives the treatment T = 20 after year 15. set.seed(1) year &lt;- rep(1:30, 10) state &lt;- rep(LETTERS[1:10], each = 30) X1 &lt;- round(rnorm(300, mean = 2, sd = 1), 2) X2 &lt;- round(rbinom(300, 1, 0.5) + rnorm(300), 2) Y &lt;- round(1 + 2 * X1 + rnorm(300), 2) df &lt;- as.data.frame(cbind(Y, X1, X2, state, year)) df$Y &lt;- as.numeric(as.character(df$Y)) df$X1 &lt;- as.numeric(as.character(df$X1)) df$X2 &lt;- as.numeric(as.character(df$X2)) df$year &lt;- as.numeric(as.character(df$year)) df$state.num &lt;- rep(1:10, each = 30) df$state &lt;- as.character(df$state) df$`T` &lt;- ifelse(df$state == &quot;A&quot; &amp; df$year &gt;= 15, 1, 0) df$Y &lt;- ifelse(df$state == &quot;A&quot; &amp; df$year &gt;= 15, df$Y + 20, df$Y) str(df) #&gt; &#39;data.frame&#39;: 300 obs. of 7 variables: #&gt; $ Y : num 2.29 4.51 2.07 8.87 4.37 1.32 8 7.49 6.98 3.72 ... #&gt; $ X1 : num 1.37 2.18 1.16 3.6 2.33 1.18 2.49 2.74 2.58 1.69 ... #&gt; $ X2 : num 1.96 0.4 -0.75 -0.56 -0.45 1.06 0.51 -2.1 0 0.54 ... #&gt; $ state : chr &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; ... #&gt; $ year : num 1 2 3 4 5 6 7 8 9 10 ... #&gt; $ state.num: int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ T : num 0 0 0 0 0 0 0 0 0 0 ... dataprep.out &lt;- dataprep( df, predictors = c(&quot;X1&quot;, &quot;X2&quot;), dependent = &quot;Y&quot;, unit.variable = &quot;state.num&quot;, time.variable = &quot;year&quot;, unit.names.variable = &quot;state&quot;, treatment.identifier = 1, controls.identifier = c(2:10), time.predictors.prior = c(1:14), time.optimize.ssr = c(1:14), time.plot = c(1:30) ) synth.out &lt;- synth(dataprep.out) #&gt; #&gt; X1, X0, Z1, Z0 all come directly from dataprep object. #&gt; #&gt; #&gt; **************** #&gt; searching for synthetic control unit #&gt; #&gt; #&gt; **************** #&gt; **************** #&gt; **************** #&gt; #&gt; MSPE (LOSS V): 9.831789 #&gt; #&gt; solution.v: #&gt; 0.3888387 0.6111613 #&gt; #&gt; solution.w: #&gt; 0.1115941 0.1832781 0.1027237 0.312091 0.06096758 0.03509706 0.05893735 0.05746256 0.07784853 print(synth.tables &lt;- synth.tab( dataprep.res = dataprep.out, synth.res = synth.out) ) #&gt; $tab.pred #&gt; Treated Synthetic Sample Mean #&gt; X1 2.028 2.028 2.017 #&gt; X2 0.513 0.513 0.394 #&gt; #&gt; $tab.v #&gt; v.weights #&gt; X1 0.389 #&gt; X2 0.611 #&gt; #&gt; $tab.w #&gt; w.weights unit.names unit.numbers #&gt; 2 0.112 B 2 #&gt; 3 0.183 C 3 #&gt; 4 0.103 D 4 #&gt; 5 0.312 E 5 #&gt; 6 0.061 F 6 #&gt; 7 0.035 G 7 #&gt; 8 0.059 H 8 #&gt; 9 0.057 I 9 #&gt; 10 0.078 J 10 #&gt; #&gt; $tab.loss #&gt; Loss W Loss V #&gt; [1,] 9.761708e-12 9.831789 path.plot(synth.res = synth.out, dataprep.res = dataprep.out, Ylab = c(&quot;Y&quot;), Xlab = c(&quot;Year&quot;), Legend = c(&quot;State A&quot;,&quot;Synthetic State A&quot;), Legend.position = c(&quot;topleft&quot;) ) abline(v = 15, lty = 2) Gaps plot: gaps.plot(synth.res = synth.out, dataprep.res = dataprep.out, Ylab = c(&quot;Gap&quot;), Xlab = c(&quot;Year&quot;), Ylim = c(-30, 30), Main = &quot;&quot; ) abline(v = 15, lty = 2) Alternatively, gsynth provides options to estimate iterative fixed effects, and handle multiple treated units at tat time. Here, we use two=way fixed effects and bootstrapped standard errors gsynth.out &lt;- gsynth( Y ~ `T` + X1 + X2, data = df, index = c(&quot;state&quot;, &quot;year&quot;), force = &quot;two-way&quot;, CV = TRUE, r = c(0, 5), se = TRUE, inference = &quot;parametric&quot;, nboots = 1000, parallel = F # TRUE ) #&gt; Cross-validating ... #&gt; r = 0; sigma2 = 1.13533; IC = 0.95632; PC = 0.96713; MSPE = 1.65502 #&gt; r = 1; sigma2 = 0.96885; IC = 1.54420; PC = 4.30644; MSPE = 1.33375 #&gt; r = 2; sigma2 = 0.81855; IC = 2.08062; PC = 6.58556; MSPE = 1.27341* #&gt; r = 3; sigma2 = 0.71670; IC = 2.61125; PC = 8.35187; MSPE = 1.79319 #&gt; r = 4; sigma2 = 0.62823; IC = 3.10156; PC = 9.59221; MSPE = 2.02301 #&gt; r = 5; sigma2 = 0.55497; IC = 3.55814; PC = 10.48406; MSPE = 2.79596 #&gt; #&gt; r* = 2 #&gt; #&gt; Simulating errors ............. Bootstrapping ... #&gt; .......... plot(gsynth.out) plot(gsynth.out, type = &quot;counterfactual&quot;) plot(gsynth.out, type = &quot;counterfactual&quot;, raw = &quot;all&quot;) # shows estimations for the control cases 28.1.2 Example 2 by Leihua Ye library(Synth) data(&quot;basque&quot;) dim(basque) #774*17 #&gt; [1] 774 17 head(basque) #&gt; regionno regionname year gdpcap sec.agriculture sec.energy sec.industry #&gt; 1 1 Spain (Espana) 1955 2.354542 NA NA NA #&gt; 2 1 Spain (Espana) 1956 2.480149 NA NA NA #&gt; 3 1 Spain (Espana) 1957 2.603613 NA NA NA #&gt; 4 1 Spain (Espana) 1958 2.637104 NA NA NA #&gt; 5 1 Spain (Espana) 1959 2.669880 NA NA NA #&gt; 6 1 Spain (Espana) 1960 2.869966 NA NA NA #&gt; sec.construction sec.services.venta sec.services.nonventa school.illit #&gt; 1 NA NA NA NA #&gt; 2 NA NA NA NA #&gt; 3 NA NA NA NA #&gt; 4 NA NA NA NA #&gt; 5 NA NA NA NA #&gt; 6 NA NA NA NA #&gt; school.prim school.med school.high school.post.high popdens invest #&gt; 1 NA NA NA NA NA NA #&gt; 2 NA NA NA NA NA NA #&gt; 3 NA NA NA NA NA NA #&gt; 4 NA NA NA NA NA NA #&gt; 5 NA NA NA NA NA NA #&gt; 6 NA NA NA NA NA NA transform data to be used in synth() dataprep.out &lt;- dataprep( foo = basque, predictors = c( &quot;school.illit&quot;, &quot;school.prim&quot;, &quot;school.med&quot;, &quot;school.high&quot;, &quot;school.post.high&quot;, &quot;invest&quot; ), predictors.op = &quot;mean&quot;, # the operator time.predictors.prior = 1964:1969, #the entire time frame from the #beginning to the end special.predictors = list( list(&quot;gdpcap&quot;, 1960:1969, &quot;mean&quot;), list(&quot;sec.agriculture&quot;, seq(1961, 1969, 2), &quot;mean&quot;), list(&quot;sec.energy&quot;, seq(1961, 1969, 2), &quot;mean&quot;), list(&quot;sec.industry&quot;, seq(1961, 1969, 2), &quot;mean&quot;), list(&quot;sec.construction&quot;, seq(1961, 1969, 2), &quot;mean&quot;), list(&quot;sec.services.venta&quot;, seq(1961, 1969, 2), &quot;mean&quot;), list(&quot;sec.services.nonventa&quot;, seq(1961, 1969, 2), &quot;mean&quot;), list(&quot;popdens&quot;, 1969, &quot;mean&quot;) ), dependent = &quot;gdpcap&quot;, # dv unit.variable = &quot;regionno&quot;, #identifying unit numbers unit.names.variable = &quot;regionname&quot;, #identifying unit names time.variable = &quot;year&quot;, #time-periods treatment.identifier = 17, #the treated case controls.identifier = c(2:16, 18), #the control cases; all others #except number 17 time.optimize.ssr = 1960:1969, #the time-period over which to optimize time.plot = 1955:1997 ) #the entire time period before/after the treatment where \\(X_1\\) = the control case before the treatment \\(X_0\\) = the control cases after the treatment \\(Z_1\\): the treatment case before the treatment \\(Z_0\\): the treatment case after the treatment synth.out = synth(data.prep.obj = dataprep.out, method = &quot;BFGS&quot;) #&gt; #&gt; X1, X0, Z1, Z0 all come directly from dataprep object. #&gt; #&gt; #&gt; **************** #&gt; searching for synthetic control unit #&gt; #&gt; #&gt; **************** #&gt; **************** #&gt; **************** #&gt; #&gt; MSPE (LOSS V): 0.008864606 #&gt; #&gt; solution.v: #&gt; 0.02773094 1.194e-07 1.60609e-05 0.0007163836 1.486e-07 0.002423908 0.0587055 0.2651997 0.02851006 0.291276 0.007994382 0.004053188 0.009398579 0.303975 #&gt; #&gt; solution.w: #&gt; 2.53e-08 4.63e-08 6.44e-08 2.81e-08 3.37e-08 4.844e-07 4.2e-08 4.69e-08 0.8508145 9.75e-08 3.2e-08 5.54e-08 0.1491843 4.86e-08 9.89e-08 1.162e-07 Calculate the difference between the real basque region and the synthetic control gaps = dataprep.out$Y1plot - (dataprep.out$Y0plot %*% synth.out$solution.w) gaps[1:3,1] #&gt; 1955 1956 1957 #&gt; 0.15023473 0.09168035 0.03716475 synth.tables = synth.tab(dataprep.res = dataprep.out, synth.res = synth.out) names(synth.tables) #&gt; [1] &quot;tab.pred&quot; &quot;tab.v&quot; &quot;tab.w&quot; &quot;tab.loss&quot; synth.tables$tab.pred[1:13,] #&gt; Treated Synthetic Sample Mean #&gt; school.illit 39.888 256.337 170.786 #&gt; school.prim 1031.742 2730.104 1127.186 #&gt; school.med 90.359 223.340 76.260 #&gt; school.high 25.728 63.437 24.235 #&gt; school.post.high 13.480 36.153 13.478 #&gt; invest 24.647 21.583 21.424 #&gt; special.gdpcap.1960.1969 5.285 5.271 3.581 #&gt; special.sec.agriculture.1961.1969 6.844 6.179 21.353 #&gt; special.sec.energy.1961.1969 4.106 2.760 5.310 #&gt; special.sec.industry.1961.1969 45.082 37.636 22.425 #&gt; special.sec.construction.1961.1969 6.150 6.952 7.276 #&gt; special.sec.services.venta.1961.1969 33.754 41.104 36.528 #&gt; special.sec.services.nonventa.1961.1969 4.072 5.371 7.111 Relative importance of each unit synth.tables$tab.w[8:14, ] #&gt; w.weights unit.names unit.numbers #&gt; 9 0.000 Castilla-La Mancha 9 #&gt; 10 0.851 Cataluna 10 #&gt; 11 0.000 Comunidad Valenciana 11 #&gt; 12 0.000 Extremadura 12 #&gt; 13 0.000 Galicia 13 #&gt; 14 0.149 Madrid (Comunidad De) 14 #&gt; 15 0.000 Murcia (Region de) 15 # plot the changes before and after the treatment path.plot( synth.res = synth.out, dataprep.res = dataprep.out, Ylab = &quot;real per-capita gdp (1986 USD, thousand)&quot;, Xlab = &quot;year&quot;, Ylim = c(0, 12), Legend = c(&quot;Basque country&quot;, &quot;synthetic Basque country&quot;), Legend.position = &quot;bottomright&quot; ) gaps.plot( synth.res = synth.out, dataprep.res = dataprep.out, Ylab = &quot;gap in real per - capita GDP (1986 USD, thousand)&quot;, Xlab = &quot;year&quot;, Ylim = c(-1.5, 1.5), Main = NA ) Doubly Robust Difference-in-Differences Example from DRDID package library(DRDID) data(nsw_long) # Form the Lalonde sample with CPS comparison group eval_lalonde_cps &lt;- subset(nsw_long, nsw_long$treated == 0 | nsw_long$sample == 2) Estimate Average Treatment Effect on Treated using Improved Locally Efficient Doubly Robust DID estimator out &lt;- drdid( yname = &quot;re&quot;, tname = &quot;year&quot;, idname = &quot;id&quot;, dname = &quot;experimental&quot;, xformla = ~ age + educ + black + married + nodegree + hisp + re74, data = eval_lalonde_cps, panel = TRUE ) summary(out) #&gt; Call: #&gt; drdid(yname = &quot;re&quot;, tname = &quot;year&quot;, idname = &quot;id&quot;, dname = &quot;experimental&quot;, #&gt; xformla = ~age + educ + black + married + nodegree + hisp + #&gt; re74, data = eval_lalonde_cps, panel = TRUE) #&gt; ------------------------------------------------------------------ #&gt; Further improved locally efficient DR DID estimator for the ATT: #&gt; #&gt; ATT Std. Error t value Pr(&gt;|t|) [95% Conf. Interval] #&gt; -901.2703 393.6247 -2.2897 0.022 -1672.7747 -129.766 #&gt; ------------------------------------------------------------------ #&gt; Estimator based on panel data. #&gt; Outcome regression est. method: weighted least squares. #&gt; Propensity score est. method: inverse prob. tilting. #&gt; Analytical standard error. #&gt; ------------------------------------------------------------------ #&gt; See Sant&#39;Anna and Zhao (2020) for details. 28.1.3 Example 3 by Synth package’s authors library(Synth) data(&quot;basque&quot;) synth() requires \\(X_1\\) vector of treatment predictors \\(X_0\\) matrix of same variables for control group \\(Z_1\\) vector of outcome variable for treatment group \\(Z_0\\) matrix of outcome variable for control group use dataprep() to prepare data in the format that can be used throughout the Synth package dataprep.out &lt;- dataprep( foo = basque, predictors = c( &quot;school.illit&quot;, &quot;school.prim&quot;, &quot;school.med&quot;, &quot;school.high&quot;, &quot;school.post.high&quot;, &quot;invest&quot; ), predictors.op = &quot;mean&quot;, time.predictors.prior = 1964:1969, special.predictors = list( list(&quot;gdpcap&quot;, 1960:1969 , &quot;mean&quot;), list(&quot;sec.agriculture&quot;, seq(1961, 1969, 2), &quot;mean&quot;), list(&quot;sec.energy&quot;, seq(1961, 1969, 2), &quot;mean&quot;), list(&quot;sec.industry&quot;, seq(1961, 1969, 2), &quot;mean&quot;), list(&quot;sec.construction&quot;, seq(1961, 1969, 2), &quot;mean&quot;), list(&quot;sec.services.venta&quot;, seq(1961, 1969, 2), &quot;mean&quot;), list(&quot;sec.services.nonventa&quot;, seq(1961, 1969, 2), &quot;mean&quot;), list(&quot;popdens&quot;, 1969, &quot;mean&quot;) ), dependent = &quot;gdpcap&quot;, unit.variable = &quot;regionno&quot;, unit.names.variable = &quot;regionname&quot;, time.variable = &quot;year&quot;, treatment.identifier = 17, controls.identifier = c(2:16, 18), time.optimize.ssr = 1960:1969, time.plot = 1955:1997 ) find optimal weights that identifies the synthetic control for the treatment group synth.out &lt;- synth(data.prep.obj = dataprep.out, method = &quot;BFGS&quot;) #&gt; #&gt; X1, X0, Z1, Z0 all come directly from dataprep object. #&gt; #&gt; #&gt; **************** #&gt; searching for synthetic control unit #&gt; #&gt; #&gt; **************** #&gt; **************** #&gt; **************** #&gt; #&gt; MSPE (LOSS V): 0.008864606 #&gt; #&gt; solution.v: #&gt; 0.02773094 1.194e-07 1.60609e-05 0.0007163836 1.486e-07 0.002423908 0.0587055 0.2651997 0.02851006 0.291276 0.007994382 0.004053188 0.009398579 0.303975 #&gt; #&gt; solution.w: #&gt; 2.53e-08 4.63e-08 6.44e-08 2.81e-08 3.37e-08 4.844e-07 4.2e-08 4.69e-08 0.8508145 9.75e-08 3.2e-08 5.54e-08 0.1491843 4.86e-08 9.89e-08 1.162e-07 gaps &lt;- dataprep.out$Y1plot - (dataprep.out$Y0plot %*% synth.out$solution.w) gaps[1:3, 1] #&gt; 1955 1956 1957 #&gt; 0.15023473 0.09168035 0.03716475 synth.tables &lt;- synth.tab(dataprep.res = dataprep.out, synth.res = synth.out) names(synth.tables) # you can pick tables to see #&gt; [1] &quot;tab.pred&quot; &quot;tab.v&quot; &quot;tab.w&quot; &quot;tab.loss&quot; path.plot( synth.res = synth.out, dataprep.res = dataprep.out, Ylab = &quot;real per-capita GDP (1986 USD, thousand)&quot;, Xlab = &quot;year&quot;, Ylim = c(0, 12), Legend = c(&quot;Basque country&quot;, &quot;synthetic Basque country&quot;), Legend.position = &quot;bottomright&quot; ) gaps.plot( synth.res = synth.out, dataprep.res = dataprep.out, Ylab = &quot;gap in real per-capita GDP (1986 USD, thousand)&quot;, Xlab = &quot;year&quot;, Ylim = c(-1.5, 1.5), Main = NA ) You could also run placebo tests 28.1.4 Example 4 by Michael Robbins and Steven Davenport who are authors of MicroSynth with the following improvements: Standardization use.survey = TRUE and permutation ( perm = 250 and jack = TRUE ) for placebo tests Omnibus statistic (set to omnibus.var ) for multiple outcome variables incorporate multiple follow-up periods end.post Notes: Both predictors and outcome will be used to match units before intervention Outcome variable has to be time-variant Predictors are time-invariant # right now the package is not availabe for R version 4.2 library(microsynth) data(&quot;seattledmi&quot;) cov.var &lt;- c( &quot;TotalPop&quot;, &quot;BLACK&quot;, &quot;HISPANIC&quot;, &quot;Males_1521&quot;, &quot;HOUSEHOLDS&quot;, &quot;FAMILYHOUS&quot;, &quot;FEMALE_HOU&quot;, &quot;RENTER_HOU&quot;, &quot;VACANT_HOU&quot; ) match.out &lt;- c(&quot;i_felony&quot;, &quot;i_misdemea&quot;, &quot;i_drugs&quot;, &quot;any_crime&quot;) sea1 &lt;- microsynth( seattledmi, idvar = &quot;ID&quot;, timevar = &quot;time&quot;, intvar = &quot;Intervention&quot;, start.pre = 1, end.pre = 12, end.post = 16, match.out = match.out, # outcome variable will be matched on exactly match.covar = cov.var, # specify covariates will be matched on exactly result.var = match.out, # used to report results omnibus.var = match.out, # feature in the omnibus p-value test = &quot;lower&quot;, n.cores = min(parallel::detectCores(), 2) ) sea1 summary(sea1) plot_microsynth(sea1) sea2 &lt;- microsynth( seattledmi, idvar = &quot;ID&quot;, timevar = &quot;time&quot;, intvar = &quot;Intervention&quot;, start.pre = 1, end.pre = 12, end.post = c(14, 16), match.out = match.out, match.covar = cov.var, result.var = match.out, omnibus.var = match.out, test = &quot;lower&quot;, perm = 250, jack = TRUE, n.cores = min(parallel::detectCores(), 2) ) "],["augmented-synthetic-control-method.html", "28.2 Augmented Synthetic Control Method", " 28.2 Augmented Synthetic Control Method package: augsynth (Ben-Michael, Feller, and Rothstein 2021) References "],["synthetic-control-with-staggered-adoption.html", "28.3 Synthetic Control with Staggered Adoption", " 28.3 Synthetic Control with Staggered Adoption references: https://ebenmichael.github.io/assets/research/jamboree.pdf (Ben-Michael, Feller, and Rothstein 2022) package: augsynth References "],["bayesian-synthetic-control.html", "28.4 Bayesian Synthetic Control", " 28.4 Bayesian Synthetic Control S. Kim, Lee, and Gupta (2020) Pang, Liu, and Xu (2022) References "],["generalized-synthetic-control.html", "28.5 Generalized Synthetic Control", " 28.5 Generalized Synthetic Control reference: (Xu 2017) Bootstrap procedure here is biased (K. T. Li and Sonnier 2023). Hence, we need to follow K. T. Li and Sonnier (2023) in terms of SEs estimation. References "],["other-advances.html", "28.6 Other Advances", " 28.6 Other Advances L. Sun, Ben-Michael, and Feller (2023) Using Multiple Outcomes to Improve SCM Common Weights Across Outcomes: This paper proposes using a single set of synthetic control weights across multiple outcomes, rather than estimating separate weights for each outcome. Reduced Bias with Low-Rank Factor Model: By balancing a vector or an index of outcomes, this approach yields lower bias bounds under a low-rank factor model, with further improvements as the number of outcomes increases. Evidence: re-analysis of the Flint water crisis’s impact on educational outcome. References "],["event-studies.html", "Chapter 29 Event Studies", " Chapter 29 Event Studies The earliest paper that used event study was (Dolley 1933) (Campbell et al. 1998) introduced this method, which based on the efficient markets theory by (Fama 1970) Review: (McWilliams and Siegel 1997): in management (A. Sorescu, Warren, and Ertekin 2017): in marketing Previous marketing studies: Firm-initiated activities (Horsky and Swyngedouw 1987): name change (Chaney, Devinney, and Winer 1991) new product announcements (Agrawal and Kamakura 1995): celebrity endorsement (Lane and Jacobson 1995): brand extensions (Houston and Johnson 2000): joint venture (Geyskens, Gielens, and Dekimpe 2002): Internet channel (for newspapers) (Cornwell, Pruitt, and Clark 2005): sponsorship announcements (Elberse 2007): casting announcements (A. B. Sorescu, Chandy, and Prabhu 2007): M&amp;A (Sood and Tellis 2009): innovation payoff (Wiles and Danielova 2009): product placements in movies (Joshi and Hanssens 2009): movie releases (Wiles et al. 2010): Regulatory Reports of Deceptive Advertising (Boyd, Chandy, and Cunha Jr 2010): new CMO appointments (Karniouchina, Uslay, and Erenburg 2011): product placement (Wiles, Morgan, and Rego 2012): Brand Acquisition and Disposal (Kalaignanam and Bahadir 2013): corporate brand name change (Raassens, Wuyts, and Geyskens 2012): new product development outsourcing (Mazodier and Rezaee 2013): sports announcements (Borah and Tellis 2014): make, buy or ally for innovations (Homburg, Vollmayr, and Hahn 2014): channel expansions (Fang, Lee, and Yang 2015): Co-development agreements (Wu et al. 2015): horizontal collaboration in new product development (Fama et al. 1969): stock split Non-firm-initiated activities (A. B. Sorescu, Chandy, and Prabhu 2003): FDA approvals (Pandey, Shanahan, and Hansen 2005): diversity elite list (Balasubramanian, Mathur, and Thakur 2005): high-quality achievements (Tellis and Johnson 2007): quality reviews by Walter Mossberg (Fornell et al. 2006): customer satisfaction (Gielens et al. 2008): Walmart’s entry into the UK market (Boyd and Spekman 2008): indirect ties (R. S. Rao, Chandy, and Prabhu 2008): FDA approvals (Ittner, Larcker, and Taylor 2009): customer satisfaction (Tipton, Bharadwaj, and Robertson 2009): Deceptive advertising (Y. Chen, Ganesan, and Liu 2009): product recalls (Jacobson and Mizik 2009): satisfaction score release (Karniouchina, Moore, and Cooney 2009): Mad money with Jim Cramer (Wiles et al. 2010): deceptive advertising (Y. Chen, Liu, and Zhang 2012): third-party movie reviews (Xiong and Bharadwaj 2013): positive and negative news (Gao et al. 2015): product recall (Malhotra and Kubowicz Malhotra 2011): data breach (Bhagat, Bizjak, and Coles 1998): litigation Potential avenues: Ad campaigns Market entry product failure/recalls Patents Pros: Better than accounting based measures (e.g., profits) because managers can manipulate profits (Benston 1985) Easy to do Fun fact: (Dubow and Monteiro 2006) came up with a way to gauge how ‘clean’ a market is. They based their measure on how much prices seemed to move in a way that suggested insider knowledge, before the release of important regulatory announcements that could affect the stock prices. Such price shifts might suggest that insider trading was occurring. Essentially, they were watching for any unusual price changes before the day of the announcement. Events can be Internal (e.g., stock repurchase) External (e.g., macroeconomic variables) Assumptions: Efficient market theory Shareholders are the most important group among stakeholders The event sharply affects share price Expected return is calculated appropriately Steps: Event Identification: (e.g., dividends, M&amp;A, stock buyback, laws or regulation, privatization vs. nationalization, celebrity endorsements, name changes, or brand extensions etc. To see the list of events in US and international, see WRDS S&amp;P Capital IQ Key Developments). Events must affect either cash flows or on the discount rate of firms (A. Sorescu, Warren, and Ertekin 2017, 191) Estimation window: Normal return expected return (\\(T_0 \\to T_1\\)) (sometimes include days before to capture leakages). Recommendation by (Johnston 2007) is to use 250 days before the event (and 45-day between the estimation window and the event window). (Wiles, Morgan, and Rego 2012) used an 90-trading-day estimation window ending 6 days before the event (this is consistent with the finance literature). (Gielens et al. 2008) 260 to 10 days before or 300 to 46 days before (Tirunillai and Tellis 2012) estimation window of 255 days and ends 46 days before the event. Similarly, (McWilliams and Siegel 1997) and (Fornell et al. 2006) 255 days ending 46 days before the event date (A. Sorescu, Warren, and Ertekin 2017, 194) suggest 100 days before the event date Leakage: try to cover as broad news sources as possible (LexisNexis, Factiva, and RavenPack). Event window: contain the event date (\\(T_1 \\to T_2\\)) (have to argue for the event window and can’t do it empirically) One day: (Balasubramanian, Mathur, and Thakur 2005; Boyd, Chandy, and Cunha Jr 2010; Fornell et al. 2006) Two days: (Raassens, Wuyts, and Geyskens 2012; Sood and Tellis 2009) Up to 10 days: (Cornwell, Pruitt, and Clark 2005; Kalaignanam and Bahadir 2013; A. B. Sorescu, Chandy, and Prabhu 2007) Post Event window: \\(T_2 \\to T_3\\) Normal vs. Abnormal returns \\[ \\epsilon_{it}^* = \\frac{P_{it} - E(P_{it})}{P_{it-1}} = R_{it} - E(R_{it}|X_t) \\] where \\(\\epsilon_{it}^*\\) = abnormal return \\(R_{it}\\) = realized (actual) return \\(P\\) = dividend-adjusted price of the stock \\(E(R_{it}|X_t)\\) normal expected return There are several model to calculate the expected return A. Statistical Models: assumes jointly multivariate normal and iid over time (need distributional assumptions for valid finite-sample estimation) rather robust (hence, recommended) Constant Mean Return Model Market Model Adjusted Market Return Model Factor Model B. Economic Model (strong assumption regarding investor behavior) Capital Asset Pricing Model (CAPM) Arbitrage Pricing Theory (APT) References "],["other-issues.html", "29.1 Other Issues", " 29.1 Other Issues 29.1.1 Event Studies in marketing (Skiera, Bayer, and Schöler 2017) What should be the dependent variable in marketing-related event studies? Based on valuation theory, Shareholder value = the value of the operating business + non-operating asset - debt (Schulze, Skiera, and Wiesel 2012) Many marketing events only affect the operating business value, but not non-operating assets and debt Ignoring the differences in firm-specific leverage effects has dual effects: inflates the impact of observation pertaining to firms with large debt deflates those pertaining to firms with large non-operating asset. It’s recommended that marketing papers should report both \\(CAR^{OB}\\) and \\(CAR^{SHV}\\) and argue for whichever one more appropriate. Up until this paper, only two previous event studies control for financial structure: (Gielens et al. 2008) (Chaney, Devinney, and Winer 1991) Definitions: Cumulative abnormal percentage return on shareholder value (\\(CAR^{SHV}\\)) Shareholder value refers to a firm’s market capitalization = share price x # of shares. Cumulative abnormal percentage return on the value of the operating business (\\(CAR^{OB}\\)) \\(CAR^{OB} = CAR^{SHV}/\\text{leverage effect}_{before}\\) Leverage effect = Operating business value / Shareholder value (LE describes how a 1% change in operating business translates into a percentage change in shareholder value). Value of operating business = shareholder value - non-operating assets + debt Leverage effect \\(\\neq\\) leverage ratio, where leverage ratio is debt / firm size debt = long-term + short-term debt; long-term debt firm size = book value of equity; market cap; total assets; debt + equity Operating assets are those used by firm in their core business operations (e..g, property, plant, equipment, natural resources, intangible asset) Non–operating assets (redundant assets), do not play a role in a firm’s operations, but still generate some form of return (e.g., excess cash , marketable securities - commercial papers, market instruments) Marketing events usually influence the value of a firm’s operating assets (more specifically intangible assets). Then, changes in the value of the operating business can impact shareholder value. Three rare instances where marketing events can affect non-operating assets and debt (G. C. Hall, Hutchinson, and Michaelas 2004): excess pre-orderings can influence short-term debt (Berger, Ofek, and Yermack 1997) Firing CMO increase debt as the manager’s tenure is negatively associated with the firm’s debt (Bhaduri 2002) production of unique products. A marketing-related event can either influence value components of a firm’s value (= firm’s operating business, non-operating assets and its debt) only the operating business. Replication of the leverage effect \\[ \\begin{aligned} \\text{leverage effect} &amp;= \\frac{\\text{operating business}}{\\text{shareholder value}} \\\\ &amp;= \\frac{\\text{(shareholder value - non-operating assets + debt)}}{\\text{shareholder value}} \\\\ &amp;= \\frac{prcc_f \\times csho - ivst + dd1 + dltt + pstk}{prcc_f \\times csho} \\end{aligned} \\] Compustat Data Item Label Variable prcc_f Share price csho Common shares outstanding ivst short-term investments (Non-operating assets) dd1 long-term debt due in one year dltt long-term debt pstk preferred stock Since WRDS no longer maintains the S&amp;P 500 list as of the time of this writing, I can’t replicate the list used in (Skiera, Bayer, and Schöler 2017) paper. library(tidyverse) df_leverage_effect &lt;- read.csv(&quot;data/leverage_effect.csv.gz&quot;) %&gt;% # get active firms only filter(costat == &quot;A&quot;) %&gt;% # drop missing values drop_na() %&gt;% # create the leverage effect variable mutate(le = (prcc_f * csho - ivst + dd1 + dltt + pstk)/ (prcc_f * csho)) %&gt;% # get shareholder value mutate(shv = prcc_f * csho) %&gt;% # remove Infinity value for leverage effect (i.e., shareholder value = 0) filter_all(all_vars(!is.infinite(.))) %&gt;% # positive values only filter_all(all_vars(. &gt; 0)) %&gt;% # get the within coefficient of variation group_by(gvkey) %&gt;% mutate(within_var_mean_le = mean(le), within_var_sd_le = sd(le)) %&gt;% ungroup() # get the mean and standard deviation mean(df_leverage_effect$le) #&gt; [1] 150.1087 max(df_leverage_effect$le) #&gt; [1] 183629.6 hist(df_leverage_effect$le) # coefficient of variation sd(df_leverage_effect$le) / mean(df_leverage_effect$le) * 100 #&gt; [1] 2749.084 # Within-firm variation (similar to fig 3a) df_leverage_effect %&gt;% group_by(gvkey) %&gt;% slice(1) %&gt;% ungroup() %&gt;% dplyr::select(within_var_mean_le, within_var_sd_le) %&gt;% dplyr::mutate(cv = within_var_sd_le/ within_var_mean_le) %&gt;% dplyr::select(cv) %&gt;% pull() %&gt;% hist() 29.1.2 Economic significance Total wealth gain (loss) from the event \\[ \\Delta W_t = CAR_t \\times MKTVAL_0 \\] where \\(\\Delta W_t\\) = gain (loss) \\(CAR_t\\) = cumulative residuals to date \\(t\\) \\(MKTVAL_0\\) market value of the firm before the event window 29.1.3 Statistical Power increases with more firms less days in the event window (avoiding potential contamination from confounds) References "],["testing.html", "29.2 Testing", " 29.2 Testing 29.2.1 Parametric Test (S. J. Brown and Warner 1985) provide evidence that even in the presence of non-normality, the parametric tests still perform well. Since the proportion of positive and negative abnormal returns tends to be equal in the sample (of at least 5 securities). The excess returns will coverage to normality as the sample size increases. Hence, parametric test is advocated than non-parametric one. Low power to detect significance (Kothari and Warner 1997) Power = f(sample, size, the actual size of abnormal returns, the variance of abnormal returns across firms) 29.2.1.1 T-test Applying CLT \\[ \\begin{aligned} t_{CAR} &amp;= \\frac{\\bar{CAR_{it}}}{\\sigma (CAR_{it})/\\sqrt{n}} \\\\ t_{BHAR} &amp;= \\frac{\\bar{BHAR_{it}}}{\\sigma (BHAR_{it})/\\sqrt{n}} \\end{aligned} \\] Assume Abnormal returns are normally distributed Var(abnormal returns) are equal across firms No cross-correlation in abnormal returns. Hence, it will be misspecified if you suspected Heteroskedasticity Cross-sectional dependence Technically, abnormal returns could follow non-normal distribution (but because of the design of abnormal returns calculation, it typically forces the distribution to be normal) To address these concerns, Patell Standardized Residual (PSR) can sometimes help. 29.2.1.2 Patell Standardized Residual (PSR) (Patell 1976) Since market model uses observations outside the event window, abnormal returns contain prediction errors on top of the true residuals , and should be standardized: \\[ AR_{it} = \\frac{\\hat{u}_{it}}{s_i \\sqrt{C_{it}}} \\] where \\(\\hat{u}_{it}\\) = estimated residual \\(s_i\\) = standard deviation estimate of residuals (from the estimation period) \\(C_{it}\\) = a correction to account for the prediction’s increased variation outside of the estimation period (Strong 1992) \\[ C_{it} = 1 + \\frac{1}{T} + \\frac{(R_{mt} - \\bar{R}_m)^2}{\\sum_t (R_{mt} - \\bar{R}_m)^2} \\] where \\(T\\) = number of observations (from estimation period) \\(R_{mt}\\) = average rate of return of all stocks trading the the stock market at time \\(t\\) \\(\\bar{R}_m = \\frac{1}{T} \\sum_{t=1}^T R_{mt}\\) 29.2.2 Non-parametric Test No assumptions about return distribution Sign Test (assumes symmetry in returns) binom.test() Wilcoxon Signed-Rank Test (allows for non-symmetry in returns) Use wilcox.test(sample) Gen Sign Test Corrado Rank Test References "],["sample.html", "29.3 Sample", " 29.3 Sample Sample can be relative small (Wiles, Morgan, and Rego 2012) 572 acquisition announcements, 308 disposal announcements Can range from 71 (Markovitch and Golder 2008) to 3552 (Borah and Tellis 2014) 29.3.1 Confounders Avoid confounding events: earnings announcements, key executive changes, unexpected stock buybacks, changes in dividends within the two-trading day window surrounding the event, mergers and acquisitions, spin-offers, stock splits, management changes, joint ventures, unexpected dividend, IPO, debt defaults, dividend cancellations (McWilliams and Siegel 1997) According to (Fornell et al. 2006), need to control: one-day event period = day when Wall Street Journal publish ACSI announcement. 5 days before and after event to rule out other news (PR Newswires, Dow Jones, Business Wires) M&amp;A, Spin-offs, stock splits CEO or CFO changes, Layoffs, restructurings, earnings announcements, lawsuits Capital IQ - Key Developments: covers almost all important events so you don’t have to search on news. (A. Sorescu, Warren, and Ertekin 2017) examine confounding events in the short-term windows: From RavenPack, 3982 US publicly traded firms, with all the press releases (2000-2013) 3-day window around event dates The difference between a sample with full observations and a sample without confounded events is negligible (non-significant). Conclusion: excluding confounded observations may be unnecessary for short-term event studies. Biases can stem from researchers pick and choose events to exclude As time progresses, more and more events you need to exclude which can be infeasible. To further illustrate this point, let’s do a quick simulation exercise In this example, we will explore three types of events: Focal events Correlated events (i.e., events correlated with the focal events; the presence of correlated events can follow the presence of the focal event) Uncorrelated events (i.e., events with dates that might randomly coincide with the focal events, but are not correlated with them). We have the ability to control the strength of correlation between focal and correlated events in this study, as well as the number of unrelated events we wish to examine. Let’s examine the implications of including and excluding correlated and uncorrelated events on the estimates of our focal events. # Load required libraries library(dplyr) library(ggplot2) library(tidyr) library(tidyverse) # Parameters n &lt;- 100000 # Number of observations n_focal &lt;- round(n * 0.2) # Number of focal events overlap_correlated &lt;- 0.5 # Overlapping percentage between focal and correlated events # Function to compute mean and confidence interval mean_ci &lt;- function(x) { m &lt;- mean(x) ci &lt;- qt(0.975, length(x)-1) * sd(x) / sqrt(length(x)) # 95% confidence interval list(mean = m, lower = m - ci, upper = m + ci) } # Simulate data set.seed(42) data &lt;- tibble( date = seq.Date(from = as.Date(&quot;2010-01-01&quot;), by = &quot;day&quot;, length.out = n), # Date sequence focal = rep(0, n), correlated = rep(0, n), ab_ret = rnorm(n) ) # Define focal events focal_idx &lt;- sample(1:n, n_focal) data$focal[focal_idx] &lt;- 1 true_effect &lt;- 0.25 # Adjust the ab_ret for the focal events to have a mean of true_effect data$ab_ret[focal_idx] &lt;- data$ab_ret[focal_idx] - mean(data$ab_ret[focal_idx]) + true_effect # Determine the number of correlated events that overlap with focal and those that don&#39;t n_correlated_overlap &lt;- round(length(focal_idx) * overlap_correlated) n_correlated_non_overlap &lt;- n_correlated_overlap # Sample the overlapping correlated events from the focal indices correlated_idx &lt;- sample(focal_idx, size = n_correlated_overlap) # Get the remaining indices that are not part of focal remaining_idx &lt;- setdiff(1:n, focal_idx) # Check to ensure that we&#39;re not attempting to sample more than the available remaining indices if (length(remaining_idx) &lt; n_correlated_non_overlap) { stop(&quot;Not enough remaining indices for non-overlapping correlated events&quot;) } # Sample the non-overlapping correlated events from the remaining indices correlated_non_focal_idx &lt;- sample(remaining_idx, size = n_correlated_non_overlap) # Combine the two to get all correlated indices all_correlated_idx &lt;- c(correlated_idx, correlated_non_focal_idx) # Set the correlated events in the data data$correlated[all_correlated_idx] &lt;- 1 # Inflate the effect for correlated events to have a mean of correlated_non_focal_idx &lt;- setdiff(all_correlated_idx, focal_idx) # Fixing the selection of non-focal correlated events data$ab_ret[correlated_non_focal_idx] &lt;- data$ab_ret[correlated_non_focal_idx] - mean(data$ab_ret[correlated_non_focal_idx]) + 1 # Define the numbers of uncorrelated events for each scenario num_uncorrelated &lt;- c(5, 10, 20, 30, 40) # Define uncorrelated events for (num in num_uncorrelated) { for (i in 1:num) { data[paste0(&quot;uncorrelated_&quot;, i)] &lt;- 0 uncorrelated_idx &lt;- sample(1:n, round(n * 0.1)) data[uncorrelated_idx, paste0(&quot;uncorrelated_&quot;, i)] &lt;- 1 } } # Define uncorrelated columns and scenarios unc_cols &lt;- paste0(&quot;uncorrelated_&quot;, 1:num_uncorrelated) results &lt;- tibble( Scenario = c(&quot;Include Correlated&quot;, &quot;Correlated Effects&quot;, &quot;Exclude Correlated&quot;, &quot;Exclude Correlated and All Uncorrelated&quot;), MeanEffect = c( mean_ci(data$ab_ret[data$focal == 1])$mean, mean_ci(data$ab_ret[data$focal == 0 | data$correlated == 1])$mean, mean_ci(data$ab_ret[data$focal == 1 &amp; data$correlated == 0])$mean, mean_ci(data$ab_ret[data$focal == 1 &amp; data$correlated == 0 &amp; rowSums(data[, paste0(&quot;uncorrelated_&quot;, 1:num_uncorrelated)]) == 0])$mean ), LowerCI = c( mean_ci(data$ab_ret[data$focal == 1])$lower, mean_ci(data$ab_ret[data$focal == 0 | data$correlated == 1])$lower, mean_ci(data$ab_ret[data$focal == 1 &amp; data$correlated == 0])$lower, mean_ci(data$ab_ret[data$focal == 1 &amp; data$correlated == 0 &amp; rowSums(data[, paste0(&quot;uncorrelated_&quot;, 1:num_uncorrelated)]) == 0])$lower ), UpperCI = c( mean_ci(data$ab_ret[data$focal == 1])$upper, mean_ci(data$ab_ret[data$focal == 0 | data$correlated == 1])$upper, mean_ci(data$ab_ret[data$focal == 1 &amp; data$correlated == 0])$upper, mean_ci(data$ab_ret[data$focal == 1 &amp; data$correlated == 0 &amp; rowSums(data[, paste0(&quot;uncorrelated_&quot;, 1:num_uncorrelated)]) == 0])$upper ) ) # Add the scenarios for excluding 5, 10, 20, and 50 uncorrelated for (num in num_uncorrelated) { unc_cols &lt;- paste0(&quot;uncorrelated_&quot;, 1:num) results &lt;- results %&gt;% add_row( Scenario = paste(&quot;Exclude&quot;, num, &quot;Uncorrelated&quot;), MeanEffect = mean_ci(data$ab_ret[data$focal == 1 &amp; data$correlated == 0 &amp; rowSums(data[, unc_cols]) == 0])$mean, LowerCI = mean_ci(data$ab_ret[data$focal == 1 &amp; data$correlated == 0 &amp; rowSums(data[, unc_cols]) == 0])$lower, UpperCI = mean_ci(data$ab_ret[data$focal == 1 &amp; data$correlated == 0 &amp; rowSums(data[, unc_cols]) == 0])$upper ) } ggplot(results, aes( x = factor(Scenario, levels = Scenario), y = MeanEffect, ymin = LowerCI, ymax = UpperCI )) + geom_pointrange() + coord_flip() + ylab(&quot;Mean Effect&quot;) + xlab(&quot;Scenario&quot;) + ggtitle(&quot;Mean Effect of Focal Events under Different Scenarios&quot;) + geom_hline(yintercept = true_effect, linetype = &quot;dashed&quot;, color = &quot;red&quot;) As depicted in the plot, the inclusion of correlated events demonstrates minimal impact on the estimation of our focal events. Conversely, excluding these correlated events can diminish our statistical power. This is true in cases of pronounced correlation. However, the consequences of excluding unrelated events are notably more significant. It becomes evident that by omitting around 40 unrelated events from our study, we lose the ability to accurately identify the true effects of the focal events. In reality and within research, we often rely on the Key Developments database, excluding over 150 events, a practice that can substantially impair our capacity to ascertain the authentic impact of the focal events. This little experiment really drives home the point – you better have a darn good reason to exclude an event from your study (make it super convincing)! References "],["biases.html", "29.4 Biases", " 29.4 Biases Different closing time obscure estimation of the abnormal returns, check (Campbell et al. 1998) Upward bias in aggregating CAR + transaction prices (bid and ask) Cross-sectional dependence in the returns bias the standard deviation estimates downward, which inflates the test statistics when events share common dates (MacKinlay 1997). Hence, (Jaffe 1974) Calendar-time Portfolio Abnormal Returns (CTARs) should be used to correct for this bias. (Wiles, Morgan, and Rego 2012): For events confined to relatively few industries, cross-sectional dependence in the returns can bias the SD estimate downward, inflating the associated test statistics” (p. 47). To control for potential cross-sectional correlation in the abnormal returns, you can use time-series standard deviation test statistic (S. J. Brown and Warner 1980) Sample selection bias (self-selection of firms into the event treatment) similar to omitted variable bias where the omitted variable is the private info that leads a firm to take the action. See Endogenous Sample Selection for more methods to correct this bias. Use Heckman model (Acharya 1993) But hard to find an instrument that meets the exclusion requirements (and strong, because weak instruments can lead to multicollinearity in the second equation) Can estimate the private information unknown to investors (which is Mills ratio \\(\\lambda\\) itself). Testing \\(\\lambda\\) significance is to see whether private info can explain outcomes (e.g., magnitude of the CARs to the announcement). Examples: (Y. Chen, Ganesan, and Liu 2009) (Wiles, Morgan, and Rego 2012) (Fang, Lee, and Yang 2015) Counterfactual observations Propensity score matching: Finance: Doan and Iskandar-Datta (2021) (Masulis and Nahata 2011) Marketing: (Warren and Sorescu 2017) (Borah and Tellis 2014) (Cao and Sorescu 2013) Switching regression: comparison between 2 specific outcomes (also account for selection on unobservables - using instruments) (Cao and Sorescu 2013) References "],["long-run-event-studies.html", "29.5 Long-run event studies", " 29.5 Long-run event studies Usually make an assumption that the distribution of the abnormal returns to these events has a mean of 0 (A. Sorescu, Warren, and Ertekin 2017, 192). And (A. Sorescu, Warren, and Ertekin 2017) provide evidence that for all events they examine the results from samples with and without confounding events do not differ. Long-horizon event studies face challenges due to systematic errors over time and sensitivity to model choice. Two main approaches are used to measure long-term abnormal stock returns Buy and Hold Abnormal Returns (BHAR) Long-term Cumulative Abnormal Returns (LCARs) Calendar-time Portfolio Abnormal Returns (CTARs) (Jensen’s Alpha): manages cross-sectional dependence better and is less sensitive to (asset pricing) model misspecification Two types: Unexpected changes in firm specific variables (typically not announced, may not be immediately visible to all investors, impact on firm value is not straightforward): customer satisfaction scores effect on firm value (Jacobson and Mizik 2009) or unexpected changes in marketing expenditures (M. Kim and McAlister 2011) to determine mispricing. Complex consequences (investors take time to learn and incorporate info): acquisition depends on integration (A. B. Sorescu, Chandy, and Prabhu 2007) 12 - 60 months event window: (Loughran and Ritter 1995) (Brav and Gompers 1997) Example: (Dutta et al. 2018) library(crseEventStudy) # example by the package&#39;s author data(demo_returns) SAR &lt;- sar(event = demo_returns$EON, control = demo_returns$RWE, logret = FALSE) mean(SAR) #&gt; [1] 0.006870196 29.5.1 Buy and Hold Abnormal Returns (BHAR) Classic references: (Loughran and Ritter 1995) (Barber and Lyon 1997) (Lyon, Barber, and Tsai 1999) Use a portfolio of stocks that are close matches of the current firm over the same period as benchmark, and see the difference between the firm return and that of the portfolio. More technical note is that it measures returns from buying stocks in event-experiencing firms and shorting stocks in similar non-event firms within the same time. Because of high cross-sectional correlations, BHARs’ t-stat can be inflated, but its rank order is not affected (Markovitch and Golder 2008; A. B. Sorescu, Chandy, and Prabhu 2007) To construct the portfolio, use similar size book-to-market momentum Matching Procedure (Barber and Lyon 1997): Each year from July to June, all common stocks in the CRSP database are categorized into ten groups (deciles) based on their market capitalization from the previous June. Within these deciles, firms are further sorted into five groups (quintiles) based on their book-to-market ratios as of December of the previous year or earlier, considering possible delays in financial statement reporting. Benchmark portfolios are designed to exclude firms with specific events but include all firms that can be classified into the characteristic-based portfolios. Similarly, Wiles et al. (2010) uses the following matching procedure: All firms in the same two-digit SIC code with market values of 50% to 150% of the focal firms are selected From this list, the 10 firms with the most comparable book-to-market ratios are chosen to serve as the matched portfolio (the matched portfolio can have less than 10 firms). Calculations: \\[ AR_{it} = R_{it} - E(R_{it}|X_t) \\] Cumulative Abnormal Return (CAR): \\[ CAR_{it} = \\sum_{t=1}^T (R_{it} - E(R_{it})) \\] Buy-and-Hold Abnormal Return (BHAR) \\[ BHAR_{t = 1}^T = \\Pi_{t=1}^T(1 + R_{it}) - \\Pi_{t = 1}^T (1 + E(R_{it})) \\] where as CAR is the arithmetic sum, BHAR is the geometric sum. In short-term event studies, differences between CAR and BHAR are often minimal. However, in long-term studies, this difference could significantly skew results. (Barber and Lyon 1997) shows that while BHAR is usually slightly lower than annual CAR, but it dramatically surpasses CAR when annual BHAR exceeds 28%. To calculate the long-run return (\\(\\Pi_{t=1}^T (1 + E(R_{it}))\\)) of the benchmark portfolio, we can: With annual rebalance: In each period, each portfolio is re-balanced and then compound mean stock returns in a portfolio over a given period: \\[ \\Pi_{t = 1}^T (1 + E(R_{it})) = \\Pi_{t}^T (1 + \\sum_{i = s}^{n_t}w_{it} R_{it}) \\] where \\(n_t\\) is the number of firms in period \\(t\\), and \\(w_{it}\\) is (1) \\(1/n_t\\) or (2) value-weight of firm \\(i\\) in period \\(t\\). To avoid favoring recent events, in cross-sectional event studies, researchers usually treat all events equally when studying their impact on the stock market over time. This approach helps identify any abnormal changes in stock prices, especially when dealing with a series of unplanned events. Potential problems: Solution first: Form benchmark portfolios that will never change constituent firms (Mitchell and Stafford 2000), because of these problems: Newly public companies often perform worse than a balanced market index (Ritter 1991), and this, over time, might distort long-term return expectations due to the inclusion of these new companies (a phenomenon called “new listing bias” identified by Barber and Lyon (1997)). Regularly rebalancing an equal-weight portfolio can lead to overestimated long-term returns and potentially skew buy-and-hold abnormal returns (BHARs) negatively due to constant selling of winning stocks and buying of underperformers (i.e., “rebalancing bias” (Barber and Lyon 1997)). Value-weight portfolios, which favor larger market cap stocks, can be viewed as an active investment strategy that keeps buying winning stocks and selling underperformers. Over time, this approach tends to positively distort BHARs. Without annual rebalance: Compounding the returns of the securities comprising the portfolio, followed by calculating the average across all securities \\[ \\Pi_{t = s}^{T} (1 + E(R_{it})) = \\sum_{i=s}^{n_t} (w_{is} \\Pi_{t=1}^T (1 + R_{it})) \\] where \\(t\\) is the investment period, \\(R_{it}\\) is the return on security \\(i\\), \\(n_i\\) is the number of securities, \\(w_{it}\\) is either \\(1/n_s\\) or value-weight factor of security \\(i\\) at initial period \\(s\\). This portfolio’s profits come from a simple investment where all the included stocks are given equal importance, or weighted according to their market value, as they were in a specific past period (period s). This means that it doesn’t consider any stocks that were listed after this period, nor does it adjust the portfolio each month. However, one problem with this method is that the value assigned to each stock, based on its market size, needs to be corrected. This is to make sure that recent stocks don’t end up having too much influence. Fortunately, on WRDS, it will give you all types of BHAR (2x2) (equal-weighted vs. value-weighted and with annual rebalance and without annual rebalance) “MINWIN” is the smallest number of months a company trades after an event to be included in the study. “MAXWIN” is the most months that the study considers in its calculations. Companies aren’t excluded if they have less than MAXWIN months, unless they also have fewer than MINWIN months. The term “MONTH” signifies chosen months (typically 12, 24, or 36) used to work out BHAR. If monthly returns are missing during the set period, matching portfolio returns fill in the gaps. 29.5.2 Long-term Cumulative Abnormal Returns (LCARs) Formula for LCARs during the \\((1,T)\\) postevent horizon (A. B. Sorescu, Chandy, and Prabhu 2007) \\[ LCAR_{pT} = \\sum_{t = 1}^{t = T} (R_{it} - R_{pt}) \\] where \\(R_{it}\\) is the rate of return of stock \\(i\\) in month \\(t\\) \\(R_{pt}\\) is the rate of return on the counterfactual portfolio in month \\(t\\) 29.5.3 Calendar-time Portfolio Abnormal Returns (CTARs) This section follows strictly the procedure in (Wiles et al. 2010) A portfolio for every day in calendar time (including all securities which experience an event that time). For each portfolio, the securities and their returns are equally weighted For all portfolios, the average abnormal return are calculated as \\[ AAR_{Pt} = \\frac{\\sum_{i=1}^S AR_i}{S} \\] where \\(S\\) is the number of securities in portfolio \\(P\\) \\(AR_i\\) is the abnormal return for the stock \\(i\\) in the portfolio For every portfolio \\(P\\), a time series estimate of \\(\\sigma(AAR_{Pt})\\) is calculated for the preceding \\(k\\) days, assuming that the \\(AAR_{Pt}\\) are independent over time. Each portfolio’s average abnormal return is standardized \\[ SAAR_{Pt} = \\frac{AAR_{Pt}}{SD(AAR_{Pt})} \\] Average standardized residual across all portfolio’s in calendar time \\[ ASAAR = \\frac{1}{n}\\sum_{i=1}^{255} SAAR_{Pt} \\times D_t \\] where \\(D_t = 1\\) when there is at least one security in portfolio \\(t\\) \\(D_t = 0\\) when there are no security in portfolio \\(t\\) \\(n\\) is the number of days in which the portfolio have at least one security \\(n = \\sum_{i = 1}^{255}D_t\\) The cumulative average standardized average abnormal returns is \\[ CASSAR_{S_1, S_2} = \\sum_{i=S_1}^{S_2} ASAAR \\] If the ASAAR are independent over time, then standard deviation for the above estimate is \\(\\sqrt{S_2 - S_1 + 1}\\) then, the test statistics is \\[ t = \\frac{CASAAR_{S_1,S_2}}{\\sqrt{S_2 - S_1 + 1}} \\] Limitations Cannot examine individual stock difference, can only see the difference at the portfolio level. One can construct multiple portfolios (based on the metrics of interest) so that firms in the same portfolio shares that same characteristics. Then, one can compare the intercepts in each portfolio. Low power (Loughran and Ritter 2000), type II error is likely. References "],["aggregation.html", "29.6 Aggregation", " 29.6 Aggregation 29.6.1 Over Time We calculate the cumulative abnormal (CAR) for the event windows \\(H_0\\): Standardized cumulative abnormal return for stock \\(i\\) is 0 (no effect of events on stock performance) \\(H_1\\): SCAR is not 0 (there is an effect of events on stock performance) 29.6.2 Across Firms + Over Time Additional assumptions: Abnormal returns of different socks are uncorrelated (rather strong), but it’s very valid if event windows for different stocks do not overlap. If the windows for different overlap, follow (Bernard 1987) and Schipper and Smith (1983) \\(H_0\\): The mean of the abnormal returns across all firms is 0 (no effect) \\(H_1\\): The mean of the abnormal returns across all firms is different form 0 (there is an effect) Parametric (empirically either one works fine) (assume abnormal returns is normally distributed) : Aggregate the CAR of all stocks (Use this if the true abnormal variance is greater for stocks with higher variance) Aggregate the SCAR of all stocks (Use this if the true abnormal return is constant across all stocks) Non-parametric (no parametric assumptions): Sign test: Assume both the abnormal returns and CAR to be independent across stocks Assume 50% with positive abnormal returns and 50% with negative abnormal return The null will be that there is a positive abnormal return correlated with the event (if you want the alternative to be there is a negative relationship) With skewed distribution (likely in daily stock data), the size test is not trustworthy. Hence, rank test might be better Rank test Null: there is no abnormal return during the event window References "],["heterogeneity-in-the-event-effect.html", "29.7 Heterogeneity in the event effect", " 29.7 Heterogeneity in the event effect \\[ y = X \\theta + \\eta \\] where \\(y\\) = CAR \\(X\\) = Characteristics that lead to heterogeneity in the event effect (i.e., abnormal returns) (e.g., firm or event specific) \\(\\eta\\) = error term Note: In cases with selection bias (firm characteristics and investor anticipation of the event: larger firms might enjoy great positive effect of an event, and investors endogenously anticipate this effect and overvalue the stock), we have to use the White’s \\(t\\)-statistics to have the lower bounds of the true significance of the estimates. This technique should be employed even if the average CAR is not significantly different from 0, especially when the CAR variance is high (Boyd, Chandy, and Cunha Jr 2010) 29.7.1 Common variables in marketing (A. Sorescu, Warren, and Ertekin 2017) Table 4 Firm size is negatively correlated with abnormal return in finance (A. Sorescu, Warren, and Ertekin 2017), but mixed results in marketing. # of event occurrences R&amp;D expenditure Advertising expense Marketing investment (SG&amp;A) Industry concentration (HHI, # of competitors) Financial leverage Market share Market size (total sales volume within the firm’s SIC code) marketing capability Book to market value ROA Free cash flow Sales growth Firm age References "],["expected-return-calculation.html", "29.8 Expected Return Calculation", " 29.8 Expected Return Calculation 29.8.1 Statistical Models based on statistical assumptions about the behavior of returns (e..g, multivariate normality) we only need to assume stable distributions (Owen and Rabinovitch 1983) 29.8.1.1 Constant Mean Return Model The expected normal return is the mean of the real returns \\[ Ra_{it} = R_{it} - \\bar{R}_i \\] Assumption: returns revert to its mean (very questionable) The basic mean returns model generally delivers similar findings to more complex models since the variance of abnormal returns is not decreased considerably (S. J. Brown and Warner 1985) 29.8.1.2 Market Model \\[ R_{it} = \\alpha_i + \\beta R_{mt} + \\epsilon_{it} \\] where \\(R_{it}\\) = stock return \\(i\\) in period \\(t\\) \\(R_{mt}\\) = market return \\(\\epsilon_{it}\\) = zero mean (\\(E(e_{it}) = 0\\)) error term with its own variance \\(\\sigma^2\\) Notes: People typically use S&amp;P 500, CRSP value-weighed or equal-weighted index as the market portfolio. When \\(\\beta =0\\), the Market Model is the Constant Mean Return Model better fit of the market-model, the less variance in abnormal return, and the more easy to detect the event’s effect recommend generalized method of moments to be robust against auto-correlation and heteroskedasticity 29.8.1.3 Fama-French Model Please note that there is a difference between between just taking the return versus taking the excess return as the dependent variable. The correct way is to use the excess return for firm and for market (Fama and French 2010, 1917). \\(\\alpha_i\\) “is the average return left unexplained by the benchmark model” (i.e., abnormal return) 29.8.1.3.1 FF3 (Fama and French 1993) \\[ \\begin{aligned} E(R_{it}|X_t) - r_{ft} = \\alpha_i &amp;+ \\beta_{1i} (E(R_{mt}|X_t )- r_{ft}) \\\\ &amp;+ b_{2i} SML_t + b_{3i} HML_t \\end{aligned} \\] where \\(r_{ft}\\) risk-free rate (e.g., 3-month Treasury bill) \\(R_{mt}\\) is the market-rate (e.g., S&amp;P 500) SML: returns on small (size) portfolio minus returns on big portfolio HML: returns on high (B/M) portfolio minus returns on low portfolio. 29.8.1.3.2 FF4 (A. Sorescu, Warren, and Ertekin 2017, 195) suggest the use of Market Model in marketing for short-term window and Fama-French Model for the long-term window (the statistical properties of this model have not been examined the the daily setting). (Carhart 1997) \\[ \\begin{aligned} E(R_{it}|X_t) - r_{ft} = \\alpha_i &amp;+ \\beta_{1i} (E(R_{mt}|X_t )- r_{ft}) \\\\ &amp;+ b_{2i} SML_t + b_{3i} HML_t + b_{4i} UMD_t \\end{aligned} \\] where \\(UMD_t\\) is the momentum factor (difference between high and low prior return stock portfolios) in day \\(t\\). 29.8.2 Economic Model The only difference between CAPM and APT is that APT has multiple factors (including factors beyond the focal company) Economic models put limits on a statistical model that come from assumed behavior that is derived from theory. 29.8.2.1 Capital Asset Pricing Model (CAPM) \\[ E(R_i) = R_f + \\beta_i (E(R_m) - R_f) \\] where \\(E(R_i)\\) = expected firm return \\(R_f\\) = risk free rate \\(E(R_m - R_f)\\) = market risk premium \\(\\beta_i\\) = firm sensitivity 29.8.2.2 Arbitrage Pricing Theory (APT) \\[ R = R_f + \\Lambda f + \\epsilon \\] where \\(\\epsilon \\sim N(0, \\Psi)\\) \\(\\Lambda\\) = factor loadings \\(f \\sim N(\\mu, \\Omega)\\) = general factor model \\(\\mu\\) = expected risk premium vector \\(\\Omega\\) = factor covariance matrix References "],["application-13.html", "29.9 Application", " 29.9 Application Packages: eventstudies erer EventStudy AbnormalReturns Event Study Tools estudy2 PerformanceAnalytics In practice, people usually sort portfolio because they are not sure whether the FF model is specified correctly. Steps: Sort all returns in CRSP into 10 deciles based on size. In each decile, sort returns into 10 decides based on BM Get the average return of the 100 portfolios for each period (i.e., expected returns of stocks given decile - characteristics) For each stock in the event study: Compare the return of the stock to the corresponding portfolio based on size and BM. Notes: Sorting produces outcomes that are often more conservative (e.g., FF abnormal returns can be greater than those that used sorting). If the results change when we do B/M first then size or vice versa, then the results are not robust (this extends to more than just two characteristics - e.g., momentum). Examples: Forestry: (Mei and Sun 2008) M&amp;A on financial performance (forest product) (C. Sun and Liao 2011) litigation on firm values library(erer) # example by the package&#39;s author data(daEsa) hh &lt;- evReturn( y = daEsa, # dataset firm = &quot;wpp&quot;, # firm name y.date = &quot;date&quot;, # date in y index = &quot;sp500&quot;, # index est.win = 250, # estimation window wedith in days digits = 3, event.date = 19990505, # firm event dates event.win = 5 # one-side event window wdith in days (default = 3, where 3 before + 1 event date + 3 days after = 7 days) ) hh; plot(hh) #&gt; #&gt; === Regression coefficients by firm ========= #&gt; N firm event.date alpha.c alpha.e alpha.t alpha.p alpha.s beta.c beta.e #&gt; 1 1 wpp 19990505 -0.135 0.170 -0.795 0.428 0.665 0.123 #&gt; beta.t beta.p beta.s #&gt; 1 5.419 0.000 *** #&gt; #&gt; === Abnormal returns by date ================ #&gt; day Ait.wpp HNt #&gt; 1 -5 4.564 4.564 #&gt; 2 -4 0.534 5.098 #&gt; 3 -3 -1.707 3.391 #&gt; 4 -2 2.582 5.973 #&gt; 5 -1 -0.942 5.031 #&gt; 6 0 -3.247 1.784 #&gt; 7 1 -0.646 1.138 #&gt; 8 2 -2.071 -0.933 #&gt; 9 3 0.368 -0.565 #&gt; 10 4 4.141 3.576 #&gt; 11 5 0.861 4.437 #&gt; #&gt; === Average abnormal returns across firms === #&gt; name estimate error t.value p.value sig #&gt; 1 CiT.wpp 4.437 8.888 0.499 0.618 #&gt; 2 GNT 4.437 8.888 0.499 0.618 Example by Ana Julia Akaishi Padula, Pedro Albuquerque (posted on LAMFO) Example in AbnormalReturns package 29.9.1 Eventus 2 types of output: Using different estimation methods (e.g., market model to calendar-time approach) Does not include event-specific returns. Hence, no regression later to determine variables that can affect abnormal stock returns. Cross-sectional Analysis of Eventus: Event-specific abnormal returns (using monthly or data data) for cross-sectional analysis (under Cross-Sectional Analysis section) Since it has the stock-specific abnormal returns, we can do regression on CARs later. But it only gives market-adjusted model. However, according to (A. Sorescu, Warren, and Ertekin 2017), they advocate for the use of market-adjusted model for the short-term only, and reserve the FF4 for the longer-term event studies using monthly daily. 29.9.1.1 Basic Event Study Input a text file contains a firm identifier (e.g., PERMNO, CUSIP) and the event date Choose market indices: equally weighted and the value weighted index (i.e., weighted by their market capitalization). And check Fama-French and Carhart factors. Estimation options Estimation period: ESTLEN = 100 is the convention so that the estimation is not impacted by outliers. Use “autodate” options: the first trading after the event date is used if the event falls on a weekend or holiday Abnormal returns window: depends on the specific event Choose test: either parametric (including Patell Standardized Residual (PSR)) or non-parametric 29.9.1.2 Cross-sectional Analysis of Eventus Similar to the Basic Event Study, but now you can have event-specific abnormal returns. 29.9.2 Evenstudies This package does not use the Fama-French model, only the market models. This example is by the author of the package library(eventstudies) # firm and date data data(&quot;SplitDates&quot;) head(SplitDates) # stock price data data(&quot;StockPriceReturns&quot;) head(StockPriceReturns) class(StockPriceReturns) es &lt;- eventstudy( firm.returns = StockPriceReturns, event.list = SplitDates, event.window = 5, type = &quot;None&quot;, to.remap = TRUE, remap = &quot;cumsum&quot;, inference = TRUE, inference.strategy = &quot;bootstrap&quot; ) plot(es) 29.9.3 EventStudy You have to pay for the API key. (It’s $10/month). library(EventStudy) Example by the authors of the package Data Prep library(tidyquant) library(tidyverse) library(readr) library(&quot;Quandl&quot;) library(&quot;quantmod&quot;) Quandl.auth(&quot;LDqWhYXzVd2omw4zipN2&quot;) TWTR &lt;- Quandl(&quot;NSE/OIL&quot;,type =&quot;xts&quot;) candleChart(TWTR) addSMA(col=&quot;red&quot;) #Adding a Simple Moving Average addEMA() #Adding an Exponential Moving Average Reference market in Germany is DAX # Index Data # indexName &lt;- c(&quot;DAX&quot;) indexData &lt;- tq_get(&quot;^GDAXI&quot;, from = &quot;2014-05-01&quot;, to = &quot;2015-12-31&quot;) %&gt;% mutate(date = format(date, &quot;%d.%m.%Y&quot;)) %&gt;% mutate(symbol = &quot;DAX&quot;) head(indexData) Create files 01_RequestFile.csv 02_FirmData.csv 03_MarketData.csv Calculating abnormal returns # get &amp; set parameters for abnormal return Event Study # we use a garch model and csv as return # Attention: fitting a GARCH(1, 1) model is compute intensive esaParams &lt;- EventStudy::ARCApplicationInput$new() esaParams$setResultFileType(&quot;csv&quot;) esaParams$setBenchmarkModel(&quot;garch&quot;) dataFiles &lt;- c( &quot;request_file&quot; = file.path(getwd(), &quot;data&quot;, &quot;EventStudy&quot;, &quot;01_requestFile.csv&quot;), &quot;firm_data&quot; = file.path(getwd(), &quot;data&quot;, &quot;EventStudy&quot;, &quot;02_firmDataPrice.csv&quot;), &quot;market_data&quot; = file.path(getwd(), &quot;data&quot;, &quot;EventStudy&quot;, &quot;03_marketDataPrice.csv&quot;) ) # check data files, you can do it also in our R6 class EventStudy::checkFiles(dataFiles) arEventStudy &lt;- estSetup$performEventStudy(estParams = esaParams, dataFiles = dataFiles, downloadFiles = T) library(EventStudy) apiUrl &lt;- &quot;https://api.eventstudytools.com&quot; Sys.setenv(EventStudyapiKey = &quot;&quot;) # The URL is already set by default options(EventStudy.URL = apiUrl) options(EventStudy.KEY = Sys.getenv(&quot;EventStudyapiKey&quot;)) # use EventStudy estAPIKey function estAPIKey(Sys.getenv(&quot;EventStudyapiKey&quot;)) # initialize object estSetup &lt;- EventStudyAPI$new() estSetup$authentication(apiKey = Sys.getenv(&quot;EventStudyapiKey&quot;)) References "],["instrumental-variables.html", "Chapter 30 Instrumental Variables", " Chapter 30 Instrumental Variables Similar to RCT, we try to introduce randomization (random assignment to treatment) to our treatment variable by using only variation in the instrument. Logic of using an instrument: Use only exogenous variation to see the variation in treatment (try to exclude all endogenous variation in the treatment) Use only exogenous variation to see the variation in outcome (try to exclude all endogenous variation in the outcome) See the relationship between treatment and outcome in terms of residual variations that are exogenous to omitted variables. Notes: Instruments can be used to remove attenuation bias in errors-in-variables. Be careful with the F-test and standard errors when you do 2SLS by hand (you need to correct them). Repeated use of related IVs across different studies can collectively invalidate these instruments, primarily through the violation of the exclusion restriction (Gallen 2020). One needs to test for invalid instruments (Hausman-like test). Mellon (2023) shows the widespread use of weather as an instrument in social sciences (289 studies linking weather to 195 variables) demonstrates significant exclusion violations that can overturn many IV results. For [Zero-valued Outcomes], we can’t directly interpret the treatment coefficient of log-transformed outcome regression as percentage change (J. Chen and Roth 2023). We have to distinguish the treatment effect on the intensive (outcome: 10 to 11) vs. extensive margins (outcome: 0 to 1), and we can’t readily interpret the treatment coefficient of log-transformed outcome regression as percentage change. To have percentage change interpretation, we can either do: Proportional LATE: estimate \\(\\theta_{ATE\\%}\\) for those who are compliers under the instrument. To estimate proportional LATE, Regress \\(Y_i = \\beta D_i + X_i + \\epsilon_i\\) using 2SLS with an instrument on \\(D_i\\), where \\(\\beta\\) is interpreted as the LATE in levels of the control group’s mean for compliers. Get estimate of the control complier mean by regressing with same 2SLS regression (Abadie, Angrist, and Imbens 2002) where the final outcome is \\(-(D_i - 1)Y_i\\) , we refer to the new new estimated effect of \\(D_i\\) as \\(\\beta_{cc}\\) The \\(\\theta_{ATE \\%}\\) for compliers that are induced by the instrument is \\(\\hat{\\beta}/\\hat{\\beta}_{cc}\\), where it can be interpreted directly as the percentage change for compliers that are induced by the instrument under treatment as compared to under control. SE can be obtained by non-parametric bootstrap. For specific case that the instrument is binary, \\(\\theta\\) of the intensive margin for compliers can be directly obtained by Poisson IV regression (ivpoisson in Stata). Lee (2009) bounds: we can get bounds for the average treatment effect in logs for compliers who have positive outcome regardless of treatment status (i.e., intensive-margin effect). This requires a monotonicity assumption for compliers where they should still have positive outcome regardless of treatment status. Notes on First-stage: Always use the OLS regression in the first stage (regardless of the type of endogenous variables - e.g., continuous or discreet) (suggested by (J. D. Angrist and Pischke 2009). Estimates of IV can still be consistent regardless of the form of the endogenous variables (discreet vs. continuous). Alternatively, we could use “biprobit” model, but this is applicable only in cases where you have both dependent and endogenous variables to be binary. If you still want to continue and use logit or probit models for the first stage when you have binary variables, you have a “forbidden regression” (also 1, 2) (i.e., an incorrect extension of 2SLS to a nonlinear case). There are several ways to understand this problem: Identification strategy: The identification strategy in instrumental variables analysis relies on the fact that the instrumental variable affects the outcome variable only through its effect on the endogenous variable. However, when the endogenous variable is binary, the relationship between the instrumental variable and the endogenous variable is not continuous. This means that the instrumental variable can only affect the endogenous variable in discrete jumps, rather than through a continuous change. As a result, the identification of the causal effect of the endogenous variable on the outcome variable may not be possible with probit or logit regression in the first stage. Model assumptions: Both models assume that the error term has a specific distribution (normal or logistic), and that the probability of the binary outcome is a function of the linear combination of the regressors. When the endogenous variable is binary, however, the distribution of the error term is not specified, as there is no continuous relationship between the endogenous variable and the outcome variable. This means that the assumptions of the probit and logit models may not hold, and the resulting estimates may not be reliable or interpretable. Issue of weak instruments: When the instrument is weak, the variance of the inverse Mills ratio (which is used to correct for endogeneity in instrumental variables analysis) can be very large. In the case of binary endogenous variables, the inverse Mills ratio cannot be consistently estimated using probit or logit regression, and this can lead to biased and inconsistent estimates of the causal effect of the endogenous variable on the outcome variable. Problems with weak instruments (Bound, Jaeger, and Baker 1995): Weak instrumental variables can produce (finite-sample) biased and inconsistent estimates of the causal effect of an endogenous variable on an outcome variable (even in the presence of large sample size) In a finite sample, instrumental variables (IV) estimates can be biased in the same direction as ordinary least squares (OLS) estimates. Additionally, the bias of IV estimates approaches that of OLS estimates as the correlation (R2) between the instruments and the endogenous explanatory variable approaches zero. This means that when the correlation between the instruments and the endogenous variable is weak, the bias of the IV estimates can be similar to that of the OLS estimates. Weak instruments are problematic because they do not have enough variation to fully capture the variation in the endogenous variable, leading to measurement error and other sources of noise in the estimates. Using weak instruments can produce large standard errors and low t-ratio. And when the feedback (reverse causality) is strong, the bias in IV is even greater than that of OLS (C. Nelson and Startz 1988). Using lagged dependent variables as instruments for current values depends on serial correlations, typically low (C. Nelson and Startz 1988). Using multiple covariates to artificially increase the first-stage \\(R^2\\) does not solve this weak instrument problem (C. Nelson and Startz 1988). Solutions: use of multiple instruments use of instrumental variables with higher correlation use of alternative estimation methods such as limited information maximum likelihood (LIML) or two-stage least squares (2SLS) with heteroscedasticity-robust standard errors. Instrument Validity: Random assignment (Exogeneity Assumption). Any effect of the instrument on the outcome must be through the endogenous variable (Relevance Assumption). References "],["framework.html", "30.1 Framework", " 30.1 Framework \\(D_i \\sim Bern\\) Dummy Treatment \\(Y_{0i}, Y_{1i}\\) potential outcomes \\(Y_i = Y_{0i} + (Y_{1i} - Y_{0i}) D_i\\) observed outcome \\(Z_i \\perp Y_{0i}, Y_{1i}\\) Instrumental variables (and also correlate with \\(D_i\\)) Under constant-effects and linear (\\(Y_{1i} - Y_{0i}\\) are the same for everyone) \\[ \\begin{aligned} Y_{0i} &amp;= \\alpha + \\eta_i \\\\ Y_{1i} - Y_{0i} &amp;= \\rho \\\\ Y_i &amp;= Y_{0i} + D_i (Y_{1i} - Y_{0i}) \\\\ &amp;= \\alpha + \\eta_i + D_i \\rho \\\\ &amp;= \\alpha + \\rho D_i + \\eta_i \\end{aligned} \\] where \\(\\eta_i\\) is individual differences \\(\\rho\\) is the difference between treated outcome and untreated outcome. Here we assume they are constant for everyone However, we have a problem with OLS because \\(D_i\\) is correlated with \\(\\eta_i\\) for each unit But \\(Z_i\\) can come to the rescue, the causal estimate can be written as \\[ \\begin{aligned} \\rho &amp;= \\frac{Cov( Y_i, Z_i)}{Cov(D_i, Z_i)} \\\\ &amp;= \\frac{Cov(Y_i, Z_i) / V(Z_i) }{Cov( D_i, Z_i) / V(Z_i)} = \\frac{Reduced form}{First-stage} \\\\ &amp;= \\frac{E[Y_i |Z_i = 1] - E[Y_i | Z_i = 0]}{E[D_i |Z_i = 1] - E[D_i | Z_i = 0 ]} \\end{aligned} \\] Under heterogeneous treatment effect (\\(Y_{1i} - Y_{0i}\\) are different for everyone) with LATE framework \\(Y_i(d,z)\\) denotes the potential outcome for unit \\(i\\) with treatment \\(D_i = d\\) and instrument \\(Z_i = z\\) Observed treatment status \\[ D_i = D_{0i} + Z_i (D_{1i} - D_{0i}) \\] where \\(D_{1i}\\) is treatment status of unit \\(i\\) when \\(z_i = 1\\) \\(D_{0i}\\) is treatment status of unit \\(i\\) when \\(z_i = 0\\) \\(D_{1i} - D_{0i}\\) is the causal effect of \\(Z_i\\) on \\(D_i\\) Assumptions Independence: The instrument is randomly assigned (i.e., independent of potential outcomes and potential treatments) \\([\\{Y_i(d,z); \\forall d, z \\}, D_{1i}, D_{0i} ] \\Pi Z_i\\) This assumption let the first-stage equation be the average causal effect of \\(Z_i\\) on \\(D_i\\) \\[ \\begin{aligned} E[D_i |Z_i = 1] - E[D_i | Z_i = 0] &amp;= E[D_{1i} |Z_i = 1] - E[D_{0i} |Z_i = 0] \\\\ &amp;= E[D_{1i} - D_{0i}] \\end{aligned} \\] This assumption also is sufficient for a causal interpretation of the reduced form, where we see the effect of the instrument on the outcome. \\[ E[Y_i |Z_i = 1 ] - E[Y_i|Z_i = 0] = E[Y_i (D_{1i}, Z_i = 1) - Y_i (D_{0i} , Z_i = 0)] \\] Exclusion (i.e., existence of instruments (G. W. Imbens and Angrist 1994) The treatment \\(D_i\\) fully mediates the effect of \\(Z_i\\) on \\(Y_i\\) \\[ Y_{1i} = Y_i (1,1) = Y_i (1,0) \\\\ Y_{0i} = Y_i (0,1) = Y_i (0, 0) \\] With this assumption, the observed outcome \\(Y_i\\) can be thought of as (assume \\(Y_{1i}, Y_{0i}\\) already satisfy the independence assumption) \\[ \\begin{aligned} Y_i &amp;= Y_i (0, Z_i) + [Y_i (1 , Z_i) - Y_i (0, Z_i)] D_i \\\\ &amp;= Y_{0i} + (Y_{1i} - Y_{0i} ) D_i \\end{aligned} \\] This assumption let us go from reduced-form causal effects to treatment effects (J. D. Angrist and Imbens 1995) Monotonicity: \\(D_{1i} &gt; D_{0i} \\forall i\\) With this assumption, we have \\(E[D_{1i} - D_{0i} ] = P[D_{1i} &gt; D_{0i}]\\) This assumption lets us assume that there is a first stage, in which we examine the proportion of the population that \\(D_i\\) is driven by \\(Z_i\\) This assumption is used to solve to problem of the shifts between participation status back to non-participation status. Alternatively, one can solve the same problem by assuming constant (homogeneous) treatment effect (G. W. Imbens and Angrist 1994), but this is rather restrictive. A third solution is the assumption that there exists a value of the instrument, where the probability of participation conditional on that value is 0 J. Angrist and Imbens (1991). With these three assumptions, we have the LATE theorem (J. D. Angrist and Pischke 2009, 4.4.1) \\[ \\frac{E[Y_i | Z_i = 1] - E[Y_i | Z_i = 0]}{E[D_i |Z_i = 1] - E[D_i |Z_i = 0]} = E[Y_{1i} - Y_{0i} | D_{1i} &gt; D_{0i}] \\] LATE assumptions allow us to go back to the types of subjects we have in Causal Inference Switchers: Compliers: \\(D_{1i} &gt; D_{0i}\\) Non-switchers: Always-takers: \\(D_{1i} = D_{0i} = 1\\) Never-takers: \\(D_{1i} = D_{0i} = 0\\) Instrumental Variables can’t say anything about non-switchers because treatment status \\(D_i\\) has no effects on them (similar to fixed effects models). When all groups are the same, we come back to the constant-effects world. Treatment effects on the treated is a weighted average of always-takers and compliers. In the special case of IV in randomized trials, we have a compliance problem (when compliance is voluntary), where those in the treated will not always take the treatment (i.e., might be selection bias). Intention-to-treat analysis is valid, but contaminated by non-compliance IV in this case (\\(Z_i\\) = random assignment to the treatment; \\(D_i\\) = whether the unit actually received/took the treatment) can solve this problem. Under certain assumptions (i.e., SUTVA, random assignment, exclusion restriction, no defiers, and monotinicity), this analysis can give causal interpreation of LATE because it’s the average causal effect for the compliers only. Without these assumptions, it’s a ratio of intention-to-treat. Without always-takers in this case, LATE = Treatment effects on the treated See proof Bloom (1984) and examples Bloom et al. (1997) and Sherman and Berk (1984) \\[ \\frac{E[Y_i |Z_i = 1] - E[Y_i |Z_i = 0]}{E[D_i |Z_i = 1]} = \\frac{\\text{Intention-to-treat effect}}{\\text{Compliance rate}} \\\\ = E[Y_{1i} - Y_{0i} |D_i = 1] \\] References "],["estimation-3.html", "30.2 Estimation", " 30.2 Estimation 30.2.1 2SLS Estimation A special case of IV-GMM Examples by authors of fixest package library(fixest) base = iris names(base) = c(&quot;y&quot;, &quot;x1&quot;, &quot;x_endo_1&quot;, &quot;x_inst_1&quot;, &quot;fe&quot;) set.seed(2) base$x_inst_2 = 0.2 * base$y + 0.2 * base$x_endo_1 + rnorm(150, sd = 0.5) base$x_endo_2 = 0.2 * base$y - 0.2 * base$x_inst_1 + rnorm(150, sd = 0.5) # est_iv = feols(y ~ x1 | x_endo_1 ~ x_inst_1 , base) est_iv = feols(y ~ x1 | x_endo_1 + x_endo_2 ~ x_inst_1 + x_inst_2, base) est_iv #&gt; TSLS estimation - Dep. Var.: y #&gt; Endo. : x_endo_1, x_endo_2 #&gt; Instr. : x_inst_1, x_inst_2 #&gt; Second stage: Dep. Var.: y #&gt; Observations: 150 #&gt; Standard-errors: IID #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 1.831380 0.411435 4.45121 1.6844e-05 *** #&gt; fit_x_endo_1 0.444982 0.022086 20.14744 &lt; 2.2e-16 *** #&gt; fit_x_endo_2 0.639916 0.307376 2.08186 3.9100e-02 * #&gt; x1 0.565095 0.084715 6.67051 4.9180e-10 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; RMSE: 0.398842 Adj. R2: 0.761653 #&gt; F-test (1st stage), x_endo_1: stat = 903.2 , p &lt; 2.2e-16 , on 2 and 146 DoF. #&gt; F-test (1st stage), x_endo_2: stat = 3.25828, p = 0.041268, on 2 and 146 DoF. #&gt; Wu-Hausman: stat = 6.79183, p = 0.001518, on 2 and 144 DoF. Default statistics F-test first-stage (weak instrument test) Wu-Hausman endogeneity test Over-identifying restriction (Sargan) J-test fitstat( est_iv, type = c( &quot;n&quot;, &quot;ll&quot;, &quot;aic&quot;, &quot;bic&quot;, &quot;rmse&quot;, # ll means log-likelihood &quot;my&quot;, # mean dependent var &quot;g&quot;, # degrees of freedom used to compute the t-test &quot;r2&quot;, &quot;ar2&quot;, &quot;wr2&quot;, &quot;awr2&quot;, &quot;pr2&quot;, &quot;apr2&quot;, &quot;wpr2&quot;, &quot;awpr2&quot;, &quot;theta&quot;, # over-dispersion parameter in Negative Binomial models &quot;f&quot;, &quot;wf&quot;, # F-tests of nullity of the coefficients &quot;wald&quot;, # Wald test of joint nullity of the coefficients &quot;ivf&quot;, &quot;ivf1&quot;, &quot;ivf2&quot;, &quot;ivfall&quot;, &quot;ivwald&quot;, &quot;ivwald1&quot;, &quot;ivwald2&quot;, &quot;ivwaldall&quot;, &quot;cd&quot; # &quot;kpr&quot; ), cluster = &#39;fe&#39; ) #&gt; Observations: 150 #&gt; Log-Likelihood: -75.0 #&gt; AIC: 157.9 #&gt; BIC: 170.0 #&gt; RMSE: 0.398842 #&gt; Dep. Var. mean: 5.84333 #&gt; G: 3 #&gt; R2: 0.766452 #&gt; Adj. R2: 0.761653 #&gt; Within R2: NA #&gt; awr2: NA #&gt; Pseudo R2: 0.592684 #&gt; Adj. Pseudo R2: 0.576383 #&gt; Within Pseudo R2: NA #&gt; awpr2: NA #&gt; Over-dispersion: NA #&gt; F-test: stat = 1.80769, p = 0.375558, on 3 and 2 DoF. #&gt; F-test (projected): NA #&gt; Wald (joint nullity): stat = 539,363.2 , p &lt; 2.2e-16 , on 3 and 146 DoF, VCOV: Clustered (fe). #&gt; F-test (1st stage), x_endo_1: stat = 903.2 , p &lt; 2.2e-16 , on 2 and 146 DoF. #&gt; F-test (1st stage), x_endo_2: stat = 3.25828, p = 0.041268, on 2 and 146 DoF. #&gt; F-test (2nd stage): stat = 194.2 , p &lt; 2.2e-16 , on 2 and 146 DoF. #&gt; F-test (IV only): stat = 194.2 , p &lt; 2.2e-16 , on 2 and 146 DoF. #&gt; Wald (1st stage), x_endo_1 : stat = 1,482.6 , p &lt; 2.2e-16 , on 2 and 146 DoF, VCOV: Clustered (fe). #&gt; Wald (1st stage), x_endo_2 : stat = 2.22157, p = 0.112092, on 2 and 146 DoF, VCOV: Clustered (fe). #&gt; Wald (2nd stage): stat = 539,363.2 , p &lt; 2.2e-16 , on 2 and 146 DoF, VCOV: Clustered (fe). #&gt; Wald (IV only): stat = 539,363.2 , p &lt; 2.2e-16 , on 2 and 146 DoF, VCOV: Clustered (fe). #&gt; Cragg-Donald: 3.11162 To set default printing # always add second-stage Wald test setFixest_print(fitstat = ~ . + ivwald2) est_iv To see results from different stages # first-stage summary(est_iv, stage = 1) # second-stage summary(est_iv, stage = 2) # both stages etable(summary(est_iv, stage = 1:2), fitstat = ~ . + ivfall + ivwaldall.p) etable(summary(est_iv, stage = 2:1), fitstat = ~ . + ivfall + ivwaldall.p) # .p means p-value, not statistic # `all` means IV only 30.2.2 IV-GMM This is a more general framework. 2SLS Estimation is a special case of IV-GMM estimator \\[ Y = X \\beta + u, u \\sim (0, \\Omega) \\] where \\(X\\) is a matrix of endogenous variables (\\(N\\times k\\)) We will use a matrix of instruments \\(X\\) where it has \\(N \\times l\\) dimensions (where \\(l \\ge k\\)) Then, we can have a set of \\(l\\) moments: \\[ g_i (\\beta) = Z_i&#39; u_i = Z_i&#39; (Y_i - X_i \\beta) \\] where \\(i \\in (1,N)\\) Each \\(l\\) moment equation is a sample moment, which can be estimated by averaging over \\(N\\) \\[ \\bar{g}(\\beta) = \\frac{1}{N} \\sum_{i = 1}^N Z_i (Y_i - X_i \\beta) = \\frac{1}{N} Z&#39;u \\] GMM then estimate \\(\\beta\\) so that \\(\\bar{g}(\\hat{\\beta}_{GMM}) = 0\\) When \\(l = k\\) there is a unique solution to this system of equations (and equivalent to the IV estimator) \\[ \\hat{\\beta}_{IV} = (Z&#39;X)^{-1}Z&#39;Y \\] When \\(l &gt; k\\), we have a set of \\(k\\) instruments \\[ \\hat{X} = Z(Z&#39;Z)^{-1} Z&#39; X = P_ZX \\] then we can use the 2SLS estimator \\[ \\begin{aligned} \\hat{\\beta}_{2SLS} &amp;= (\\hat{X}&#39;X)^{-1} \\hat{X}&#39; Y \\\\ &amp;= (X&#39;P_Z X)^{-1}X&#39; P_Z Y \\end{aligned} \\] Differences between 2SLS and IV-GMM: In the 2SLS method, when there are more instruments available than what is actually needed for the estimation, to address this, a matrix is created that only includes the necessary instruments, which simplifies the calculation. The IV-GMM method uses all the available instruments, but applies a weighting system to prioritize the instruments that are most relevant. This approach is useful when there are more instruments than necessary, which can make the calculation more complex. The IV-GMM method uses a criterion function to weight the estimates and improve their accuracy. In short, always use IV-GMM when you have overid problems GMM estimator minimizes \\[ J (\\hat{\\beta}_{GMM} ) = N \\bar{g}(\\hat{\\beta}_{GMM})&#39; W \\bar{g} (\\hat{\\beta}_{GMM}) \\] where \\(W\\) is a symmetric weighting matrix \\(l \\times l\\) For an overid equation, solving the set of FOCs for the IV-GMM estimator, we should have \\[ \\hat{\\beta}_{GMM} = (X&#39;ZWZ&#39; X)^{-1} X&#39;ZWZ&#39;Y \\] which is identical for all \\(W\\) matrices. The optimal \\(W = S^{-1}\\) (L. P. Hansen 1982) where \\(S\\) is the covariance matrix of the moment conditions to produce the most efficient estimator: \\[ S = E[Z&#39;uu&#39;Z] = \\lim_{N \\to \\infty} N^{-1}[Z&#39; \\Omega Z] \\] With a consistent estimator of \\(S\\) from the 2SLS residuals, the feasible IV-GMM estimator can be defined as \\[ \\hat{\\beta}_{FEGMM} = (X&#39;Z \\hat{S}^{-1} Z&#39; X)^{-1} X&#39;Z \\hat{S}^{-1} Z&#39;Y \\] In cases where \\(\\Omega\\) (i.e., the vcov of the error process \\(u\\)) satisfy all classical assumptions IID \\(S = \\sigma^2_u I_N\\) The optimal weighting matrix is proportional to the identity matrix Then, IV-GMM estimator is the standard IV (or 2SLS) estimator. For IV-GMM, you also have an additional test of overid restrictions: GMM distance (also known as Hayashi C statistic) To account for clustering, one can use code provided by this blog References "],["inference-3.html", "30.3 Inference", " 30.3 Inference Under just-identified instrument variable model, we have \\[ Y = \\beta X + u \\] where \\(corr(u, Z) = 0\\) (relevant assumption) and \\(corr(Z,X) \\neq 0\\) (exogenous assumption) The t-ratio approach to construct the 95 CIs is \\[ \\hat{\\beta} \\pm 1.96 \\sqrt{\\hat{V}_N(\\hat{\\beta})} \\] But this is wrong, and has been long recognized by those who understand the “weak instruments” problem Dufour (1997) To test the null hypothesis of \\(\\beta = \\beta_0\\) (Lee et al. 2022) \\[ \\frac{(\\hat{\\beta} - \\beta_0)^2}{\\hat{V}_N(\\hat{\\beta})} = \\hat{t}^2 = \\hat{t}^2_{AR} \\times \\frac{1}{1 - \\hat{\\rho} \\frac{\\hat{t}_{AR}}{\\hat{f}} + \\frac{\\hat{t}^2_{AR}}{\\hat{f}^2}} \\] where \\(\\hat{t}_{AR}^2 \\sim \\chi^2(1)\\) (even with weak instruments) (T. W. Anderson and Rubin 1949) \\[ \\hat{t}_{AR} = \\frac{\\hat{\\pi}(\\hat{\\beta} - \\beta_0)}{\\sqrt{\\hat{V}_N (\\hat{\\pi} (\\hat{\\beta} - \\beta_0))}} \\sim N(0,1) \\] where \\(\\hat{f} = \\frac{\\hat{\\pi}}{\\sqrt{\\hat{V}_N(\\hat{\\pi})}}\\sim N\\) \\(\\hat{\\pi}\\) = 1st-stage coefficient \\(\\hat{\\rho} = COV(Zv, Zu)\\) = correlation between the 1st-stage residual and an estimate of \\(u\\) Even in large samples, \\(\\hat{t}^2 \\neq \\hat{t}^2_{AR}\\) because the right-hand term does not have a degenerate distribution. Thus, the normal t critical values wouldn’t work. The t-ratios does not match that of standard normal, but it matches the proposed density by Staiger and Stock (1997) and J. H. Stock and Yogo (2005) . The deviation between \\(\\hat{t}^2 , \\hat{t}^2_{AR}\\) depends on \\(\\pi\\) (i.e., correlation between the instrument and the endogenous variable) \\(E(F)\\) (i.e., strength of the first-stage) Magnitude of \\(|\\rho|\\) (i.e., degree of endogeneity) Hence, we can think of several scenarios: Worst case: Very weak first stage (\\(\\pi = 0\\)) and high degree of endogeneity (\\(|\\rho |= 1\\)). The interval \\(\\hat{\\beta} \\pm 1.96 \\times SE\\) does not contain the true parameter \\(\\beta\\). A 5 percent significance test under these conditions will incorrectly reject the null hypothesis (\\(\\beta = \\beta_0\\)) 100% of the time. Best case: No endogeneity (\\(\\rho =0\\)) or very large \\(\\hat{f}\\) (very strong first-stage) The interval \\(\\hat{\\beta} \\pm 1.96 \\times SD\\) accurately contains \\(\\beta\\) at least 95% of the time. Intermediate case: The performance of the interval lies between the two extremes. Solutions: To have valid inference of \\(\\hat{\\beta} \\pm 1.96 \\times SE\\) using t-ratio (\\(\\hat{t}^2 \\approx \\hat{t}^2_{AR}\\)), we can either Assume our problem away Assume \\(E(F) &gt; 142.6\\) (Lee et al. 2022) (Not much of an assumption since we can observe first-stage F-stat empirically). Assume \\(|\\rho| &lt; 0.565\\) Lee et al. (2022), but this defeats our motivation to use IV in the first place because we think there is a strong endogeneity bias, that’s why we are trying to correct for it (circular argument). Deal with it head on AR approach (T. W. Anderson and Rubin 1949) tF Procedure (Lee et al. 2022) AK approach (J. Angrist and Kolesár 2023) Common Practices &amp; Challenges: The t-ratio test is preferred by many researchers but has its pitfalls: Known to over-reject (equivalently, under-cover confidence intervals), especially with weak instruments Dufour (1997). To address this: The first-stage F-statistic is used as an indicator of weak instruments. J. H. Stock and Yogo (2005) provided a framework to understand and correct these distortions. Misinterpretations: Common errors in application: Using a rule-of-thumb F-stat threshold of 10 instead of referring to J. H. Stock and Yogo (2005). Mislabeling intervals such as \\(\\hat{\\beta} \\pm 1.96 \\times \\hat{se}(\\hat{\\beta})\\) as 95% confidence intervals (when passed the \\(F&gt;10\\) rule of thumb). Staiger and Stock (1997) clarified that such intervals actually represent 85% confidence when using \\(F &gt; 16.38\\) from J. H. Stock and Yogo (2005) Pretesting for weak instruments might exacerbate over-rejection of the t-ratio test mentioned above (A. R. Hall, Rudebusch, and Wilcox 1996). Selective model specification (i.e., dropping certain specification) based on F-statistics also leads to significant distortions (I. Andrews, Stock, and Sun 2019). 30.3.1 AR approach Validity of Anderson-Rubin Test (notated as AR) (T. W. Anderson and Rubin 1949): Gives accurate results even under non-normal and homoskedastic errors (Staiger and Stock 1997). Maintains validity across diverse error structures (J. H. Stock and Wright 2000). Minimizes type II error among several alternative tests, in cases of: Homoskedastic errors M. J. Moreira (2009). Generalized for heteroskedastic, clustered, and autocorrelated errors (H. Moreira and Moreira 2019). library(ivDiag) # AR test (robust to weak instruments) # example by the package&#39;s authors ivDiag::AR_test( data = rueda, Y = &quot;e_vote_buying&quot;, # treatment D = &quot;lm_pob_mesa&quot;, # instruments Z = &quot;lz_pob_mesa_f&quot;, controls = c(&quot;lpopulation&quot;, &quot;lpotencial&quot;), cl = &quot;muni_code&quot;, CI = FALSE ) #&gt; $Fstat #&gt; F df1 df2 p #&gt; 50.5097 1.0000 4350.0000 0.0000 g &lt;- ivDiag::ivDiag( data = rueda, Y = &quot;e_vote_buying&quot;, D = &quot;lm_pob_mesa&quot;, Z = &quot;lz_pob_mesa_f&quot;, controls = c(&quot;lpopulation&quot;, &quot;lpotencial&quot;), cl = &quot;muni_code&quot;, cores = 4, bootstrap = FALSE ) g$AR #&gt; $Fstat #&gt; F df1 df2 p #&gt; 50.5097 1.0000 4350.0000 0.0000 #&gt; #&gt; $ci.print #&gt; [1] &quot;[-1.2545, -0.7156]&quot; #&gt; #&gt; $ci #&gt; [1] -1.2545169 -0.7155854 #&gt; #&gt; $bounded #&gt; [1] TRUE ivDiag::plot_coef(g) 30.3.2 tF Procedure Lee et al. (2022) propose a new method that is aligned better with traditional econometric training than AR, where it is called the tF procedure. It incorporates both the 1st-stage F-stat and the 2SLS \\(t\\)-value. This method is applicable to single instrumental variable (i.e., just-identified model), including Randomized trials with imperfect compliance (G. W. Imbens and Angrist 1994). Fuzzy Regression Discontinuity designs (Lee and Lemieux 2010). Fuzzy regression kink designs (Card et al. 2015). See I. Andrews, Stock, and Sun (2019) for a comparison between AR approach and tF Procedure. tF Procedure: Adjusts the t-ratio based on the first-stage F-statistic. Rather than a fixed pretesting threshold, it applies an adjustment factor to 2SLS standard errors. Adjustment factors are provided for 95% and 99% confidence levels. Advantages of the tF Procedure: Smooth Adjustment: Gives usable finite confidence intervals for smaller F statistic values. 95% confidence is applicable for \\(F &gt; 3.84\\), aligning with AR’s bounded 95% confidence intervals. Clear Confidence Levels: These levels incorporate effects of basing inference on the first-stage F. Mirrors AR or other zero distortion procedures. Robustness: Robust against common error structures (e.g., heteroskedasticity or clustering and/or autocorrelated errors). No further adjustments are necessary as long as robust variance estimators are consistently used (same robust variance estimator used for the 1st-stage as for the IV estimate). Comparison to AR: Surprisingly, with \\(F &gt; 3.84\\), AR’s expected interval length is infinite, while tF’s is finite (i.e., better). Applicability: The tF adjustment can re-evaluate published studies if the first-stage F-statistic is available. Original data access is not needed. Impacts in Applied Research: Lee et al. (2022) examined recent single-instrument specification studies from the American Economic Review (AER). Observations: For at least 25% of the studied specifications, using tF increased confidence interval lengths by: 49% (5% significance level). 136% (1% significance level). For specifications with \\(F &gt; 10\\) and \\(t &gt; 1.96\\), about 25% became statistically insignificant at the 5% level when adjusted using tF. Conclusion: tF adjustments could greatly influence inferences in research employing t-ratio inferences. Notation \\(Y = X \\beta + W \\gamma + u\\) \\(X = Z \\pi + W \\xi + \\nu\\) where \\(W\\): Additional covariates, possibly including an intercept term. \\(X\\): variable of interest \\(Z\\): instruments Key Statistics: \\(t\\)-ratio for the instrumental variable estimator: \\(\\hat{t} = \\frac{\\hat{\\beta} - \\beta_0}{\\sqrt{\\hat{V}_N (\\hat{\\beta})}}\\) \\(t\\)-ratio for the first-stage coefficient: \\(\\hat{f} = \\frac{\\hat{\\pi}}{\\sqrt{\\hat{V}_N (\\hat{\\pi})}}\\) \\(\\hat{F} = \\hat{f}^2\\) where \\(\\hat{\\beta}\\): Instrumental variable estimator. \\(\\hat{V}_N (\\hat{\\beta})\\): Estimated variance of \\(\\hat{\\beta}\\), possibly robust to deal with non-iid errors. \\(\\hat{t}\\): \\(t\\)-ratio under the null hypothesis. \\(\\hat{f}\\): \\(t\\)-ratio under the null hypothesis of \\(\\pi=0\\). Traditional \\(t\\) Inference: In large samples, \\(\\hat{t}^2 \\to^d t^2\\) Standard normal critical values are \\(\\pm 1.96\\) for 5% significance level testing. Distortions in Inference in the case of IV: Use of a standard normal can lead to distorted inferences even in large samples. Despite large samples, t-distribution might not be normal. But magnitude of this distortion can be quantified. J. H. Stock and Yogo (2005) provides a formula for Wald test statistics using 2SLS. \\(t^2\\) formula allows for quantification of inference distortions. In the just-identified case with one endogenous regressor \\(t^2 = f + t_{AR} + \\rho f t_{AR}\\) (J. H. Stock and Yogo 2005) \\(\\hat{f} \\to^d f\\) and \\(\\bar{f} = \\frac{\\pi}{\\sqrt{\\frac{1}{N} AV(\\hat{\\pi})}}\\) and \\(AV(\\hat{\\pi})\\) is the asymptotic variance of \\(\\hat{\\pi}\\) \\(t_{AR}\\) is a standard normal with \\(AR = t^2_{AR}\\) \\(\\rho\\) (degree of endogeneity) is the correlation of \\(Zu\\) and \\(Z \\nu\\) (when data are homoskedastic, \\(\\rho\\) is the correlation between \\(u\\) and \\(\\nu\\)) Implications of \\(t^2\\) formula: Varies rejection rates depending on \\(\\rho\\) value. \\(\\rho \\in (0,0.5]\\) (low) the t-ratio rejects at a probability below the nominal \\(0.05\\) rate \\(\\rho = 0.8\\) (high) the rejection rate can be \\(0.13\\) In short, incorrect test size when relying solely on \\(t^2\\) (based on traditional econometric understanding) To correct for this, one can Estimate the usually 2SLS standard errors Multiply the SE by the adjustment factor based on the observed first-stage \\(\\hat{F}\\) stat One can go back to the traditional hypothesis by using either the t-ratio of confidence intervals Lee et al. (2022) call this adjusted SE as “0.05 tF SE”. library(ivDiag) g &lt;- ivDiag::ivDiag( data = rueda, Y = &quot;e_vote_buying&quot;, D = &quot;lm_pob_mesa&quot;, Z = &quot;lz_pob_mesa_f&quot;, controls = c(&quot;lpopulation&quot;, &quot;lpotencial&quot;), cl = &quot;muni_code&quot;, cores = 4, bootstrap = FALSE ) g$tF #&gt; F cF Coef SE t CI2.5% CI97.5% p-value #&gt; 8598.3264 1.9600 -0.9835 0.1540 -6.3872 -1.2853 -0.6817 0.0000 # example in fixest package library(fixest) library(tidyverse) base = iris names(base) = c(&quot;y&quot;, &quot;x1&quot;, &quot;x_endo_1&quot;, &quot;x_inst_1&quot;, &quot;fe&quot;) set.seed(2) base$x_inst_2 = 0.2 * base$y + 0.2 * base$x_endo_1 + rnorm(150, sd = 0.5) base$x_endo_2 = 0.2 * base$y - 0.2 * base$x_inst_1 + rnorm(150, sd = 0.5) est_iv = feols(y ~ x1 | x_endo_1 + x_endo_2 ~ x_inst_1 + x_inst_2, base) est_iv #&gt; TSLS estimation - Dep. Var.: y #&gt; Endo. : x_endo_1, x_endo_2 #&gt; Instr. : x_inst_1, x_inst_2 #&gt; Second stage: Dep. Var.: y #&gt; Observations: 150 #&gt; Standard-errors: IID #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 1.831380 0.411435 4.45121 1.6844e-05 *** #&gt; fit_x_endo_1 0.444982 0.022086 20.14744 &lt; 2.2e-16 *** #&gt; fit_x_endo_2 0.639916 0.307376 2.08186 3.9100e-02 * #&gt; x1 0.565095 0.084715 6.67051 4.9180e-10 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; RMSE: 0.398842 Adj. R2: 0.761653 #&gt; F-test (1st stage), x_endo_1: stat = 903.2 , p &lt; 2.2e-16 , on 2 and 146 DoF. #&gt; F-test (1st stage), x_endo_2: stat = 3.25828, p = 0.041268, on 2 and 146 DoF. #&gt; Wu-Hausman: stat = 6.79183, p = 0.001518, on 2 and 144 DoF. res_est_iv &lt;- est_iv$coeftable |&gt; rownames_to_column() coef_of_interest &lt;- res_est_iv[res_est_iv$rowname == &quot;fit_x_endo_1&quot;, &quot;Estimate&quot;] se_of_interest &lt;- res_est_iv[res_est_iv$rowname == &quot;fit_x_endo_1&quot;, &quot;Std. Error&quot;] fstat_1st &lt;- fitstat(est_iv, type = &quot;ivf1&quot;)[[1]]$stat # To get the correct SE based on 1st-stage F-stat (This result is similar without adjustment since F is large) # the results are the new CIS and p.value tF(coef = coef_of_interest, se = se_of_interest, Fstat = fstat_1st) |&gt; causalverse::nice_tab(5) #&gt; F cF Coef SE t CI2.5. CI97.5. p.value #&gt; 1 903.1628 1.96 0.44498 0.02209 20.14744 0.40169 0.48827 0 # We can try to see a different 1st-stage F-stat and how it changes the results tF(coef = coef_of_interest, se = se_of_interest, Fstat = 2) |&gt; causalverse::nice_tab(5) #&gt; F cF Coef SE t CI2.5. CI97.5. p.value #&gt; 1 2 18.66 0.44498 0.02209 20.14744 0.03285 0.85711 0.03432 30.3.3 AK approach (J. Angrist and Kolesár 2023) References "],["testing-assumptions.html", "30.4 Testing Assumptions", " 30.4 Testing Assumptions \\[ Y = \\beta_1 X_1 + \\beta_2 X_2 + \\epsilon \\] where \\(X_1\\) are exogenous variables \\(X_2\\) are endogenous variables \\(Z\\) are instrumental variables If \\(Z\\) satisfies the relevance condition, it means \\(Cov(Z, X_2) \\neq 0\\) This is important because we need this to be able to estimate \\(\\beta_2\\) where \\[ \\beta_2 = \\frac{Cov(Z,Y)}{Cov(Z, X_2)} \\] If \\(Z\\) satisfies the exogeneity condition, \\(E[Z\\epsilon]=0\\), this can achieve by \\(Z\\) having no direct effect on \\(Y\\) except through \\(X_2\\) In the presence of omitted variable, \\(Z\\) is uncorrelated with this variable. If we just want to know the effect of \\(Z\\) on \\(Y\\) (reduced form) where the coefficient of \\(Z\\) is \\[ \\rho = \\frac{Cov(Y, Z)}{Var(Z)} \\] and this effect is only through \\(X_2\\) (by the exclusion restriction assumption). We can also consistently estimate the effect of \\(Z\\) on \\(X\\) (first stage) where the the coefficient of \\(X_2\\) is \\[ \\pi = \\frac{Cov(X_2, Z)}{Var(Z)} \\] and the IV estimate is \\[ \\beta_2 = \\frac{Cov(Y,Z)}{Cov(X_2, Z)} = \\frac{\\rho}{\\pi} \\] 30.4.1 Relevance Assumption Weak instruments: can explain little variation in the endogenous regressor Coefficient estimate of the endogenous variable will be inaccurate. For cases where weak instruments are unavoidable, M. J. Moreira (2003) proposes the conditional likelihood ratio test for robust inference. This test is considered approximately optimal for weak instrument scenarios (D. W. Andrews, Moreira, and Stock 2008; D. W. Andrews and Marmer 2008). Rule of thumb: Compute F-statistic in the first-stage, where it should be greater than 10. But this is discouraged now by Lee et al. (2022) use linearHypothesis() to see only instrument coefficients. First-Stage F-Test In the context of a two-stage least squares (2SLS) setup where you are estimating the equation: \\[ Y = X \\beta + \\epsilon \\] and \\(X\\) is endogenous, you typically estimate a first-stage regression of: \\[ X = Z \\pi + u \\] where Z is the instrument. The first-stage F-test evaluates the joint significance of the instruments in this first stage: \\[ F = \\frac{(SSR_r - SSR_{ur})/q}{SSR_{ur}/ (n - k - 1)} \\] where: \\(SSR_r\\) is the sum of squared residuals from the restricted model (no instruments, just the constant). \\(SSR_{ur}\\) is the sum of squared residuals from the unrestricted model (with instruments). \\(q\\) is the number of instruments excluded from the main equation. \\(n\\) is the number of observations. \\(k\\) is the number of explanatory variables excluding the instruments. Cragg-Donald Test The Cragg-Donald statistic is essentially the same as the Wald statistic of the joint significance of the instruments in the first stage, and it’s used specifically when you have multiple endogenous regressors. It’s calculated as: \\[ CD = n \\times (R_{ur}^2 - R_r^2) \\] where: \\(R_{ur}^2\\) and \\(R_r^2\\) are the R-squared values from the unrestricted and restricted models respectively. \\(n\\) is the number of observations. For one endogenous variable, the Cragg-Donald test results should align closely with those from Stock and Yogo. The Anderson canonical correlation test, a likelihood ratio test, also works under similar conditions, contrasting with Cragg-Donald’s Wald statistic approach. Both are valid with one endogenous variable and at least one instrument. Stock-Yogo Weak IV Test The Stock-Yogo test does not directly compute a statistic like the F-test or Cragg-Donald, but rather uses pre-computed critical values to assess the strength of instruments. It often uses the eigenvalues derived from the concentration matrix: \\[ S = \\frac{1}{n} (Z&#39; X) (X&#39;Z) \\] where \\(Z\\) is the matrix of instruments and \\(X\\) is the matrix of endogenous regressors. Stock and Yogo provide critical values for different scenarios (bias, size distortion) for a given number of instruments and endogenous regressors, based on the smallest eigenvalue of \\(S\\). The test compares these eigenvalues against critical values that correspond to thresholds of permissible bias or size distortion in a 2SLS estimator. Critical Values and Test Conditions: The critical values derived by Stock and Yogo depend on the level of acceptable bias, the number of endogenous regressors, and the number of instruments. For example, with a 5% maximum acceptable bias, one endogenous variable, and three instruments, the critical value for a sufficient first stage F-statistic is 13.91. Note that this framework requires at least two overidentifying degree of freedom. Comparison Test Description Focus Usage First-Stage F-Test Evaluates the joint significance of instruments in the first stage. Predictive power of instruments for the endogenous variable. Simplest and most direct test, widely used especially with a single endogenous variable. Rule of thumb: F &lt; 10 suggests weak instruments. Cragg-Donald Test Wald statistic for joint significance of instruments. Joint strength of multiple instruments with multiple endogenous variables. More appropriate in complex IV setups with multiple endogenous variables. Compares statistic against critical values for assessing instrument strength. Stock-Yogo Weak IV Test Compares test statistic to pre-determined critical values. Minimizing size distortions and bias from weak instruments. Theoretical evaluation of instrument strength, ensuring the reliability of 2SLS estimates against specific thresholds of bias or size distortion. All the mentioned tests (Stock Yogo, Cragg-Donald, Anderson canonical correlation test) assume errors are independently and identically distributed. If this assumption is violated, the Kleinbergen-Paap test is robust against violations of the iid assumption and can be applied even with a single endogenous variable and instrument, provided the model is properly identified (Baum and Schaffer 2021). 30.4.1.1 Weak Instrument Tests 30.4.1.2 Cragg-Donald (Cragg and Donald 1993) Similar to the first-stage F-statistic library(cragg) library(AER) # for dataaset data(&quot;WeakInstrument&quot;) cragg_donald( # control variables X = ~ 1, # endogeneous variables D = ~ x, # instrument variables Z = ~ z, data = WeakInstrument ) #&gt; Cragg-Donald test for weak instruments: #&gt; #&gt; Data: WeakInstrument #&gt; Controls: ~1 #&gt; Treatments: ~x #&gt; Instruments: ~z #&gt; #&gt; Cragg-Donald Statistic: 4.566136 #&gt; Df: 198 Large CD statistic implies that the instruments are strong, but not in our case here. But to judge it against some critical value, we have to look at Stock-Yogo 30.4.1.3 Stock-Yogo J. H. Stock and Yogo (2002) set the critical values such that the bias is less then 10% (default) \\(H_0:\\) Instruments are weak \\(H_1:\\) Instruments are not weak library(cragg) library(AER) # for dataaset data(&quot;WeakInstrument&quot;) stock_yogo_test( # control variables X = ~ 1, # endogeneous variables D = ~ x, # instrument variables Z = ~ z, size_bias = &quot;bias&quot;, data = WeakInstrument ) The CD statistic should be bigger than the set critical value to be considered strong instruments. 30.4.1.4 Anderson-Rubin 30.4.1.5 Stock-Wright 30.4.2 Exogeneity Assumption The local average treatment effect (LATE) is defined as: \\[ \\text{LATE} = \\frac{\\text{reduced form}}{\\text{first stage}} = \\frac{\\rho}{\\phi} \\] This implies that the reduced form (\\(\\rho\\)) is the product of the first stage (\\(\\phi\\)) and LATE: \\[ \\rho = \\phi \\times \\text{LATE} \\] Thus, if the first stage (\\(\\phi\\)) is 0, the reduced form (\\(\\rho\\)) should also be 0. # Load necessary libraries library(shiny) library(AER) # for ivreg library(ggplot2) # for visualization library(dplyr) # for data manipulation # Function to simulate the dataset simulate_iv_data &lt;- function(n, beta, phi, direct_effect) { Z &lt;- rnorm(n) epsilon_x &lt;- rnorm(n) epsilon_y &lt;- rnorm(n) X &lt;- phi * Z + epsilon_x Y &lt;- beta * X + direct_effect * Z + epsilon_y data &lt;- data.frame(Y = Y, X = X, Z = Z) return(data) } # Function to run the simulations and calculate the effects run_simulation &lt;- function(n, beta, phi, direct_effect) { # Simulate the data simulated_data &lt;- simulate_iv_data(n, beta, phi, direct_effect) # Estimate first-stage effect (phi) first_stage &lt;- lm(X ~ Z, data = simulated_data) phi &lt;- coef(first_stage)[&quot;Z&quot;] phi_ci &lt;- confint(first_stage)[&quot;Z&quot;, ] # Estimate reduced-form effect (rho) reduced_form &lt;- lm(Y ~ Z, data = simulated_data) rho &lt;- coef(reduced_form)[&quot;Z&quot;] rho_ci &lt;- confint(reduced_form)[&quot;Z&quot;, ] # Estimate LATE using IV regression iv_model &lt;- ivreg(Y ~ X | Z, data = simulated_data) iv_late &lt;- coef(iv_model)[&quot;X&quot;] iv_late_ci &lt;- confint(iv_model)[&quot;X&quot;, ] # Calculate LATE as the ratio of reduced-form and first-stage coefficients calculated_late &lt;- rho / phi calculated_late_se &lt;- sqrt( (rho_ci[2] - rho)^2 / phi^2 + (rho * (phi_ci[2] - phi) / phi^2)^2 ) calculated_late_ci &lt;- c(calculated_late - 1.96 * calculated_late_se, calculated_late + 1.96 * calculated_late_se) # Return a list of results list(phi = phi, phi_ci = phi_ci, rho = rho, rho_ci = rho_ci, direct_effect = direct_effect, direct_effect_ci = c(direct_effect, direct_effect), # Placeholder for direct effect CI iv_late = iv_late, iv_late_ci = iv_late_ci, calculated_late = calculated_late, calculated_late_ci = calculated_late_ci, true_effect = beta, true_effect_ci = c(beta, beta)) # Placeholder for true effect CI } # Define UI for the sliders ui &lt;- fluidPage( titlePanel(&quot;IV Model Simulation&quot;), sidebarLayout( sidebarPanel( sliderInput(&quot;beta&quot;, &quot;True Effect of X on Y (beta):&quot;, min = 0, max = 1.0, value = 0.5, step = 0.1), sliderInput(&quot;phi&quot;, &quot;First Stage Effect (phi):&quot;, min = 0, max = 1.0, value = 0.7, step = 0.1), sliderInput(&quot;direct_effect&quot;, &quot;Direct Effect of Z on Y:&quot;, min = -0.5, max = 0.5, value = 0, step = 0.1) ), mainPanel( plotOutput(&quot;dotPlot&quot;) ) ) ) # Define server logic to run the simulation and generate the plot server &lt;- function(input, output) { output$dotPlot &lt;- renderPlot({ # Run simulation results &lt;- run_simulation(n = 1000, beta = input$beta, phi = input$phi, direct_effect = input$direct_effect) # Prepare data for plotting plot_data &lt;- data.frame( Effect = c(&quot;First Stage (phi)&quot;, &quot;Reduced Form (rho)&quot;, &quot;Direct Effect&quot;, &quot;LATE (Ratio)&quot;, &quot;LATE (IV)&quot;, &quot;True Effect&quot;), Value = c(results$phi, results$rho, results$direct_effect, results$calculated_late, results$iv_late, results$true_effect), CI_Lower = c(results$phi_ci[1], results$rho_ci[1], results$direct_effect_ci[1], results$calculated_late_ci[1], results$iv_late_ci[1], results$true_effect_ci[1]), CI_Upper = c(results$phi_ci[2], results$rho_ci[2], results$direct_effect_ci[2], results$calculated_late_ci[2], results$iv_late_ci[2], results$true_effect_ci[2]) ) # Create dot plot with confidence intervals ggplot(plot_data, aes(x = Effect, y = Value)) + geom_point(size = 3) + geom_errorbar(aes(ymin = CI_Lower, ymax = CI_Upper), width = 0.2) + labs(title = &quot;IV Model Effects&quot;, y = &quot;Coefficient Value&quot;) + coord_cartesian(ylim = c(-1, 1)) + # Limits the y-axis to -1 to 1 but allows CI beyond theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) }) } # Run the application shinyApp(ui = ui, server = server) A statistically significant reduced form estimate without a corresponding first stage indicates an issue, suggesting an alternative channel linking instruments to outcomes or a direct effect of the IV on the outcome. No Direct Effect: When the direct effect is 0 and the first stage is 0, the reduced form is 0. Note: Extremely rare cases with multiple additional paths that perfectly cancel each other out can also produce this result, but testing for all possible paths is impractical. With Direct Effect: When there is a direct effect of the IV on the outcome, the reduced form can be significantly different from 0, even if the first stage is 0. This violates the exogeneity assumption, as the IV should only affect the outcome through the treatment variable. To test the validity of the exogeneity assumption, we can use a sanity test: Identify groups for which the effects of instruments on the treatment variable are small and not significantly different from 0. The reduced form estimate for these groups should also be 0. These “no-first-stage samples” provide evidence of whether the exogeneity assumption is violated. 30.4.2.1 Overid Tests Wald test and Hausman test for exogeneity of \\(X\\) assuming \\(Z\\) is exogenous People might prefer Wald test over Hausman test. Sargan (for 2SLS) is a simpler version of Hansen’s J test (for IV-GMM) Modified J test (i.e., Regularized jacknife IV): can handle weak instruments and small sample size (Carrasco and Doukali 2022) (also proposed a regularized F-test to test relevance assumption that is robust to heteroskedasticity). New advances: endogeneity robust inference in finite sample and sensitivity analysis of inference (Kiviet 2020) These tests that can provide evidence fo the validity of the over-identifying restrictions is not sufficient or necessary for the validity of the moment conditions (i.e., this assumption cannot be tested). (Deaton 2010; Parente and Silva 2012) The over-identifying restriction can still be valid even when the instruments are correlated with the error terms, but then in this case, what you’re estimating is no longer your parameters of interest. Rejection of the over-identifying restrictions can also be the result of parameter heterogeneity (J. D. Angrist, Graddy, and Imbens 2000) Why overid tests hold no value/info? Overidentifying restrictions are valid irrespective of the instruments’ validity Whenever instruments have the same motivation and are on the same scale, the estimated parameter of interests will be very close (Parente and Silva 2012, 316) Overidentifying restriction are invalid when each instrument is valid When the effect of your parameter of interest is heterogeneous (e.g., you have two groups with two different true effects), your first instrument can be correlated with your variable of interest only for the first group and your second interments can be correlated with your variable of interest only for the second group (i.e., each instrument is valid), and if you use each instrument, you can still identify the parameter of interest. However, if you use both of them, what you estimate is a mixture of the two groups. Hence, the overidentifying restriction will be invalid (because no single parameters can make the errors of the model orthogonal to both instruments). The result may seem confusing at first because if each subset of overidentifying restrictions is valid, the full set should also be valid. However, this interpretation is flawed because the residual’s orthogonality to the instruments depends on the chosen set of instruments, and therefore the set of restrictions tested when using two sets of instruments together is not the same as the union of the sets of restrictions tested when using each set of instruments separately (Parente and Silva 2012, 316) These tests (of overidentifying restrictions) should be used to check whether different instruments identify the same parameters of interest, not to check their validity (J. A. Hausman 1983; Parente and Silva 2012) 30.4.2.1.1 Wald Test Assuming that \\(Z\\) is exogenous (a valid instrument), we want to know whether \\(X_2\\) is exogenous 1st stage: \\[ X_2 = \\hat{\\alpha} Z + \\hat{\\epsilon} \\] 2nd stage: \\[ Y = \\delta_0 X_1 + \\delta_1 X_2 + \\delta_2 \\hat{\\epsilon} + u \\] where \\(\\hat{\\epsilon}\\) is the residuals from the 1st stage The Wald test of exogeneity assumes \\[ H_0: \\delta_2 = 0 \\\\ H_1: \\delta_2 \\neq 0 \\] If you have more than one endogenous variable with more than one instrument, \\(\\delta_2\\) is a vector of all residuals from all the first-stage equations. And the null hypothesis is that they are jointly equal 0. If you reject this hypothesis, it means that \\(X_2\\) is not endogenous. Hence, for this test, we do not want to reject the null hypothesis. If the test is not sacrificially significant, we might just don’t have enough information to reject the null. When you have a valid instrument \\(Z\\), whether \\(X_2\\) is endogenous or exogenous, your coefficient estimates of \\(X_2\\) should still be consistent. But if \\(X_2\\) is exogenous, then 2SLS will be inefficient (i.e., larger standard errors). Intuition: \\(\\hat{\\epsilon}\\) is the supposed endogenous part of \\(X_2\\), When we regress \\(Y\\) on \\(\\hat{\\epsilon}\\) and observe that its coefficient is not different from 0. It means that the exogenous part of \\(X_2\\) can explain well the impact on \\(Y\\), and there is no endogenous part. 30.4.2.1.2 Hausman’s Test Similar to Wald Test and identical to Wald Test when we have homoskedasticity (i.e., homogeneity of variances). Because of this assumption, it’s used less often than Wald Test 30.4.2.1.3 Hansen’s J (L. P. Hansen 1982) J-test (over-identifying restrictions test): test whether additional instruments are exogenous Can only be applied in cases where you have more instruments than endogenous variables \\(dim(Z) &gt; dim(X_2)\\) Assume at least one instrument within \\(Z\\) is exogenous Procedure IV-GMM: Obtain the residuals of the 2SLS estimation Regress the residuals on all instruments and exogenous variables. Test the joint hypothesis that all coefficients of the residuals across instruments are 0 (i.e., this is true when instruments are exogenous). Compute \\(J = mF\\) where \\(m\\) is the number of instruments, and \\(F\\) is your equation \\(F\\) statistic (can you use linearHypothesis() again). If your exogeneity assumption is true, then \\(J \\sim \\chi^2_{m-k}\\) where \\(k\\) is the number of endogenous variables. If you reject this hypothesis, it can be that The first sets of instruments are invalid The second sets of instruments are invalid Both sets of instruments are invalid Note: This test is only true when your residuals are homoskedastic. For a heteroskedasticity-robust \\(J\\)-statistic, see (Carrasco and Doukali 2022; H. Li et al. 2022) 30.4.2.1.4 Sargan Test (Sargan 1958) Similar to Hansen’s J, but it assumes homoskedasticity Have to be careful when sample is not collected exogenously. As such, when you have choice-based sampling design, the sampling weights have to be considered to have consistent estimates. However, even if we apply sampling weights, the tests are not suitable because the iid assumption off errors are already violated. Hence, the test is invalid in this case (Pitt 2011). If one has heteroskedasticity in its design, the Sargan test is invalid (Pitt 2011}) References "],["negative-r2.html", "30.5 Negative \\(R^2\\)", " 30.5 Negative \\(R^2\\) It’s okay to have negative \\(R^2\\) in the 2nd stage. We care more about consistent coefficient estimates. \\(R^2\\) has no statistical meaning in instrumental variable regression or 2 or 3SLS \\[ R^2 = \\frac{MSS}{TSS} \\] where MSS = model sum of squares (TSS- RSS) TSS = total sum of squares (\\(\\sum(y - \\bar{y})^2\\)) RSS = residual sum of squares (\\(\\sum (y - Xb)^2\\)) If \\(TSS &gt; RSS\\), then we have negative RSS and negative \\(R^2\\). Since the predicted values of the endogenous variables are different from the endogenous variables themselves, the error that is used to calculate RSS can be different from the error in the second stage, and RSS in the second stage can be less than TSS. For more information, see here. "],["treatment-intensity.html", "30.6 Treatment Intensity", " 30.6 Treatment Intensity Two-Stage Least Squares (TSLS) can be used to estimate the average causal effect of variable treatment intensity, and it “identifies a weighted average of per-unit treatment effects along the length of a causal response function” (J. D. Angrist and Imbens 1995, 431). For example Drug dosage Hours of exam prep on score (Powers and Swinton 1984) Cigarette smoking on birth weights (Permutt and Hebel 1989) Years of education Class size on test score (J. D. Angrist and Lavy 1999) Sibship size on earning (Lavy, Angrist, and Schlosser 2006) Social Media Adoption The average causal effect here refers to the conditional expectation of the difference in outcomes between the treated and what would have happened in the counterfactual world. Notes: We do not need a linearity assumption of the relationships between the dependent variable, treatment intensities, and instruments. Example In their original paper, J. D. Angrist and Imbens (1995) take the example of schooling effect on earnings where they have quarters of birth as the instrumental variable. For each additional year of schooling, there can be an increase in earnings, and each additional year can be heterogeneous (both in the sense that grade 9th to grade 10th is qualitatively different and one can change to a different school). \\[ Y = \\gamma_0 + \\gamma_1 X_1 + \\rho S + \\epsilon \\] where \\(S\\) is years of schooling (i.e., endogenous regressor) \\(\\rho\\) is the return to a year of schooling \\(X_1\\) is a matrix of exogenous covariates Schooling can also be related to the exogenous variable \\(X_1\\) \\[ S = \\delta_0 + X_1 \\delta_1 + X_2 \\delta_2 + \\eta \\] where \\(X_2\\) is an exogenous instrument \\(\\delta_2\\) is the coefficient of the instrument by using only the fitted value in the second, the TSLS can give a consistent estimate of the effect of schooling on earning \\[ Y = \\gamma_0 + X_1 \\gamma-1 + \\rho \\hat{S} + \\nu \\] To give \\(\\rho\\) a causal interpretation, We first have to have the SUTVA (stable unit treatment value assumption), where the potential outcomes of the same person with different years of schooling are independent. When \\(\\rho\\) has a probability limit equal to a weighted average of \\(E[Y_j - Y_{j-1}] \\forall j\\) Even though the first bullet point is not trivial, most of the time we don’t have to defend much about it in a research article, the second bullet point is the harder one to argue and only apply to certain cases. References "],["control-function.html", "30.7 Control Function", " 30.7 Control Function Also known as two-stage residual inclusion Resources: Binary outcome and binary endogenous variable application (E. Tchetgen Tchetgen 2014) In rare events: we use a logistic model in the 2nd stage In non-rare events: use risk ratio regression in the 2nd stage Application in marketing for consumer choice model (Petrin and Train 2010) Notes This approach is better suited for models with nonadditive errors (e.g., discrete choice models), or binary endogenous model, binary response variable, etc. \\[ Y = g(X) + U \\\\ X = \\pi(Z) + V \\\\ E(U |Z,V) = E(U|V) \\\\ E(V|Z) = 0 \\] Under control function approach, \\[ E(Y|Z,V) = g(X) + E(U|Z,V) \\\\ = g(X) + E(U|V) \\\\ = g(X) + h(V) \\] where \\(h(V)\\) is the control function that models the endogeneity Linear in parameters Linear Endogenous Variables: The control function function approach is identical to the usual 2SLS estimator Nonlinear Endogenous Variables: The control function is different from the 2SLS estimator Nonlinear in parameters: The CF function is superior than the 2SLS estimator 30.7.1 Simulation library(fixest) library(tidyverse) library(modelsummary) # Set the seed for reproducibility set.seed(123) n = 10000 # Generate the exogenous variable from a normal distribution exogenous &lt;- rnorm(n, mean = 5, sd = 1) # Generate the omitted variable as a function of the exogenous variable omitted &lt;- rnorm(n, mean = 2, sd = 1) # Generate the endogenous variable as a function of the omitted variable and the exogenous variable endogenous &lt;- 5 * omitted + 2 * exogenous + rnorm(n, mean = 0, sd = 1) # nonlinear endogenous variable endogenous_nonlinear &lt;- 5 * omitted^2 + 2 * exogenous + rnorm(100, mean = 0, sd = 1) unrelated &lt;- rexp(n, rate = 1) # Generate the response variable as a function of the endogenous variable and the omitted variable response &lt;- 4 + 3 * endogenous + 6 * omitted + rnorm(n, mean = 0, sd = 1) response_nonlinear &lt;- 4 + 3 * endogenous_nonlinear + 6 * omitted + rnorm(n, mean = 0, sd = 1) response_nonlinear_para &lt;- 4 + 3 * endogenous ^ 2 + 6 * omitted + rnorm(n, mean = 0, sd = 1) # Combine the variables into a data frame my_data &lt;- data.frame( exogenous, omitted, endogenous, response, unrelated, response, response_nonlinear, response_nonlinear_para ) # View the first few rows of the data frame # head(my_data) wo_omitted &lt;- feols(response ~ endogenous + sw0(unrelated), data = my_data) w_omitted &lt;- feols(response ~ endogenous + omitted + unrelated, data = my_data) # ivreg::ivreg(response ~ endogenous + unrelated | exogenous, data = my_data) iv &lt;- feols(response ~ 1 + sw0(unrelated) | endogenous ~ exogenous, data = my_data) etable( wo_omitted, w_omitted, iv, digits = 2 # vcov = list(&quot;each&quot;, &quot;iid&quot;, &quot;hetero&quot;) ) #&gt; wo_omitted.1 wo_omitted.2 w_omitted iv.1 #&gt; Dependent Var.: response response response response #&gt; #&gt; Constant -3.9*** (0.10) -4.0*** (0.10) 4.0*** (0.05) 15.7*** (0.59) #&gt; endogenous 4.0*** (0.005) 4.0*** (0.005) 3.0*** (0.004) 3.0*** (0.03) #&gt; unrelated 0.03 (0.03) 0.002 (0.010) #&gt; omitted 6.0*** (0.02) #&gt; _______________ ______________ ______________ ______________ ______________ #&gt; S.E. type IID IID IID IID #&gt; Observations 10,000 10,000 10,000 10,000 #&gt; R2 0.98566 0.98567 0.99803 0.92608 #&gt; Adj. R2 0.98566 0.98566 0.99803 0.92607 #&gt; #&gt; iv.2 #&gt; Dependent Var.: response #&gt; #&gt; Constant 15.6*** (0.59) #&gt; endogenous 3.0*** (0.03) #&gt; unrelated 0.10. (0.06) #&gt; omitted #&gt; _______________ ______________ #&gt; S.E. type IID #&gt; Observations 10,000 #&gt; R2 0.92610 #&gt; Adj. R2 0.92608 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Linear in parameter and linear in endogenous variable # manual # 2SLS first_stage = lm(endogenous ~ exogenous, data = my_data) new_data = cbind(my_data, new_endogenous = predict(first_stage, my_data)) second_stage = lm(response ~ new_endogenous, data = new_data) summary(second_stage) #&gt; #&gt; Call: #&gt; lm(formula = response ~ new_endogenous, data = new_data) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -77.683 -14.374 -0.107 14.289 78.274 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 15.6743 2.0819 7.529 5.57e-14 *** #&gt; new_endogenous 3.0142 0.1039 29.025 &lt; 2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 21.26 on 9998 degrees of freedom #&gt; Multiple R-squared: 0.07771, Adjusted R-squared: 0.07762 #&gt; F-statistic: 842.4 on 1 and 9998 DF, p-value: &lt; 2.2e-16 new_data_cf = cbind(my_data, residual = resid(first_stage)) second_stage_cf = lm(response ~ endogenous + residual, data = new_data_cf) summary(second_stage_cf) #&gt; #&gt; Call: #&gt; lm(formula = response ~ endogenous + residual, data = new_data_cf) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -5.360 -1.016 0.003 1.023 5.201 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 15.674265 0.149350 105.0 &lt;2e-16 *** #&gt; endogenous 3.014202 0.007450 404.6 &lt;2e-16 *** #&gt; residual 1.140920 0.008027 142.1 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 1.525 on 9997 degrees of freedom #&gt; Multiple R-squared: 0.9953, Adjusted R-squared: 0.9953 #&gt; F-statistic: 1.048e+06 on 2 and 9997 DF, p-value: &lt; 2.2e-16 modelsummary(list(second_stage, second_stage_cf))  (1)   (2) (Intercept) 15.674 15.674 (2.082) (0.149) new_endogenous 3.014 (0.104) endogenous 3.014 (0.007) residual 1.141 (0.008) Num.Obs. 10000 10000 R2 0.078 0.995 R2 Adj. 0.078 0.995 AIC 89520.9 36826.8 BIC 89542.5 36855.6 Log.Lik. −44757.438 −18409.377 F 842.424 1048263.304 RMSE 21.26 1.53 Nonlinear in endogenous variable # 2SLS first_stage = lm(endogenous_nonlinear ~ exogenous, data = my_data) new_data = cbind(my_data, new_endogenous_nonlinear = predict(first_stage, my_data)) second_stage = lm(response_nonlinear ~ new_endogenous_nonlinear, data = new_data) summary(second_stage) #&gt; #&gt; Call: #&gt; lm(formula = response_nonlinear ~ new_endogenous_nonlinear, data = new_data) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -94.43 -52.10 -15.29 36.50 446.08 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 15.3390 11.8175 1.298 0.194 #&gt; new_endogenous_nonlinear 3.0174 0.3376 8.938 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 69.51 on 9998 degrees of freedom #&gt; Multiple R-squared: 0.007927, Adjusted R-squared: 0.007828 #&gt; F-statistic: 79.89 on 1 and 9998 DF, p-value: &lt; 2.2e-16 new_data_cf = cbind(my_data, residual = resid(first_stage)) second_stage_cf = lm(response_nonlinear ~ endogenous_nonlinear + residual, data = new_data_cf) summary(second_stage_cf) #&gt; #&gt; Call: #&gt; lm(formula = response_nonlinear ~ endogenous_nonlinear + residual, #&gt; data = new_data_cf) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -17.5437 -0.8348 0.4614 1.4424 4.8154 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 15.33904 0.38459 39.88 &lt;2e-16 *** #&gt; endogenous_nonlinear 3.01737 0.01099 274.64 &lt;2e-16 *** #&gt; residual 0.24919 0.01104 22.58 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 2.262 on 9997 degrees of freedom #&gt; Multiple R-squared: 0.9989, Adjusted R-squared: 0.9989 #&gt; F-statistic: 4.753e+06 on 2 and 9997 DF, p-value: &lt; 2.2e-16 modelsummary(list(second_stage, second_stage_cf))  (1)   (2) (Intercept) 15.339 15.339 (11.817) (0.385) new_endogenous_nonlinear 3.017 (0.338) endogenous_nonlinear 3.017 (0.011) residual 0.249 (0.011) Num.Obs. 10000 10000 R2 0.008 0.999 R2 Adj. 0.008 0.999 AIC 113211.6 44709.6 BIC 113233.2 44738.4 Log.Lik. −56602.782 −22350.801 F 79.887 4752573.052 RMSE 69.50 2.26 Nonlinear in parameters # 2SLS first_stage = lm(endogenous ~ exogenous, data = my_data) new_data = cbind(my_data, new_endogenous = predict(first_stage, my_data)) second_stage = lm(response_nonlinear_para ~ new_endogenous, data = new_data) summary(second_stage) #&gt; #&gt; Call: #&gt; lm(formula = response_nonlinear_para ~ new_endogenous, data = new_data) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -1536.5 -452.4 -80.7 368.4 3780.9 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) -1089.943 61.706 -17.66 &lt;2e-16 *** #&gt; new_endogenous 119.829 3.078 38.93 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 630.2 on 9998 degrees of freedom #&gt; Multiple R-squared: 0.1316, Adjusted R-squared: 0.1316 #&gt; F-statistic: 1516 on 1 and 9998 DF, p-value: &lt; 2.2e-16 new_data_cf = cbind(my_data, residual = resid(first_stage)) second_stage_cf = lm(response_nonlinear_para ~ endogenous_nonlinear + residual, data = new_data_cf) summary(second_stage_cf) #&gt; #&gt; Call: #&gt; lm(formula = response_nonlinear_para ~ endogenous_nonlinear + #&gt; residual, data = new_data_cf) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -961.00 -139.32 -16.02 135.57 1403.62 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 678.1593 9.9177 68.38 &lt;2e-16 *** #&gt; endogenous_nonlinear 17.7884 0.2759 64.46 &lt;2e-16 *** #&gt; residual 52.5016 1.1552 45.45 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 231.9 on 9997 degrees of freedom #&gt; Multiple R-squared: 0.8824, Adjusted R-squared: 0.8824 #&gt; F-statistic: 3.751e+04 on 2 and 9997 DF, p-value: &lt; 2.2e-16 modelsummary(list(second_stage, second_stage_cf))  (1)   (2) (Intercept) −1089.943 678.159 (61.706) (9.918) new_endogenous 119.829 (3.078) endogenous_nonlinear 17.788 (0.276) residual 52.502 (1.155) Num.Obs. 10000 10000 R2 0.132 0.882 R2 Adj. 0.132 0.882 AIC 157302.4 137311.3 BIC 157324.1 137340.1 Log.Lik. −78648.225 −68651.628 F 1515.642 37505.777 RMSE 630.10 231.88 References "],["new-advances.html", "30.8 New Advances", " 30.8 New Advances Combine ML and IV (Singh, Hosanagar, and Gandhi 2020) References "],["matching-methods.html", "Chapter 31 Matching Methods", " Chapter 31 Matching Methods Matching is a process that aims to close back doors - potential sources of bias - by constructing comparison groups that are similar according to a set of matching variables. This helps to ensure that any observed differences in outcomes between the treatment and comparison groups can be more confidently attributed to the treatment itself, rather than other factors that may differ between the groups. Matching and DiD can use pre-treatment outcomes to correct for selection bias. From real world data and simulation, (Chabé-Ferret 2015) found that matching generally underestimates the average causal effect and gets closer to the true effect with more number of pre-treatment outcomes. When selection bias is symmetric around the treatment date, DID is still consistent when implemented symmetrically (i.e., the same number of period before and after treatment). In cases where selection bias is asymmetric, the MC simulations show that Symmetric DID still performs better than Matching. Matching is useful, but not a general solution to causal problems (J. A. Smith and Todd 2005) Assumption: Observables can identify the selection into the treatment and control groups Identification: The exclusion restriction can be met conditional on the observables Motivation Effect of college quality on earnings They ultimately estimate the treatment effect on the treated of attending a top (high ACT) versus bottom (low ACT) quartile college Example Aaronson, Barrow, and Sander (2007) Do teachers qualifications (causally) affect student test scores? Step 1: \\[ Y_{ijt} = \\delta_0 + Y_{ij(t-1)} \\delta_1 + X_{it} \\delta_2 + Z_{jt} \\delta_3 + \\epsilon_{ijt} \\] There can always be another variable Any observable sorting is imperfect Step 2: \\[ Y_{ijst} = \\alpha_0 + Y_{ij(t-1)}\\alpha_1 + X_{it} \\alpha_2 + Z_{jt} \\alpha_3 + \\gamma_s + u_{isjt} \\] \\(\\delta_3 &gt;0\\) \\(\\delta_3 &gt; \\alpha_3\\) \\(\\gamma_s\\) = school fixed effect Sorting is less within school. Hence, we can introduce the school fixed effect Step 3: Find schools that look like they are putting students in class randomly (or as good as random) + we run step 2 \\[ \\begin{aligned} Y_{isjt} = Y_{isj(t-1)} \\lambda &amp;+ X_{it} \\alpha_1 +Z_{jt} \\alpha_{21} \\\\ &amp;+ (Z_{jt} \\times D_i)\\alpha_{22}+ \\gamma_5 + u_{isjt} \\end{aligned} \\] \\(D_{it}\\) is an element of \\(X_{it}\\) \\(Z_{it}\\) = teacher experience \\[ D_{it}= \\begin{cases} 1 &amp; \\text{ if high poverty} \\\\ 0 &amp; \\text{otherwise} \\end{cases} \\] \\(H_0:\\) \\(\\alpha_{22} = 0\\) test for effect heterogeneity whether the effect of teacher experience (\\(Z_{jt}\\)) is different For low poverty is \\(\\alpha_{21}\\) For high poverty effect is \\(\\alpha_{21} + \\alpha_{22}\\) Matching is selection on observables and only works if you have good observables. Sufficient identification assumption under Selection on observable/ back-door criterion (based on Bernard Koch’s presentation) Strong conditional ignorability \\(Y(0),Y(1) \\perp T|X\\) No hidden confounders Overlap \\(\\forall x \\in X, t \\in \\{0, 1\\}: p (T = t | X = x&gt; 0\\) All treatments have non-zero probability of being observed SUTVA/ Consistency Treatment and outcomes of different subjects are independent Relative to OLS Matching makes the common support explicit (and changes default from “ignore” to “enforce”) Relaxes linear function form. Thus, less parametric. It also helps if you have high ratio of controls to treatments. For detail summary (Stuart 2010) Matching is defined as “any method that aims to equate (or”balance”) the distribution of covariates in the treated and control groups.” (Stuart 2010, 1) Equivalently, matching is a selection on observables identifications strategy. If you think your OLS estimate is biased, a matching estimate (almost surely) is too. Unconditionally, consider \\[ \\begin{aligned} E(Y_i^T | T) - E(Y_i^C |C) &amp;+ E(Y_i^C | T) - E(Y_i^C | T) \\\\ = E(Y_i^T - Y_i^C | T) &amp;+ [E(Y_i^C | T) - E(Y_i^C |C)] \\\\ = E(Y_i^T - Y_i^C | T) &amp;+ \\text{selection bias} \\end{aligned} \\] where \\(E(Y_i^T - Y_i^C | T)\\) is the causal inference that we want to know. Randomization eliminates the selection bias. If we don’t have randomization, then \\(E(Y_i^C | T) \\neq E(Y_i^C |C)\\) Matching tries to do selection on observables \\(E(Y_i^C | X, T) = E(Y_i^C|X, C)\\) Propensity Scores basically do \\(E(Y_i^C| P(X) , T) = E(Y_i^C | P(X), C)\\) Matching standard errors will exceed OLS standard errors The treatment should have larger predictive power than the control because you use treatment to pick control (not control to pick treatment). The average treatment effect (ATE) is \\[ \\frac{1}{N_T} \\sum_{i=1}^{N_T} (Y_i^T - \\frac{1}{N_{C_T}} \\sum_{i=1}^{N_{C_T}} Y_i^C) \\] Since there is no closed-form solution for the standard error of the average treatment effect, we have to use bootstrapping to get standard error. Professor Gary King advocates instead of using the word “matching”, we should use “pruning” (i.e., deleting observations). It is a preprocessing step where it prunes nonmatches to make control variables less important in your analysis. Without Matching Imbalance data leads to model dependence lead to a lot of researcher discretion leads to bias With Matching We have balance data which essentially erase human discretion Table @ref(tab:Gary King - International Methods Colloquium talk 2015) Balance Covariates Complete Randomization Fully Exact Observed On average Exact Unobserved On average On average Fully blocked is superior on imbalance model dependence power efficiency bias research costs robustness Matching is used when Outcomes are not available to select subjects for follow-up Outcomes are available to improve precision of the estimate (i.e., reduce bias) Hence, we can only observe one outcome of a unit (either treated or control), we can think of this problem as missing data as well. Thus, this section is closely related to Imputation (Missing Data) In observational studies, we cannot randomize the treatment effect. Subjects select their own treatments, which could introduce selection bias (i.e., systematic differences between group differences that confound the effects of response variable differences). Matching is used to reduce model dependence diagnose balance in the dataset Assumptions of matching: treatment assignment is independent of potential outcomes given the covariates \\(T \\perp (Y(0),Y(1))|X\\) known as ignorability, or ignorable, no hidden bias, or unconfounded. You typically satisfy this assumption when unobserved covariates correlated with observed covariates. But when unobserved covariates are unrelated to the observed covariates, you can use sensitivity analysis to check your result, or use “design sensitivity” (Heller, Rosenbaum, and Small 2009) positive probability of receiving treatment for all X \\(0 &lt; P(T=1|X)&lt;1 \\forall X\\) Stable Unit Treatment value Assumption (SUTVA) Outcomes of A are not affected by treatment of B. Very hard in cases where there is “spillover” effects (interactions between control and treatment). To combat, we need to reduce interactions. Generalization \\(P_t\\): treated population -&gt; \\(N_t\\): random sample from treated \\(P_c\\): control population -&gt; \\(N_c\\): random sample from control \\(\\mu_i\\) = means ; \\(\\Sigma_i\\) = variance covariance matrix of the \\(p\\) covariates in group i (\\(i = t,c\\)) \\(X_j\\) = \\(p\\) covariates of individual \\(j\\) \\(T_j\\) = treatment assignment \\(Y_j\\) = observed outcome Assume: \\(N_t &lt; N_c\\) Treatment effect is \\(\\tau(x) = R_1(x) - R_0(x)\\) where \\(R_1(x) = E(Y(1)|X)\\) \\(R_0(x) = E(Y(0)|X)\\) Assume: parallel trends hence \\(\\tau(x) = \\tau \\forall x\\) If the parallel trends are not assumed, an average effect can be estimated. Common estimands: Average effect of the treatment on the treated (ATT): effects on treatment group Average treatment effect (ATE): effect on both treatment and control Steps: Define “closeness”: decide distance measure to be used Which variables to include: Ignorability (no unobserved differences between treatment and control) Since cost of including unrelated variables is small, you should include as many as possible (unless sample size/power doesn’t allow you to because of increased variance) Do not include variables that were affected by the treatment. Note: if a matching variable (i.e., heavy drug users) is highly correlated to the outcome variable (i.e., heavy drinkers) , you will be better to exclude it in the matching set. Which distance measures: more below Matching methods Nearest neighbor matching Simple (greedy) matching: performs poorly when there is competition for controls. Optimal matching: considers global distance measure Ratio matching: to combat increase bias and reduced variation when you have k:1 matching, one can use approximations by Rubin and Thomas (1996). With or without replacement: with replacement is typically better, but one needs to account for dependent in the matched sample when doing later analysis (can use frequency weights to combat). Subclassification, Full Matching and Weighting Nearest neighbor matching assign is 0 (control) or 1 (treated), while these methods use weights between 0 and 1. Subclassification: distribution into multiple subclass (e.g., 5-10) Full matching: optimal ly minimize the average of the distances between each treated unit and each control unit within each matched set. Weighting adjustments: weighting technique uses propensity scores to estimate ATE. If the weights are extreme, the variance can be large not due to the underlying probabilities, but due to the estimation procure. To combat this, use (1) weight trimming, or (2) doubly -robust methods when propensity scores are used for weighing or matching. Inverse probability of treatment weighting (IPTW) \\(w_i = \\frac{T_i}{\\hat{e}_i} + \\frac{1 - T_i}{1 - \\hat{e}_i}\\) Odds \\(w_i = T_i + (1-T_i) \\frac{\\hat{e}_i}{1-\\hat{e}_i}\\) Kernel weighting (e.g., in economics) averages over multiple units in the control group. Assessing Common Support common support means overlapping of the propensity score distributions in the treatment and control groups. Propensity score is used to discard control units from the common support. Alternatively, convex hull of the covariates in the multi-dimensional space. Assessing the quality of matched samples (Diagnose) Balance = similarity of the empirical distribution of the full set of covariates in the matched treated and control groups. Equivalently, treatment is unrelated to the covariates \\(\\tilde{p}(X|T=1) = \\tilde{p}(X|T=0)\\) where \\(\\tilde{p}\\) is the empirical distribution. Numerical Diagnostics standardized difference in means of each covariate (most common), also known as”standardized bias”, “standardized difference in means”. standardized difference of means of the propensity score (should be &lt; 0.25) (Rubin 2001) ratio of the variances of the propensity score in the treated and control groups (should be between 0.5 and 2). (Rubin 2001) For each covariate, the ratio fo the variance of the residuals orthogonal to the propensity score in the treated and control groups. Note: can’t use hypothesis tests or p-values because of (1) in-sample property (not population), (2) conflation of changes in balance with changes in statistical power. Graphical Diagnostics QQ plots Empirical Distribution Plot Estimate the treatment effect After k:1 Need to account for weights when use matching with replacement. After Subclassification and Full Matching Weighting the subclass estimates by the number of treated units in each subclass for ATT Weighting by the overall number of individual in each subclass for ATE. Variance estimation: should incorporate uncertainties in both the matching procedure (step 3) and the estimation procedure (step 4) Notes: With missing data, use generalized boosted models, or multiple imputation (Qu and Lipkovich 2009) Violation of ignorable treatment assignment (i.e., unobservables affect treatment and outcome). control by measure pre-treatment measure of the outcome variable find the difference in outcomes between multiple control groups. If there is a significant difference, there is evidence for violation. find the range of correlations between unobservables and both treatment assignment and outcome to nullify the significant effect. Choosing between methods smallest standardized difference of mean across the largest number of covariates minimize the standardized difference of means of a few particularly prognostic covariates fest number of large standardized difference of means (&gt; 0.25) (Diamond and Sekhon 2013) automates the process In practice If ATE, ask if there is enough overlap of the treated and control groups’ propensity score to estimate ATE, if not use ATT instead If ATT, ask if there are controls across the full range of the treated group Choose matching method If ATE, use IPTW or full matching If ATT, and more controls than treated (at least 3 times), k:1 nearest neighbor without replacement If ATT, and few controls , use subclassification, full matching, and weighting by the odds Diagnostic If balance, use regression on matched samples If imbalance on few covariates, treat them with Mahalanobis If imbalance on many covariates, try k:1 matching with replacement Ways to define the distance \\(D_{ij}\\) Exact \\[ D_{ij} = \\begin{cases} 0, \\text{ if } X_i = X_j, \\\\ \\infty, \\text{ if } X_i \\neq X_j \\end{cases} \\] An advanced is Coarsened Exact Matching Mahalanobis \\[ D_{ij} = (X_i - X_j)&#39;\\Sigma^{-1} (X_i - X_j) \\] where \\(\\Sigma\\) = variance covariance matrix of X in the control group if ATT is interested polled treatment and control groups if ATE is interested Propensity score: \\[ D_{ij} = |e_i - e_j| \\] where \\(e_k\\) = the propensity score for individual k An advanced is Prognosis score (B. B. Hansen 2008), but you have to know (i.e., specify) the relationship between the covariates and outcome. Linear propensity score \\[ D_{ij} = |logit(e_i) - logit(e_j)| \\] The exact and Mahalanobis are not good in high dimensional or non normally distributed X’s cases. We can combine Mahalanobis matching with propensity score calipers (Rubin and Thomas 2000) Other advanced methods for longitudinal settings marginal structural models (Robins, Hernan, and Brumback 2000) balanced risk set matching (Y. P. Li, Propert, and Rosenbaum 2001) Most matching methods are based on (ex-post) propensity score distance metric covariates Packages cem Coarsened exact matching Matching Multivariate and propensity score matching with balance optimization MatchIt Nonparametric preprocessing for parametric causal inference. Have nearest neighbor, Mahalanobis, caliper, exact, full, optimal, subclassification MatchingFrontier optimize balance and sample size (G. King, Lucas, and Nielsen 2017) optmatchoptimal matching with variable ratio, optimal and full matching PSAgraphics Propensity score graphics rbounds sensitivity analysis with matched data, examine ignorable treatment assignment assumption twang weighting and analysis of non-equivalent groups CBPS covariate balancing propensity score. Can also be used in the longitudinal setting with marginal structural models. PanelMatch based on Imai, Kim, and Wang (2018) Matching Regression Not as sensitive to the functional form of the covariates can estimate the effect of a continuous treatment Easier to asses whether it’s working Easier to explain allows a nice visualization of an evaluation estimate the effect of all the variables (not just the treatment) If you treatment is fairly rare, you may have a lot of control observations that are obviously no comparable can estimate interactions of treatment with covariates Less parametric More parametric Enforces common support (i.e., space where treatment and control have the same characteristics) However, the problem of omitted variables (i.e., those that affect both the outcome and whether observation was treated) - unobserved confounders is still present in matching methods. Difference between matching and regression following Pischke’s lecture Suppose we want to estimate the effect of treatment on the treated \\[ \\begin{aligned} \\delta_{TOT} &amp;= E[ Y_{1i} - Y_{0i} | D_i = 1 ] \\\\ &amp;= E\\{E[Y_{1i} | X_i, D_i = 1] \\\\ &amp; - E[Y_{0i}|X_i, D_i = 1]|D_i = 1\\} &amp;&amp; \\text{law of itereated expectations} \\end{aligned} \\] Under conditional independence \\[ E[Y_{0i} |X_i , D_i = 0 ] = E[Y_{0i} | X_i, D_i = 1] \\] then \\[ \\begin{aligned} \\delta_{TOT} &amp;= E \\{ E[ Y_{1i} | X_i, D_i = 1] - E[ Y_{0i}|X_i, D_i = 0 ]|D_i = 1\\} \\\\ &amp;= E\\{E[y_i | X_i, D_i = 1] - E[y_i |X_i, D_i = 0 ] | D_i = 1\\} \\\\ &amp;= E[\\delta_X |D_i = 1] \\end{aligned} \\] where \\(\\delta_X\\) is an X-specific difference in means at covariate value \\(X_i\\) When \\(X_i\\) is discrete, the matching estimand is \\[ \\delta_M = \\sum_x \\delta_x P(X_i = x |D_i = 1) \\] where \\(P(X_i = x |D_i = 1)\\) is the probability mass function for \\(X_i\\) given \\(D_i = 1\\) According to Bayes rule, \\[ P(X_i = x | D_i = 1) = \\frac{P(D_i = 1 | X_i = x) \\times P(X_i = x)}{P(D_i = 1)} \\] hence, \\[ \\begin{aligned} \\delta_M &amp;= \\frac{\\sum_x \\delta_x P (D_i = 1 | X_i = x) P (X_i = x)}{\\sum_x P(D_i = 1 |X_i = x)P(X_i = x)} \\\\ &amp;= \\sum_x \\delta_x \\frac{ P (D_i = 1 | X_i = x) P (X_i = x)}{\\sum_x P(D_i = 1 |X_i = x)P(X_i = x)} \\end{aligned} \\] On the other hand, suppose we have regression \\[ y_i = \\sum_x d_{ix} \\beta_x + \\delta_R D_i + \\epsilon_i \\] where \\(d_{ix}\\) = dummy that indicates \\(X_i = x\\) \\(\\beta_x\\) = regression-effect for \\(X_i = x\\) \\(\\delta_R\\) = regression estimand where \\[ \\begin{aligned} \\delta_R &amp;= \\frac{\\sum_x \\delta_x [P(D_i = 1 | X_i = x) (1 - P(D_i = 1 | X_i = x))]P(X_i = x)}{\\sum_x [P(D_i = 1| X_i = x)(1 - P(D_i = 1 | X_i = x))]P(X_i = x)} \\\\ &amp;= \\sum_x \\delta_x \\frac{[P(D_i = 1 | X_i = x) (1 - P(D_i = 1 | X_i = x))]P(X_i = x)}{\\sum_x [P(D_i = 1| X_i = x)(1 - P(D_i = 1 | X_i = x))]P(X_i = x)} \\end{aligned} \\] the difference between the regression and matching estimand is the weights they use to combine the covariate specific treatment effect \\(\\delta_x\\) Type uses weights which depend on interpretation makes sense because Matching \\(P(D_i = 1|X_i = x)\\) the fraction of treated observations in a covariate cell (i.e., or the mean of \\(D_i\\)) This is larger in cells with many treated observations. we want the effect of treatment on the treated Regression \\(P(D_i = 1 |X_i = x)(1 - P(D_i = 1| X_i ))\\) the variance of \\(D_i\\) in the covariate cell This weight is largest in cells where there are half treated and half untreated observations. (this is the reason why we want to treat our sample so it is balanced, before running regular regression model, as mentioned above). these cells will produce the lowest variance estimates of \\(\\delta_x\\). If all the \\(\\delta_x\\) are the same, the most efficient estimand uses the lowest variance cells most heavily. The goal of matching is to produce covariate balance (i.e., distributions of covariates in treatment and control groups are approximately similar as they would be in a successful randomized experiment). References "],["selection-on-observables.html", "31.1 Selection on Observables", " 31.1 Selection on Observables 31.1.1 MatchIt Procedure typically involves (proposed by Noah Freifer using MatchIt) planning matching checking (balance) estimating the treatment effect library(MatchIt) data(&quot;lalonde&quot;) examine treat on re78 Planning select type of effect to be estimated (e.g., mediation effect, conditional effect, marginal effect) select the target population select variables to match/balance (Austin 2011) (T. J. VanderWeele 2019) Check Initial Imbalance # No matching; constructing a pre-match matchit object m.out0 &lt;- matchit( formula(treat ~ age + educ + race + married + nodegree + re74 + re75, env = lalonde), data = data.frame(lalonde), method = NULL, # assess balance before matching distance = &quot;glm&quot; # logistic regression ) # Checking balance prior to matching summary(m.out0) Matching # 1:1 NN PS matching w/o replacement m.out1 &lt;- matchit(treat ~ age + educ, data = lalonde, method = &quot;nearest&quot;, distance = &quot;glm&quot;) m.out1 #&gt; A matchit object #&gt; - method: 1:1 nearest neighbor matching without replacement #&gt; - distance: Propensity score #&gt; - estimated with logistic regression #&gt; - number of obs.: 614 (original), 370 (matched) #&gt; - target estimand: ATT #&gt; - covariates: age, educ Check balance Sometimes you have to make trade-off between balance and sample size. # Checking balance after NN matching summary(m.out1, un = FALSE) #&gt; #&gt; Call: #&gt; matchit(formula = treat ~ age + educ, data = lalonde, method = &quot;nearest&quot;, #&gt; distance = &quot;glm&quot;) #&gt; #&gt; Summary of Balance for Matched Data: #&gt; Means Treated Means Control Std. Mean Diff. Var. Ratio eCDF Mean #&gt; distance 0.3080 0.3077 0.0094 0.9963 0.0033 #&gt; age 25.8162 25.8649 -0.0068 1.0300 0.0050 #&gt; educ 10.3459 10.2865 0.0296 0.5886 0.0253 #&gt; eCDF Max Std. Pair Dist. #&gt; distance 0.0432 0.0146 #&gt; age 0.0162 0.0597 #&gt; educ 0.1189 0.8146 #&gt; #&gt; Sample Sizes: #&gt; Control Treated #&gt; All 429 185 #&gt; Matched 185 185 #&gt; Unmatched 244 0 #&gt; Discarded 0 0 # examine visually plot(m.out1, type = &quot;jitter&quot;, interactive = FALSE) plot( m.out1, type = &quot;qq&quot;, interactive = FALSE, which.xs = c(&quot;age&quot;) ) Try Full Match (i.e., every treated matches with one control, and every control with one treated). # Full matching on a probit PS m.out2 &lt;- matchit(treat ~ age + educ, data = lalonde, method = &quot;full&quot;, distance = &quot;glm&quot;, link = &quot;probit&quot;) m.out2 #&gt; A matchit object #&gt; - method: Optimal full matching #&gt; - distance: Propensity score #&gt; - estimated with probit regression #&gt; - number of obs.: 614 (original), 614 (matched) #&gt; - target estimand: ATT #&gt; - covariates: age, educ Checking balance again # Checking balance after full matching summary(m.out2, un = FALSE) #&gt; #&gt; Call: #&gt; matchit(formula = treat ~ age + educ, data = lalonde, method = &quot;full&quot;, #&gt; distance = &quot;glm&quot;, link = &quot;probit&quot;) #&gt; #&gt; Summary of Balance for Matched Data: #&gt; Means Treated Means Control Std. Mean Diff. Var. Ratio eCDF Mean #&gt; distance 0.3082 0.3081 0.0023 0.9815 0.0028 #&gt; age 25.8162 25.8035 0.0018 0.9825 0.0062 #&gt; educ 10.3459 10.2315 0.0569 0.4390 0.0481 #&gt; eCDF Max Std. Pair Dist. #&gt; distance 0.0270 0.0382 #&gt; age 0.0249 0.1110 #&gt; educ 0.1300 0.9805 #&gt; #&gt; Sample Sizes: #&gt; Control Treated #&gt; All 429. 185 #&gt; Matched (ESS) 145.23 185 #&gt; Matched 429. 185 #&gt; Unmatched 0. 0 #&gt; Discarded 0. 0 plot(summary(m.out2)) Exact Matching # Full matching on a probit PS m.out3 &lt;- matchit( treat ~ age + educ, data = lalonde, method = &quot;exact&quot; ) m.out3 #&gt; A matchit object #&gt; - method: Exact matching #&gt; - number of obs.: 614 (original), 332 (matched) #&gt; - target estimand: ATT #&gt; - covariates: age, educ Subclassfication m.out4 &lt;- matchit( treat ~ age + educ, data = lalonde, method = &quot;subclass&quot; ) m.out4 #&gt; A matchit object #&gt; - method: Subclassification (6 subclasses) #&gt; - distance: Propensity score #&gt; - estimated with logistic regression #&gt; - number of obs.: 614 (original), 614 (matched) #&gt; - target estimand: ATT #&gt; - covariates: age, educ # Or you can use in conjunction with &quot;nearest&quot; m.out4 &lt;- matchit( treat ~ age + educ, data = lalonde, method = &quot;nearest&quot;, option = &quot;subclass&quot; ) m.out4 #&gt; A matchit object #&gt; - method: 1:1 nearest neighbor matching without replacement #&gt; - distance: Propensity score #&gt; - estimated with logistic regression #&gt; - number of obs.: 614 (original), 370 (matched) #&gt; - target estimand: ATT #&gt; - covariates: age, educ Optimal Matching m.out5 &lt;- matchit( treat ~ age + educ, data = lalonde, method = &quot;optimal&quot;, ratio = 2 ) m.out5 #&gt; A matchit object #&gt; - method: 2:1 optimal pair matching #&gt; - distance: Propensity score #&gt; - estimated with logistic regression #&gt; - number of obs.: 614 (original), 555 (matched) #&gt; - target estimand: ATT #&gt; - covariates: age, educ Genetic Matching m.out6 &lt;- matchit( treat ~ age + educ, data = lalonde, method = &quot;genetic&quot; ) m.out6 #&gt; A matchit object #&gt; - method: 1:1 genetic matching without replacement #&gt; - distance: Propensity score #&gt; - estimated with logistic regression #&gt; - number of obs.: 614 (original), 370 (matched) #&gt; - target estimand: ATT #&gt; - covariates: age, educ Estimating the Treatment Effect # get matched data m.data1 &lt;- match.data(m.out1) head(m.data1) #&gt; treat age educ race married nodegree re74 re75 re78 distance #&gt; NSW1 1 37 11 black 1 1 0 0 9930.0460 0.2536942 #&gt; NSW2 1 22 9 hispan 0 1 0 0 3595.8940 0.3245468 #&gt; NSW3 1 30 12 black 0 0 0 0 24909.4500 0.2881139 #&gt; NSW4 1 27 11 black 0 1 0 0 7506.1460 0.3016672 #&gt; NSW5 1 33 8 black 0 1 0 0 289.7899 0.2683025 #&gt; NSW6 1 22 9 black 0 1 0 0 4056.4940 0.3245468 #&gt; weights subclass #&gt; NSW1 1 1 #&gt; NSW2 1 98 #&gt; NSW3 1 109 #&gt; NSW4 1 120 #&gt; NSW5 1 131 #&gt; NSW6 1 142 library(&quot;lmtest&quot;) #coeftest library(&quot;sandwich&quot;) #vcovCL # imbalance matched dataset fit1 &lt;- lm(re78 ~ treat + age + educ , data = m.data1, weights = weights) coeftest(fit1, vcov. = vcovCL, cluster = ~subclass) #&gt; #&gt; t test of coefficients: #&gt; #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) -174.902 2445.013 -0.0715 0.943012 #&gt; treat -1139.085 780.399 -1.4596 0.145253 #&gt; age 153.133 55.317 2.7683 0.005922 ** #&gt; educ 358.577 163.860 2.1883 0.029278 * #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 treat coefficient = estimated ATT # balance matched dataset m.data2 &lt;- match.data(m.out2) fit2 &lt;- lm(re78 ~ treat + age + educ , data = m.data2, weights = weights) coeftest(fit2, vcov. = vcovCL, cluster = ~subclass) #&gt; #&gt; t test of coefficients: #&gt; #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 2151.952 3141.152 0.6851 0.49355 #&gt; treat -725.184 703.297 -1.0311 0.30289 #&gt; age 120.260 53.933 2.2298 0.02612 * #&gt; educ 175.693 241.694 0.7269 0.46755 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 When reporting, remember to mention the matching specification (method, and additional options) the distance measure (e.g., propensity score) other methods, and rationale for the final chosen method. balance statistics of the matched dataset. number of matched, unmatched, discarded estimation method for treatment effect. 31.1.2 designmatch This package includes distmatch optimal distance matching bmatch optimal bipartile matching cardmatch optimal cardinality matching profmatch optimal profile matching nmatch optimal nonbipartile matching library(designmatch) 31.1.3 MatchingFrontier As mentioned in MatchIt, you have to make trade-off (also known as bias-variance trade-off) between balance and sample size. An automated procedure to optimize this trade-off is implemented in MatchingFrontier (G. King, Lucas, and Nielsen 2017), which solves this joint optimization problem. Following MatchingFrontier guide # library(devtools) # install_github(&#39;ChristopherLucas/MatchingFrontier&#39;) library(MatchingFrontier) data(&quot;lalonde&quot;) # choose var to match on match.on &lt;- colnames(lalonde)[!(colnames(lalonde) %in% c(&#39;re78&#39;, &#39;treat&#39;))] match.on # Mahanlanobis frontier (default) mahal.frontier &lt;- makeFrontier( dataset = lalonde, treatment = &quot;treat&quot;, match.on = match.on ) mahal.frontier # L1 frontier L1.frontier &lt;- makeFrontier( dataset = lalonde, treatment = &#39;treat&#39;, match.on = match.on, QOI = &#39;SATT&#39;, metric = &#39;L1&#39;, ratio = &#39;fixed&#39; ) L1.frontier # estimate effects along the frontier # Set base form my.form &lt;- as.formula(re78 ~ treat + age + black + education + hispanic + married + nodegree + re74 + re75) # Estimate effects for the mahalanobis frontier mahal.estimates &lt;- estimateEffects( mahal.frontier, &#39;re78 ~ treat&#39;, mod.dependence.formula = my.form, continuous.vars = c(&#39;age&#39;, &#39;education&#39;, &#39;re74&#39;, &#39;re75&#39;), prop.estimated = .1, means.as.cutpoints = TRUE ) # Estimate effects for the L1 frontier L1.estimates &lt;- estimateEffects( L1.frontier, &#39;re78 ~ treat&#39;, mod.dependence.formula = my.form, continuous.vars = c(&#39;age&#39;, &#39;education&#39;, &#39;re74&#39;, &#39;re75&#39;), prop.estimated = .1, means.as.cutpoints = TRUE ) # Plot covariates means # plotPrunedMeans() # Plot estimates (deprecated) # plotEstimates( # L1.estimates, # ylim = c(-10000, 3000), # cex.lab = 1.4, # cex.axis = 1.4, # panel.first = grid(NULL, NULL, lwd = 2,) # ) # Plot estimates plotMeans(L1.frontier) # parallel plot parallelPlot( L1.frontier, N = 400, variables = c(&#39;age&#39;, &#39;re74&#39;, &#39;re75&#39;, &#39;black&#39;), treated.col = &#39;blue&#39;, control.col = &#39;gray&#39; ) # export matched dataset # take 400 units matched.data &lt;- generateDataset(L1.frontier, N = 400) 31.1.4 Propensity Scores Even though I mention the propensity scores matching method here, it is no longer recommended to use such method in research and publication (G. King and Nielsen 2019) because it increases imbalance inefficiency model dependence: small changes in the model specification lead to big changes in model results bias (Abadie and Imbens 2016)note The initial estimation of the propensity score influences the large sample distribution of the estimators. Adjustments are made to the large sample variances of these estimators for both ATE and ATT. The adjustment for the ATE estimator is either negative or zero, indicating greater efficiency when matching on an estimated propensity score versus the true score in large samples. For the ATET estimator, the sign of the adjustment depends on the data generating process. Neglecting the estimation error in the propensity score can lead to inaccurate confidence intervals for the ATT estimator, making them either too large or too small. PSM tries to accomplish complete randomization while other methods try to achieve fully blocked. Hence, you probably better off use any other methods. Propensity is “the probability of receiving the treatment given the observed covariates.” (Rosenbaum and Rubin 1985) Equivalently, it can to understood as the probability of being treated. \\[ e_i (X_i) = P(T_i = 1 | X_i) \\] Estimation using logistic regression Non parametric methods: boosted CART generalized boosted models (gbm) Steps by Gary King’s slides reduce k elements of X to scalar \\(\\pi_i \\equiv P(T_i = 1|X) = \\frac{1}{1+e^{X_i \\beta}}\\) Distance (\\(X_c, X_t\\)) = \\(|\\pi_c - \\pi_t|\\) match each treated unit to the nearest control unit control units: not reused; pruned if unused prune matches if distances &gt; caliper In the best case scenario, you randomly prune, which increases imbalance Other methods dominate because they try to match exactly hence \\(X_c = X_t \\to \\pi_c = \\pi_t\\) (exact match leads to equal propensity scores) but \\(\\pi_c = \\pi_t \\nrightarrow X_c = X_t\\) (equal propensity scores do not necessarily lead to exact match) Notes: Do not include/control for irrelevant covariates because it leads your PSM to be more random, hence more imbalance Do not include for (Bhattacharya and Vogt 2007) instrumental variable in the predictor set of a propensity score matching estimator. More generally, using variables that do not control for potential confounders, even if they are predictive of the treatment, can result in biased estimates What you left with after pruning is more important than what you start with then throw out. Diagnostics: balance of the covariates no need to concern about collinearity can’t use c-stat or stepwise because those model fit stat do not apply 31.1.4.1 Look Ahead Propensity Score Matching (Bapna, Ramaprasad, and Umyarov 2018) 31.1.5 Mahalanobis Distance Approximates fully blocked experiment Distance \\((X_c,X_t)\\) = \\(\\sqrt{(X_c - X_t)&#39;S^{-1}(X_c - X_t)}\\) where \\(S^{-1}\\) standardize the distance In application we use Euclidean distance. Prune unused control units, and prune matches if distance &gt; caliper 31.1.6 Coarsened Exact Matching Steps from Gray King’s slides International Methods Colloquium talk 2015 Temporarily coarsen \\(X\\) Apply exact matching to the coarsened \\(X, C(X)\\) sort observation into strata, each with unique values of \\(C(X)\\) prune stratum with 0 treated or 0 control units Pass on original (uncoarsened) units except those pruned Properties: Monotonic imbalance bounding (MIB) matching method maximum imbalance between the treated and control chosen ex ante meets congruence principle robust to measurement error can be implemented with multiple imputation works well for multi-category treatments Assumptions: Ignorability (i.e., no omitted variable bias) More detail in (Iacus, King, and Porro 2012) Example by package’s authors library(cem) data(LeLonde) Le &lt;- data.frame(na.omit(LeLonde)) # remove missing data # treated and control groups tr &lt;- which(Le$treated==1) ct &lt;- which(Le$treated==0) ntr &lt;- length(tr) nct &lt;- length(ct) # unadjusted, biased difference in means mean(Le$re78[tr]) - mean(Le$re78[ct]) #&gt; [1] 759.0479 # pre-treatment covariates vars &lt;- c( &quot;age&quot;, &quot;education&quot;, &quot;black&quot;, &quot;married&quot;, &quot;nodegree&quot;, &quot;re74&quot;, &quot;re75&quot;, &quot;hispanic&quot;, &quot;u74&quot;, &quot;u75&quot;, &quot;q1&quot; ) # overall imbalance statistics imbalance(group=Le$treated, data=Le[vars]) # L1 = 0.902 #&gt; #&gt; Multivariate Imbalance Measure: L1=0.902 #&gt; Percentage of local common support: LCS=5.8% #&gt; #&gt; Univariate Imbalance Measures: #&gt; #&gt; statistic type L1 min 25% 50% 75% #&gt; age -0.252373042 (diff) 5.102041e-03 0 0 0.0000 -1.0000 #&gt; education 0.153634710 (diff) 8.463851e-02 1 0 1.0000 1.0000 #&gt; black -0.010322734 (diff) 1.032273e-02 0 0 0.0000 0.0000 #&gt; married -0.009551495 (diff) 9.551495e-03 0 0 0.0000 0.0000 #&gt; nodegree -0.081217371 (diff) 8.121737e-02 0 -1 0.0000 0.0000 #&gt; re74 -18.160446880 (diff) 5.551115e-17 0 0 284.0715 806.3452 #&gt; re75 101.501761679 (diff) 5.551115e-17 0 0 485.6310 1238.4114 #&gt; hispanic -0.010144756 (diff) 1.014476e-02 0 0 0.0000 0.0000 #&gt; u74 -0.045582186 (diff) 4.558219e-02 0 0 0.0000 0.0000 #&gt; u75 -0.065555292 (diff) 6.555529e-02 0 0 0.0000 0.0000 #&gt; q1 7.494021189 (Chi2) 1.067078e-01 NA NA NA NA #&gt; max #&gt; age -6.0000 #&gt; education 1.0000 #&gt; black 0.0000 #&gt; married 0.0000 #&gt; nodegree 0.0000 #&gt; re74 -2139.0195 #&gt; re75 490.3945 #&gt; hispanic 0.0000 #&gt; u74 0.0000 #&gt; u75 0.0000 #&gt; q1 NA # drop other variables that are not pre - treatmentt matching variables todrop &lt;- c(&quot;treated&quot;, &quot;re78&quot;) imbalance(group=Le$treated, data=Le, drop=todrop) #&gt; #&gt; Multivariate Imbalance Measure: L1=0.902 #&gt; Percentage of local common support: LCS=5.8% #&gt; #&gt; Univariate Imbalance Measures: #&gt; #&gt; statistic type L1 min 25% 50% 75% #&gt; age -0.252373042 (diff) 5.102041e-03 0 0 0.0000 -1.0000 #&gt; education 0.153634710 (diff) 8.463851e-02 1 0 1.0000 1.0000 #&gt; black -0.010322734 (diff) 1.032273e-02 0 0 0.0000 0.0000 #&gt; married -0.009551495 (diff) 9.551495e-03 0 0 0.0000 0.0000 #&gt; nodegree -0.081217371 (diff) 8.121737e-02 0 -1 0.0000 0.0000 #&gt; re74 -18.160446880 (diff) 5.551115e-17 0 0 284.0715 806.3452 #&gt; re75 101.501761679 (diff) 5.551115e-17 0 0 485.6310 1238.4114 #&gt; hispanic -0.010144756 (diff) 1.014476e-02 0 0 0.0000 0.0000 #&gt; u74 -0.045582186 (diff) 4.558219e-02 0 0 0.0000 0.0000 #&gt; u75 -0.065555292 (diff) 6.555529e-02 0 0 0.0000 0.0000 #&gt; q1 7.494021189 (Chi2) 1.067078e-01 NA NA NA NA #&gt; max #&gt; age -6.0000 #&gt; education 1.0000 #&gt; black 0.0000 #&gt; married 0.0000 #&gt; nodegree 0.0000 #&gt; re74 -2139.0195 #&gt; re75 490.3945 #&gt; hispanic 0.0000 #&gt; u74 0.0000 #&gt; u75 0.0000 #&gt; q1 NA automated coarsening mat &lt;- cem( treatment = &quot;treated&quot;, data = Le, drop = &quot;re78&quot;, keep.all = TRUE ) #&gt; #&gt; Using &#39;treated&#39;=&#39;1&#39; as baseline group mat #&gt; G0 G1 #&gt; All 392 258 #&gt; Matched 95 84 #&gt; Unmatched 297 174 # mat$w coarsening by explicit user choice # categorial variables levels(Le$q1) # grouping option #&gt; [1] &quot;agree&quot; &quot;disagree&quot; &quot;neutral&quot; #&gt; [4] &quot;no opinion&quot; &quot;strongly agree&quot; &quot;strongly disagree&quot; q1.grp &lt;- list( c(&quot;strongly agree&quot;, &quot;agree&quot;), c(&quot;neutral&quot;, &quot;no opinion&quot;), c(&quot;strongly disagree&quot;, &quot;disagree&quot;) ) # if you want ordered categories # continuous variables table(Le$education) #&gt; #&gt; 3 4 5 6 7 8 9 10 11 12 13 14 15 #&gt; 1 5 4 6 12 55 106 146 173 113 19 9 1 educut &lt;- c(0, 6.5, 8.5, 12.5, 17) # use cutpoints mat1 &lt;- cem( treatment = &quot;treated&quot;, data = Le, drop = &quot;re78&quot;, cutpoints = list(education = educut), grouping = list(q1 = q1.grp) ) #&gt; #&gt; Using &#39;treated&#39;=&#39;1&#39; as baseline group mat1 #&gt; G0 G1 #&gt; All 392 258 #&gt; Matched 158 115 #&gt; Unmatched 234 143 Can also use progressive coarsening method to control the number of matches. cem can also handle some missingness. 31.1.7 Genetic Matching GM uses iterative checking process of propensity scores, which combines propensity scores and Mahalanobis distance. GenMatch (Diamond and Sekhon 2013) GM is arguably “superior” method than nearest neighbor or full matching in imbalanced data Use a genetic search algorithm to find weights for each covariate such that we have optimal balance. Implementation could use with replacement balance can be based on paired \\(t\\)-tests (dichotomous variables) Kolmogorov-Smirnov (multinomial and continuous) Packages Matching library(Matching) data(lalonde) attach(lalonde) #The covariates we want to match on X = cbind(age, educ, black, hisp, married, nodegr, u74, u75, re75, re74) #The covariates we want to obtain balance on BalanceMat &lt;- cbind(age, educ, black, hisp, married, nodegr, u74, u75, re75, re74, I(re74 * re75)) # #Let&#39;s call GenMatch() to find the optimal weight to give each #covariate in &#39;X&#39; so as we have achieved balance on the covariates in #&#39;BalanceMat&#39;. This is only an example so we want GenMatch to be quick #so the population size has been set to be only 16 via the &#39;pop.size&#39; #option. This is *WAY* too small for actual problems. #For details see http://sekhon.berkeley.edu/papers/MatchingJSS.pdf. # genout &lt;- GenMatch( Tr = treat, X = X, BalanceMatrix = BalanceMat, estimand = &quot;ATE&quot;, M = 1, pop.size = 16, max.generations = 10, wait.generations = 1 ) #The outcome variable Y=re78/1000 # # Now that GenMatch() has found the optimal weights, let&#39;s estimate # our causal effect of interest using those weights # mout &lt;- Match( Y = Y, Tr = treat, X = X, estimand = &quot;ATE&quot;, Weight.matrix = genout ) summary(mout) # #Let&#39;s determine if balance has actually been obtained on the variables of interest # mb &lt;- MatchBalance( treat ~ age + educ + black + hisp + married + nodegr + u74 + u75 + re75 + re74 + I(re74 * re75), match.out = mout, nboots = 500 ) 31.1.8 Entropy Balancing (Hainmueller 2012) Entropy balancing is a method for achieving covariate balance in observational studies with binary treatments. It uses a maximum entropy reweighting scheme to ensure that treatment and control groups are balanced based on sample moments. This method adjusts for inequalities in the covariate distributions, reducing dependence on the model used for estimating treatment effects. Entropy balancing improves balance across all included covariate moments and removes the need for repetitive balance checking and iterative model searching. 31.1.9 Matching for high-dimensional data One could reduce the number of dimensions using methods such as: Lasso (Gordon et al. 2019) Penalized logistic regression (Eckles and Bakshy 2021) PCA (Principal Component Analysis) Locality Preserving Projections (LPP) (S. Li et al. 2016) Random projection Autoencoders (Ramachandra 2018) Additionally, one could jointly does dimension reduction while balancing the distributions of the control and treated groups (Yao et al. 2018). 31.1.10 Matching for time series-cross-section data Examples: (Scheve and Stasavage 2012) and (Acemoglu et al. 2019) Identification strategy: Within-unit over-time variation within-time across-units variation See DID with in and out treatment condition for details of this method 31.1.11 Matching for multiple treatments In cases where you have multiple treatment groups, and you want to do matching, it’s important to have the same baseline (control) group. For more details, see (McCaffrey et al. 2013) (Lopez and Gutman 2017) (Zhao et al. 2021): also for continuous treatment If you insist on using the MatchIt package, then see this answer 31.1.12 Matching for multi-level treatments See (Yang et al. 2016) Package in R shuyang1987/multilevelMatching on Github 31.1.13 Matching for repeated treatments https://cran.r-project.org/web/packages/twang/vignettes/iptw.pdf package in R twang References "],["selection-on-unobservables.html", "31.2 Selection on Unobservables", " 31.2 Selection on Unobservables There are several ways one can deal with selection on unobservables: Rosenbaum Bounds Endogenous Sample Selection (i.e., Heckman-style correction): examine the \\(\\lambda\\) term to see whether it’s significant (sign of endogenous selection) Relative Correlation Restrictions Coefficient-stability Bounds 31.2.1 Rosenbaum Bounds Examples in marketing (Oestreicher-Singer and Zalmanson 2013): A range of 1.5 to 1.8 is important for the effect of the level of community participation of users on their willingness to pay for premium services. (M. Sun and Zhu 2013): A factor of 1.5 is essential for understanding the relationship between the launch of an ad revenue-sharing program and the popularity of content. (Manchanda, Packard, and Pattabhiramaiah 2015): A factor of 1.6 is required for the social dollar effect to be nullified. (Sudhir and Talukdar 2015): A factor of 1.9 is needed for IT adoption to impact labor productivity, and 2.2 for IT adoption to affect floor productivity. (Proserpio and Zervas 2017b): A factor of 2 is necessary for the firm’s use of management responses to influence online reputation. (S. Zhang et al. 2022): A factor of 1.55 is critical for the acquisition of verified images to drive demand for Airbnb properties. (Chae, Ha, and Schweidel 2023): A factor of 27 (not a typo) is significant in how paywall suspensions affect subsequent subscription decisions. General Matching Methods are favored for estimating treatment effects in observational data, offering advantages over regression methods because It reduces reliance on functional form assumptions. Assumes all selection-influencing covariates are observable; estimates are unbiased if no unobserved confounders are missed. Concerns arise when potentially relevant covariates are unmeasured. Rosenbaum Bounds assess the overall sensitivity of coefficient estimates to hidden bias (Rosenbaum and Rosenbaum 2002) without having knowledge (e.g., direction) of the bias. Because the unboservables that cause hidden bias have to both affect selection into treatment by a factor of \\(\\Gamma\\) and predictive of outcome, this method is also known as worst case analyses (DiPrete and Gangl 2004). Can’t provide precise bounds on estimates of treatment effects (see Relative Correlation Restrictions) Typically, we show both p-value and H-L point estimate for each level of gamma \\(\\Gamma\\) With random treatment assignment, we can use the non-parametric test (Wilcoxon signed rank test) to see if there is treatment effect. Without random treatment assignment (i.e., observational data), we cannot use this test. With Selection on Observables, we can use this test if we believe there are no unmeasured confounders. And this is where Rosenbaum (2002) can come in to talk about the believability of this notion. In layman’s terms, consider that the treatment assignment is based on a method where the odds of treatment for a unit and its control differ by a multiplier \\(\\Gamma\\) For example, \\(\\Gamma = 1\\) means that the odds of assignment are identical, indicating random treatment assignment. Another example, \\(\\Gamma = 2\\), in the same matched pair, one unit is twice as likely to receive the treatment (due to unobservables). Since we can’t know \\(\\Gamma\\) with certainty, we run sensitivity analysis to see if the results change with different values of \\(\\Gamma\\) This bias is the product of an unobservable that influences both treatment selection and outcome by a factor \\(\\Gamma\\) (omitted variable bias) In technical terms, Treatment Assignment and Probability: Consider unit \\(j\\) with a probability \\(\\pi_j\\) of receiving the treatment, and unit \\(i\\) with \\(\\pi_i\\). Ideally, after matching, if there’s no hidden bias, we’d have \\(\\pi_i = \\pi_j\\). However, observing \\(\\pi_i \\neq \\pi_j\\) raises questions about potential biases affecting our inference. This is evaluated using the odds ratio. Odds Ratio and Hidden Bias: The odds of treatment for a unit \\(j\\) is defined as \\(\\frac{\\pi_j}{1 - \\pi_j}\\). The odds ratio between two matched units \\(i\\) and \\(j\\) is constrained by \\(\\frac{1}{\\Gamma} \\le \\frac{\\pi_i / (1- \\pi_i)}{\\pi_j/ (1- \\pi_j)} \\le \\Gamma\\). If \\(\\Gamma = 1\\), it implies an absence of hidden bias. If \\(\\Gamma = 2\\), the odds of receiving treatment could differ by up to a factor of 2 between the two units. Sensitivity Analysis Using Gamma: The value of \\(\\Gamma\\) helps measure the potential departure from a bias-free study. Sensitivity analysis involves varying \\(\\Gamma\\) to examine how inferences might change with the presence of hidden biases. Incorporating Unobserved Covariates: Consider a scenario where unit \\(i\\) has observed covariates \\(x_i\\) and an unobserved covariate \\(u_i\\), that both affect the outcome. A logistic regression model could link the odds of assignment to these covariates: \\(\\log(\\frac{\\pi_i}{1 - \\pi_i}) = \\kappa x_i + \\gamma u_i\\), where \\(\\gamma\\) represents the impact of the unobserved covariate. Steps for Sensitivity Analysis (We could create a table of different levels of \\(\\Gamma\\) to assess how the magnitude of biases can affect our evidence of the treatment effect (estimate): Select a range of values for \\(\\Gamma\\) (e.g., \\(1 \\to 2\\)). Assess how the p-value or the magnitude of the treatment effect (Hodges Jr and Lehmann 2011) (for more details, see (Hollander, Wolfe, and Chicken 2013)) changes with varying \\(\\Gamma\\) values. Employ specific randomization tests based on the type of outcome to establish bounds on inferences. report the minimum value of \\(\\Gamma\\) at which the treatment treat is nullified (i.e., become insignificant). And the literature’s rules of thumb is that if \\(\\Gamma &gt; 2\\), then we have strong evidence for our treatment effect is robust to large biases (Proserpio and Zervas 2017a) Notes: If we have treatment assignment is clustered (e.g., within school, within state) we need to adjust the bounds for clustered treatment assignment (B. B. Hansen, Rosenbaum, and Small 2014) (similar to clustered standard errors). Packages rbounds (Keele 2010) sensitivitymv (Rosenbaum 2015) Since we typically assess our estimate sensitivity to unboservables after matching, we first do some matching. library(MatchIt) library(Matching) data(&quot;lalonde&quot;) matched &lt;- MatchIt::matchit( treat ~ age + educ, data = lalonde, method = &quot;nearest&quot; ) summary(matched) #&gt; #&gt; Call: #&gt; MatchIt::matchit(formula = treat ~ age + educ, data = lalonde, #&gt; method = &quot;nearest&quot;) #&gt; #&gt; Summary of Balance for All Data: #&gt; Means Treated Means Control Std. Mean Diff. Var. Ratio eCDF Mean #&gt; distance 0.4203 0.4125 0.1689 1.2900 0.0431 #&gt; age 25.8162 25.0538 0.1066 1.0278 0.0254 #&gt; educ 10.3459 10.0885 0.1281 1.5513 0.0287 #&gt; eCDF Max #&gt; distance 0.1251 #&gt; age 0.0652 #&gt; educ 0.1265 #&gt; #&gt; Summary of Balance for Matched Data: #&gt; Means Treated Means Control Std. Mean Diff. Var. Ratio eCDF Mean #&gt; distance 0.4203 0.4179 0.0520 1.1691 0.0105 #&gt; age 25.8162 25.5081 0.0431 1.1518 0.0148 #&gt; educ 10.3459 10.2811 0.0323 1.5138 0.0224 #&gt; eCDF Max Std. Pair Dist. #&gt; distance 0.0595 0.0598 #&gt; age 0.0486 0.5628 #&gt; educ 0.0757 0.3602 #&gt; #&gt; Sample Sizes: #&gt; Control Treated #&gt; All 260 185 #&gt; Matched 185 185 #&gt; Unmatched 75 0 #&gt; Discarded 0 0 matched_data &lt;- match.data(matched) treatment_group &lt;- subset(matched_data, treat == 1) control_group &lt;- subset(matched_data, treat == 0) library(rbounds) # p-value sensitivity psens_res &lt;- psens(treatment_group$re78, control_group$re78, Gamma = 2, GammaInc = .1) psens_res #&gt; #&gt; Rosenbaum Sensitivity Test for Wilcoxon Signed Rank P-Value #&gt; #&gt; Unconfounded estimate .... 0.0058 #&gt; #&gt; Gamma Lower bound Upper bound #&gt; 1.0 0.0058 0.0058 #&gt; 1.1 0.0011 0.0235 #&gt; 1.2 0.0002 0.0668 #&gt; 1.3 0.0000 0.1458 #&gt; 1.4 0.0000 0.2599 #&gt; 1.5 0.0000 0.3967 #&gt; 1.6 0.0000 0.5378 #&gt; 1.7 0.0000 0.6664 #&gt; 1.8 0.0000 0.7723 #&gt; 1.9 0.0000 0.8523 #&gt; 2.0 0.0000 0.9085 #&gt; #&gt; Note: Gamma is Odds of Differential Assignment To #&gt; Treatment Due to Unobserved Factors #&gt; # Hodges-Lehmann point estimate sensitivity # median difference between treatment and control hlsens_res &lt;- hlsens(treatment_group$re78, control_group$re78, Gamma = 2, GammaInc = .1) hlsens_res #&gt; #&gt; Rosenbaum Sensitivity Test for Hodges-Lehmann Point Estimate #&gt; #&gt; Unconfounded estimate .... 1745.843 #&gt; #&gt; Gamma Lower bound Upper bound #&gt; 1.0 1745.800000 1745.8 #&gt; 1.1 1139.100000 1865.6 #&gt; 1.2 830.840000 2160.9 #&gt; 1.3 533.740000 2462.4 #&gt; 1.4 259.940000 2793.8 #&gt; 1.5 -0.056912 3059.3 #&gt; 1.6 -144.960000 3297.8 #&gt; 1.7 -380.560000 3535.7 #&gt; 1.8 -554.360000 3751.0 #&gt; 1.9 -716.360000 4012.1 #&gt; 2.0 -918.760000 4224.3 #&gt; #&gt; Note: Gamma is Odds of Differential Assignment To #&gt; Treatment Due to Unobserved Factors #&gt; For multiple control group matching library(Matching) library(MatchIt) n_ratio &lt;- 2 matched &lt;- MatchIt::matchit(treat ~ age + educ , method = &quot;nearest&quot;, ratio = n_ratio) summary(matched) matched_data &lt;- match.data(matched) mcontrol_res &lt;- rbounds::mcontrol( y = matched_data$re78, grp.id = matched_data$subclass, treat.id = matched_data$treat, group.size = n_ratio + 1, Gamma = 2.5, GammaInc = .1 ) mcontrol_res sensitivitymw is faster than sensitivitymw. But sensitivitymw can match where matched sets can have differing numbers of controls (Rosenbaum 2015). library(sensitivitymv) data(lead150) head(lead150) #&gt; [,1] [,2] [,3] [,4] [,5] [,6] #&gt; [1,] 1.40 1.23 2.24 0.96 1.90 1.14 #&gt; [2,] 0.63 0.99 0.87 1.90 0.67 1.40 #&gt; [3,] 1.98 0.82 0.66 0.58 1.00 1.30 #&gt; [4,] 1.45 0.53 1.43 1.70 0.85 1.50 #&gt; [5,] 1.60 1.70 0.63 1.05 1.08 0.92 #&gt; [6,] 1.13 0.31 0.71 1.10 0.86 1.14 senmv(lead150,gamma=2,trim=2) #&gt; $pval #&gt; [1] 0.02665519 #&gt; #&gt; $deviate #&gt; [1] 1.932398 #&gt; #&gt; $statistic #&gt; [1] 27.97564 #&gt; #&gt; $expectation #&gt; [1] 18.0064 #&gt; #&gt; $variance #&gt; [1] 26.61524 library(sensitivitymw) senmw(lead150,gamma=2,trim=2) #&gt; $pval #&gt; [1] 0.02665519 #&gt; #&gt; $deviate #&gt; [1] 1.932398 #&gt; #&gt; $statistic #&gt; [1] 27.97564 #&gt; #&gt; $expectation #&gt; [1] 18.0064 #&gt; #&gt; $variance #&gt; [1] 26.61524 31.2.2 Relative Correlation Restrictions Examples in marketing (Manchanda, Packard, and Pattabhiramaiah 2015): 3.23 for social dollar effect to be nullified (Chae, Ha, and Schweidel 2023): 6.69 (i.e., how much stronger the selection on unobservables has to be compared to the selection on observables to negate the result) for paywall suspensions affect subsequent subscription decisions (M. Sun and Zhu 2013) General Proposed by Altonji, Elder, and Taber (2005) Generalized by Krauth (2016) Estimate bounds of the treatment effects due to unobserved selection. \\[ Y_i = X_i \\beta + C_i \\gamma + \\epsilon_i \\] where \\(\\beta\\) is the effect of interest \\(C_i\\) is the control variable Using OLS, \\(cor(X_i, \\epsilon_i) = 0\\) Under RCR analysis, we assume \\[ cor(X_i, \\epsilon_i) = \\lambda cor(X_i, C_i \\gamma) \\] where \\(\\lambda \\in (\\lambda_l, \\lambda_h)\\) Choice of \\(\\lambda\\) Strong assumption of no omitted variable bias (small If \\(\\lambda = 0\\), then \\(cor(X_i, \\epsilon_i) = 0\\) If \\(\\lambda = 1\\), then \\(cor(X_i, \\epsilon_i) = cor(X_i, C_i \\gamma)\\) We typically examine \\(\\lambda \\in (0, 1)\\) # remotes::install_github(&quot;bvkrauth/rcr/r/rcrbounds&quot;) library(rcrbounds) # rcrbounds::install_rcrpy() data(&quot;ChickWeight&quot;) rcr_res &lt;- rcrbounds::rcr(weight ~ Time | Diet, ChickWeight, rc_range = c(0, 10)) rcr_res #&gt; #&gt; Call: #&gt; rcrbounds::rcr(formula = weight ~ Time | Diet, data = ChickWeight, #&gt; rc_range = c(0, 10)) #&gt; #&gt; Coefficients: #&gt; rcInf effectInf rc0 effectL effectH #&gt; 34.676505 71.989336 34.741955 7.447713 8.750492 summary(rcr_res) #&gt; #&gt; Call: #&gt; rcrbounds::rcr(formula = weight ~ Time | Diet, data = ChickWeight, #&gt; rc_range = c(0, 10)) #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; rcInf 34.676505 50.1295005 0.6917385 4.891016e-01 #&gt; effectInf 71.989336 112.5711682 0.6395007 5.224973e-01 #&gt; rc0 34.741955 58.7169195 0.5916856 5.540611e-01 #&gt; effectL 7.447713 2.4276246 3.0679014 2.155677e-03 #&gt; effectH 8.750492 0.2607671 33.5567355 7.180405e-247 #&gt; --- #&gt; conservative confidence interval: #&gt; 2.5 % 97.5 % #&gt; effect 2.689656 9.261586 # hypothesis test for the coefficient rcrbounds::effect_test(rcr_res, h0 = 0) #&gt; [1] 0.001234233 plot(rcr_res) 31.2.3 Coefficient-stability Bounds Developed by Oster (2019) Assess robustness to omitted variable bias by observing: Changes in the coefficient of interest Shifts in model \\(R^2\\) Refer Masten and Poirier (2022) for reverse sign problem. References "],["interrupted-time-series.html", "Chapter 32 Interrupted Time Series", " Chapter 32 Interrupted Time Series Regression Discontinuity in Time Control for Seasonable trends Concurrent events Pros (Penfold and Zhang 2013) control for long-term trends Cons Min of 8 data points before and 8 after an intervention Multiple events hard to distinguish Notes: For subgroup analysis (heterogeneity in effect size), see (Harper and Bruckner 2017) To interpret with control variables, see (Bottomley, Scott, and Isham 2019) Interrupted time series should be used when longitudinal data (outcome over time - observations before and after the intervention) full population was affected at one specific point in time (or can be stacked based on intervention) In each ITS framework, there can be 4 possible scenarios of outcome after an intervention No effects Immediate effect Sustained (long-term) effect (smooth) Both immediate and sustained effect \\[ Y = \\beta_0 + \\beta_1 T + \\beta_2 D + \\beta_3 P + \\epsilon \\] where \\(Y\\) is the outcome variable \\(\\beta_0\\) is the baseline level of the outcome \\(T\\) is the time variable (e.g., days, weeks, etc.) passed from the start of the observation period \\(\\beta_1\\) is the slope of the line before the intervention \\(D\\) is the treatment variable where \\(1\\) is after the intervention and \\(0\\) is before the intervention. \\(\\beta_2\\) is the immediate effect after the intervention \\(P\\) is the time variable indicating time passed since the intervention (before the intervention, the value is set to 0) (to examine the sustained effect). \\(\\beta_3\\) is the sustained effect = difference between the slope of the line prior to the intervention and the slope of the line subsequent to the intervention Example Create a fictitious dataset where we know the true data generating process \\[ Outcome = 10 \\times time + 20 \\times treatment + 25 \\times timesincetreatment + noise \\] # number of days n = 365 # intervention at day interven = 200 # time index from 1 to 365 time = c(1:n) # treatment variable: before internvation = day 1 to 200, # after intervention = day 201 to 365 treatment = c(rep(0, interven), rep(1, n - interven)) # time since treatment timesincetreat = c(rep(0, interven), c(1:(n - interven))) # outcome outcome = 10 + 15 * time + 20 * treatment + 25 * timesincetreat + rnorm(n, mean = 0, sd = 1) df = data.frame(outcome, time, treatment, timesincetreat) head(df, 10) #&gt; outcome time treatment timesincetreat #&gt; 1 25.79832 1 0 0 #&gt; 2 42.08680 2 0 0 #&gt; 3 55.55952 3 0 0 #&gt; 4 68.54228 4 0 0 #&gt; 5 82.75827 5 0 0 #&gt; 6 100.82867 6 0 0 #&gt; 7 114.41550 7 0 0 #&gt; 8 131.06942 8 0 0 #&gt; 9 145.22532 9 0 0 #&gt; 10 161.08298 10 0 0 Visualize plot(df$time, df$outcome) # intervention date abline(v = interven, col = &quot;blue&quot;) # regression line ts &lt;- lm(outcome ~ time + treatment + timesincetreat, data = df) lines(df$time, ts$fitted.values, col = &quot;red&quot;) summary(ts) #&gt; #&gt; Call: #&gt; lm(formula = outcome ~ time + treatment + timesincetreat, data = df) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -2.58812 -0.67771 0.03995 0.63623 2.82507 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 9.705206 0.135820 71.46 &lt;2e-16 *** #&gt; time 15.002674 0.001172 12802.61 &lt;2e-16 *** #&gt; treatment 19.852727 0.201416 98.57 &lt;2e-16 *** #&gt; timesincetreat 24.996424 0.001954 12791.27 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 0.9568 on 361 degrees of freedom #&gt; Multiple R-squared: 1, Adjusted R-squared: 1 #&gt; F-statistic: 1.042e+09 on 3 and 361 DF, p-value: &lt; 2.2e-16 Interpretation Time coefficient shows before-intervention outcome trend. Positive and significant, indicating a rising trend. Every day adds 15 points. The treatment coefficient shows the immediate increase in outcome. Immediate effect is positive and significant, increasing outcome by 20 points. The time since treatment coefficient reflects a change in trend subsequent to the intervention. The sustained effect is positive and statistically significant, showing that the outcome increases by 25 points per day after the intervention. See Lee Rodgers, Beasley, and Schuelke (2014) for suggestions Plot of counterfactual # treatment prediction pred &lt;- predict(ts, df) # counterfactual dataset new_df &lt;- as.data.frame(cbind( time = time, # treatment = 0 means counterfactual treatment = rep(0, n), # time since treatment = 0 means counterfactual timesincetreat = rep(0) )) # counterfactual predictions pred_cf &lt;- predict(ts, new_df) # plot plot( outcome, col = gray(0.2, 0.2), pch = 19, xlim = c(1,365), ylim = c(0, 10000), xlab = &quot;xlab&quot;, ylab = &quot;ylab&quot; ) # regression line before treatment lines(rep(1:interven), pred[1:interven], col = &quot;blue&quot;, lwd = 3) # regression line after treatment lines(rep((interven + 1):n), pred[(interven + 1):n], col = &quot;blue&quot;, lwd = 3) # regression line after treatment (counterfactual) lines( rep(interven:n), pred_cf[(interven):n], col = &quot;yellow&quot;, lwd = 3, lty = 5 ) abline(v = interven, col = &quot;red&quot;, lty = 2) Possible threats to the validity of interrupted time series analysis (Baicker and Svoronos 2019) Delayed effects (Rodgers, John, and Coleman 2005) (may have to make assess some time after the intervention - do not assess the immediate dates). Other confounding events Linden (2017) Intervention is introduced but later withdrawn (Linden 2015) Autocorrelation (for every time series data): might cause underestimation in the standard errors (i.e., overestimating the statistical significance of the treatment effect) Regression to the mean: after a the short-term shock to the outcome, individuals can revert back to their initial states. Selection bias: only certain individuals are affected by the treatment (could use a Multiple Groups). References "],["autocorrelation.html", "32.1 Autocorrelation", " 32.1 Autocorrelation Assess autocorrelation from residual # simple regression on time simple_ts &lt;- lm(outcome ~ time, data = df) plot(resid(simple_ts)) # alternatively acf(resid(simple_ts)) This is not the best example since I created this dataset. But when residuals do have autocorrelation, you should not see any patterns (i.e., points should be randomly distributed on the plot) To formally test for autocorrelation, we can use the Durbin-Watson test lmtest::dwtest(df$outcome ~ df$time) #&gt; #&gt; Durbin-Watson test #&gt; #&gt; data: df$outcome ~ df$time #&gt; DW = 0.00037607, p-value &lt; 2.2e-16 #&gt; alternative hypothesis: true autocorrelation is greater than 0 From the p-value, we know that there is autocorrelation in the time series A solution to this problem is to use more advanced time series analysis (e.g., ARIMA - coming up in the book) to adjust for seasonality and other dependency. forecast::auto.arima(df$outcome, xreg = as.matrix(df[,-1])) #&gt; Series: df$outcome #&gt; Regression with ARIMA(3,0,2) errors #&gt; #&gt; Coefficients: #&gt; ar1 ar2 ar3 ma1 ma2 intercept time treatment #&gt; 0.1904 -0.9672 0.0925 -0.1327 0.9557 9.7122 15.0026 19.8588 #&gt; s.e. 0.0693 0.0356 0.0543 0.0467 0.0338 0.1446 0.0012 0.2141 #&gt; timesincetreat #&gt; 24.9965 #&gt; s.e. 0.0021 #&gt; #&gt; sigma^2 = 0.91: log likelihood = -496.34 #&gt; AIC=1012.67 AICc=1013.3 BIC=1051.67 "],["multiple-groups.html", "32.2 Multiple Groups", " 32.2 Multiple Groups When you suspect that you might have confounding events or selection bias, you can add a control group that did not experience the treatment (very much similar to Difference-in-differences) The model then becomes \\[ \\begin{aligned} Y = \\beta_0 &amp;+ \\beta_1 time+ \\beta_2 treatment +\\beta_3 \\times timesincetreat \\\\ &amp;+\\beta_4 group + \\beta_5 group \\times time + \\beta_6 group \\times treatment \\\\ &amp;+ \\beta_7 group \\times timesincetreat \\end{aligned} \\] where Group = 1 when the observation is under treatment and 0 under control \\(\\beta_4\\) = baseline difference between the treatment and control group \\(\\beta_5\\) = slope difference between the treatment and control group before treatment \\(\\beta_6\\) = baseline difference between the treatment and control group associated with the treatment. \\(\\beta_7\\) = difference between the sustained effect of the treatment and control group after the treatment. "],["endogeneity.html", "Chapter 33 Endogeneity", " Chapter 33 Endogeneity Refresher A general model framework \\[ \\mathbf{Y = X \\beta + \\epsilon} \\] where \\(\\mathbf{Y} = n \\times 1\\) \\(\\mathbf{X} = n \\times k\\) \\(\\beta = k \\times 1\\) \\(\\epsilon = n \\times 1\\) Then, OLS estimates of coefficients are \\[ \\begin{aligned} \\hat{\\beta}_{OLS} &amp;= (\\mathbf{X}&#39;\\mathbf{X})^{-1}(\\mathbf{X}&#39;\\mathbf{Y}) \\\\ &amp;= (\\mathbf{X}&#39;\\mathbf{X})^{-1}(\\mathbf{X}&#39;(\\mathbf{X \\beta + \\epsilon})) \\\\ &amp;= (\\mathbf{X}&#39;\\mathbf{X})^{-1} (\\mathbf{X}&#39;\\mathbf{X}) \\beta + (\\mathbf{X}&#39;\\mathbf{X})^{-1} (\\mathbf{X}&#39;\\mathbf{\\epsilon}) \\\\ \\hat{\\beta}_{OLS} &amp; \\to \\beta + (\\mathbf{X}&#39;\\mathbf{X})^{-1} (\\mathbf{X}&#39;\\mathbf{\\epsilon}) \\end{aligned} \\] To have unbiased estimates, we have to get rid of the second part \\((\\mathbf{X}&#39;\\mathbf{X})^{-1} (\\mathbf{X}&#39;\\mathbf{\\epsilon})\\) There are 2 conditions to achieve unbiased estimates: \\(E(\\epsilon |X) = 0\\) (This is easy, putting an intercept can solve this issue) \\(Cov(\\mathbf{X}, \\epsilon) = 0\\) (This is the hard part) We only care about omitted variable Usually, the problem will stem Omitted Variables Bias, but we only care about omitted variable bias when Omitted variables correlate with the variables we care about (\\(X\\)). If OMV does not correlate with \\(X\\), we don’t care, and random assignment makes this correlation goes to 0) Omitted variables correlates with outcome/ dependent variable There are more types of endogeneity listed below. Types of endogeneity (See Hill et al. (2021) for a review in management): Endogenous Treatment Omitted Variables Bias Motivation Ability/talent Self-selection Feedback Effect (Simultaneity): also known as bidirectionality Reverse Causality: Subtle difference from Simultaneity: Technically, two variables affect each other sequentially, but in a big enough time frame, (e.g., monthly, or yearly), our coefficient will be biased just like simultaneity. Measurement Error Endogenous Sample Selection To deal with this problem, we have a toolbox (that has been mentioned in previous chapter 18) Using control variables in regression is a “selection on observables” identification strategy. In other words, if you believe you have an omitted variable, and you can measure it, including it in the regression model solves your problem. These uninterested variables are called control variables in your model. However, this is rarely the case (because the problem is we don’t have their measurements). Hence, we need more elaborate methods: Endogenous Treatment Endogenous Sample Selection Before we get to methods that deal with bias arises from omitted variables, we consider cases where we do have measurements of a variable, but there is measurement error (bias). References "],["endogenous-treatment.html", "33.1 Endogenous Treatment", " 33.1 Endogenous Treatment 33.1.1 Measurement Error Data error can stem from Coding errors Reporting errors Two forms of measurement error: Random (stochastic) (indeterminate error) (Classical Measurement Errors): noise or measurement errors do not show up in a consistent or predictable way. Systematic (determinate error) (Non-classical Measurement Errors): When measurement error is consistent and predictable across observations. Instrument errors (e.g., faulty scale) -&gt; calibration or adjustment Method errors (e.g., sampling errors) -&gt; better method development + study design Human errors (e.g., judgement) Usually the systematic measurement error is a bigger issue because it introduces “bias” into our estimates, while random error introduces noise into our estimates Noise -&gt; regression estimate to 0 Bias -&gt; can pull estimate to upward or downward. 33.1.1.1 Classical Measurement Errors 33.1.1.1.1 Right-hand side Right-hand side measurement error: When the measurement is in the covariates, then we have the endogeneity problem. Say you know the true model is \\[ Y_i = \\beta_0 + \\beta_1 X_i + u_i \\] But you don’t observe \\(X_i\\), but you observe \\[ \\tilde{X}_i = X_i + e_i \\] which is known as classical measurement errors where we assume \\(e_i\\) is uncorrelated with \\(X_i\\) (i.e., \\(E(X_i e_i) = 0\\)) Then, when you estimate your observed variables, you have (substitute \\(X_i\\) with \\(\\tilde{X}_i - e_i\\) ): \\[ \\begin{aligned} Y_i &amp;= \\beta_0 + \\beta_1 (\\tilde{X}_i - e_i)+ u_i \\\\ &amp;= \\beta_0 + \\beta_1 \\tilde{X}_i + u_i - \\beta_1 e_i \\\\ &amp;= \\beta_0 + \\beta_1 \\tilde{X}_i + v_i \\end{aligned} \\] In words, the measurement error in \\(X_i\\) is now a part of the error term in the regression equation \\(v_i\\). Hence, we have an endogeneity bias. Endogeneity arises when \\[ \\begin{aligned} E(\\tilde{X}_i v_i) &amp;= E((X_i + e_i )(u_i - \\beta_1 e_i)) \\\\ &amp;= -\\beta_1 Var(e_i) \\neq 0 \\end{aligned} \\] Since \\(\\tilde{X}_i\\) and \\(e_i\\) are positively correlated, then it leads to a negative bias in \\(\\hat{\\beta}_1\\) if the true \\(\\beta_1\\) is positive a positive bias if \\(\\beta_1\\) is negative In other words, measurement errors cause attenuation bias, which inter turn pushes the coefficient towards 0 As \\(Var(e_i)\\) increases or \\(\\frac{Var(e_i)}{Var(\\tilde{X})} \\to 1\\) then \\(e_i\\) is a random (noise) and \\(\\beta_1 \\to 0\\) (random variable \\(\\tilde{X}\\) should not have any relation to \\(Y_i\\)) Technical note: The size of the bias in the OLS-estimator is \\[ \\hat{\\beta}_{OLS} = \\frac{ cov(\\tilde{X}, Y)}{var(\\tilde{X})} = \\frac{cov(X + e, \\beta X + u)}{var(X + e)} \\] then \\[ plim \\hat{\\beta}_{OLS} = \\beta \\frac{\\sigma^2_X}{\\sigma^2_X + \\sigma^2_e} = \\beta \\lambda \\] where \\(\\lambda\\) is reliability or signal-to-total variance ratio or attenuation factor Reliability affect the extent to which measurement error attenuates \\(\\hat{\\beta}\\). The attenuation bias is \\[ \\hat{\\beta}_{OLS} - \\beta = -(1-\\lambda)\\beta \\] Thus, \\(\\hat{\\beta}_{OLS} &lt; \\beta\\) (unless \\(\\lambda = 1\\), in which case we don’t even have measurement error). Note: Data transformation worsen (magnify) the measurement error \\[ y= \\beta x + \\gamma x^2 + \\epsilon \\] then, the attenuation factor for \\(\\hat{\\gamma}\\) is the square of the attenuation factor for \\(\\hat{\\beta}\\) (i.e., \\(\\lambda_{\\hat{\\gamma}} = \\lambda_{\\hat{\\beta}}^2\\)) Adding covariates increases attenuation bias To fix classical measurement error problem, we can Find estimates of either \\(\\sigma^2_X, \\sigma^2_\\epsilon\\) or \\(\\lambda\\) from validation studies, or survey data. Endogenous Treatment Use instrument \\(Z\\) correlated with \\(X\\) but uncorrelated with \\(\\epsilon\\) Abandon your project 33.1.1.1.2 Left-hand side When the measurement is in the outcome variable, econometricians or causal scientists do not care because they still have an unbiased estimate of the coefficients (the zero conditional mean assumption is not violated, hence we don’t have endogeneity). However, statisticians might care because it might inflate our uncertainty in the coefficient estimates (i.e., higher standard errors). \\[ \\tilde{Y} = Y + v \\] then the model you estimate is \\[ \\tilde{Y} = \\beta X + u + v \\] Since \\(v\\) is uncorrelated with \\(X\\), then \\(\\hat{\\beta}\\) is consistently estimated by OLS If we have measurement error in \\(Y_i\\), it will pass through \\(\\beta_1\\) and go to \\(u_i\\) 33.1.1.2 Non-classical Measurement Errors Relaxing the assumption that \\(X\\) and \\(\\epsilon\\) are uncorrelated Recall the true model we have true estimate is \\[ \\hat{\\beta} = \\frac{cov(X + \\epsilon, \\beta X + u)}{var(X + \\epsilon)} \\] then without the above assumption, we have \\[ \\begin{aligned} plim \\hat{\\beta} &amp;= \\frac{\\beta (\\sigma^2_X + \\sigma_{X \\epsilon})}{\\sigma^2_X + \\sigma^2_\\epsilon + 2 \\sigma_{X \\epsilon}} \\\\ &amp;= (1 - \\frac{\\sigma^2_{\\epsilon} + \\sigma_{X \\epsilon}}{\\sigma^2_X + \\sigma^2_\\epsilon + 2 \\sigma_{X \\epsilon}}) \\beta \\\\ &amp;= (1 - b_{\\epsilon \\tilde{X}}) \\beta \\end{aligned} \\] where \\(b_{\\epsilon \\tilde{X}}\\) is the covariance between \\(\\tilde{X}\\) and \\(\\epsilon\\) (also the regression coefficient of a regression of \\(\\epsilon\\) on \\(\\tilde{X}\\)) Hence, the Classical Measurement Errors is just a special case of Non-classical Measurement Errors where \\(b_{\\epsilon \\tilde{X}} = 1 - \\lambda\\) So when \\(\\sigma_{X \\epsilon} = 0\\) (Classical Measurement Errors), increasing this covariance \\(b_{\\epsilon \\tilde{X}}\\) increases the covariance increases the attenuation factor if more than half of the variance in \\(\\tilde{X}\\) is measurement error, and decreases the attenuation factor otherwise. This is also known as mean reverting measurement error Bound, Brown, and Mathiowetz (2001) A general framework for both right-hand side and left-hand side measurement error is (Bound, Brown, and Mathiowetz 2001): consider the true model \\[ \\mathbf{Y = X \\beta + \\epsilon} \\] then \\[ \\begin{aligned} \\hat{\\beta} &amp;= \\mathbf{(\\tilde{X}&#39; \\tilde{X})^{-1}\\tilde{X} \\tilde{Y}} \\\\ &amp;= \\mathbf{(\\tilde{X}&#39; \\tilde{X})^{-1} \\tilde{X}&#39; (\\tilde{X} \\beta - U \\beta + v + \\epsilon )} \\\\ &amp;= \\mathbf{\\beta + (\\tilde{X}&#39; \\tilde{X})^{-1} \\tilde{X}&#39; (-U \\beta + v + \\epsilon)} \\\\ plim \\hat{\\beta} &amp;= \\beta + plim (\\tilde{X}&#39; \\tilde{X})^{-1} \\tilde{X}&#39; ( -U\\beta + v) \\\\ &amp;= \\beta + plim (\\tilde{X}&#39; \\tilde{X})^{-1} \\tilde{X}&#39; W \\left[ \\begin{array} {c} - \\beta \\\\ 1 \\end{array} \\right] \\end{aligned} \\] Since we collect the measurement errors in a matrix \\(W = [U|v]\\), then \\[ ( -U\\beta + v) = W \\left[ \\begin{array} {c} - \\beta \\\\ 1 \\end{array} \\right] \\] Hence, in general, biases in the coefficients \\(\\beta\\) are regression coefficients from regressing the measurement errors on the mis-measured \\(\\tilde{X}\\) Notes: Instrumental Variable can help fix this problem There can also be measurement error in dummy variables and you can still use Instrumental Variable to fix it. 33.1.1.3 Solution to Measurement Errors 33.1.1.3.1 Correlation \\[ \\begin{aligned} P(\\rho | data) &amp;= \\frac{P(data|\\rho)P(\\rho)}{P(data)} \\\\ \\text{Posterior Probability} &amp;\\propto \\text{Likelihood} \\times \\text{Prior Probability} \\end{aligned} \\] where \\(\\rho\\) is a correlation coefficient \\(P(data|\\rho)\\) is the likelihood function evaluated at \\(\\rho\\) \\(P(\\rho)\\) prior probability \\(P(data)\\) is the normalizing constant With sample correlation coefficient \\(r\\): \\[ r = \\frac{S_{xy}}{\\sqrt{S_{xx}S_{yy}}} \\] Then the posterior density approximation of \\(\\rho\\) is (Schisterman et al. 2003, 3) \\[ P(\\rho| x, y) \\propto P(\\rho) \\frac{(1- \\rho^2)^{(n-1)/2}}{(1- \\rho \\times r)^{n - (3/2)}} \\] where \\(\\rho = \\tanh \\xi\\) where \\(\\xi \\sim N(z, 1/n)\\) \\(r = \\tanh z\\) Then the posterior density follow a normal distribution where Mean \\[ \\mu_{posterior} = \\sigma^2_{posterior} \\times (n_{prior} \\times \\tanh^{-1} r_{prior}+ n_{likelihood} \\times \\tanh^{-1} r_{likelihood}) \\] variance \\[ \\sigma^2_{posterior} = \\frac{1}{n_{prior} + n_{Likelihood}} \\] To simplify the integration process, we choose prior that is \\[ P(\\rho) \\propto (1 - \\rho^2)^c \\] where \\(c\\) is the weight the prior will have in estimation (i.e., \\(c = 0\\) if no prior info, hence \\(P(\\rho) \\propto 1\\)) Example: Current study: \\(r_{xy} = 0.5, n = 200\\) Previous study: \\(r_{xy} = 0.2765, (n=50205)\\) Combining two, we have the posterior following a normal distribution with the variance of \\[ \\sigma^2_{posterior} = \\frac{1}{n_{prior} + n_{Likelihood}} = \\frac{1}{200 + 50205} = 0.0000198393 \\] Mean \\[ \\begin{aligned} \\mu_{Posterior} &amp;= \\sigma^2_{Posterior} \\times (n_{prior} \\times \\tanh^{-1} r_{prior}+ n_{likelihood} \\times \\tanh^{-1} r_{likelihood}) \\\\ &amp;= 0.0000198393 \\times (50205 \\times \\tanh^{-1} 0.2765 + 200 \\times \\tanh^{-1}0.5 )\\\\ &amp;= 0.2849415 \\end{aligned} \\] Hence, \\(Posterior \\sim N(0.691, 0.0009)\\), which means the correlation coefficient is \\(\\tanh(0.691) = 0.598\\) and 95% CI is \\[ \\mu_{posterior} \\pm 1.96 \\times \\sqrt{\\sigma^2_{Posterior}} = 0.2849415 \\pm 1.96 \\times (0.0000198393)^{1/2} = (0.2762115, 0.2936714) \\] Hence, the interval for posterior \\(\\rho\\) is \\((0.2693952, 0.2855105)\\) If future authors suspect that they have Large sampling variation Measurement error in either measures in the correlation, which attenuates the relationship between the two variables Applying this Bayesian correction can give them a better estimate of the correlation between the two. To implement this calculation in R, see below n_new &lt;- 200 r_new &lt;- 0.5 alpha &lt;- 0.05 update_correlation &lt;- function(n_new, r_new, alpha) { n_meta &lt;- 50205 r_meta &lt;- 0.2765 # Variance var_xi &lt;- 1 / (n_new + n_meta) format(var_xi, scientific = FALSE) # mean mu_xi &lt;- var_xi * (n_meta * atanh(r_meta) + n_new * (atanh(r_new))) format(mu_xi, scientific = FALSE) # confidence interval upper_xi &lt;- mu_xi + qnorm(1 - alpha / 2) * sqrt(var_xi) lower_xi &lt;- mu_xi - qnorm(1 - alpha / 2) * sqrt(var_xi) # rho mean_rho &lt;- tanh(mu_xi) upper_rho &lt;- tanh(upper_xi) lower_rho &lt;- tanh(lower_xi) # return a list return( list( &quot;mu_xi&quot; = mu_xi, &quot;var_xi&quot; = var_xi, &quot;upper_xi&quot; = upper_xi, &quot;lower_xi&quot; = lower_xi, &quot;mean_rho&quot; = mean_rho, &quot;upper_rho&quot; = upper_rho, &quot;lower_rho&quot; = lower_rho ) ) } # Old confidence interval r_new + qnorm(1 - alpha / 2) * sqrt(1/n_new) #&gt; [1] 0.6385904 r_new - qnorm(1 - alpha / 2) * sqrt(1/n_new) #&gt; [1] 0.3614096 testing = update_correlation(n_new = n_new, r_new = r_new, alpha = alpha) # Updated rho testing$mean_rho #&gt; [1] 0.2774723 # Updated confidence interval testing$upper_rho #&gt; [1] 0.2855105 testing$lower_rho #&gt; [1] 0.2693952 33.1.2 Simultaneity When independent variables (\\(X\\)’s) are jointly determined with the dependent variable \\(Y\\), typically through an equilibrium mechanism, violates the second condition for causality (i.e., temporal order). Examples: quantity and price by demand and supply, investment and productivity, sales and advertisement General Simultaneous (Structural) Equations \\[ \\begin{aligned} Y_i &amp;= \\beta_0 + \\beta_1 X_i + u_i \\\\ X_i &amp;= \\alpha_0 + \\alpha_1 Y_i + v_i \\end{aligned} \\] Hence, the solutions are \\[ \\begin{aligned} Y_i &amp;= \\frac{\\beta_0 + \\beta_1 \\alpha_0}{1 - \\alpha_1 \\beta_1} + \\frac{\\beta_1 v_i + u_i}{1 - \\alpha_1 \\beta_1} \\\\ X_i &amp;= \\frac{\\alpha_0 + \\alpha_1 \\beta_0}{1 - \\alpha_1 \\beta_1} + \\frac{v_i + \\alpha_1 u_i}{1 - \\alpha_1 \\beta_1} \\end{aligned} \\] If we run only one regression, we will have biased estimators (because of simultaneity bias): \\[ \\begin{aligned} Cov(X_i, u_i) &amp;= Cov(\\frac{v_i + \\alpha_1 u_i}{1 - \\alpha_1 \\beta_1}, u_i) \\\\ &amp;= \\frac{\\alpha_1}{1- \\alpha_1 \\beta_1} Var(u_i) \\end{aligned} \\] In an even more general model \\[ \\begin{cases} Y_i = \\beta_0 + \\beta_1 X_i + \\beta_2 T_i + u_i \\\\ X_i = \\alpha_0 + \\alpha_1 Y_i + \\alpha_2 Z_i + v_i \\end{cases} \\] where \\(X_i, Y_i\\) are endogenous variables determined within the system \\(T_i, Z_i\\) are exogenous variables Then, the reduced form of the model is \\[ \\begin{cases} \\begin{aligned} Y_i &amp;= \\frac{\\beta_0 + \\beta_1 \\alpha_0}{1 - \\alpha_1 \\beta_1} + \\frac{\\beta_1 \\alpha_2}{1 - \\alpha_1 \\beta_1} Z_i + \\frac{\\beta_2}{1 - \\alpha_1 \\beta_1} T_i + \\tilde{u}_i \\\\ &amp;= B_0 + B_1 Z_i + B_2 T_i + \\tilde{u}_i \\end{aligned} \\\\ \\begin{aligned} X_i &amp;= \\frac{\\alpha_0 + \\alpha_1 \\beta_0}{1 - \\alpha_1 \\beta_1} + \\frac{\\alpha_2}{1 - \\alpha_1 \\beta_1} Z_i + \\frac{\\alpha_1\\beta_2}{1 - \\alpha_1 \\beta_1} T_i + \\tilde{v}_i \\\\ &amp;= A_0 + A_1 Z_i + A_2 T_i + \\tilde{v}_i \\end{aligned} \\end{cases} \\] Then, now we can get consistent estimates of the reduced form parameters And to get the original parameter estimates \\[ \\begin{aligned} \\frac{B_1}{A_1} &amp;= \\beta_1 \\\\ B_2 (1 - \\frac{B_1 A_2}{A_1B_2}) &amp;= \\beta_2 \\\\ \\frac{A_2}{B_2} &amp;= \\alpha_1 \\\\ A_1 (1 - \\frac{B_1 A_2}{A_1 B_2}) &amp;= \\alpha_2 \\end{aligned} \\] Rules for Identification Order Condition (necessary but not sufficient) \\[ K - k \\ge m - 1 \\] where \\(M\\) = number of endogenous variables in the model K = number of exogenous variables int he model \\(m\\) = number of endogenous variables in a given \\(k\\) = is the number of exogenous variables in a given equation This is actually the general framework for instrumental variables 33.1.3 Endogenous Treatment Solutions Using the OLS estimates as a reference point library(AER) library(REndo) set.seed(421) data(&quot;CASchools&quot;) school &lt;- CASchools school$stratio &lt;- with(CASchools, students / teachers) m1.ols &lt;- lm(read ~ stratio + english + lunch + grades + income + calworks + county, data = school) summary(m1.ols)$coefficients[1:7,] #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 683.45305948 9.56214469 71.4748711 3.011667e-218 #&gt; stratio -0.30035544 0.25797023 -1.1643027 2.450536e-01 #&gt; english -0.20550107 0.03765408 -5.4576041 8.871666e-08 #&gt; lunch -0.38684059 0.03700982 -10.4523759 1.427370e-22 #&gt; gradesKK-08 -1.91291321 1.35865394 -1.4079474 1.599886e-01 #&gt; income 0.71615378 0.09832843 7.2832829 1.986712e-12 #&gt; calworks -0.05273312 0.06154758 -0.8567863 3.921191e-01 33.1.3.1 Instrumental Variable [A3a] requires \\(\\epsilon_i\\) to be uncorrelated with \\(\\mathbf{x}_i\\) Assume A1 , A2, A5 \\[ plim(\\hat{\\beta}_{OLS}) = \\beta + [E(\\mathbf{x_i&#39;x_i})]^{-1}E(\\mathbf{x_i&#39;}\\epsilon_i) \\] [A3a] is the weakest assumption needed for OLS to be consistent A3 fails when \\(x_{ik}\\) is correlated with \\(\\epsilon_i\\) Omitted Variables Bias: \\(\\epsilon_i\\) includes any other factors that may influence the dependent variable (linearly) Simultaneity Demand and prices are simultaneously determined. Endogenous Sample Selection we did not have iid sample Measurement Error Note Omitted Variable: an omitted variable is a variable, omitted from the model (but is in the \\(\\epsilon_i\\)) and unobserved has predictive power towards the outcome. Omitted Variable Bias: is the bias (and inconsistency when looking at large sample properties) of the OLS estimator when the omitted variable. We cam have both positive and negative selection bias (it depends on what our story is) The structural equation is used to emphasize that we are interested understanding a causal relationship \\[ y_{i1} = \\beta_0 + \\mathbf{z}_i1 \\beta_1 + y_{i2}\\beta_2 + \\epsilon_i \\] where \\(y_{it}\\) is the outcome variable (inherently correlated with \\(\\epsilon_i\\)) \\(y_{i2}\\) is the endogenous covariate (presumed to be correlated with \\(\\epsilon_i\\)) \\(\\beta_1\\) represents the causal effect of \\(y_{i2}\\) on \\(y_{i1}\\) \\(\\mathbf{z}_{i1}\\) is exogenous controls (uncorrelated with \\(\\epsilon_i\\)) (\\(E(z_{1i}&#39;\\epsilon_i) = 0\\)) OLS is an inconsistent estimator of the causal effect \\(\\beta_2\\) If there was no endogeneity \\(E(y_{i2}&#39;\\epsilon_i) = 0\\) the exogenous variation in \\(y_{i2}\\) is what identifies the causal effect If there is endogeneity Any wiggle in \\(y_{i2}\\) will shift simultaneously with \\(\\epsilon_i\\) \\[ plim(\\hat{\\beta}_{OLS}) = \\beta + [E(\\mathbf{x&#39;_ix_i})]^{-1}E(\\mathbf{x&#39;_i}\\epsilon_i) \\] where \\(\\beta\\) is the causal effect \\([E(\\mathbf{x&#39;_ix_i})]^{-1}E(\\mathbf{x&#39;_i}\\epsilon_i)\\) is the endogenous effect Hence \\(\\hat{\\beta}_{OLS}\\) can be either more positive and negative than the true causal effect. Motivation for Two Stage Least Squares (2SLS) \\[ y_{i1}=\\beta_0 + \\mathbf{z}_{i1}\\beta_1 + y_{i2}\\beta_2 + \\epsilon_i \\] We want to understand how movement in \\(y_{i2}\\) effects movement in \\(y_{i1}\\), but whenever we move \\(y_{i2}\\), \\(\\epsilon_i\\) also moves. Solution We need a way to move \\(y_{i2}\\) independently of \\(\\epsilon_i\\), then we can analyze the response in \\(y_{i1}\\) as a causal effect Find an instrumental variable(s) \\(z_{i2}\\) Instrument Relevance: when** \\(z_{i2}\\) moves then \\(y_{i2}\\) also moves Instrument Exogeneity: when \\(z_{i2}\\) moves then \\(\\epsilon_i\\) does not move. \\(z_{i2}\\) is the exogenous variation that identifies the causal effect \\(\\beta_2\\) Finding an Instrumental variable: Random Assignment: + Effect of class size on educational outcomes: instrument is initial random Relation’s Choice + Effect of Education on Fertility: instrument is parent’s educational level Eligibility + Trade-off between IRA and 401K retirement savings: instrument is 401k eligibility Example Return to College education is correlated with ability - endogenous Near 4year as an instrument Instrument Relevance: when near moves then education also moves Instrument Exogeneity: when near moves then \\(\\epsilon_i\\) does not move. Other potential instruments; near a 2-year college. Parent’s Education. Owning Library Card \\[ y_{i1}=\\beta_0 + \\mathbf{z}_{i1}\\beta_1 + y_{i2}\\beta_2 + \\epsilon_i \\] First Stage (Reduced Form) Equation: \\[ y_{i2} = \\pi_0 + \\mathbf{z_{i1}\\pi_1} + \\mathbf{z_{i2}\\pi_2} + v_i \\] where \\(\\pi_0 + \\mathbf{z_{i1}\\pi_1} + \\mathbf{z_{i2}\\pi_2}\\) is exogenous variation \\(v_i\\) is endogenous variation This is called a reduced form equation Not interested in the causal interpretation of \\(\\pi_1\\) or \\(\\pi_2\\) A linear projection of \\(z_{i1}\\) and \\(z_{i2}\\) on \\(y_{i2}\\) (simple correlations) The projections \\(\\pi_1\\) and \\(\\pi_2\\) guarantee that \\(E(z_{i1}&#39;v_i)=0\\) and \\(E(z_{i2}&#39;v_i)=0\\) Instrumental variable \\(z_{i2}\\) Instrument Relevance: \\(\\pi_2 \\neq 0\\) Instrument Exogeneity: \\(E(\\mathbf{z_{i2}\\epsilon_i})=0\\) Moving only the exogenous part of \\(y_i2\\) is moving \\[ \\tilde{y}_{i2} = \\pi_0 + \\mathbf{z_{i1}\\pi_1 + z_{i2}\\pi_2} \\] two Stage Least Squares (2SLS) \\[ y_{i1} = \\beta_0 +\\mathbf{z_{i1}\\beta_1}+ y_{i2}\\beta_2 + \\epsilon_i \\] \\[ y_{i2} = \\pi_0 + \\mathbf{z_{i2}\\pi_2} + \\mathbf{v_i} \\] Equivalently, \\[\\begin{equation} \\begin{split} y_{i1} = \\beta_0 + \\mathbf{z_{i1}}\\beta_1 + \\tilde{y}_{i2}\\beta_2 + u_i \\end{split} \\tag{33.1} \\end{equation}\\] where \\(\\tilde{y}_{i2} =\\pi_0 + \\mathbf{z_{i2}\\pi_2}\\) \\(u_i = v_i \\beta_2+ \\epsilon_i\\) The (33.1) holds for A1, A5 A2 holds if the instrument is relevant \\(\\pi_2 \\neq 0\\) + \\(y_{i1} = \\beta_0 + \\mathbf{z_{i1}\\beta_1 + (\\pi_0 + z_{i1}\\pi_1 + z_{i2}\\pi_2)}\\beta_2 + u_i\\) [A3a] holds if the instrument is exogenous \\(E(\\mathbf{z}_{i2}\\epsilon_i)=0\\) \\[ \\begin{aligned} E(\\tilde{y}_{i2}&#39;u_i) &amp;= E((\\pi_0 + \\mathbf{z_{i1}\\pi_1+z_{i2}})(v_i\\beta_2 + \\epsilon_i)) \\\\ &amp;= E((\\pi_0 + \\mathbf{z_{i1}\\pi_1+z_{i2}})( \\epsilon_i)) \\\\ &amp;= E(\\epsilon_i)\\pi_0 + E(\\epsilon_iz_{i1})\\pi_1 + E(\\epsilon_iz_{i2}) \\\\ &amp;=0 \\end{aligned} \\] Hence, (33.1) is consistent The 2SLS Estimator 1. Estimate the first stage using OLS \\[ y_{i2} = \\pi_0 + \\mathbf{z_{i2}\\pi_2} + \\mathbf{v_i} \\] and obtained estimated value \\(\\hat{y}_{i2}\\) Estimate the altered equation using OLS \\[ y_{i1} = \\beta_0 +\\mathbf{z_{i1}\\beta_1}+ \\hat{y}_{i2}\\beta_2 + \\epsilon_i \\] Properties of the 2SLS Estimator Under A1, A2, [A3a] (for \\(z_{i1}\\)), A5 and if the instrument satisfies the following two conditions, + Instrument Relevance: \\(\\pi_2 \\neq 0\\) + Instrument Exogeneity: \\(E(\\mathbf{z}_{i2}&#39;\\epsilon_i) = 0\\) then the 2SLS estimator is consistent Can handle more than one endogenous variable and more than one instrumental variable \\[ \\begin{aligned} y_{i1} &amp;= \\beta_0 + z_{i1}\\beta_1 + y_{i2}\\beta_2 + y_{i3}\\beta_3 + \\epsilon_i \\\\ y_{i2} &amp;= \\pi_0 + z_{i1}\\pi_1 + z_{i2}\\pi_2 + z_{i3}\\pi_3 + z_{i4}\\pi_4 + v_{i2} \\\\ y_{i3} &amp;= \\gamma_0 + z_{i1}\\gamma_1 + z_{i2}\\gamma_2 + z_{i3}\\gamma_3 + z_{i4}\\gamma_4 + v_{i3} \\end{aligned} \\] + **IV estimator**: one endogenous variable with a single instrument + **2SLS estimator**: one endogenous variable with multiple instruments + **GMM estimator**: multiple endogenous variables with multiple instruments Standard errors produced in the second step are not correct Because we do not know \\(\\tilde{y}\\) perfectly and need to estimate it in the firs step, we are introducing additional variation We did not have this problem with FGLS because “the first stage was orthogonal to the second stage.” This is generally not true for most multi-step procedure. If A4 does not hold, need to report robust standard errors. 2SLS is less efficient than OLS and will always have larger standard errors. First, \\(Var(u_i) = Var(v_i\\beta_2 + \\epsilon_i) &gt; Var(\\epsilon_i)\\) Second, \\(\\hat{y}_{i2}\\) is generally highly collinear with \\(\\mathbf{z}_{i1}\\) The number of instruments need to be at least as many or more the number of endogenous variables. Note 2SLS can be combined with FGLS to make the estimator more efficient: You have the same first-stage, and in the second-stage, instead of using OLS, you can use FLGS with the weight matrix \\(\\hat{w}\\) Generalized Method of Moments can be more efficient than 2SLS. In the second-stage of 2SLS, you can also use MLE, but then you are making assumption on the distribution of the outcome variable, the endogenous variable, and their relationship (joint distribution). 33.1.3.1.1 Testing Assumptions Endogeneity Test: Is \\(y_{i2}\\) truly endogenous (i.e., can we just use OLS instead of 2SLS)? Exogeneity (Cannot always test and when you can it might not be informative) Relevancy (need to avoid “weak instruments”) 33.1.3.1.1.1 Endogeneity Test 2SLS is generally so inefficient that we may prefer OLS if there is not much endogeneity Biased but inefficient vs efficient but biased Want a sense of “how endogenous” \\(y_{i2}\\) is if “very” endogenous - should use 2SLS if not “very” endogenous - perhaps prefer OLS Invalid Test of Endogeneity: \\(y_{i2}\\) is endogenous if it is correlated with \\(\\epsilon_i\\), \\[ \\epsilon_i = \\gamma_0 + y_{i2}\\gamma_1 + error_i \\] where \\(\\gamma_1 \\neq 0\\) implies that there is endogeneity \\(\\epsilon_i\\) is not observed, but using the residuals \\[ e_i = \\gamma_0 + y_{i2}\\gamma_1 + error_i \\] is NOT a valid test of endogeneity + The OLS residual, e is mechanically uncorrelated with \\(y_{i2}\\) (by FOC for OLS) + In every situation, \\(\\gamma_1\\) will be essentially 0 and you will never be able to reject the null of no endogeneity Valid test of endogeneity If \\(y_{i2}\\) is not endogenous then \\(\\epsilon_i\\) and v are uncorrelated \\[ \\begin{aligned} y_{i1} &amp;= \\beta_0 + \\mathbf{z}_{i1}\\beta_1 + y_{i2}\\beta_2 + \\epsilon_i \\\\ y_{i2} &amp;= \\pi_0 + \\mathbf{z}_{i1}\\pi_1 + z_{i2}\\pi_2 + v_i \\end{aligned} \\] Variable Addition test: include the first stage residuals as an additional variable, \\[ y_{i1} = \\beta_0 + \\mathbf{z}_{i1}\\beta_1 + y_{i2}\\beta_2 + \\hat{v}_i \\theta + error_i \\] Then the usual \\(t\\)-test of significance is a valid test to evaluate the following hypothesis. note this test requires your instrument to be valid instrument. \\[ \\begin{aligned} &amp;H_0: \\theta = 0 &amp; \\text{ (not endogenous)} \\\\ &amp;H_1: \\theta \\neq 0 &amp; \\text{ (endogenous)} \\end{aligned} \\] 33.1.3.1.1.2 Exogeneity Why exogeneity matter? \\[ E(\\mathbf{z}_{i2}&#39;\\epsilon_i) = 0 \\] If [A3a] fails - 2SLS is also inconsistent If instrument is not exogenous, then we need to find a new one. Similar to Endogeneity Test, when there is a single instrument \\[ \\begin{aligned} e_i &amp;= \\gamma_0 + \\mathbf{z}_{i2}\\gamma_1 + error_i \\\\ H_0: \\gamma_1 &amp;= 0 \\end{aligned} \\] is NOT a valid test of endogeneity the OLS residual, e is mechanically uncorrelated with \\(z_{i2}\\): \\(\\hat{\\gamma}_1\\) will be essentially 0 and you will never be able to determine if the instrument is endogenous. Solution Testing Instrumental Exogeneity in an Over-identified Model When there is more than one exogenous instrument (per endogenous variable), we can test for instrument exogeneity. When we have multiple instruments, the model is said to be over-identified. Could estimate the same model several ways (i.e., can identify/ estimate \\(\\beta_1\\) more than one way) Idea behind the test: if the controls and instruments are truly exogenous then OLS estimation of the following regression, \\[ \\epsilon_i = \\gamma_0 + \\mathbf{z}_{i1}\\gamma_1 + \\mathbf{z}_{i2}\\gamma_2 + error_i \\] should have a very low \\(R^2\\) if the model is just identified (one instrument per endogenous variable) then the \\(R^2 = 0\\) Steps: Estimate the structural equation by 2SLS (using all available instruments) and obtain the residuals e Regress e on all controls and instruments and obtain the \\(R^2\\) Under the null hypothesis (all IV’s are uncorrelated), \\(nR^2 \\sim \\chi^2(q)\\), where q is the number of instrumental variables minus the number of endogenous variables if the model is just identified (one instrument per endogenous variable) then q = 0, and the distribution under the null collapses. low p-value means you reject the null of exogenous instruments. Hence you would like to have high p-value in this test. Pitfalls for the Overid test the overid test is essentially compiling the following information. Conditional on first instrument being exogenous is the other instrument exogenous? Conditional on the other instrument being exogenous, is the first instrument exogenous? If all instruments are endogenous than neither test will be valid really only useful if one instrument is thought to be truly exogenous (randomly assigned). even f you do reject the null, the test does not tell you which instrument is exogenous and which is endogenous. Result Implication reject the null you can be pretty sure there is an endogenous instrument, but don’t know which one. fail to reject could be either (1) they are both exogenous, (2) they are both endogenous. 33.1.3.1.1.3 Relevancy Why Relevance matter? \\[ \\pi_2 \\neq 0 \\] used to show A2 holds If \\(\\pi_2 = 0\\) (instrument is not relevant) then A2 fails - perfect multicollinearity If \\(\\pi_2\\) is close to 0 (weak instrument) then there is near perfect multicollinearity - 2SLS is highly inefficient (Large standard errors). A weak instrument will exacerbate any inconsistency due to an instrument being (even slightly) endogenous. In the simple case with no controls and a single endogenous variable and single instrumental variable, \\[ plim(\\hat{\\beta}_{2_{2SLS}}) = \\beta_2 + \\frac{E(z_{i2}\\epsilon_i)}{E(z_{i2}y_{i2})} \\] Testing Weak Instruments can use \\(t\\)-test (or \\(F\\)-test for over-identified models) in the first stage to determine if there is a weak instrument problem. J. Stock and Yogo (2005): a statistical rejection of the null hypothesis in the first stage at the 5% (or even 1%) level is not enough to insure the instrument is not weak Rule of Thumb: need a \\(F\\)-stat of at least 10 (or a \\(t\\)-stat of at least 3.2) to reject the null hypothesis that the instrument is weak. Summary of the 2SLS Estimator \\[ \\begin{aligned} y_{i1} &amp;=\\beta_0 + \\mathbf{z}_{i1}\\beta_1 + y_{i2}\\beta_2 + \\epsilon_i \\\\ y_{i2} &amp;= \\pi_0 + \\mathbf{z_{i1}\\pi_1} + \\mathbf{z_{i2}\\pi_2} + v_i \\end{aligned} \\] when [A3a] does not hold \\[ E(y_{i2}&#39;\\epsilon_i) \\neq 0 \\] Then the OLS estimator is no longer unbiased or consistent. If we have valid instruments \\(\\mathbf{z}_{i2}\\) Relevancy (need to avoid “weak instruments”): \\(\\pi_2 \\neq 0\\) Then the 2SLS estimator is consistent under A1, A2, [A5a], and the above two conditions. If A4 also holds, then the usual standard errors are valid. If A4 does not hold then use the robust standard errors. \\[ \\begin{aligned} y_{i1} &amp;= \\beta_0 + \\mathbf{z}_{i1}\\beta_1 + y_{i2}\\beta_2 + \\epsilon_i \\\\ y_{i2} &amp;= \\pi_0 + \\mathbf{z_{i1}\\pi_1} + \\mathbf{z_{i2}\\pi_2} + v_i \\end{aligned} \\] When [A3a] does hold \\[ E(y_{i2}&#39;\\epsilon_i) = 0 \\] and we have valid instruments, then both the OLS and 2SLS estimators are consistent. The OLS estimator is always more efficient can use the variable addition test to determine if 2SLS is need (A3a does hold) or if OLS is valid (A3a does not hold) Sometimes we can test the assumption for instrument to be valid: Exogeneity : Only table when there are more instruments than endogenous variables. Relevancy (need to avoid “weak instruments”): Always testable, need the F-stat to be greater than 10 to rule out a weak instrument Application Expenditure as observed instrument m2.2sls &lt;- ivreg( read ~ stratio + english + lunch + grades + income + calworks + county | expenditure + english + lunch + grades + income + calworks + county , data = school ) summary(m2.2sls)$coefficients[1:7,] #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 700.47891593 13.58064436 51.5792106 8.950497e-171 #&gt; stratio -1.13674002 0.53533638 -2.1234126 3.438427e-02 #&gt; english -0.21396934 0.03847833 -5.5607753 5.162571e-08 #&gt; lunch -0.39384225 0.03773637 -10.4366757 1.621794e-22 #&gt; gradesKK-08 -1.89227865 1.37791820 -1.3732881 1.704966e-01 #&gt; income 0.62487986 0.11199008 5.5797785 4.668490e-08 #&gt; calworks -0.04950501 0.06244410 -0.7927892 4.284101e-01 33.1.3.1.2 Checklist Regress the dependent variable on the instrument (reduced form). Since under OLS, we have unbiased estimate, the coefficient estimate should be significant (make sure the sign makes sense) Report F-stat on the excluded instruments. F-stat &lt; 10 means you have a weak instrument (J. H. Stock, Wright, and Yogo 2002). Present \\(R^2\\) before and after including the instrument (Rossi 2014) For models with multiple instrument, present firs-t and second-stage result for each instrument separately. Overid test should be conducted (e.g., Sargan-Hansen J) Hausman test between OLS and 2SLS (don’t confuse this test for evidence that endogeneity is irrelevant - under invalid IV, the test is useless) Compare the 2SLS with the limited information ML. If they are different, you have evidence for weak instruments. 33.1.3.2 Good Instruments Exogeneity and Relevancy are necessary but not sufficient for IV to produce consistent estimates. Without theory or possible explanation, you can always create a new variable that is correlated with \\(X\\) and uncorrelated with \\(\\epsilon\\) For example, we want to estimate the effect of price on quantity (Reiss 2011, 960) \\[ \\begin{aligned} Q &amp;= \\beta_1 P + \\beta_2 X + \\epsilon \\\\ P &amp;= \\pi_1 X + \\eta \\end{aligned} \\] where \\(\\epsilon\\) and \\(\\eta\\) are jointly determined, \\(X \\perp \\epsilon, \\eta\\) Without theory, we can just create a new variable \\(Z = X + u\\) where \\(E(u) = 0; u \\perp X, \\epsilon, \\eta\\) Then, \\(Z\\) satisfied both conditions: Relevancy: \\(X\\) correlates \\(P\\) \\(\\rightarrow\\) \\(Z\\) correlates \\(P\\) Exogeneity: \\(u \\perp \\epsilon\\) (random noise) But obviously, it’s not a valid instrument (intuitively). But theoretically, relevance and exogeneity are not sufficient to identify \\(\\beta\\) because of unsatisfied rank condition for identification. Moreover, the functional form of the instrument also plays a role when choosing a good instrument. Hence, we always need to check for the robustness of our instrument. IV methods even with valid instruments can still have poor sampling properties (finite sample bias, large sampling errors) (Rossi 2014) When you have a weak instrument, it’s important to report it appropriately. This problem will be exacerbated if you have multiple instruments (Larcker and Rusticus 2010). 33.1.3.2.1 Lagged dependent variable In time series data sets, we can use lagged dependent variable as an instrument because it is not influenced by current shocks. For example, Chetty, Friedman, and Rockoff (2014) used lagged dependent variable in econ. 33.1.3.2.2 Lagged explanatory variable Common practice in applied economics: Replace suspected simultaneously determined explanatory variable with its lagged value Bellemare, Masaki, and Pepinsky (2017). This practice does not avoid simultaneity bias. Estimates using this method are still inconsistent. Hypothesis testing becomes invalid under this approach. Lagging variables changes how endogeneity bias operates, adding a “no dynamics among unobservables” assumption to the “selection on observables” assumption. Key conditions for appropriate use (Bellemare, Masaki, and Pepinsky 2017): Under unobserved confounding: No dynamics among unobservables. The lagged variable \\(X\\) is a stationary autoregressive process. Under no unobserved confounding: No reverse causality; the causal effect operates with a one-period lag (\\(X_{t-1} \\to Y\\), \\(X_t \\not\\to Y_t\\)). Reverse causality is contemporaneous, with a one-period lag effect. Reverse causality is contemporaneous; no dynamics in \\(Y\\), but dynamics exist in \\(X\\) (\\(X_{t-1} \\to X\\)). Alternative approach: Use lagged values of the endogenous variable in IV estimation. However, IV estimation is only effective if (Reed 2015): Lagged values do not belong in the estimating equation. Lagged values are sufficiently correlated with the simultaneously determined explanatory variable. Lagged IVs help mitigate endogeneity if they only violate the independence assumption. However, if lagged IVs violate both the independence assumption and exclusion restriction, they may aggravate endogeneity (Yu Wang and Bellemare 2019). 33.1.3.3 Internal instrumental variable (also known as instrument free methods). This section is based on Raluca Gui’s guide alternative to external instrumental variable approaches All approaches here assume a continuous dependent variable 33.1.3.3.1 Non-hierarchical Data (Cross-classified) \\[ Y_t = \\beta_0 + \\beta_1 P_t + \\beta_2 X_t + \\epsilon_t \\] where \\(t = 1, .., T\\) (indexes either time or cross-sectional units) \\(Y_t\\) is a \\(k \\times 1\\) response variable \\(X_t\\) is a \\(k \\times n\\) exogenous regressor \\(P_t\\) is a \\(k \\times 1\\) continuous endogenous regressor \\(\\epsilon_t\\) is a structural error term with \\(\\mu_\\epsilon =0\\) and \\(E(\\epsilon^2) = \\sigma^2\\) \\(\\beta\\) are model parameters The endogeneity problem arises from the correlation of \\(P_t\\) and \\(\\epsilon_t\\): \\[ P_t = \\gamma Z_t + v_t \\] where \\(Z_t\\) is a \\(l \\times 1\\) vector of internal instrumental variables \\(ν_t\\) is a random error with \\(\\mu_{v_t}, E(v^2) = \\sigma^2_v, E(\\epsilon v) = \\sigma_{\\epsilon v}\\) \\(Z_t\\) is assumed to be stochastic with distribution \\(G\\) \\(ν_t\\) is assumed to have density \\(h(·)\\) 33.1.3.3.1.1 Latent Instrumental Variable (Ebbes et al. 2005) assume \\(Z_t\\) (unobserved) to be uncorrelated with \\(\\epsilon_t\\), which is similar to Instrumental Variable. Hence, \\(Z_t\\) and \\(ν_t\\) can’t be identified without distributional assumptions The distributions of \\(Z_t\\) and \\(ν_t\\) need to be specified such that: endogeneity of \\(P_t\\) is corrected the distribution of \\(P_t\\) is empirically close to the integral that expresses the amount of overlap of Z as it is shifted over ν (= the convolution between \\(Z_t\\) and \\(ν_t\\)). When the density h(·) = Normal, then G cannot be normal because the parameters would not be identified (Ebbes et al. 2005) . Hence, in the LIV model the distribution of \\(Z_t\\) is discrete in the Higher Moments Method and Joint Estimation Using Copula methods, the distribution of \\(Z_t\\) is taken to be skewed. \\(Z_t\\) are assumed unobserved, discrete and exogenous, with an unknown number of groups m \\(\\gamma\\) is a vector of group means. Identification of the parameters relies on the distributional assumptions of \\(P_t\\): a non-Gaussian distribution \\(Z_t\\) discrete with \\(m \\ge 2\\) Note: If \\(Z_t\\) is continuous, the model is unidentified If \\(P_t \\sim N\\), you have inefficient estimates. m3.liv &lt;- latentIV(read ~ stratio, data = school) summary(m3.liv)$coefficients[1:7, ] #&gt; Estimate Std. Error z-score Pr(&gt;|z|) #&gt; (Intercept) 6.996014e+02 2.686186e+02 2.604441e+00 9.529597e-03 #&gt; stratio -2.272673e+00 1.367757e+01 -1.661605e-01 8.681108e-01 #&gt; pi1 -4.896363e+01 5.526907e-08 -8.859139e+08 0.000000e+00 #&gt; pi2 1.963920e+01 9.225351e-02 2.128830e+02 0.000000e+00 #&gt; theta5 6.939432e-152 3.354672e-160 2.068587e+08 0.000000e+00 #&gt; theta6 3.787512e+02 4.249457e+01 8.912932e+00 1.541524e-17 #&gt; theta7 -1.227543e+00 4.885276e+01 -2.512741e-02 9.799653e-01 it will return a coefficient very different from the other methods since there is only one endogenous variable. 33.1.3.3.1.2 Joint Estimation Using Copula assume \\(Z_t\\) (unobserved) to be uncorrelated with \\(\\epsilon_t\\), which is similar to Instrumental Variable. Hence, \\(Z_t\\) and \\(ν_t\\) can’t be identified without distributional assumptions (Park and Gupta 2012) allows joint estimation of the continuous \\(P_t\\) and \\(\\epsilon_t\\) using Gaussian copulas, where a copula is a function that maps several conditional distribution functions (CDF) into their joint CDF). The underlying idea is that using information contained in the observed data, one selects marginal distributions for \\(P_t\\) and \\(\\epsilon_t\\). Then, the copula model constructs a flexible multivariate joint distribution that allows a wide range of correlations between the two marginals. The method allows both continuous and discrete \\(P_t\\). In the special case of one continuous \\(P_t\\), estimation is based on MLE Otherwise, based on Gaussian copulas, augmented OLS estimation is used. Assumptions: skewed \\(P_t\\) the recovery of the correct parameter estimates \\(\\epsilon_t \\sim\\) normal marginal distribution. The marginal distribution of \\(P_t\\) is obtained using the Epanechnikov kernel density estimator \\[ \\hat{h}_p = \\frac{1}{T . b} \\sum_{t=1}^TK(\\frac{p - P_t}{b}) \\] where \\(P_t\\) = endogenous variables \\(K(x) = 0.75(1-x^2)I(||x||\\le 1)\\) \\(b=0.9T^{-1/5}\\times min(s, IQR/1.34)\\) IQR = interquartile range \\(s\\) = sample standard deviation \\(T\\) = n of time periods observed in the data # 1.34 comes from this diff(qnorm(c(0.25, 0.75))) #&gt; [1] 1.34898 In augmented OLS and MLE, the inference procedure occurs in two stages: (1): the empirical distribution of \\(P_t\\) is computed (2) used in it constructing the likelihood function) Hence, the standard errors would not be correct. So we use the sampling distributions (from bootstrapping) to get standard errors and the variance-covariance matrix. Since the distribution of the bootstrapped parameters is highly skewed, we report the percentile confidence intervals is preferable. set.seed(110) m4.cc &lt;- copulaCorrection( read ~ stratio + english + lunch + calworks + grades + income + county | continuous(stratio), data = school, optimx.args = list(method = c(&quot;Nelder-Mead&quot;), itnmax = 60000), num.boots = 2, verbose = FALSE ) summary(m4.cc)$coefficients[1:7,] #&gt; Point Estimate Boots SE Lower Boots CI (95%) Upper Boots CI (95%) #&gt; (Intercept) 683.06900891 2.80554212 NA NA #&gt; stratio -0.32434608 0.02075999 NA NA #&gt; english -0.21576110 0.01450666 NA NA #&gt; lunch -0.37087664 0.01902052 NA NA #&gt; calworks -0.05569058 0.02076781 NA NA #&gt; gradesKK-08 -1.92286128 0.25684614 NA NA #&gt; income 0.73595353 0.04725700 NA NA we run this model with only one endogenous continuous regressor (stratio). Sometimes, the code will not converge, in which case you can use different optimization algorithm starting values maximum number of iterations 33.1.3.3.1.3 Higher Moments Method suggested by (Lewbel 1997) to identify \\(\\epsilon_t\\) caused by measurement error. Identification is achieved by using third moments of the data, with no restrictions on the distribution of \\(\\epsilon_t\\) The following instruments can be used with 2SLS estimation to obtain consistent estimates: \\[ \\begin{aligned} q_{1t} &amp;= (G_t - \\bar{G}) \\\\ q_{2t} &amp;= (G_t - \\bar{G})(P_t - \\bar{P}) \\\\ q_{3t} &amp;= (G_t - \\bar{G})(Y_t - \\bar{Y})\\\\ q_{4t} &amp;= (Y_t - \\bar{Y})(P_t - \\bar{P}) \\\\ q_{5t} &amp;= (P_t - \\bar{P})^2 \\\\ q_{6t} &amp;= (Y_t - \\bar{Y})^2 \\\\ \\end{aligned} \\] where \\(G_t = G(X_t)\\) for any given function G that has finite third own and cross moments \\(X\\) = exogenous variable \\(q_{5t}, q_{6t}\\) can be used only when the measurement and \\(\\epsilon_t\\) are symmetrically distributed. The rest of the instruments does not require any distributional assumptions for \\(\\epsilon_t\\). Since the regressors \\(G(X) = X\\) are included as instruments, \\(G(X)\\) can’t be a linear function of X in \\(q_{1t}\\) Since this method has very strong assumptions, Higher Moments Method should only be used in case of overidentification set.seed(111) m5.hetEr &lt;- hetErrorsIV( read ~ stratio + english + lunch + calworks + income + grades + county | stratio | IIV(income, english), data = school ) summary(m5.hetEr)$coefficients[1:7,] #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 662.78791557 27.90173069 23.7543657 2.380436e-76 #&gt; stratio 0.71480686 1.31077325 0.5453322 5.858545e-01 #&gt; english -0.19522271 0.04057527 -4.8113717 2.188618e-06 #&gt; lunch -0.37834232 0.03927793 -9.6324402 9.760809e-20 #&gt; calworks -0.05665126 0.06302095 -0.8989273 3.692776e-01 #&gt; income 0.82693755 0.17236557 4.7975797 2.335271e-06 #&gt; gradesKK-08 -1.93795843 1.38723186 -1.3969968 1.632541e-01 recommend using this approach to create additional instruments to use with external ones for better efficiency. 33.1.3.3.1.4 Heteroskedastic Error Approach using means of variables that are uncorrelated with the product of heteroskedastic errors to identify structural parameters. This method can be use either when you don’t have external instruments or you want to use additional instruments to improve the efficiency of the IV estimator (Lewbel 2012) The instruments are constructed as simple functions of data Model’s assumptions: \\[ \\begin{aligned} E(X \\epsilon) &amp;= 0 \\\\ E(X v ) &amp;= 0 \\\\ cov(Z, \\epsilon v) &amp;= 0 \\\\ cov(Z, v^2) &amp;\\neq 0 \\text{ (for identification)} \\end{aligned} \\] Structural parameters are identified by 2SLS regression of Y on X and P, using X and [Z − E(Z)]ν as instruments. \\[ \\text{instrument&#39;s strength} \\propto cov((Z-\\bar{Z})v,v) \\] where \\(cov((Z-\\bar{Z})v,v)\\) is the degree of heteroskedasticity of ν with respect to Z (Lewbel 2012), which can be empirically tested. If it is zero or close to zero (i.e.,the instrument is weak), you might have imprecise estimates, with large standard errors. Under homoskedasticity, the parameters of the model are unidentified. Under heteroskedasticity related to at least some elements of X, the parameters of the model are identified. 33.1.3.3.2 Hierarchical Data Multiple independent assumptions involving various random components at different levels mean that any moderate correlation between some predictors and a random component or error term can result in a significant bias of the coefficients and of the variance components. (J.-S. Kim and Frees 2007) proposed a generalized method of moments which uses both, the between and within variations of the exogenous variables, but only assumes the within variation of the variables to be endogenous. Assumptions the errors at each level \\(\\sim iid N\\) the slope variables are exogenous the level-1 \\(\\epsilon \\perp X, P\\). If this is not the case, additional, external instruments are necessary Hierarchical Model \\[ \\begin{aligned} Y_{cst} &amp;= Z_{cst}^1 \\beta_{cs}^1 + X_{cst}^1 \\beta_1 + \\epsilon_{cst}^1 \\\\ \\beta^1_{cs} &amp;= Z_{cs}^2 \\beta_{c}^2 + X_{cst}^2 \\beta_2 + \\epsilon_{cst}^2 \\\\ \\beta^2_{c} &amp;= X^3_c \\beta_3 + \\epsilon_c^3 \\end{aligned} \\] Bias could stem from: errors at the higher two levels (\\(\\epsilon_c^3,\\epsilon_{cst}^2\\)) are correlated with some of the regressors only third level errors (\\(\\epsilon_c^3\\)) are correlated with some of the regressors (J.-S. Kim and Frees 2007) proposed When all variables are assumed exogenous, the proposed estimator equals the random effects estimator When all variables are assumed endogenous, it equals the fixed effects estimator also use omitted variable test (based on the Hausman-test (J. A. Hausman 1978) for panel data), which allows the comparison of a robust estimator and an estimator that is efficient under the null hypothesis of no omitted variables or the comparison of two robust estimators at different levels. # function &#39;cholmod_factor_ldetA&#39; not provided by package &#39;Matrix&#39; set.seed(113) school$gr08 &lt;- school$grades == &quot;KK-06&quot; m7.multilevel &lt;- multilevelIV(read ~ stratio + english + lunch + income + gr08 + calworks + (1 | county) | endo(stratio), data = school) summary(m7.multilevel)$coefficients[1:7,] Another example using simulated data level-1 regressors: \\(X_{11}, X_{12}, X_{13}, X_{14}, X_{15}\\), where \\(X_{15}\\) is correlated with the level-2 error (i.e., endogenous). level-2 regressors: \\(X_{21}, X_{22}, X_{23}, X_{24}\\) level-3 regressors: \\(X_{31}, X_{32}, X_{33}\\) We estimate a three-level model with X15 assumed endogenous. Having a three-level hierarchy, multilevelIV() returns five estimators, from the most robust to omitted variables (FE_L2), to the most efficient (REF) (i.e. lowest mean squared error). The random effects estimator (REF) is efficient assuming no omitted variables The fixed effects estimator (FE) is unbiased and asymptotically normal even in the presence of omitted variables. Because of the efficiency, the random effects estimator is preferable if you think there is no omitted. variables The robust estimator would be preferable if you think there is omitted variables. # function &#39;cholmod_factor_ldetA&#39; not provided by package &#39;Matrix&#39;’ data(dataMultilevelIV) set.seed(114) formula1 &lt;- y ~ X11 + X12 + X13 + X14 + X15 + X21 + X22 + X23 + X24 + X31 + X32 + X33 + (1 | CID) + (1 | SID) | endo(X15) m8.multilevel &lt;- multilevelIV(formula = formula1, data = dataMultilevelIV) coef(m8.multilevel) summary(m8.multilevel, &quot;REF&quot;) True \\(\\beta_{X_{15}} =-1\\). We can see that some estimators are bias because \\(X_{15}\\) is correlated with the level-two error, to which only FE_L2 and GMM_L2 are robust To select the appropriate estimator, we use the omitted variable test. In a three-level setting, we can have different estimator comparisons: Fixed effects vs. random effects estimators: Test for omitted level-two and level-three omitted effects, simultaneously, one compares FE_L2 to REF. But we will not know at which omitted variables exist. Fixed effects vs. GMM estimators: Once the existence of omitted effects is established but not sure at which level, we test for level-2 omitted effects by comparing FE_L2 vs GMM_L3. If you reject the null, the omitted variables are at level-2 The same is accomplished by testing FE_L2 vs. GMM_L2, since the latter is consistent only if there are no omitted effects at level-2. Fixed effects vs. fixed effects estimators: We can test for omitted level-2 effects, while allowing for omitted level-3 effects by comparing FE_L2 vs. FE_L3 since FE_L2 is robust against both level-2 and level-3 omitted effects while FE_L3 is only robust to level-3 omitted variables. Summary, use the omitted variable test comparing REF vs. FE_L2 first. If the null hypothesis is rejected, then there are omitted variables either at level-2 or level-3 Next, test whether there are level-2 omitted effects, since testing for omitted level three effects relies on the assumption there are no level-two omitted effects. You can use any of these pair of comparisons: FE_L2 vs. FE_L3 FE_L2 vs. GMM_L2 If no omitted variables at level-2 are found, test for omitted level-3 effects by comparing either FE_L3 vs. GMM_L3 GMM_L2 vs. GMM_L3 summary(m8.multilevel, &quot;REF&quot;) # compare REF with all the other estimators. Testing REF (the most efficient estimator) against FE_L2 (the most robust estimator), equivalently we are testing simultaneously for level-2 and level-3 omitted effects. Since the null hypothesis is rejected (p = 0.000139), there is bias in the random effects estimator. To test for level-2 omitted effects (regardless of level-3 omitted effects), we compare FE_L2 versus FE_L3 summary(m8.multilevel,&quot;FE_L2&quot;) The null hypothesis of no omitted level-2 effects is rejected (\\(p = 3.92e − 05\\)). Hence, there are omitted effects at level-two. We should use FE_L2 which is consistent with the underlying data that we generated (level-2 error correlated with \\(X_15\\), which leads to biased FE_L3 coefficients. The omitted variable test between FE_L2 and GMM_L2 should reject the null hypothesis of no omitted level-2 effects (p-value is 0). If we assume an endogenous variable as exogenous, the RE and GMM estimators will be biased because of the wrong set of internal instrumental variables. To increase our confidence, we should compare the omitted variable tests when the variable is considered endogenous vs. exogenous to get a sense whether the variable is truly endogenous. 33.1.3.4 Proxy Variables Can be in place of the omitted variable will not be able to estimate the effect of the omitted variable will be able to reduce some endogeneity caused bye the omitted variable but it can have Measurement Error. Hence, you have to be extremely careful when using proxies. Criteria for a proxy variable: The proxy is correlated with the omitted variable. Having the omitted variable in the regression will solve the problem of endogeneity The variation of the omitted variable unexplained by the proxy is uncorrelated with all independent variables, including the proxy. IQ test can be a proxy for ability in the regression between wage explained education. For the third requirement \\[ ability = \\gamma_0 + \\gamma_1 IQ + \\epsilon \\] where \\(\\epsilon\\) is uncorrelated with education and IQ test. References "],["endogenous-sample-selection.html", "33.2 Endogenous Sample Selection", " 33.2 Endogenous Sample Selection Also known as sample selection or self-selection problem or incidental truncation. The omitted variable is how people were selected into the sample Some disciplines consider nonresponse bias and selection bias as sample selection. When unobservable factors that affect who is in the sample are independent of unobservable factors that affect the outcome, the sample selection is not endogenous. Hence, the sample selection is ignorable and estimator that ignores sample selection is still consistent. when the unobservable factors that affect who is included in the sample are correlated with the unobservable factors that affect the outcome, the sample selection is endogenous and not ignorable, because estimators that ignore endogenous sample selection are not consistent (we don’t know which part of the observable outcome is related to the causal relationship and which part is due to different people were selected for the treatment and control groups). Assumptions: - The unobservables that affect the treatment selection and the outcome are jointly distributed as bivariate normal. Notes: If you don’t have strong exclusion restriction, identification is driven by the assumed non linearity in the functional form (through inverse Mills ratio). E.g., the estimate depend on the bivariate normal distribution of the error structure: With strong exclusion restriction for the covariate in the correction equation, the variation in this variable can help identify the control for selection With weak exclusion restriction, and the variable exists in both steps, it’s the assumed error structure that identifies the control for selection (J. Heckman and Navarro-Lozano 2004). In management, Wolfolds and Siegel (2019) found that papers should have valid exclusion conditions, because without these, simulations show that results using the Heckman method are less reliable than those obtained with OLS. There are differences between Heckman Sample Selection vs. Heckman-type correction Heckman Sample Selection Model Heckman-Type Corrections When Only observes one sample (treated), addressing selection bias directly. Two samples are observed (treated and untreated), known as the control function approach. Model Probit OLS (even for dummy endogenous variable) Integration of 1st stage Also include a term (called Inverse Mills ratio) besides the endogenous variable. Decompose the endogenous variable to get the part that is uncorrelated with the error terms of the outcome equation. Either use the predicted endogenous variable directly or include the residual from the first-stage equation. Advantages and Assumptions Provides a direct test for endogeneity via the coefficient of the inverse Mills ratio but requires the assumption of joint normality of errors. Does not require the assumption of joint normality, but can’t test for endogeneity directly. To deal with [Sample Selection], we can Randomization: participants are randomly selected into treatment and control. Instruments that determine the treatment status (i.e., treatment vs. control) but not the outcome (\\(Y\\)) Functional form of the selection and outcome processes: originated from (James J. Heckman 1976), later on generalize by (Amemiya 1984) We have our main model \\[ \\mathbf{y^* = xb + \\epsilon} \\] However, the pattern of missingness (i.e., censored) is related to the unobserved (latent) process: \\[ \\mathbf{z^* = w \\gamma + u} \\] and \\[ z_i = \\begin{cases} 1&amp; \\text{if } z_i^*&gt;0 \\\\ 0&amp;\\text{if } z_i^*\\le0\\\\ \\end{cases} \\] Equivalently, \\(z_i = 1\\) (\\(y_i\\) is observed) when \\[ u_i \\ge -w_i \\gamma \\] Hence, the probability of observed \\(y_i\\) is \\[ \\begin{aligned} P(u_i \\ge -w_i \\gamma) &amp;= 1 - \\Phi(-w_i \\gamma) \\\\ &amp;= \\Phi(w_i \\gamma) &amp; \\text{symmetry of the standard normal distribution} \\end{aligned} \\] We will assume the error term of the selection \\(\\mathbf{u \\sim N(0,I)}\\) \\(Var(u_i) = 1\\) for identification purposes Visually, \\(P(u_i \\ge -w_i \\gamma)\\) is the shaded area. x = seq(-3, 3, length = 200) y = dnorm(x, mean = 0, sd = 1) plot(x, y, type = &quot;l&quot;, main = bquote(&quot;Probabibility distribution of&quot; ~ u[i])) x = seq(0.3, 3, length = 100) y = dnorm(x, mean = 0, sd = 1) polygon(c(0.3, x, 3), c(0, y, 0), col = &quot;gray&quot;) text(1, 0.1, bquote(1 - Phi ~ (-w[i] ~ gamma))) arrows(-0.5, 0.1, 0.3, 0, length = .15) text(-0.5, 0.12, bquote(-w[i] ~ gamma)) legend( &quot;topright&quot;, &quot;Gray = Prob of Observed&quot;, pch = 1, title = &quot;legend&quot;, inset = .02 ) Hence in our observed model, we see \\[\\begin{equation} y_i = x_i\\beta + \\epsilon_i \\text{when $z_i=1$} \\end{equation}\\] and the joint distribution of the selection model (\\(u_i\\)), and the observed equation (\\(\\epsilon_i\\)) as \\[ \\left[ \\begin{array} {c} u \\\\ \\epsilon \\\\ \\end{array} \\right] \\sim^{iid}N \\left( \\left[ \\begin{array} {c} 0 \\\\ 0 \\\\ \\end{array} \\right], \\left[ \\begin{array} {cc} 1 &amp; \\rho \\\\ \\rho &amp; \\sigma^2_{\\epsilon} \\\\ \\end{array} \\right] \\right) \\] The relation between the observed and selection models: \\[ \\begin{aligned} E(y_i | y_i \\text{ observed}) &amp;= E(y_i| z^*&gt;0) \\\\ &amp;= E(y_i| -w_i \\gamma) \\\\ &amp;= \\mathbf{x}_i \\beta + E(\\epsilon_i | u_i &gt; -w_i \\gamma) \\\\ &amp;= \\mathbf{x}_i \\beta + \\rho \\sigma_\\epsilon \\frac{\\phi(w_i \\gamma)}{\\Phi(w_i \\gamma)} \\end{aligned} \\] where \\(\\frac{\\phi(w_i \\gamma)}{\\Phi(w_i \\gamma)}\\) is the Inverse Mills Ratio. and \\(\\rho \\sigma_\\epsilon \\frac{\\phi(w_i \\gamma)}{\\Phi(w_i \\gamma)} \\ge 0\\) A property of IMR: Its derivative is: \\(IMR&#39;(x) = -x IMR(x) - IMR(x)^2\\) Great visualization of special cases of correlation patterns among data and errors by professor Rob Hick Note: (Bareinboim and Pearl 2014) is an excellent summary of cases that we can still do causal inference in case of selection bias. I’ll try to summarize their idea here: Let \\(X\\) be an action, \\(Y\\) be an outcome, and S be a binary indicator of entry into the data pool where (\\(S = 1 =\\) in the sample, \\(S = 0 =\\) out of sample) and Q be the conditional distribution \\(Q = P(y|x)\\). Usually we want to understand , but because of \\(S\\), we only have \\(P(y, x|S = 1)\\). Hence, we’d like to recover \\(P(y|x)\\) from \\(P(y, x|S = 1)\\) If both X and Y affect S, we can’t unbiasedly estimate \\(P(y|x)\\) In the case of Omitted variable bias (\\(U\\)) and sample selection bias (\\(S\\)), you have unblocked extraneous “flow” of information between X and \\(Y\\), which causes spurious correlation for \\(X\\) and \\(Y\\). Traditionally, we would recover \\(Q\\) by parametric assumption of The data generating process (e.g., Heckman 2-step) Type of data-generating model (e..g, treatment-dependent or outcome-dependent) Selection’s probability \\(P(S = 1|P a_s)\\) with non-parametrically based causal graphical models, the authors proposed more robust way to model misspecification regardless of the type of data-generating model, and do not require selection’s probability. Hence, you can recover Q Without external data With external data Causal effects with the Selection-backdoor criterion 33.2.1 Tobit-2 also known as Heckman’s standard sample selection model Assumption: joint normality of the errors Data here is taken from Mroz (1984). We want to estimate the log(wage) for married women, with education, experience, experience squared, and a dummy variable for living in a big city. But we can only observe the wage for women who are working, which means a lot of married women in 1975 who were out of the labor force are unaccounted for. Hence, an OLS estimate of the wage equation would be bias due to sample selection. Since we have data on non-participants (i.e., those who are not working for pay), we can correct for the selection process. The Tobit-2 estimates are consistent 33.2.1.1 Example 1 library(sampleSelection) library(dplyr) # 1975 data on married women’s pay and labor-force participation # from the Panel Study of Income Dynamics (PSID) data(&quot;Mroz87&quot;) head(Mroz87) #&gt; lfp hours kids5 kids618 age educ wage repwage hushrs husage huseduc huswage #&gt; 1 1 1610 1 0 32 12 3.3540 2.65 2708 34 12 4.0288 #&gt; 2 1 1656 0 2 30 12 1.3889 2.65 2310 30 9 8.4416 #&gt; 3 1 1980 1 3 35 12 4.5455 4.04 3072 40 12 3.5807 #&gt; 4 1 456 0 3 34 12 1.0965 3.25 1920 53 10 3.5417 #&gt; 5 1 1568 1 2 31 14 4.5918 3.60 2000 32 12 10.0000 #&gt; 6 1 2032 0 0 54 12 4.7421 4.70 1040 57 11 6.7106 #&gt; faminc mtr motheduc fatheduc unem city exper nwifeinc wifecoll huscoll #&gt; 1 16310 0.7215 12 7 5.0 0 14 10.910060 FALSE FALSE #&gt; 2 21800 0.6615 7 7 11.0 1 5 19.499981 FALSE FALSE #&gt; 3 21040 0.6915 12 7 5.0 0 15 12.039910 FALSE FALSE #&gt; 4 7300 0.7815 7 7 5.0 0 6 6.799996 FALSE FALSE #&gt; 5 27300 0.6215 12 14 9.5 1 7 20.100058 TRUE FALSE #&gt; 6 19495 0.6915 14 7 7.5 1 33 9.859054 FALSE FALSE Mroz87 = Mroz87 %&gt;% mutate(kids = kids5 + kids618) library(nnet) library(ggplot2) library(reshape2) 2-stage Heckman’s model: probit equation estimates the selection process (who is in the labor force?) the results from 1st stage are used to construct a variable that captures the selection effect in the wage equation. This correction variable is called the inverse Mills ratio. # OLS: log wage regression on LF participants only ols1 = lm(log(wage) ~ educ + exper + I(exper ^ 2) + city, data = subset(Mroz87, lfp == 1)) # Heckman&#39;s Two-step estimation with LFP selection equation heck1 = heckit( selection = lfp ~ age + I(age ^ 2) + kids + huswage + educ, # the selection process, l # fp = 1 if the woman is participating in the labor force outcome = log(wage) ~ educ + exper + I(exper ^ 2) + city, data = Mroz87 ) summary(heck1$probit) #&gt; -------------------------------------------- #&gt; Probit binary choice model/Maximum Likelihood estimation #&gt; Newton-Raphson maximisation, 4 iterations #&gt; Return code 1: gradient close to zero (gradtol) #&gt; Log-Likelihood: -482.8212 #&gt; Model: Y == &#39;1&#39; in contrary to &#39;0&#39; #&gt; 753 observations (325 &#39;negative&#39; and 428 &#39;positive&#39;) and 6 free parameters (df = 747) #&gt; Estimates: #&gt; Estimate Std. error t value Pr(&gt; t) #&gt; XS(Intercept) -4.18146681 1.40241567 -2.9816 0.002867 ** #&gt; XSage 0.18608901 0.06517476 2.8552 0.004301 ** #&gt; XSI(age^2) -0.00241491 0.00075857 -3.1835 0.001455 ** #&gt; XSkids -0.14955977 0.03825079 -3.9100 9.230e-05 *** #&gt; XShuswage -0.04303635 0.01220791 -3.5253 0.000423 *** #&gt; XSeduc 0.12502818 0.02277645 5.4894 4.034e-08 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; Significance test: #&gt; chi2(5) = 64.10407 (p=1.719042e-12) #&gt; -------------------------------------------- summary(heck1$lm) #&gt; #&gt; Call: #&gt; lm(formula = YO ~ -1 + XO + imrData$IMR1, subset = YS == 1, weights = weightsNoNA) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -3.09494 -0.30953 0.05341 0.36530 2.34770 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; XO(Intercept) -0.6143381 0.3768796 -1.630 0.10383 #&gt; XOeduc 0.1092363 0.0197062 5.543 5.24e-08 *** #&gt; XOexper 0.0419205 0.0136176 3.078 0.00222 ** #&gt; XOI(exper^2) -0.0008226 0.0004059 -2.026 0.04335 * #&gt; XOcity 0.0510492 0.0692414 0.737 0.46137 #&gt; imrData$IMR1 0.0551177 0.2111916 0.261 0.79423 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 0.6674 on 422 degrees of freedom #&gt; Multiple R-squared: 0.7734, Adjusted R-squared: 0.7702 #&gt; F-statistic: 240 on 6 and 422 DF, p-value: &lt; 2.2e-16 Use only variables that affect the selection process in the selection equation. Technically, the selection equation and the equation of interest could have the same set of regressors. But it is not recommended because we should only use variables (or at least one) in the selection equation that affect the selection process, but not the wage process (i.e., instruments). Here, variable kids fulfill that role: women with kids may be more likely to stay home, but working moms with kids would not have their wages change. Alternatively, # ML estimation of selection model ml1 = selection( selection = lfp ~ age + I(age ^ 2) + kids + huswage + educ, outcome = log(wage) ~ educ + exper + I(exper ^ 2) + city, data = Mroz87 ) summary(ml1) #&gt; -------------------------------------------- #&gt; Tobit 2 model (sample selection model) #&gt; Maximum Likelihood estimation #&gt; Newton-Raphson maximisation, 3 iterations #&gt; Return code 8: successive function values within relative tolerance limit (reltol) #&gt; Log-Likelihood: -914.0777 #&gt; 753 observations (325 censored and 428 observed) #&gt; 13 free parameters (df = 740) #&gt; Probit selection equation: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) -4.1484037 1.4109302 -2.940 0.003382 ** #&gt; age 0.1842132 0.0658041 2.799 0.005253 ** #&gt; I(age^2) -0.0023925 0.0007664 -3.122 0.001868 ** #&gt; kids -0.1488158 0.0384888 -3.866 0.000120 *** #&gt; huswage -0.0434253 0.0123229 -3.524 0.000451 *** #&gt; educ 0.1255639 0.0229229 5.478 5.91e-08 *** #&gt; Outcome equation: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) -0.5814781 0.3052031 -1.905 0.05714 . #&gt; educ 0.1078481 0.0172998 6.234 7.63e-10 *** #&gt; exper 0.0415752 0.0133269 3.120 0.00188 ** #&gt; I(exper^2) -0.0008125 0.0003974 -2.044 0.04129 * #&gt; city 0.0522990 0.0682652 0.766 0.44385 #&gt; Error terms: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; sigma 0.66326 0.02309 28.729 &lt;2e-16 *** #&gt; rho 0.05048 0.23169 0.218 0.828 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; -------------------------------------------- # summary(ml1$twoStep) Manual myprob &lt;- probit(lfp ~ age + I( age^2 ) + kids + huswage + educ, # x = TRUE, # iterlim = 30, data = Mroz87) summary(myprob) #&gt; -------------------------------------------- #&gt; Probit binary choice model/Maximum Likelihood estimation #&gt; Newton-Raphson maximisation, 4 iterations #&gt; Return code 1: gradient close to zero (gradtol) #&gt; Log-Likelihood: -482.8212 #&gt; Model: Y == &#39;1&#39; in contrary to &#39;0&#39; #&gt; 753 observations (325 &#39;negative&#39; and 428 &#39;positive&#39;) and 6 free parameters (df = 747) #&gt; Estimates: #&gt; Estimate Std. error t value Pr(&gt; t) #&gt; (Intercept) -4.18146681 1.40241567 -2.9816 0.002867 ** #&gt; age 0.18608901 0.06517476 2.8552 0.004301 ** #&gt; I(age^2) -0.00241491 0.00075857 -3.1835 0.001455 ** #&gt; kids -0.14955977 0.03825079 -3.9100 9.230e-05 *** #&gt; huswage -0.04303635 0.01220791 -3.5253 0.000423 *** #&gt; educ 0.12502818 0.02277645 5.4894 4.034e-08 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; Significance test: #&gt; chi2(5) = 64.10407 (p=1.719042e-12) #&gt; -------------------------------------------- imr &lt;- invMillsRatio(myprob) Mroz87$IMR1 &lt;- imr$IMR1 manually_est &lt;- lm(log(wage) ~ educ + exper + I( exper^2 ) + city + IMR1, data = Mroz87, subset = (lfp == 1)) summary(manually_est) #&gt; #&gt; Call: #&gt; lm(formula = log(wage) ~ educ + exper + I(exper^2) + city + IMR1, #&gt; data = Mroz87, subset = (lfp == 1)) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -3.09494 -0.30953 0.05341 0.36530 2.34770 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) -0.6143381 0.3768796 -1.630 0.10383 #&gt; educ 0.1092363 0.0197062 5.543 5.24e-08 *** #&gt; exper 0.0419205 0.0136176 3.078 0.00222 ** #&gt; I(exper^2) -0.0008226 0.0004059 -2.026 0.04335 * #&gt; city 0.0510492 0.0692414 0.737 0.46137 #&gt; IMR1 0.0551177 0.2111916 0.261 0.79423 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 0.6674 on 422 degrees of freedom #&gt; Multiple R-squared: 0.1582, Adjusted R-squared: 0.1482 #&gt; F-statistic: 15.86 on 5 and 422 DF, p-value: 2.505e-14 Similarly, probit_selection &lt;- glm(lfp ~ age + I( age^2 ) + kids + huswage + educ, data = Mroz87, family = binomial(link = &#39;probit&#39;)) # library(fixest) # probit_selection &lt;- # fixest::feglm(lfp ~ age + I( age^2 ) + kids + huswage + educ, # data = Mroz87, # family = binomial(link = &#39;probit&#39;)) probit_lp &lt;- -predict(probit_selection) inv_mills &lt;- dnorm(probit_lp) / (1 - pnorm(probit_lp)) Mroz87$inv_mills &lt;- inv_mills probit_outcome &lt;- glm( log(wage) ~ educ + exper + I(exper ^ 2) + city + inv_mills, data = Mroz87, subset = (lfp == 1) ) summary(probit_outcome) #&gt; #&gt; Call: #&gt; glm(formula = log(wage) ~ educ + exper + I(exper^2) + city + #&gt; inv_mills, data = Mroz87, subset = (lfp == 1)) #&gt; #&gt; Deviance Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -3.09494 -0.30953 0.05341 0.36530 2.34770 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) -0.6143383 0.3768798 -1.630 0.10383 #&gt; educ 0.1092363 0.0197062 5.543 5.24e-08 *** #&gt; exper 0.0419205 0.0136176 3.078 0.00222 ** #&gt; I(exper^2) -0.0008226 0.0004059 -2.026 0.04335 * #&gt; city 0.0510492 0.0692414 0.737 0.46137 #&gt; inv_mills 0.0551179 0.2111918 0.261 0.79423 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; (Dispersion parameter for gaussian family taken to be 0.4454809) #&gt; #&gt; Null deviance: 223.33 on 427 degrees of freedom #&gt; Residual deviance: 187.99 on 422 degrees of freedom #&gt; AIC: 876.49 #&gt; #&gt; Number of Fisher Scoring iterations: 2 library(&quot;stargazer&quot;) library(&quot;Mediana&quot;) library(&quot;plm&quot;) # function to calculate corrected SEs for regression cse = function(reg) { rob = sqrt(diag(vcovHC(reg, type = &quot;HC1&quot;))) return(rob) } # stargazer table stargazer( # ols1, heck1, ml1, # manually_est, se = list(cse(ols1), NULL, NULL), title = &quot;Married women&#39;s wage regressions&quot;, type = &quot;text&quot;, df = FALSE, digits = 4, selection.equation = T ) #&gt; #&gt; Married women&#39;s wage regressions #&gt; =================================================== #&gt; Dependent variable: #&gt; ------------------------------- #&gt; lfp #&gt; Heckman selection #&gt; selection #&gt; (1) (2) #&gt; --------------------------------------------------- #&gt; age 0.1861*** 0.1842*** #&gt; (0.0658) #&gt; #&gt; I(age2) -0.0024 -0.0024*** #&gt; (0.0008) #&gt; #&gt; kids -0.1496*** -0.1488*** #&gt; (0.0385) #&gt; #&gt; huswage -0.0430 -0.0434*** #&gt; (0.0123) #&gt; #&gt; educ 0.1250 0.1256*** #&gt; (0.0130) (0.0229) #&gt; #&gt; Constant -4.1815*** -4.1484*** #&gt; (0.2032) (1.4109) #&gt; #&gt; --------------------------------------------------- #&gt; Observations 753 753 #&gt; R2 0.1582 #&gt; Adjusted R2 0.1482 #&gt; Log Likelihood -914.0777 #&gt; rho 0.0830 0.0505 (0.2317) #&gt; Inverse Mills Ratio 0.0551 (0.2099) #&gt; =================================================== #&gt; Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01 stargazer( ols1, # heck1, # ml1, manually_est, se = list(cse(ols1), NULL, NULL), title = &quot;Married women&#39;s wage regressions&quot;, type = &quot;text&quot;, df = FALSE, digits = 4, selection.equation = T ) #&gt; #&gt; Married women&#39;s wage regressions #&gt; ================================================ #&gt; Dependent variable: #&gt; ---------------------------- #&gt; log(wage) #&gt; (1) (2) #&gt; ------------------------------------------------ #&gt; educ 0.1057*** 0.1092*** #&gt; (0.0130) (0.0197) #&gt; #&gt; exper 0.0411*** 0.0419*** #&gt; (0.0154) (0.0136) #&gt; #&gt; I(exper2) -0.0008* -0.0008** #&gt; (0.0004) (0.0004) #&gt; #&gt; city 0.0542 0.0510 #&gt; (0.0653) (0.0692) #&gt; #&gt; IMR1 0.0551 #&gt; (0.2112) #&gt; #&gt; Constant -0.5308*** -0.6143 #&gt; (0.2032) (0.3769) #&gt; #&gt; ------------------------------------------------ #&gt; Observations 428 428 #&gt; R2 0.1581 0.1582 #&gt; Adjusted R2 0.1501 0.1482 #&gt; Residual Std. Error 0.6667 0.6674 #&gt; F Statistic 19.8561*** 15.8635*** #&gt; ================================================ #&gt; Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01 Rho is an estimate of the correlation of the errors between the selection and wage equations. In the lower panel, the estimated coefficient on the inverse Mills ratio is given for the Heckman model. The fact that it is not statistically different from zero is consistent with the idea that selection bias was not a serious problem in this case. If the estimated coefficient of the inverse Mills ratio in the Heckman model is not statistically different from zero, then selection bias was not a serious problem. 33.2.1.2 Example 2 This code is from R package sampleSelection set.seed(0) library(&quot;sampleSelection&quot;) library(&quot;mvtnorm&quot;) # bivariate normal disturbances eps &lt;- rmvnorm(500, c(0, 0), matrix(c(1, -0.7, -0.7, 1), 2, 2)) # uniformly distributed explanatory variable # (vectors of explanatory variables for the selection) xs &lt;- runif(500) # probit data generating process ys &lt;- xs + eps[, 1] &gt; 0 # vectors of explanatory variables for outcome equation xo &lt;- runif(500) yoX &lt;- xo + eps[, 2] # latent outcome yo &lt;- yoX * (ys &gt; 0) # observable outcome # true intercepts = 0 and our true slopes = 1 # xs and xo are independent. # Hence, exclusion restriction is fulfilled summary(selection(ys ~ xs, yo ~ xo)) #&gt; -------------------------------------------- #&gt; Tobit 2 model (sample selection model) #&gt; Maximum Likelihood estimation #&gt; Newton-Raphson maximisation, 5 iterations #&gt; Return code 1: gradient close to zero (gradtol) #&gt; Log-Likelihood: -712.3163 #&gt; 500 observations (172 censored and 328 observed) #&gt; 6 free parameters (df = 494) #&gt; Probit selection equation: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) -0.2228 0.1081 -2.061 0.0399 * #&gt; xs 1.3377 0.2014 6.642 8.18e-11 *** #&gt; Outcome equation: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) -0.0002265 0.1294178 -0.002 0.999 #&gt; xo 0.7299070 0.1635925 4.462 1.01e-05 *** #&gt; Error terms: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; sigma 0.9190 0.0574 16.009 &lt; 2e-16 *** #&gt; rho -0.5392 0.1521 -3.544 0.000431 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; -------------------------------------------- without the exclusion restriction, we generate yo using xs instead of xo. yoX &lt;- xs + eps[,2] yo &lt;- yoX*(ys &gt; 0) summary(selection(ys ~ xs, yo ~ xs)) #&gt; -------------------------------------------- #&gt; Tobit 2 model (sample selection model) #&gt; Maximum Likelihood estimation #&gt; Newton-Raphson maximisation, 14 iterations #&gt; Return code 8: successive function values within relative tolerance limit (reltol) #&gt; Log-Likelihood: -712.8298 #&gt; 500 observations (172 censored and 328 observed) #&gt; 6 free parameters (df = 494) #&gt; Probit selection equation: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) -0.1984 0.1114 -1.781 0.0756 . #&gt; xs 1.2907 0.2085 6.191 1.25e-09 *** #&gt; Outcome equation: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) -0.5499 0.5644 -0.974 0.33038 #&gt; xs 1.3987 0.4482 3.120 0.00191 ** #&gt; Error terms: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; sigma 0.85091 0.05352 15.899 &lt;2e-16 *** #&gt; rho -0.13226 0.72684 -0.182 0.856 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; -------------------------------------------- We can see that our estimates are still unbiased but standard errors are substantially larger. The exclusion restriction (i.e., independent information about the selection process) has a certain identifying power that we desire. Hence, it’s better to have different set of variable for the selection process from the interested equation. Without the exclusion restriction, we solely rely on the functional form identification. 33.2.2 Tobit-5 Also known as the switching regression model Condition: There is at least one variable in X in the selection process not included in the observed process. Used when there are separate models for participants, and non-participants. set.seed(0) vc &lt;- diag(3) vc[lower.tri(vc)] &lt;- c(0.9, 0.5, 0.1) vc[upper.tri(vc)] &lt;- vc[lower.tri(vc)] # 3 disturbance vectors by a 3-dimensional normal distribution eps &lt;- rmvnorm(500, c(0,0,0), vc) xs &lt;- runif(500) # uniformly distributed on [0, 1] ys &lt;- xs + eps[,1] &gt; 0 xo1 &lt;- runif(500) # uniformly distributed on [0, 1] yo1 &lt;- xo1 + eps[,2] xo2 &lt;- runif(500) # uniformly distributed on [0, 1] yo2 &lt;- xo2 + eps[,3] exclusion restriction is fulfilled when \\(x\\)’s are independent. # one selection equation and a list of two outcome equations summary(selection(ys~xs, list(yo1 ~ xo1, yo2 ~ xo2))) #&gt; -------------------------------------------- #&gt; Tobit 5 model (switching regression model) #&gt; Maximum Likelihood estimation #&gt; Newton-Raphson maximisation, 11 iterations #&gt; Return code 1: gradient close to zero (gradtol) #&gt; Log-Likelihood: -895.8201 #&gt; 500 observations: 172 selection 1 (FALSE) and 328 selection 2 (TRUE) #&gt; 10 free parameters (df = 490) #&gt; Probit selection equation: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) -0.1550 0.1051 -1.474 0.141 #&gt; xs 1.1408 0.1785 6.390 3.86e-10 *** #&gt; Outcome equation 1: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 0.02708 0.16395 0.165 0.869 #&gt; xo1 0.83959 0.14968 5.609 3.4e-08 *** #&gt; Outcome equation 2: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 0.1583 0.1885 0.840 0.401 #&gt; xo2 0.8375 0.1707 4.908 1.26e-06 *** #&gt; Error terms: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; sigma1 0.93191 0.09211 10.118 &lt;2e-16 *** #&gt; sigma2 0.90697 0.04434 20.455 &lt;2e-16 *** #&gt; rho1 0.88988 0.05353 16.623 &lt;2e-16 *** #&gt; rho2 0.17695 0.33139 0.534 0.594 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; -------------------------------------------- All the estimates are close to the true values. Example of functional form misspecification set.seed(5) eps &lt;- rmvnorm(1000, rep(0, 3), vc) eps &lt;- eps^2 - 1 # subtract 1 in order to get the mean zero disturbances # interval [−1, 0] to get an asymmetric distribution over observed choices xs &lt;- runif(1000, -1, 0) ys &lt;- xs + eps[,1] &gt; 0 xo1 &lt;- runif(1000) yo1 &lt;- xo1 + eps[,2] xo2 &lt;- runif(1000) yo2 &lt;- xo2 + eps[,3] summary(selection(ys~xs, list(yo1 ~ xo1, yo2 ~ xo2), iterlim=20)) #&gt; -------------------------------------------- #&gt; Tobit 5 model (switching regression model) #&gt; Maximum Likelihood estimation #&gt; Newton-Raphson maximisation, 4 iterations #&gt; Return code 3: Last step could not find a value above the current. #&gt; Boundary of parameter space? #&gt; Consider switching to a more robust optimisation method temporarily. #&gt; Log-Likelihood: -1665.936 #&gt; 1000 observations: 760 selection 1 (FALSE) and 240 selection 2 (TRUE) #&gt; 10 free parameters (df = 990) #&gt; Probit selection equation: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) -0.53698 0.05808 -9.245 &lt; 2e-16 *** #&gt; xs 0.31268 0.09395 3.328 0.000906 *** #&gt; Outcome equation 1: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) -0.70679 0.03573 -19.78 &lt;2e-16 *** #&gt; xo1 0.91603 0.05626 16.28 &lt;2e-16 *** #&gt; Outcome equation 2: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 0.1446 NaN NaN NaN #&gt; xo2 1.1196 0.5014 2.233 0.0258 * #&gt; Error terms: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; sigma1 0.67770 0.01760 38.50 &lt;2e-16 *** #&gt; sigma2 2.31432 0.07615 30.39 &lt;2e-16 *** #&gt; rho1 -0.97137 NaN NaN NaN #&gt; rho2 0.17039 NaN NaN NaN #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; -------------------------------------------- Although we still have an exclusion restriction (xo1 and xo2 are independent), we now have problems with the intercepts (i.e., they are statistically significantly different from the true values zero), and convergence problems. If we don’t have the exclusion restriction, we will have a larger variance of xs set.seed(6) xs &lt;- runif(1000, -1, 1) ys &lt;- xs + eps[,1] &gt; 0 yo1 &lt;- xs + eps[,2] yo2 &lt;- xs + eps[,3] summary(tmp &lt;- selection(ys~xs, list(yo1 ~ xs, yo2 ~ xs), iterlim=20)) #&gt; -------------------------------------------- #&gt; Tobit 5 model (switching regression model) #&gt; Maximum Likelihood estimation #&gt; Newton-Raphson maximisation, 16 iterations #&gt; Return code 8: successive function values within relative tolerance limit (reltol) #&gt; Log-Likelihood: -1936.431 #&gt; 1000 observations: 626 selection 1 (FALSE) and 374 selection 2 (TRUE) #&gt; 10 free parameters (df = 990) #&gt; Probit selection equation: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) -0.3528 0.0424 -8.321 2.86e-16 *** #&gt; xs 0.8354 0.0756 11.050 &lt; 2e-16 *** #&gt; Outcome equation 1: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) -0.55448 0.06339 -8.748 &lt;2e-16 *** #&gt; xs 0.81764 0.06048 13.519 &lt;2e-16 *** #&gt; Outcome equation 2: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 0.6457 0.4994 1.293 0.196 #&gt; xs 0.3520 0.3197 1.101 0.271 #&gt; Error terms: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; sigma1 0.59187 0.01853 31.935 &lt;2e-16 *** #&gt; sigma2 1.97257 0.07228 27.289 &lt;2e-16 *** #&gt; rho1 0.15568 0.15914 0.978 0.328 #&gt; rho2 -0.01541 0.23370 -0.066 0.947 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; -------------------------------------------- Usually it will not converge. Even if it does, the results may be seriously biased. Note The log-likelihood function of the models might not be globally concave. Hence, it might not converge, or converge to a local maximum. To combat this, we can use Different starting value Different maximization methods. refer to [Non-linear Least Squares] for suggestions. 33.2.2.0.1 Pattern-Mixture Models compared to the Heckman’s model where it assumes the value of the missing data is predetermined, pattern-mixture models assume missingness affect the distribution of variable of interest (e.g., Y) To read more, you can check NCSU, stefvanbuuren. References "],["other-biases.html", "Chapter 34 Other Biases", " Chapter 34 Other Biases In econometrics, the main objective is often to uncover causal relationships. However, coefficient estimates can be affected by various biases. Here’s a list of common biases that can affect coefficient estimates: What we’ve covered so far (see Linear Regression and Endogeneity): Omitted Variable Bias (OVB): Arises when a variable that affects the dependent variable and is correlated with an independent variable is left out of the regression. Endogeneity Bias: Occurs when an error term is correlated with an independent variable. This can be due to: Simultaneity: When the dependent variable simultaneously affects an independent variable. Omitted variables. Measurement error in the independent variable. Measurement Error: Bias introduced when variables in a model are measured with error. If the error is in an independent variable and is classical (mean zero and uncorrelated with the true value), it typically biases the coefficient towards zero. Sample Selection Bias: Arises when the sample is not randomly selected and the selection is related to the dependent variable. A classic example is the Heckman correction for labor market studies where participants self-select into the workforce. Simultaneity Bias (or Reverse Causality): Happens when the dependent variable causes changes in the independent variable, leading to a two-way causation. Multicollinearity: Not a bias in the strictest sense, but in the presence of high multicollinearity (when independent variables are highly correlated), coefficient estimates can become unstable and standard errors large. This makes it hard to determine the individual effect of predictors on the dependent variable. Specification Errors: Arise when the functional form of the model is incorrectly specified, e.g., omitting interaction terms or polynomial terms when they are needed. Autocorrelation (or Serial Correlation): Occurs in time-series data when the error terms are correlated over time. This doesn’t cause bias in the coefficient estimates of OLS, but it can make standard errors biased, leading to incorrect inference. Heteroskedasticity: Occurs when the variance of the error term is not constant across observations. Like autocorrelation, heteroskedasticity doesn’t bias the OLS estimates but can bias standard errors. In this section, we will mention other biases that you may encounter when conducting your research Introduced when data are aggregated, and analysis is conducted at this aggregate level rather than the individual level. [Survivorship Bias] (very much related to Sample Selection): Arises when the sample only includes “survivors” or those who “passed” a certain threshold. Common in finance where only funds or firms that “survive” are analyzed. Not a bias in econometric estimation per se, but relevant in the context of empirical studies. It refers to the tendency for journals to publish only significant or positive results, leading to an overrepresentation of such results in the literature. "],["aggregation-bias.html", "34.1 Aggregation Bias", " 34.1 Aggregation Bias Aggregation bias, also known as ecological fallacy, refers to the error introduced when data are aggregated and an analysis is conducted at this aggregate level, rather than at the individual level. This can be especially problematic in econometrics, where analysts are often concerned with understanding individual behavior. When the relationship between variables is different at the aggregate level than at the individual level, aggregation bias can result. The bias arises when inferences about individual behaviors are made based on aggregate data. Example: Suppose we have data on individuals’ incomes and their personal consumption. At the individual level, it’s possible that as income rises, consumption also rises. However, when we aggregate the data to, say, a neighborhood level, neighborhoods with diverse income levels might all have similar average consumption due to other unobserved factors. Step 1: Create individual level data set.seed(123) # Generate data for 1000 individuals n &lt;- 1000 income &lt;- rnorm(n, mean = 50, sd = 10) consumption &lt;- 0.5 * income + rnorm(n, mean = 0, sd = 5) # Individual level regression individual_lm &lt;- lm(consumption ~ income) summary(individual_lm) #&gt; #&gt; Call: #&gt; lm(formula = consumption ~ income) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -15.1394 -3.4572 0.0213 3.5436 16.4557 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) -1.99596 0.82085 -2.432 0.0152 * #&gt; income 0.54402 0.01605 33.888 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 5.032 on 998 degrees of freedom #&gt; Multiple R-squared: 0.535, Adjusted R-squared: 0.5346 #&gt; F-statistic: 1148 on 1 and 998 DF, p-value: &lt; 2.2e-16 This would show a significant positive relationship between income and consumption. Step 2: Aggregate data to ‘neighborhood’ level # Assume 100 neighborhoods with 10 individuals each n_neighborhoods &lt;- 100 df &lt;- data.frame(income, consumption) df$neighborhood &lt;- rep(1:n_neighborhoods, each = n / n_neighborhoods) aggregate_data &lt;- aggregate(. ~ neighborhood, data = df, FUN = mean) # Aggregate level regression aggregate_lm &lt;- lm(consumption ~ income, data = aggregate_data) summary(aggregate_lm) #&gt; #&gt; Call: #&gt; lm(formula = consumption ~ income, data = aggregate_data) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -4.4517 -0.9322 -0.0826 1.0556 3.5728 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) -4.94338 2.60699 -1.896 0.0609 . #&gt; income 0.60278 0.05188 11.618 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 1.54 on 98 degrees of freedom #&gt; Multiple R-squared: 0.5794, Adjusted R-squared: 0.5751 #&gt; F-statistic: 135 on 1 and 98 DF, p-value: &lt; 2.2e-16 If aggregation bias is present, the coefficient for income in the aggregate regression might be different from the coefficient in the individual regression, even if the individual relationship is significant and strong. library(ggplot2) # Individual scatterplot p1 &lt;- ggplot(df, aes(x = income, y = consumption)) + geom_point(aes(color = neighborhood), alpha = 0.6) + geom_smooth(method = &quot;lm&quot;, se = FALSE, color = &quot;black&quot;) + labs(title = &quot;Individual Level Data&quot;) + causalverse::ama_theme() # Aggregate scatterplot p2 &lt;- ggplot(aggregate_data, aes(x = income, y = consumption)) + geom_point(color = &quot;red&quot;) + geom_smooth(method = &quot;lm&quot;, se = FALSE, color = &quot;black&quot;) + labs(title = &quot;Aggregate Level Data&quot;) + causalverse::ama_theme() # print(p1) # print(p2) gridExtra::grid.arrange(grobs = list(p1, p2), ncol = 2) From these plots, you can see the relationship at the individual level, with each neighborhood being colored differently in the first plot. The second plot shows the aggregate data, where each point now represents a whole neighborhood. Direction of Bias: The direction of the aggregation bias isn’t predetermined. It depends on the underlying relationship and the data distribution. In some cases, aggregation might attenuate (reduce) a relationship, while in other cases, it might exaggerate it. Relation to Other Biases: Aggregation bias is closely related to several other biases in econometrics: Specification bias: If you don’t properly account for the hierarchical structure of your data (like individuals nested within neighborhoods), your model might be mis-specified, leading to biased estimates. Measurement Error: Aggregation can introduce or amplify measurement errors. For instance, if you aggregate noisy measures, the aggregate might not accurately represent any underlying signal. Omitted Variable Bias (see Endogeneity): When you aggregate data, you lose information. If the loss of this information results in omitting important predictors that are correlated with both the independent and dependent variables, it can introduce omitted variable bias. 34.1.1 Simpson’s Paradox Simpson’s Paradox, also known as the Yule-Simpson effect, is a phenomenon in probability and statistics where a trend that appears in different groups of data disappears or reverses when the groups are combined. It’s a striking example of how aggregated data can sometimes provide a misleading representation of the actual situation. Illustration of Simpson’s Paradox: Consider a hypothetical scenario involving two hospitals: Hospital A and Hospital B. We want to analyze the success rates of treatments at both hospitals. When we break the data down by the severity of the cases (i.e., minor cases vs. major cases): Hospital A: Minor cases: 95% success rate Major cases: 80% success rate Hospital B: Minor cases: 90% success rate Major cases: 85% success rate From this breakdown, Hospital A appears to be better in treating both minor and major cases since it has a higher success rate in both categories. However, let’s consider the overall success rates without considering case severity: Hospital A: 83% overall success rate Hospital B: 86% overall success rate Suddenly, Hospital B seems better overall. This surprising reversal happens because the two hospitals might handle very different proportions of minor and major cases. For example, if Hospital A treats many more major cases (which have lower success rates) than Hospital B, it can drag down its overall success rate. Causes: Simpson’s Paradox can arise due to: A lurking or confounding variable that wasn’t initially considered (in our example, the severity of the medical cases). Different group sizes, where one group might be much larger than the other, influencing the aggregate results. Implications: Simpson’s Paradox highlights the dangers of interpreting aggregated data without considering potential underlying sub-group structures. It underscores the importance of disaggregating data and being aware of the context in which it’s analyzed. Relation to Aggregation Bias In the most extreme case, aggregation bias can reverse the coefficient sign of the relationship of interest (i.e., Simpson’s Paradox). Example: Suppose we are studying the effect of a new study technique on student grades. We have two groups of students: those who used the new technique (treatment = 1) and those who did not (treatment = 0). We want to see if using the new study technique is related to higher grades. Let’s assume grades are influenced by the starting ability of the students. Perhaps in our sample, many high-ability students didn’t use the new technique (because they felt they didn’t need it), while many low-ability students did. Here’s a setup: High-ability students tend to have high grades regardless of the technique. The new technique has a positive effect on grades, but this is masked by the fact that many low-ability students use it. set.seed(123) # Generate data for 1000 students n &lt;- 1000 # 500 students are of high ability, 500 of low ability ability &lt;- c(rep(&quot;high&quot;, 500), rep(&quot;low&quot;, 500)) # High ability students are less likely to use the technique treatment &lt;- ifelse(ability == &quot;high&quot;, rbinom(500, 1, 0.2), rbinom(500, 1, 0.8)) # Grades are influenced by ability and treatment (new technique), # but the treatment has opposite effects based on ability. grades &lt;- ifelse( ability == &quot;high&quot;, rnorm(500, mean = 85, sd = 5) + treatment * -3, rnorm(500, mean = 60, sd = 5) + treatment * 5 ) df &lt;- data.frame(ability, treatment, grades) # Regression without considering ability overall_lm &lt;- lm(grades ~ factor(treatment), data = df) summary(overall_lm) #&gt; #&gt; Call: #&gt; lm(formula = grades ~ factor(treatment), data = df) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -33.490 -4.729 0.986 6.368 25.607 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 80.0133 0.4373 183.0 &lt;2e-16 *** #&gt; factor(treatment)1 -11.7461 0.6248 -18.8 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 9.877 on 998 degrees of freedom #&gt; Multiple R-squared: 0.2615, Adjusted R-squared: 0.2608 #&gt; F-statistic: 353.5 on 1 and 998 DF, p-value: &lt; 2.2e-16 # Regression within ability groups high_ability_lm &lt;- lm(grades ~ factor(treatment), data = df[df$ability == &quot;high&quot;,]) low_ability_lm &lt;- lm(grades ~ factor(treatment), data = df[df$ability == &quot;low&quot;,]) summary(high_ability_lm) #&gt; #&gt; Call: #&gt; lm(formula = grades ~ factor(treatment), data = df[df$ability == #&gt; &quot;high&quot;, ]) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -14.2156 -3.4813 0.1186 3.4952 13.2919 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 85.1667 0.2504 340.088 &lt; 2e-16 *** #&gt; factor(treatment)1 -3.9489 0.5776 -6.837 2.37e-11 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 5.046 on 498 degrees of freedom #&gt; Multiple R-squared: 0.08581, Adjusted R-squared: 0.08398 #&gt; F-statistic: 46.75 on 1 and 498 DF, p-value: 2.373e-11 summary(low_ability_lm) #&gt; #&gt; Call: #&gt; lm(formula = grades ~ factor(treatment), data = df[df$ability == #&gt; &quot;low&quot;, ]) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -13.3717 -3.5413 0.1097 3.3531 17.0568 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 59.8950 0.4871 122.956 &lt;2e-16 *** #&gt; factor(treatment)1 5.2979 0.5474 9.679 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 4.968 on 498 degrees of freedom #&gt; Multiple R-squared: 0.1583, Adjusted R-squared: 0.1566 #&gt; F-statistic: 93.68 on 1 and 498 DF, p-value: &lt; 2.2e-16 From this simulation: The overall_lm might show that the new study technique is associated with lower grades (negative coefficient), because many of the high-ability students (who naturally have high grades) did not use it. The high_ability_lm will likely show that high-ability students who used the technique had slightly lower grades than high-ability students who didn’t. The low_ability_lm will likely show that low-ability students who used the technique had much higher grades than low-ability students who didn’t. This is a classic example of Simpson’s Paradox: within each ability group, the technique appears beneficial, but when data is aggregated, the effect seems negative because of the distribution of the technique across ability groups. library(ggplot2) # Scatterplot for overall data p1 &lt;- ggplot(df, aes( x = factor(treatment), y = grades, color = ability )) + geom_jitter(width = 0.2, height = 0) + geom_boxplot(alpha = 0.6, outlier.shape = NA) + labs(title = &quot;Overall Effect of Study Technique on Grades&quot;, x = &quot;Treatment (0 = No Technique, 1 = New Technique)&quot;, y = &quot;Grades&quot;) # Scatterplot for high-ability students p2 &lt;- ggplot(df[df$ability == &quot;high&quot;, ], aes( x = factor(treatment), y = grades, color = ability )) + geom_jitter(width = 0.2, height = 0) + geom_boxplot(alpha = 0.6, outlier.shape = NA) + labs(title = &quot;Effect of Study Technique on Grades (High Ability)&quot;, x = &quot;Treatment (0 = No Technique, 1 = New Technique)&quot;, y = &quot;Grades&quot;) # Scatterplot for low-ability students p3 &lt;- ggplot(df[df$ability == &quot;low&quot;, ], aes( x = factor(treatment), y = grades, color = ability )) + geom_jitter(width = 0.2, height = 0) + geom_boxplot(alpha = 0.6, outlier.shape = NA) + labs(title = &quot;Effect of Study Technique on Grades (Low Ability)&quot;, x = &quot;Treatment (0 = No Technique, 1 = New Technique)&quot;, y = &quot;Grades&quot;) # print(p1) # print(p2) # print(p3) gridExtra::grid.arrange(grobs = list(p1, p2, p3), ncol = 1) "],["contamination-bias.html", "34.2 Contamination Bias", " 34.2 Contamination Bias Goldsmith-Pinkham, Hull, and Kolesár (2022) show regressions with multiple treatments and flexible controls often fail to estimate convex averages of heterogeneous treatment effects, resulting in contamination by non-convex averages of other treatments’ effects. 3 estimation methods to avoid this bias and find significant contamination bias in observational studies, with experimental studies showing less due to lower variability in propensity scores. References "],["survivorship-bias.html", "34.3 Survivorship Bias", " 34.3 Survivorship Bias Survivorship bias refers to the logical error of concentrating on the entities that have made it past some selection process and overlooking those that didn’t, typically because of a lack of visibility. This can skew results and lead to overly optimistic conclusions. Example: If you were to analyze the success of companies based only on the ones that are still in business today, you’d miss out on the insights from all those that failed. This would give you a distorted view of what makes a successful company, as you wouldn’t account for all those that had those same attributes but didn’t succeed. Relation to Other Biases: Sample Selection Bias: Survivorship bias is a specific form of sample selection bias. While survivorship bias focuses on entities that “survive”, sample selection bias broadly deals with any non-random sample. Confirmation Bias: Survivorship bias can reinforce confirmation bias. By only looking at the “winners”, we might confirm our existing beliefs about what leads to success, ignoring evidence to the contrary from those that didn’t survive. set.seed(42) # Generating data for 100 companies n &lt;- 100 # Randomly generate earnings; assume true average earnings is 50 earnings &lt;- rnorm(n, mean = 50, sd = 10) # Threshold for bankruptcy threshold &lt;- 40 # Only companies with earnings above the threshold &quot;survive&quot; survivor_earnings &lt;- earnings[earnings &gt; threshold] # Average earnings for all companies vs. survivors true_avg &lt;- mean(earnings) survivor_avg &lt;- mean(survivor_earnings) true_avg #&gt; [1] 50.32515 survivor_avg #&gt; [1] 53.3898 Using a histogram to visualize the distribution of earnings, highlighting the “survivors”. library(ggplot2) df &lt;- data.frame(earnings) p &lt;- ggplot(df, aes(x = earnings)) + geom_histogram( binwidth = 2, fill = &quot;grey&quot;, color = &quot;black&quot;, alpha = 0.7 ) + geom_vline(aes(xintercept = true_avg, color = &quot;True Avg&quot;), linetype = &quot;dashed&quot;, size = 1) + geom_vline( aes(xintercept = survivor_avg, color = &quot;Survivor Avg&quot;), linetype = &quot;dashed&quot;, size = 1 ) + scale_color_manual(values = c(&quot;True Avg&quot; = &quot;blue&quot;, &quot;Survivor Avg&quot; = &quot;red&quot;), name = &quot;Average Type&quot;) + labs(title = &quot;Distribution of Company Earnings&quot;, x = &quot;Earnings&quot;, y = &quot;Number of Companies&quot;) + causalverse::ama_theme() print(p) In the plot, the “True Avg” might be lower than the “Survivor Avg”, indicating that by only looking at the survivors, we overestimate the average earnings. Remedies: Awareness: Recognizing the potential for survivorship bias is the first step. Inclusive Data Collection: Wherever possible, try to include data from entities that didn’t “survive” in your sample. Statistical Techniques: In cases where the missing data is inherent, methods like Heckman’s two-step procedure can be used to correct for sample selection bias. External Data Sources: Sometimes, complementary datasets can provide insights into the missing “non-survivors”. Sensitivity Analysis: Test how sensitive your results are to assumptions about the non-survivors. "],["publication-bias.html", "34.4 Publication Bias", " 34.4 Publication Bias Publication bias occurs when the results of studies influence the likelihood of their being published. Typically, studies with significant, positive, or sensational results are more likely to be published than those with non-significant or negative results. This can skew the perceived effectiveness or results when researchers conduct meta-analyses or literature reviews, leading them to draw inaccurate conclusions. Example: Imagine pharmaceutical research. If 10 studies are done on a new drug, and only 2 show a positive effect while 8 show no effect, but only the 2 positive studies get published, a later review of the literature might erroneously conclude the drug is effective. Relation to Other Biases: Selection Bias: Publication bias is a form of selection bias, where the selection (publication in this case) isn’t random but based on the results of the study. Confirmation Bias: Like survivorship bias, publication bias can reinforce confirmation bias. Researchers might only find and cite studies that confirm their beliefs, overlooking the unpublished studies that might contradict them. Let’s simulate an experiment on a new treatment. We’ll assume that the treatment has no effect, but due to random variation, some studies will show significant positive or negative effects. set.seed(42) # Number of studies n &lt;- 100 # Assuming no real effect (effect size = 0) true_effect &lt;- 0 # Random variation in results results &lt;- rnorm(n, mean = true_effect, sd = 1) # Only &quot;significant&quot; results get published # (arbitrarily defining significant as abs(effect) &gt; 1.5) published_results &lt;- results[abs(results) &gt; 1.5] # Average effect for all studies vs. published studies true_avg_effect &lt;- mean(results) published_avg_effect &lt;- mean(published_results) true_avg_effect #&gt; [1] 0.03251482 published_avg_effect #&gt; [1] -0.3819601 Using a histogram to visualize the distribution of study results, highlighting the “published” studies. library(ggplot2) df &lt;- data.frame(results) p &lt;- ggplot(df, aes(x = results)) + geom_histogram( binwidth = 0.2, fill = &quot;grey&quot;, color = &quot;black&quot;, alpha = 0.7 ) + geom_vline( aes(xintercept = true_avg_effect, color = &quot;True Avg Effect&quot;), linetype = &quot;dashed&quot;, size = 1 ) + geom_vline( aes(xintercept = published_avg_effect, color = &quot;Published Avg Effect&quot;), linetype = &quot;dashed&quot;, size = 1 ) + scale_color_manual( values = c( &quot;True Avg Effect&quot; = &quot;blue&quot;, &quot;Published Avg Effect&quot; = &quot;red&quot; ), name = &quot;Effect Type&quot; ) + labs(title = &quot;Distribution of Study Results&quot;, x = &quot;Effect Size&quot;, y = &quot;Number of Studies&quot;) + causalverse::ama_theme() print(p) The plot might show that the “True Avg Effect” is around zero, while the “Published Avg Effect” is likely higher or lower, depending on which studies happen to have significant results in the simulation. Remedies: Awareness: Understand and accept that publication bias exists, especially when conducting literature reviews or meta-analyses. Study Registries: Encourage the use of study registries where researchers register their studies before they start. This way, one can see all initiated studies, not just the published ones. Publish All Results: Journals and researchers should make an effort to publish negative or null results. Some journals, known as “null result journals”, specialize in this. Funnel Plots and Egger’s Test: In meta-analyses, these are methods to visually and statistically detect publication bias. Use of Preprints: Promote the use of preprint servers where researchers can upload studies before they’re peer-reviewed, ensuring that results are available regardless of eventual publication status. p-curve analysis: addresses publication bias and p-hacking by analyzing the distribution of p-values below 0.05 in research studies. It posits that a right-skewed distribution of these p-values indicates a true effect, whereas a left-skewed distribution suggests p-hacking and no true underlying effect. The method includes a “half-curve” test to counteract extensive p-hacking Simonsohn, Simmons, and Nelson (2015). References "],["controls.html", "Chapter 35 Controls", " Chapter 35 Controls This section follows (Cinelli, Forney, and Pearl 2022) and code library(dagitty) library(ggdag) Traditional literature usually considers adding additional control variables is harmless to analysis. More specifically, this problem is most prevalent in the review process. Reviewers only ask authors to add more variables to “control” for such variable, which can be asked with only limited rationale. Rarely ever you will see a reviewer asks an author to remove some variables to see the behavior of the variable of interest (This is also related to Coefficient stability). However, adding more controls is only good in limited cases. References "],["bad-controls.html", "35.1 Bad Controls", " 35.1 Bad Controls 35.1.1 M-bias Traditional textbooks (G. W. Imbens and Rubin 2015; J. D. Angrist and Pischke 2009) consider \\(Z\\) as a good control because it’s a pre-treatment variable, where it correlates with the treatment and the outcome. This is most prevalent in Matching Methods, where we are recommended to include all “pre-treatment” variables. However, it is a bad control because it opens the back-door path \\(Z \\leftarrow U_1 \\to Z \\leftarrow U_2 \\to Y\\) # cleans workspace rm(list = ls()) # DAG ## specify edges model &lt;- dagitty(&quot;dag{x-&gt;y; u1-&gt;x; u1-&gt;z; u2-&gt;z; u2-&gt;y}&quot;) # set u as latent latents(model) &lt;- c(&quot;u1&quot;, &quot;u2&quot;) ## coordinates for plotting coordinates(model) &lt;- list(x = c( x = 1, u1 = 1, z = 2, u2 = 3, y = 3 ), y = c( x = 1, u1 = 2, z = 1.5, u2 = 2, y = 1 )) ## ggplot ggdag(model) + theme_dag() Even though \\(Z\\) can correlate with both \\(X\\) and \\(Y\\) very well, it’s not a confounder. Controlling for \\(Z\\) can bias the \\(X \\to Y\\) estimate, because it opens the colliding path \\(X \\leftarrow U_1 \\rightarrow Z \\leftarrow U_2 \\leftarrow Y\\) n &lt;- 1e4 u1 &lt;- rnorm(n) u2 &lt;- rnorm(n) z &lt;- u1 + u2 + rnorm(n) x &lt;- u1 + rnorm(n) causal_coef &lt;- 2 y &lt;- causal_coef * x - 4*u2 + rnorm(n) jtools::export_summs(lm(y ~ x), lm(y ~ x + z)) Table 35.1: Model 1Model 2 (Intercept)-0.03&nbsp;&nbsp;&nbsp;&nbsp;-0.00&nbsp;&nbsp;&nbsp;&nbsp; (0.04)&nbsp;&nbsp;&nbsp;(0.03)&nbsp;&nbsp;&nbsp; x2.00 ***2.82 *** (0.03)&nbsp;&nbsp;&nbsp;(0.03)&nbsp;&nbsp;&nbsp; z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.61 *** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.02)&nbsp;&nbsp;&nbsp; N10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R20.32&nbsp;&nbsp;&nbsp;&nbsp;0.58&nbsp;&nbsp;&nbsp;&nbsp; *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05. Another worse variation is # cleans workspace rm(list = ls()) # DAG ## specify edges model &lt;- dagitty(&quot;dag{x-&gt;y; u1-&gt;x; u1-&gt;z; u2-&gt;z; u2-&gt;y; z-&gt;y}&quot;) # set u as latent latents(model) &lt;- c(&quot;u1&quot;, &quot;u2&quot;) ## coordinates for plotting coordinates(model) &lt;- list( x = c(x=1, u1=1, z=2, u2=3, y=3), y = c(x=1, u1=2, z=1.5, u2=2, y=1)) ## ggplot ggdag(model) + theme_dag() You can’t do much in this case. If you don’t control for \\(Z\\), then you have an open back-door path \\(X \\leftarrow U_1 \\to Z \\to Y\\), and the unadjusted estimate is biased If you control for \\(Z\\), then you open backdoor path \\(X \\leftarrow U_1 \\to Z \\leftarrow U_2 \\to Y\\), and the adjusted estimate is also biased Hence, we cannot identify the causal effect in this case. We can do sensitivity analyses to examine (Cinelli et al. 2019; Cinelli and Hazlett 2020) the plausible bounds on the strength of the direct effect of \\(Z \\to Y\\) the strength of the effects of the latent variables 35.1.2 Bias Amplification # cleans workspace rm(list = ls()) # DAG ## specify edges model &lt;- dagitty(&quot;dag{x-&gt;y; u-&gt;x; u-&gt;y; z-&gt;x}&quot;) # set u as latent latents(model) &lt;- c(&quot;u&quot;) ## coordinates for plotting coordinates(model) &lt;- list( x = c(z=1, x=2, u=3, y=4), y = c(z=1, x=1, u=2, y=1)) ## ggplot ggdag(model) + theme_dag() Controlling for Z amplifies the omitted variable bias n &lt;- 1e4 z &lt;- rnorm(n) u &lt;- rnorm(n) x &lt;- 2*z + u + rnorm(n) y &lt;- x + 2*u + rnorm(n) jtools::export_summs(lm(y ~ x), lm(y ~ x + z)) Table 35.2: Model 1Model 2 (Intercept)0.01&nbsp;&nbsp;&nbsp;&nbsp;0.00&nbsp;&nbsp;&nbsp;&nbsp; (0.02)&nbsp;&nbsp;&nbsp;(0.02)&nbsp;&nbsp;&nbsp; x1.33 ***2.00 *** (0.01)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2.01 *** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.03)&nbsp;&nbsp;&nbsp; N10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R20.71&nbsp;&nbsp;&nbsp;&nbsp;0.80&nbsp;&nbsp;&nbsp;&nbsp; *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05. 35.1.3 Overcontrol bias Sometimes, this is similar to controlling for variables that are proxy of the dependent variable. # cleans workspace rm(list = ls()) # DAG ## specify edges model &lt;- dagitty(&quot;dag{x-&gt;z; z-&gt;y}&quot;) ## coordinates for plotting coordinates(model) &lt;- list( x = c(x=1, z=2, y=3), y = c(x=1, z=1, y=1)) ## ggplot ggdag(model) + theme_dag() If X is a proxy for Z (i.e., a mediator between Z and Y), controlling for Z is bad n &lt;- 1e4 x &lt;- rnorm(n) z &lt;- x + rnorm(n) y &lt;- z + rnorm(n) jtools::export_summs(lm(y ~ x), lm(y ~ x + z)) Table 35.3: Model 1Model 2 (Intercept)-0.02&nbsp;&nbsp;&nbsp;&nbsp;-0.01&nbsp;&nbsp;&nbsp;&nbsp; (0.01)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; x1.00 ***-0.00&nbsp;&nbsp;&nbsp;&nbsp; (0.01)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.01 *** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; N10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R20.33&nbsp;&nbsp;&nbsp;&nbsp;0.66&nbsp;&nbsp;&nbsp;&nbsp; *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05. Now you see that \\(Z\\) is significant, which is technically true, but we are interested in the causal coefficient of \\(X\\) on \\(Y\\). Another setting for overcontrol bias is # cleans workspace rm(list = ls()) # DAG ## specify edges model &lt;- dagitty(&quot;dag{x-&gt;m; m-&gt;z; m-&gt;y}&quot;) ## coordinates for plotting coordinates(model) &lt;- list( x = c(x=1, m=2, z=2, y=3), y = c(x=2, m=2, z=1, y=2)) ## ggplot ggdag(model) + theme_dag() n &lt;- 1e4 x &lt;- rnorm(n) m &lt;- x + rnorm(n) z &lt;- m + rnorm(n) y &lt;- m + rnorm(n) jtools::export_summs(lm(y ~ x), lm(y ~ x + z)) Table 35.4: Model 1Model 2 (Intercept)0.01&nbsp;&nbsp;&nbsp;&nbsp;-0.00&nbsp;&nbsp;&nbsp;&nbsp; (0.01)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; x0.99 ***0.48 *** (0.01)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.51 *** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; N10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R20.32&nbsp;&nbsp;&nbsp;&nbsp;0.50&nbsp;&nbsp;&nbsp;&nbsp; *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05. Another setting for this bias is # cleans workspace rm(list = ls()) # DAG ## specify edges model &lt;- dagitty(&quot;dag{x-&gt;z; z-&gt;y; u-&gt;z; u-&gt;y}&quot;) # set u as latent latents(model) &lt;- &quot;u&quot; ## coordinates for plotting coordinates(model) &lt;- list( x = c(x=1, z=2, u=3, y=4), y = c(x=1, z=1, u=2, y=1)) ## ggplot ggdag(model) + theme_dag() set.seed(1) n &lt;- 1e4 x &lt;- rnorm(n) u &lt;- rnorm(n) z &lt;- x + u + rnorm(n) y &lt;- z + u + rnorm(n) jtools::export_summs(lm(y ~ x), lm(y ~ x + z)) Table 35.5: Model 1Model 2 (Intercept)-0.01&nbsp;&nbsp;&nbsp;&nbsp;-0.01&nbsp;&nbsp;&nbsp;&nbsp; (0.02)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; x1.01 ***-0.47 *** (0.02)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.48 *** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; N10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R20.15&nbsp;&nbsp;&nbsp;&nbsp;0.78&nbsp;&nbsp;&nbsp;&nbsp; *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05. The total effect of \\(X\\) on \\(Y\\) is not biased (i.e., \\(1.01 \\approx 1.48 - 0.47\\)). Controlling for Z will fail to identify the direct effect of \\(X\\) on \\(Y\\) and opens the biasing path \\(X \\rightarrow Z \\leftarrow U \\rightarrow Y\\) 35.1.4 Selection Bias Also known as “collider stratification bias” rm(list = ls()) # DAG ## specify edges model &lt;- dagitty(&quot;dag{x-&gt;y; x-&gt;z; u-&gt;z;u-&gt;y}&quot;) # set u as latent latents(model) &lt;- &quot;u&quot; ## coordinates for plotting coordinates(model) &lt;- list( x = c(x=1, z=2, u=2, y=3), y = c(x=3, z=2, u=4, y=3)) ## ggplot ggdag(model) + theme_dag() Adjusting \\(Z\\) opens the colliding path \\(X \\to Z \\leftarrow U \\to Y\\) n &lt;- 1e4 x &lt;- rnorm(n) u &lt;- rnorm(n) z &lt;- x + u + rnorm(n) y &lt;- x + 2*u + rnorm(n) jtools::export_summs(lm(y ~ x), lm(y ~ x + z)) Table 35.6: Model 1Model 2 (Intercept)-0.01&nbsp;&nbsp;&nbsp;&nbsp;0.01&nbsp;&nbsp;&nbsp;&nbsp; (0.02)&nbsp;&nbsp;&nbsp;(0.02)&nbsp;&nbsp;&nbsp; x0.97 ***-0.03&nbsp;&nbsp;&nbsp;&nbsp; (0.02)&nbsp;&nbsp;&nbsp;(0.02)&nbsp;&nbsp;&nbsp; z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.00 *** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; N10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R20.16&nbsp;&nbsp;&nbsp;&nbsp;0.49&nbsp;&nbsp;&nbsp;&nbsp; *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05. Another setting is rm(list = ls()) # DAG ## specify edges model &lt;- dagitty(&quot;dag{x-&gt;y; x-&gt;z; y-&gt;z}&quot;) ## coordinates for plotting coordinates(model) &lt;- list( x = c(x=1, z=2, y=3), y = c(x=2, z=1, y=2)) ## ggplot ggdag(model) + theme_dag() Controlling \\(Z\\) opens the colliding path \\(X \\to Z \\leftarrow Y\\) n &lt;- 1e4 x &lt;- rnorm(n) y &lt;- x + rnorm(n) z &lt;- x + y + rnorm(n) jtools::export_summs(lm(y ~ x), lm(y ~ x + z)) Table 35.7: Model 1Model 2 (Intercept)0.00&nbsp;&nbsp;&nbsp;&nbsp;0.00&nbsp;&nbsp;&nbsp;&nbsp; (0.01)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; x1.03 ***-0.00&nbsp;&nbsp;&nbsp;&nbsp; (0.01)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.51 *** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.00)&nbsp;&nbsp;&nbsp; N10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R20.51&nbsp;&nbsp;&nbsp;&nbsp;0.76&nbsp;&nbsp;&nbsp;&nbsp; *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05. 35.1.5 Case-control Bias rm(list = ls()) # DAG ## specify edges model &lt;- dagitty(&quot;dag{x-&gt;y; y-&gt;z}&quot;) ## coordinates for plotting coordinates(model) &lt;- list( x = c(x=1, z=2, y=3), y = c(x=2, z=1, y=2)) ## ggplot ggdag(model) + theme_dag() Controlling \\(Z\\) opens a virtual collider (a descendant of a collider). However, if \\(X\\) truly has no causal effect on \\(Y\\). Then, controlling for \\(Z\\) is valid for testing whether the effect of \\(X\\) on \\(Y\\) is 0 because X is d-separated from \\(Y\\) regardless of adjusting for \\(Z\\) n &lt;- 1e4 x &lt;- rnorm(n) y &lt;- x + rnorm(n) z &lt;- y + rnorm(n) jtools::export_summs(lm(y ~ x), lm(y ~ x + z)) Table 35.8: Model 1Model 2 (Intercept)-0.00&nbsp;&nbsp;&nbsp;&nbsp;-0.00&nbsp;&nbsp;&nbsp;&nbsp; (0.01)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; x1.00 ***0.50 *** (0.01)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.50 *** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.00)&nbsp;&nbsp;&nbsp; N10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R20.50&nbsp;&nbsp;&nbsp;&nbsp;0.75&nbsp;&nbsp;&nbsp;&nbsp; *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05. References "],["good-controls.html", "35.2 Good Controls", " 35.2 Good Controls 35.2.1 Omitted Variable Bias Correction This is when \\(Z\\) can block all back-door paths. rm(list = ls()) model &lt;- dagitty(&quot;dag{x-&gt;y; z-&gt;x; z-&gt;y}&quot;) ## coordinates for plotting coordinates(model) &lt;- list( x = c(x=1, y=3, z=2), y = c(x=1, y=1, z=2)) ## ggplot ggdag(model) + theme_dag() Unadjusted estimate is biased adjusting for \\(Z\\) blocks the backdoor path n &lt;- 1e4 z &lt;- rnorm(n) causal_coef = 2 beta2 = 3 x &lt;- z + rnorm(n) y &lt;- causal_coef * x + beta2 * z + rnorm(n) jtools::export_summs(lm(y ~ x), lm(y ~ x + z)) Table 35.9: Model 1Model 2 (Intercept)0.01&nbsp;&nbsp;&nbsp;&nbsp;-0.00&nbsp;&nbsp;&nbsp;&nbsp; (0.02)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; x3.51 ***2.00 *** (0.02)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.02 *** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; N10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R20.82&nbsp;&nbsp;&nbsp;&nbsp;0.97&nbsp;&nbsp;&nbsp;&nbsp; *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05. # cleans workspace rm(list = ls()) # Draw DAG # specify edges model &lt;- dagitty(&quot;dag{x-&gt;y; u-&gt;z; z-&gt;x; u-&gt;y}&quot;) # set u as latent latents(model) &lt;- &quot;u&quot; ## coordinates for plotting coordinates(model) &lt;- list( x = c(x=1, z=2, u=3, y = 4), y = c(x=1, y=1, z=2, u = 3)) ## ggplot ggdag(model) + theme_dag() Unadjusted estimate is biased adjusting for \\(Z\\) blocks the backdoor door path due to \\(U\\) n &lt;- 1e4 u &lt;- rnorm(n) z &lt;- u + rnorm(n) causal_coef = 2 x &lt;- z + rnorm(n) y &lt;- causal_coef * x + u + rnorm(n) jtools::export_summs(lm(y ~ x), lm(y ~ x + z)) Table 35.10: Model 1Model 2 (Intercept)0.03 *&nbsp;&nbsp;0.03 *&nbsp;&nbsp; (0.01)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; x2.34 ***2.01 *** (0.01)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.49 *** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; N10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R20.91&nbsp;&nbsp;&nbsp;&nbsp;0.92&nbsp;&nbsp;&nbsp;&nbsp; *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05. Even though \\(Z\\) is significant, we cannot give it a causal interpretation. # cleans workspace rm(list = ls()) # Draw DAG # specify edges model &lt;- dagitty(&quot;dag{x-&gt;y; u-&gt;z; u-&gt;x; z-&gt;y}&quot;) # set u as latent latents(model) &lt;- &quot;u&quot; ## coordinates for plotting coordinates(model) &lt;- list( x = c(x=1, z=3, u=2, y = 4), y = c(x=1, y=1, z=2, u = 3)) ## ggplot ggdag(model) + theme_dag() n &lt;- 1e4 u &lt;- rnorm(n) z &lt;- u + rnorm(n) x &lt;- u + rnorm(n) causal_coef &lt;- 2 y &lt;- causal_coef * x + z + rnorm(n) jtools::export_summs(lm(y ~ x), lm(y ~ x + z)) Table 17.1: Model 1Model 2 (Intercept)-0.03&nbsp;&nbsp;&nbsp;&nbsp;-0.01&nbsp;&nbsp;&nbsp;&nbsp; (0.02)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; x2.51 ***2.01 *** (0.01)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.01 *** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; N10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R20.84&nbsp;&nbsp;&nbsp;&nbsp;0.93&nbsp;&nbsp;&nbsp;&nbsp; *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05. Even though \\(Z\\) is significant, we cannot give it a causal interpretation. Summary # cleans workspace rm(list = ls()) # Model 1 model1 &lt;- dagitty(&quot;dag{x-&gt;y; z-&gt;x; z-&gt;y}&quot;) ## coordinates for plotting coordinates(model1) &lt;- list( x = c(x=1, y=3, z=2), y = c(x=1, y=1, z=2)) # Model 2 # specify edges model2 &lt;- dagitty(&quot;dag{x-&gt;y; u-&gt;z; z-&gt;x; u-&gt;y}&quot;) # set u as latent latents(model2) &lt;- &quot;u&quot; ## coordinates for plotting coordinates(model2) &lt;- list( x = c(x=1, z=2, u=3, y = 4), y = c(x=1, y=1, z=2, u = 3)) # Model 3 # specify edges model3 &lt;- dagitty(&quot;dag{x-&gt;y; u-&gt;z; u-&gt;x; z-&gt;y}&quot;) # set u as latent latents(model3) &lt;- &quot;u&quot; ## coordinates for plotting coordinates(model3) &lt;- list( x = c(x=1, z=3, u=2, y = 4), y = c(x=1, y=1, z=2, u = 3)) par(mfrow=c(1,3)) ## ggplot ggdag(model1) + theme_dag() ## ggplot ggdag(model2) + theme_dag() ## ggplot ggdag(model3) + theme_dag() 35.2.2 Omitted Variable Bias in Mediation Correction Common causes of \\(X\\) and any mediator (between \\(X\\) and \\(Y\\)) confound the effect of \\(X\\) on \\(Y\\) # cleans workspace rm(list = ls()) # DAG ## specify edges model &lt;- dagitty(&quot;dag{x-&gt;y; z-&gt;x; x-&gt;m; z-&gt;m; m-&gt;y}&quot;) ## coordinates for plotting coordinates(model) &lt;- list( x = c(x=1, z=2, m=3, y=4), y = c(x=1, z=2, m=1, y=1)) ## ggplot ggdag(model) + theme_dag() \\(Z\\) is a confounder of both the mediator \\(M\\) and \\(X\\) n &lt;- 1e4 z &lt;- rnorm(n) x &lt;- z + rnorm(n) causal_coef &lt;- 2 m &lt;- causal_coef * x + z + rnorm(n) y &lt;- m + rnorm(n) jtools::export_summs(lm(y ~ x), lm(y ~ x + z)) Table 35.11: Model 1Model 2 (Intercept)-0.02&nbsp;&nbsp;&nbsp;&nbsp;-0.01&nbsp;&nbsp;&nbsp;&nbsp; (0.02)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; x2.49 ***1.97 *** (0.01)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.02 *** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.02)&nbsp;&nbsp;&nbsp; N10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R20.83&nbsp;&nbsp;&nbsp;&nbsp;0.86&nbsp;&nbsp;&nbsp;&nbsp; *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05. # cleans workspace rm(list = ls()) # DAG ## specify edges model &lt;- dagitty(&quot;dag{x-&gt;y; u-&gt;z; z-&gt;x; x-&gt;m; u-&gt;m; m-&gt;y}&quot;) # set u as latent latents(model) &lt;- &quot;u&quot; ## coordinates for plotting coordinates(model) &lt;- list( x = c(x=1, z=2, u=3, m=4, y=5), y = c(x=1, z=2, u=3, m=1, y=1)) ## ggplot ggdag(model) + theme_dag() n &lt;- 1e4 u &lt;- rnorm(n) z &lt;- u + rnorm(n) x &lt;- z + rnorm(n) causal_coef &lt;- 2 m &lt;- causal_coef * x + u + rnorm(n) y &lt;- m + rnorm(n) jtools::export_summs(lm(y ~ x), lm(y ~ x + z)) Table 17.2: Model 1Model 2 (Intercept)-0.01&nbsp;&nbsp;&nbsp;&nbsp;-0.01&nbsp;&nbsp;&nbsp;&nbsp; (0.02)&nbsp;&nbsp;&nbsp;(0.02)&nbsp;&nbsp;&nbsp; x2.31 ***2.00 *** (0.01)&nbsp;&nbsp;&nbsp;(0.02)&nbsp;&nbsp;&nbsp; z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.49 *** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.02)&nbsp;&nbsp;&nbsp; N10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R20.86&nbsp;&nbsp;&nbsp;&nbsp;0.86&nbsp;&nbsp;&nbsp;&nbsp; *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05. # cleans workspace rm(list = ls()) # DAG ## specify edges model &lt;- dagitty(&quot;dag{x-&gt;y; u-&gt;z; z-&gt;m; x-&gt;m; u-&gt;x; m-&gt;y}&quot;) # set u as latent latents(model) &lt;- &quot;u&quot; ## coordinates for plotting coordinates(model) &lt;- list( x = c(x=1, z=3, u=2, m=4, y=5), y = c(x=1, z=2, u=3, m=1, y=1)) ## ggplot ggdag(model) + theme_dag() n &lt;- 1e4 u &lt;- rnorm(n) z &lt;- u + rnorm(n) x &lt;- u + rnorm(n) causal_coef &lt;- 2 m &lt;- causal_coef * x + z + rnorm(n) y &lt;- m + rnorm(n) jtools::export_summs(lm(y ~ x), lm(y ~ x + z)) Table 35.12: Model 1Model 2 (Intercept)0.01&nbsp;&nbsp;&nbsp;&nbsp;-0.00&nbsp;&nbsp;&nbsp;&nbsp; (0.02)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; x2.50 ***1.99 *** (0.01)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.02 *** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; N10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R20.78&nbsp;&nbsp;&nbsp;&nbsp;0.87&nbsp;&nbsp;&nbsp;&nbsp; *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05. Summary # model 4 model4 &lt;- dagitty(&quot;dag{x-&gt;y; z-&gt;x; x-&gt;m; z-&gt;m; m-&gt;y}&quot;) ## coordinates for plotting coordinates(model4) &lt;- list( x = c(x=1, z=2, m=3, y=4), y = c(x=1, z=2, m=1, y=1)) # model 5 model5 &lt;- dagitty(&quot;dag{x-&gt;y; u-&gt;z; z-&gt;x; x-&gt;m; u-&gt;m; m-&gt;y}&quot;) # set u as latent latents(model5) &lt;- &quot;u&quot; ## coordinates for plotting coordinates(model5) &lt;- list( x = c(x=1, z=2, u=3, m=4, y=5), y = c(x=1, z=2, u=3, m=1, y=1)) # model 6 model6 &lt;- dagitty(&quot;dag{x-&gt;y; u-&gt;z; z-&gt;m; x-&gt;m; u-&gt;x; m-&gt;y}&quot;) # set u as latent latents(model6) &lt;- &quot;u&quot; ## coordinates for plotting coordinates(model6) &lt;- list( x = c(x=1, z=3, u=2, m=4, y=5), y = c(x=1, z=2, u=3, m=1, y=1)) par(mfrow=c(1,3)) ## ggplot ggdag(model4) + theme_dag() ## ggplot ggdag(model5) + theme_dag() ## ggplot ggdag(model6) + theme_dag() "],["neutral-controls.html", "35.3 Neutral Controls", " 35.3 Neutral Controls 35.3.1 Good Predictive Controls Good for precision # cleans workspace rm(list = ls()) # DAG ## specify edges model &lt;- dagitty(&quot;dag{x-&gt;y; z-&gt;y}&quot;) ## coordinates for plotting coordinates(model) &lt;- list( x = c(x=1, z=2, y=2), y = c(x=1, z=2, y=1)) ## ggplot ggdag(model) + theme_dag() Controlling for \\(Z\\) does not help or hurt identification, but it can increase precision (i.e., reducing SE) n &lt;- 1e4 z &lt;- rnorm(n) x &lt;- rnorm(n) y &lt;- x + 2 * z + rnorm(n) jtools::export_summs(lm(y ~ x), lm(y ~ x + z)) Table 35.13: Model 1Model 2 (Intercept)0.01&nbsp;&nbsp;&nbsp;&nbsp;0.01&nbsp;&nbsp;&nbsp;&nbsp; (0.02)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; x1.00 ***1.01 *** (0.02)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.00 *** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; N10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R20.17&nbsp;&nbsp;&nbsp;&nbsp;0.83&nbsp;&nbsp;&nbsp;&nbsp; *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05. Similar coefficients, but smaller SE when controlling for \\(Z\\) Another variation is # cleans workspace rm(list = ls()) # DAG ## specify edges model &lt;- dagitty(&quot;dag{x-&gt;y; x-&gt;m; z-&gt;m; m-&gt;y}&quot;) ## coordinates for plotting coordinates(model) &lt;- list( x = c(x=1, z=2, m=2, y=3), y = c(x=1, z=2, m=1, y=1)) ## ggplot ggdag(model) + theme_dag() n &lt;- 1e4 z &lt;- rnorm(n) x &lt;- rnorm(n) m &lt;- 2 * z + rnorm(n) y &lt;- x + 2 * m + rnorm(n) jtools::export_summs(lm(y ~ x), lm(y ~ x + z)) Table 35.14: Model 1Model 2 (Intercept)-0.00&nbsp;&nbsp;&nbsp;&nbsp;-0.00&nbsp;&nbsp;&nbsp;&nbsp; (0.05)&nbsp;&nbsp;&nbsp;(0.02)&nbsp;&nbsp;&nbsp; x0.97 ***0.99 *** (0.05)&nbsp;&nbsp;&nbsp;(0.02)&nbsp;&nbsp;&nbsp; z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.02 *** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.02)&nbsp;&nbsp;&nbsp; N10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R20.04&nbsp;&nbsp;&nbsp;&nbsp;0.77&nbsp;&nbsp;&nbsp;&nbsp; *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05. Controlling for \\(Z\\) can reduce SE 35.3.2 Good Selection Bias # cleans workspace rm(list = ls()) # DAG ## specify edges model &lt;- dagitty(&quot;dag{x-&gt;y; x-&gt;z; z-&gt;w; u-&gt;w;u-&gt;y}&quot;) # set u as latent latents(model) &lt;- &quot;u&quot; ## coordinates for plotting coordinates(model) &lt;- list( x = c(x=1, z=2, w=3, u=3, y=5), y = c(x=3, z=2, w=1, u=4, y=3)) ## ggplot ggdag(model) + theme_dag() Unadjusted estimate is unbiased Controlling for Z can increase SE Controlling for Z while having on W can help identify X n &lt;- 1e4 x &lt;- rnorm(n) u &lt;- rnorm(n) z &lt;- x + rnorm(n) w &lt;- z + u + rnorm(n) y &lt;- x - 2*u + rnorm(n) jtools::export_summs(lm(y ~ x), lm(y ~ x + w), lm(y ~ x + z + w)) Table 35.15: Model 1Model 2Model 3 (Intercept)0.01&nbsp;&nbsp;&nbsp;&nbsp;0.01&nbsp;&nbsp;&nbsp;&nbsp;0.03&nbsp;&nbsp;&nbsp;&nbsp; (0.02)&nbsp;&nbsp;&nbsp;(0.02)&nbsp;&nbsp;&nbsp;(0.02)&nbsp;&nbsp;&nbsp; x0.99 ***1.65 ***0.99 *** (0.02)&nbsp;&nbsp;&nbsp;(0.02)&nbsp;&nbsp;&nbsp;(0.02)&nbsp;&nbsp;&nbsp; w&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-0.67 ***-1.01 *** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp;(0.01)&nbsp;&nbsp;&nbsp; z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.02 *** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.02)&nbsp;&nbsp;&nbsp; N10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R20.16&nbsp;&nbsp;&nbsp;&nbsp;0.39&nbsp;&nbsp;&nbsp;&nbsp;0.50&nbsp;&nbsp;&nbsp;&nbsp; *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05. 35.3.3 Bad Predictive Controls # cleans workspace rm(list = ls()) # DAG ## specify edges model &lt;- dagitty(&quot;dag{x-&gt;y; z-&gt;x}&quot;) ## coordinates for plotting coordinates(model) &lt;- list( x = c(x=1, z=1, y=2), y = c(x=1, z=2, y=1)) ## ggplot ggdag(model) + theme_dag() n &lt;- 1e4 z &lt;- rnorm(n) x &lt;- 2 * z + rnorm(n) y &lt;- x + 2 * rnorm(n) jtools::export_summs(lm(y ~ x), lm(y ~ x + z)) Table 35.16: Model 1Model 2 (Intercept)-0.02&nbsp;&nbsp;&nbsp;&nbsp;-0.02&nbsp;&nbsp;&nbsp;&nbsp; (0.02)&nbsp;&nbsp;&nbsp;(0.02)&nbsp;&nbsp;&nbsp; x0.99 ***1.00 *** (0.01)&nbsp;&nbsp;&nbsp;(0.02)&nbsp;&nbsp;&nbsp; z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-0.00&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.04)&nbsp;&nbsp;&nbsp; N10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R20.55&nbsp;&nbsp;&nbsp;&nbsp;0.55&nbsp;&nbsp;&nbsp;&nbsp; *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05. Similar coefficients, but greater SE when controlling for \\(Z\\) Another variation is rm(list = ls()) # DAG ## specify edges model &lt;- dagitty(&quot;dag{x-&gt;y; x-&gt;z}&quot;) ## coordinates for plotting coordinates(model) &lt;- list( x = c(x=1, z=1, y=2), y = c(x=1, z=2, y=1)) ## ggplot ggdag(model) + theme_dag() set.seed(1) n &lt;- 1e4 x &lt;- rnorm(n) z &lt;- 2 * x + rnorm(n) y &lt;- x + 2 * rnorm(n) jtools::export_summs(lm(y ~ x), lm(y ~ x + z)) Table 35.17: Model 1Model 2 (Intercept)0.02&nbsp;&nbsp;&nbsp;&nbsp;0.02&nbsp;&nbsp;&nbsp;&nbsp; (0.02)&nbsp;&nbsp;&nbsp;(0.02)&nbsp;&nbsp;&nbsp; x1.00 ***0.99 *** (0.02)&nbsp;&nbsp;&nbsp;(0.05)&nbsp;&nbsp;&nbsp; z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.00&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.02)&nbsp;&nbsp;&nbsp; N10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R20.20&nbsp;&nbsp;&nbsp;&nbsp;0.20&nbsp;&nbsp;&nbsp;&nbsp; *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05. Worse SE when controlling for \\(Z\\) (\\(0.02 &lt; 0.05\\)) 35.3.4 Bad Selection Bias # cleans workspace rm(list = ls()) # DAG ## specify edges model &lt;- dagitty(&quot;dag{x-&gt;y; x-&gt;z}&quot;) ## coordinates for plotting coordinates(model) &lt;- list( x = c(x=1, z=2, y=2), y = c(x=1, z=2, y=1)) ## ggplot ggdag(model) + theme_dag() Not all post-treatment variables are bad. Controlling for \\(Z\\) is neutral, but it might hurt the precision of the causal effect. "],["choosing-controls.html", "35.4 Choosing Controls", " 35.4 Choosing Controls library(pcalg) library(dagitty) library(causaleffect) By providing a causal diagram, deciding the appropriateness of controls are automated. Fusion DAGitty Guide on how to choose confounders: T. J. VanderWeele (2019) In cases where it’s hard to determine the plausibility of controls, we might need to further analysis. sensemakr provides such tools. library(sensemakr) In simple cases, we can follow the simple rules of thumb provided by Steinmetz and Block (2022) (p. 614, Fig 2) References "],["mediation.html", "Chapter 36 Mediation ", " Chapter 36 Mediation "],["traditional-approach.html", "36.1 Traditional Approach", " 36.1 Traditional Approach Baron and Kenny (1986) is outdated because of step 1, but we could still see the original idea. 3 regressions Step 1: \\(X \\to Y\\) Step 2: \\(X \\to M\\) Step 3: \\(X + M \\to Y\\) where \\(X\\) = independent (causal) variable \\(Y\\) = dependent (outcome) variable \\(M\\) = mediating variable Note: Originally, the first path from \\(X \\to Y\\) suggested by (Baron and Kenny 1986) needs to be significant. But there are cases in which you could have indirect of \\(X\\) on \\(Y\\) without significant direct effect of \\(X\\) on \\(Y\\) (e.g., when the effect is absorbed into M, or there are two counteracting effects \\(M_1, M_2\\) that cancel out each other effect). Unmediated model where \\(c\\) is the total effect where \\(c&#39;\\) = direct effect (effect of \\(X\\) on \\(Y\\) after accounting for the indirect path) \\(ab\\) = indirect effect Hence, \\[ \\begin{aligned} \\text{total effect} &amp;= \\text{direct effect} + \\text{indirect effect} \\\\ c &amp;= c&#39; + ab \\end{aligned} \\] However, this simple equation does not only hold in cases of Models with latent variables Logistic models (only approximately). Hence, you can only calculate \\(c\\) as the total effect of \\(c&#39; + ab\\) Multi-level models (Bauer, Preacher, and Gil 2006) To measure mediation (i.e., indirect effect), \\(1 - \\frac{c&#39;}{c}\\) highly unstable (D. P. MacKinnon, Warsi, and Dwyer 1995), especially in cases that \\(c\\) is small (not re* recommended) Product method: \\(a\\times b\\) Difference method: \\(c- c&#39;\\) For linear models, we have the following assumptions: No unmeasured confound between \\(X-Y\\), \\(X-M\\) and \\(M-Y\\) relationships. \\(X \\not\\rightarrow C\\) where \\(C\\) is a confounder between \\(M-Y\\) relationship Reliability: No errors in measurement of \\(M\\) (also known as reliability assumption) (can consider errors-in-variables models) Mathematically, \\[ Y = b_0 + b_1 X + \\epsilon \\] \\(b_1\\) does not need to be significant. We examine the effect of \\(X\\) on \\(M\\). This step requires that there is a significant effect of \\(X\\) on \\(M\\) to continue with the analysis Mathematically, \\[ M = b_0 + b_2 X + \\epsilon \\] where \\(b_2\\) needs to be significant. In this step, we want to the effect of \\(M\\) on \\(Y\\) “absorbs” most of the direct effect of \\(X\\) on \\(Y\\) (or at least makes the effect smaller). Mathematically, \\[ Y = b_0 + b_4 X + b_3 M + \\epsilon \\] \\(b_4\\) needs to be either smaller or insignificant. The effect of \\(X\\) on \\(Y\\) then, \\(M\\) … mediates between \\(X\\) and \\(Y\\) completely disappear (\\(b_4\\) insignificant) Fully (i.e., full mediation) partially disappear (\\(b_4 &lt; b_1\\) in step 1) Partially (i.e., partial mediation) Examine the mediation effect (i.e., whether it is significant) Sobel Test (Sobel 1982) Joint Significance Test Bootstrapping Shrout and Bolger (2002) (preferable) Notes: Proximal mediation (\\(a &gt; b\\)) can lead to multicollinearity and reduce statistical power, whereas distal mediation (\\(b &gt; a\\)) is preferred for maximizing test power. The ideal balance for maximizing power in mediation analysis involves slightly distal mediators (i.e., path \\(b\\) is somewhat larger than path \\(a\\)) (Hoyle 1999). Tests for direct effects (c and c’) have lower power compared to the indirect effect (ab), making it possible for ab to be significant while c is not, even in cases where there seems to be complete mediation but no statistical evidence of a direct cause-effect relationship between X and Y without considering M (Kenny and Judd 2014). The testing of \\(ab\\) offers a power advantage over \\(c’\\) because it effectively combines two tests. However, claims of complete mediation based solely on the non-significance of \\(c’\\) should be approached with caution, emphasizing the need for sufficient sample size and power, especially in assessing partial mediation. Or one should never make complete mediation claim (Hayes and Scharkow 2013) 36.1.1 Assumptions 36.1.1.1 Direction Quick fix but not convincing: Measure \\(X\\) before \\(M\\) and \\(Y\\) to prevent \\(M\\) or \\(Y\\) causing \\(X\\); measure \\(M\\) before \\(Y\\) to avoid \\(Y\\) causing \\(M\\). \\(Y\\) may cause \\(M\\) in a feedback model. Assuming \\(c&#39; =0\\) (full mediation) allows for estimating models with reciprocal causal effects between \\(M\\) and \\(Y\\) via IV estimation. E. R. Smith (1982) proposes treating both \\(M\\) and \\(Y\\) as outcomes with potential to mediate each other, requiring distinct instrumental variables for each that do not affect the other. 36.1.1.2 Interaction When M interact with X to affect Y, M is both a mediator and a mediator (Baron and Kenny 1986). Interaction between \\(XM\\) should always be estimated. For the interpretation of this interaction, see (T. VanderWeele 2015) 36.1.1.3 Reliability When mediator contains measurement errors, \\(b, c&#39;\\) are biased. Possible fix: mediator = latent variable (but loss of power) (Ledgerwood and Shrout 2011) \\(b\\) is attenuated (closer to 0) \\(c&#39;\\) is overestimated when \\(ab &gt;0\\) underestiamted when \\(ab&lt;0\\) When treatment contains measurement errors, \\(a,b\\) are biased \\(a\\) is attenuated \\(b\\) is overestimated when \\(ac&#39;&gt;0\\) underestimated when \\(ac&#39; &lt;0\\) When outcome contains measurement errors, If unstandardized, no bias If standardized, attenuation bias 36.1.1.4 Confounding Omitted variable bias can happen to any pair of relationships To deal with this problem, one can either use Design Strategies Statistical Strategies 36.1.1.4.1 Design Strategies Randomization of treatment variable. If possible, also mediator Control for the confounder (but still only for measureable observables) 36.1.1.4.2 Statistical Strategies Instrumental variable on treatment Specifically for confounder affecting the \\(M-Y\\) pair, front-door adjustment is possible when there is a variable that completely mediates the effect of the mediator on the outcome and is unaffected by the confounder. Weighting methods (e.g., inverse propensity) See Heiss for R code Need strong ignorability assumption (i.e.., all confounders are included and measured without error (Westfall and Yarkoni 2016)). Not fixable, but can be examined with robustness checks. 36.1.2 Indirect Effect Tests 36.1.2.1 Sobel Test developed by Sobel (1982) also known as the delta method not recommend because it assumes the indirect effect \\(b\\) has a normal distribution when it’s not (D. P. MacKinnon, Warsi, and Dwyer 1995). Mediation can occur even if direct and indirect effects oppose each other, termed “inconsistent mediation” (D. P. MacKinnon, Fairchild, and Fritz 2007). This is when the mediator acts as a suppressor variable. Standard Error \\[ \\sqrt{\\hat{b}^2 s_{\\hat{a}} + \\hat{a}^2 s_{b}^2} \\] The test of the indirect effect is \\[ z = \\frac{\\hat{ab}}{\\sqrt{\\hat{b}^2 s_{\\hat{a}} + \\hat{a}^2 s_{b}^2}} \\] Disadvantages Assume \\(a\\) and \\(b\\) are independent. Assume \\(ab\\) is normally distributed. Does not work well for small sample sizes. Power of the test is low and the test is conservative as compared to Bootstrapping. 36.1.2.2 Joint Significance Test Effective for determining if the indirect effect is nonzero (by testing whether \\(a\\) and \\(b\\) are both statistically significant), assumes \\(a \\perp b\\). It’s recommended to use it with other tests and has similar performance to a Bootstrapping test (Hayes and Scharkow 2013). The test’s accuracy can be affected by heteroscedasticity (Fossum and Montoya 2023) but not by non-normality. Although helpful in computing power for the test of the indirect effect, it doesn’t provide a confidence interval for the effect. 36.1.2.3 Bootstrapping First used by Bollen and Stine (1990) It allows for the calculation of confidence intervals, p-values, etc. It does not require \\(a \\perp b\\) and corrects for bias in the bootstrapped distribution. It can handle non-normality (in the sampling distribution of the indirect effect), complex models, and small samples. Concerns exist about the bias-corrected bootstrapping being too liberal (Fritz, Taylor, and MacKinnon 2012). Hence, current recommendations favor percentile bootstrap without bias correction for better Type I error rates (Tibbe and Montoya 2022). A special case of bootstrapping is a proposed by where you don’t need access to raw data to generate resampling, you only need \\(a, b, var(a), var(b), cov(a,b)\\) (which can be taken from lots of primary studies) result &lt;- causalverse::med_ind( a = 0.5, b = 0.7, var_a = 0.04, var_b = 0.05, cov_ab = 0.01 ) result$plot 36.1.2.3.1 With Instrument library(DiagrammeR) grViz(&quot; digraph { graph [] node [shape = plaintext] X [label = &#39;Treatment&#39;] Y [label = &#39;Outcome&#39;] edge [minlen = 2] X-&gt;Y { rank = same; X; Y } } &quot;) grViz(&quot; digraph { graph [] node [shape = plaintext] X [label =&#39;Treatment&#39;, shape = box] Y [label =&#39;Outcome&#39;, shape = box] M [label =&#39;Mediator&#39;, shape = box] IV [label =&#39;Instrument&#39;, shape = box] edge [minlen = 2] IV-&gt;X X-&gt;M M-&gt;Y X-&gt;Y { rank = same; X; Y; M } } &quot;) library(mediation) data(&quot;boundsdata&quot;) library(fixest) # Total Effect out1 &lt;- feols(out ~ ttt, data = boundsdata) # Indirect Effect out2 &lt;- feols(med ~ ttt, data = boundsdata) # Direct and Indirect Effect out3 &lt;- feols(out ~ med + ttt, data = boundsdata) # Proportion Test # To what extent is the effect of the treatment mediated by the mediator? coef(out2)[&#39;ttt&#39;] * coef(out3)[&#39;med&#39;] / coef(out1)[&#39;ttt&#39;] * 100 #&gt; ttt #&gt; 68.63609 # Sobel Test bda::mediation.test(boundsdata$med, boundsdata$ttt, boundsdata$out) |&gt; tibble::rownames_to_column() |&gt; causalverse::nice_tab(2) #&gt; rowname Sobel Aroian Goodman #&gt; 1 z.value 4.05 4.03 4.07 #&gt; 2 p.value 0.00 0.00 0.00 # Mediation Analysis using boot library(boot) set.seed(1) mediation_fn &lt;- function(data, i){ # sample the dataset df &lt;- data[i,] a_path &lt;- feols(med ~ ttt, data = df) a &lt;- coef(a_path)[&#39;ttt&#39;] b_path &lt;- feols(out ~ med + ttt, data = df) b &lt;- coef(b_path)[&#39;med&#39;] cp &lt;- coef(b_path)[&#39;ttt&#39;] # indirect effect ind_ef &lt;- a*b total_ef &lt;- a*b + cp return(c(ind_ef, total_ef)) } boot_med &lt;- boot(boundsdata, mediation_fn, R = 100, parallel = &quot;multicore&quot;, ncpus = 2) boot_med #&gt; #&gt; ORDINARY NONPARAMETRIC BOOTSTRAP #&gt; #&gt; #&gt; Call: #&gt; boot(data = boundsdata, statistic = mediation_fn, R = 100, parallel = &quot;multicore&quot;, #&gt; ncpus = 2) #&gt; #&gt; #&gt; Bootstrap Statistics : #&gt; original bias std. error #&gt; t1* 0.04112035 0.0006346725 0.009539903 #&gt; t2* 0.05991068 -0.0004462572 0.029556611 summary(boot_med) |&gt; causalverse::nice_tab() #&gt; R original bootBias bootSE bootMed #&gt; 1 100 0.04 0 0.01 0.04 #&gt; 2 100 0.06 0 0.03 0.06 # confidence intervals (percentile is always recommended) boot.ci(boot_med, type = c(&quot;norm&quot;, &quot;perc&quot;)) #&gt; BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS #&gt; Based on 100 bootstrap replicates #&gt; #&gt; CALL : #&gt; boot.ci(boot.out = boot_med, type = c(&quot;norm&quot;, &quot;perc&quot;)) #&gt; #&gt; Intervals : #&gt; Level Normal Percentile #&gt; 95% ( 0.0218, 0.0592 ) ( 0.0249, 0.0623 ) #&gt; Calculations and Intervals on Original Scale #&gt; Some percentile intervals may be unstable # point estimates (Indirect, and Total Effects) colMeans(boot_med$t) #&gt; [1] 0.04175502 0.05946442 Alternatively, one can use the robmed package library(robmed) Power test or use app library(pwr2ppl) # indirect path ab power medjs( # X on M (path a) rx1m1 = .3, # correlation between X and Y (path c&#39;) rx1y = .1, # correlation between M and Y (path b) rym1 = .3, # sample size n = 100, alpha = 0.05, # number of mediators mvars = 1, # should use 10000 rep = 1000 ) 36.1.3 Multiple Mediation The most general package to handle multiple cases is manymome See vignette for an example library(manymome) 36.1.3.1 Multiple Mediators Notes Vignette Package library(mma) 36.1.3.1.0.1 Lavaan # Load required packages library(MASS) # for mvrnorm library(lavaan) # Function to generate synthetic data with correctly correlated errors for mediators generate_data &lt;- function(n = 10000, a1 = 0.5, a2 = -0.35, b1 = 0.7, b2 = 0.48, corr = TRUE, correlation_value = 0.7) { set.seed(12345) X &lt;- rnorm(n) # Generate correlated errors using a multivariate normal distribution if (corr) { Sigma &lt;- matrix(c(1, correlation_value, correlation_value, 1), nrow = 2) # Higher covariance matrix for errors errors &lt;- mvrnorm(n, mu = c(0, 0), Sigma = Sigma) # Generate correlated errors } else { errors &lt;- mvrnorm(n, mu = c(0, 0), Sigma = diag(2)) # Independent errors } M1 &lt;- a1 * X + errors[, 1] M2 &lt;- a2 * X + errors[, 2] Y &lt;- b1 * M1 + b2 * M2 + rnorm(n) # Y depends on M1 and M2 data.frame(X = X, M1 = M1, M2 = M2, Y = Y) } # Ground truth for comparison ground_truth &lt;- data.frame(Parameter = c(&quot;b1&quot;, &quot;b2&quot;), GroundTruth = c(0.7, 0.48)) # Function to extract relevant estimates, standard errors, and model fit extract_estimates_b1_b2 &lt;- function(fit) { estimates &lt;- parameterEstimates(fit) estimates &lt;- estimates[estimates$lhs == &quot;Y&quot; &amp; estimates$rhs %in% c(&quot;M1&quot;, &quot;M2&quot;), c(&quot;rhs&quot;, &quot;est&quot;, &quot;se&quot;)] estimates$Parameter &lt;- ifelse(estimates$rhs == &quot;M1&quot;, &quot;b1&quot;, &quot;b2&quot;) estimates &lt;- estimates[, c(&quot;Parameter&quot;, &quot;est&quot;, &quot;se&quot;)] fit_stats &lt;- fitMeasures(fit, c(&quot;aic&quot;, &quot;bic&quot;, &quot;rmsea&quot;, &quot;chisq&quot;)) return(list(estimates = estimates, fit_stats = fit_stats)) } # Case 1: Correlated errors for mediators (modeled correctly) Data_corr &lt;- generate_data(n = 10000, corr = TRUE, correlation_value = 0.7) model_corr &lt;- &#39; Y ~ b1 * M1 + b2 * M2 + c * X M1 ~ a1 * X M2 ~ a2 * X M1 ~~ M2 # Correlated mediators (errors) &#39; fit_corr &lt;- sem(model = model_corr, data = Data_corr) results_corr &lt;- extract_estimates_b1_b2(fit_corr) # Case 2: Uncorrelated errors for mediators (modeled correctly) Data_uncorr &lt;- generate_data(n = 10000, corr = FALSE) model_uncorr &lt;- &#39; Y ~ b1 * M1 + b2 * M2 + c * X M1 ~ a1 * X M2 ~ a2 * X &#39; fit_uncorr &lt;- sem(model = model_uncorr, data = Data_uncorr) results_uncorr &lt;- extract_estimates_b1_b2(fit_uncorr) # Case 3: Correlated errors, but not modeled as correlated fit_corr_incorrect &lt;- sem(model = model_uncorr, data = Data_corr) results_corr_incorrect &lt;- extract_estimates_b1_b2(fit_corr_incorrect) # Case 4: Uncorrelated errors, but modeled as correlated fit_uncorr_incorrect &lt;- sem(model = model_corr, data = Data_uncorr) results_uncorr_incorrect &lt;- extract_estimates_b1_b2(fit_uncorr_incorrect) # Combine all estimates for comparison estimates_combined &lt;- list( &quot;Correlated (Correct)&quot; = results_corr$estimates, &quot;Uncorrelated (Correct)&quot; = results_uncorr$estimates, &quot;Correlated (Incorrect)&quot; = results_corr_incorrect$estimates, &quot;Uncorrelated (Incorrect)&quot; = results_uncorr_incorrect$estimates ) # Combine all into a single table comparison_table &lt;- do.call(rbind, lapply(names(estimates_combined), function(case) { df &lt;- estimates_combined[[case]] df$Case &lt;- case df })) # Merge with ground truth for final comparison comparison_table &lt;- merge(comparison_table, ground_truth, by = &quot;Parameter&quot;) # Display the comparison table comparison_table #&gt; Parameter est se Case GroundTruth #&gt; 1 b1 0.7002984 0.013870433 Correlated (Correct) 0.70 #&gt; 2 b1 0.6973612 0.009859426 Uncorrelated (Correct) 0.70 #&gt; 3 b1 0.7002984 0.010010367 Correlated (Incorrect) 0.70 #&gt; 4 b1 0.6973612 0.009859634 Uncorrelated (Incorrect) 0.70 #&gt; 5 b2 0.4871118 0.013805615 Correlated (Correct) 0.48 #&gt; 6 b2 0.4868318 0.010009908 Uncorrelated (Correct) 0.48 #&gt; 7 b2 0.4871118 0.009963588 Correlated (Incorrect) 0.48 #&gt; 8 b2 0.4868318 0.010010119 Uncorrelated (Incorrect) 0.48 # Display model fit statistics for each case fit_stats_combined &lt;- list( &quot;Correlated (Correct)&quot; = results_corr$fit_stats, &quot;Uncorrelated (Correct)&quot; = results_uncorr$fit_stats, &quot;Correlated (Incorrect)&quot; = results_corr_incorrect$fit_stats, &quot;Uncorrelated (Incorrect)&quot; = results_uncorr_incorrect$fit_stats ) fit_stats_combined #&gt; $`Correlated (Correct)` #&gt; aic bic rmsea chisq #&gt; 77932.45 77997.34 0.00 0.00 #&gt; #&gt; $`Uncorrelated (Correct)` #&gt; aic bic rmsea chisq #&gt; 84664.312 84721.995 0.000 0.421 #&gt; #&gt; $`Correlated (Incorrect)` #&gt; aic bic rmsea chisq #&gt; 84453.208 84510.891 0.808 6522.762 #&gt; #&gt; $`Uncorrelated (Incorrect)` #&gt; aic bic rmsea chisq #&gt; 84665.89 84730.78 0.00 0.00 36.1.3.2 Multiple Treatments (Hayes and Preacher 2014) Code in Process References "],["causal-inference-approach.html", "36.2 Causal Inference Approach", " 36.2 Causal Inference Approach 36.2.1 Example 1 from Virginia’s library myData &lt;- read.csv(&#39;http://static.lib.virginia.edu/statlab/materials/data/mediationData.csv&#39;) # Step 1 (no longer necessary) model.0 &lt;- lm(Y ~ X, myData) summary(model.0) #&gt; #&gt; Call: #&gt; lm(formula = Y ~ X, data = myData) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -5.0262 -1.2340 -0.3282 1.5583 5.1622 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 2.8572 0.6932 4.122 7.88e-05 *** #&gt; X 0.3961 0.1112 3.564 0.000567 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 1.929 on 98 degrees of freedom #&gt; Multiple R-squared: 0.1147, Adjusted R-squared: 0.1057 #&gt; F-statistic: 12.7 on 1 and 98 DF, p-value: 0.0005671 # Step 2 model.M &lt;- lm(M ~ X, myData) summary(model.M) #&gt; #&gt; Call: #&gt; lm(formula = M ~ X, data = myData) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -4.3046 -0.8656 0.1344 1.1344 4.6954 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 1.49952 0.58920 2.545 0.0125 * #&gt; X 0.56102 0.09448 5.938 4.39e-08 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 1.639 on 98 degrees of freedom #&gt; Multiple R-squared: 0.2646, Adjusted R-squared: 0.2571 #&gt; F-statistic: 35.26 on 1 and 98 DF, p-value: 4.391e-08 # Step 3 model.Y &lt;- lm(Y ~ X + M, myData) summary(model.Y) #&gt; #&gt; Call: #&gt; lm(formula = Y ~ X + M, data = myData) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -3.7631 -1.2393 0.0308 1.0832 4.0055 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 1.9043 0.6055 3.145 0.0022 ** #&gt; X 0.0396 0.1096 0.361 0.7187 #&gt; M 0.6355 0.1005 6.321 7.92e-09 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 1.631 on 97 degrees of freedom #&gt; Multiple R-squared: 0.373, Adjusted R-squared: 0.3601 #&gt; F-statistic: 28.85 on 2 and 97 DF, p-value: 1.471e-10 # Step 4 (boostrapping) library(mediation) results &lt;- mediate( model.M, model.Y, treat = &#39;X&#39;, mediator = &#39;M&#39;, boot = TRUE, sims = 500 ) summary(results) #&gt; #&gt; Causal Mediation Analysis #&gt; #&gt; Nonparametric Bootstrap Confidence Intervals with the Percentile Method #&gt; #&gt; Estimate 95% CI Lower 95% CI Upper p-value #&gt; ACME 0.3565 0.2119 0.51 &lt;2e-16 *** #&gt; ADE 0.0396 -0.1750 0.28 0.760 #&gt; Total Effect 0.3961 0.1743 0.64 0.004 ** #&gt; Prop. Mediated 0.9000 0.5042 1.94 0.004 ** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Sample Size Used: 100 #&gt; #&gt; #&gt; Simulations: 500 Total Effect = 0.3961 = \\(b_1\\) (step 1) = total effect of \\(X\\) on \\(Y\\) without \\(M\\) Direct Effect = ADE = 0.0396 = \\(b_4\\) (step 3) = direct effect of \\(X\\) on \\(Y\\) accounting for the indirect effect of \\(M\\) ACME = Average Causal Mediation Effects = \\(b_1 - b_4\\) = 0.3961 - 0.0396 = 0.3565 = \\(b_2 \\times b_3\\) = 0.56102 * 0.6355 = 0.3565 Using mediation package suggested by Imai, Keele, and Yamamoto (2010). More details of the package can be found here 2 types of Inference in this package: Model-based inference: Assumptions: Treatment is randomized (could use matching methods to achieve this). Sequential Ignorability: conditional on covariates, there is other confounders that affect the relationship between (1) treatment-mediator, (2) treatment-outcome, (3) mediator-outcome. Typically hard to argue in observational data. This assumption is for the identification of ACME (i.e., average causal mediation effects). Design-based inference Notations: we stay consistent with package instruction \\(M_i(t)\\) = mediator \\(T_i\\) = treatment status \\((0,1)\\) \\(Y_i(t,m)\\) = outcome where \\(t\\) = treatment, and \\(m\\) = mediating variables. \\(X_i\\) = vector of observed pre-treatment confounders Treatment effect (per unit \\(i\\)) = \\(\\tau_i = Y_i(1,M_i(1)) - Y_i (0,M_i(0))\\) which has 2 effects Causal mediation effects: \\(\\delta_i (t) \\equiv Y_i (t,M_i(1)) - Y_i(t,M_i(0))\\) Direct effects: \\(\\zeta (t) \\equiv Y_i (1, M_i(1)) - Y_i(0, M_i(0))\\) summing up to the treatment effect: \\(\\tau_i = \\delta_i (t) + \\zeta_i (1-t)\\) More on sequential ignorability \\[ \\{ Y_i (t&#39;, m) , M_i (t) \\} \\perp T_i |X_i = x \\] \\[ Y_i(t&#39;,m) \\perp M_i(t) | T_i = t, X_i = x \\] where \\(0 &lt; P(T_i = t | X_i = x)\\) \\(0 &lt; P(M_i = m | T_i = t , X_i =x)\\) First condition is the standard strong ignorability condition where treatment assignment is random conditional on pre-treatment confounders. Second condition is stronger where the mediators is also random given the observed treatment and pre-treatment confounders. This condition is satisfied only when there is no unobserved pre-treatment confounders, and post-treatment confounders, and multiple mediators that are correlated. My understanding is that until the moment I write this note, there is no way to test the sequential ignorability assumption. Hence, researchers can only do sensitivity analysis to argue for their result. References "],["model-based-causal-mediation-analysis.html", "36.3 Model-based causal mediation analysis", " 36.3 Model-based causal mediation analysis Other resources: here Fit 2 models mediator model: conditional distribution of the mediators \\(M_i | T_i, X_i\\) Outcome model: conditional distribution of \\(Y_i | T_i, M_i, X_i\\) mediation can accommodate almost all types of model for both mediator model and outcome model except Censored mediator model. The update here is that estimation of ACME does not rely on product or difference of coefficients (see 36.2.1 , which requires very strict assumption: (1) linear regression models of mediator and outcome, (2) \\(T_i\\) and \\(M_i\\) effects are additive and no interaction library(mediation) set.seed(2014) data(&quot;framing&quot;, package = &quot;mediation&quot;) med.fit &lt;- lm(emo ~ treat + age + educ + gender + income, data = framing) out.fit &lt;- glm( cong_mesg ~ emo + treat + age + educ + gender + income, data = framing, family = binomial(&quot;probit&quot;) ) # Quasi-Bayesian Monte Carlo med.out &lt;- mediate( med.fit, out.fit, treat = &quot;treat&quot;, mediator = &quot;emo&quot;, robustSE = TRUE, sims = 100 # should be 10000 in practice ) summary(med.out) #&gt; #&gt; Causal Mediation Analysis #&gt; #&gt; Quasi-Bayesian Confidence Intervals #&gt; #&gt; Estimate 95% CI Lower 95% CI Upper p-value #&gt; ACME (control) 0.0791 0.0351 0.15 &lt;2e-16 *** #&gt; ACME (treated) 0.0804 0.0367 0.16 &lt;2e-16 *** #&gt; ADE (control) 0.0206 -0.0976 0.12 0.70 #&gt; ADE (treated) 0.0218 -0.1053 0.12 0.70 #&gt; Total Effect 0.1009 -0.0497 0.23 0.14 #&gt; Prop. Mediated (control) 0.6946 -6.3109 3.68 0.14 #&gt; Prop. Mediated (treated) 0.7118 -5.7936 3.50 0.14 #&gt; ACME (average) 0.0798 0.0359 0.15 &lt;2e-16 *** #&gt; ADE (average) 0.0212 -0.1014 0.12 0.70 #&gt; Prop. Mediated (average) 0.7032 -6.0523 3.59 0.14 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Sample Size Used: 265 #&gt; #&gt; #&gt; Simulations: 100 Nonparametric bootstrap version med.out &lt;- mediate( med.fit, out.fit, boot = TRUE, treat = &quot;treat&quot;, mediator = &quot;emo&quot;, sims = 100, # should be 10000 in practice boot.ci.type = &quot;bca&quot; # bias-corrected and accelerated intervals ) summary(med.out) #&gt; #&gt; Causal Mediation Analysis #&gt; #&gt; Nonparametric Bootstrap Confidence Intervals with the BCa Method #&gt; #&gt; Estimate 95% CI Lower 95% CI Upper p-value #&gt; ACME (control) 0.0848 0.0424 0.14 &lt;2e-16 *** #&gt; ACME (treated) 0.0858 0.0410 0.14 &lt;2e-16 *** #&gt; ADE (control) 0.0117 -0.0726 0.13 0.58 #&gt; ADE (treated) 0.0127 -0.0784 0.14 0.58 #&gt; Total Effect 0.0975 0.0122 0.25 0.06 . #&gt; Prop. Mediated (control) 0.8698 1.7460 151.20 0.06 . #&gt; Prop. Mediated (treated) 0.8804 1.6879 138.91 0.06 . #&gt; ACME (average) 0.0853 0.0434 0.14 &lt;2e-16 *** #&gt; ADE (average) 0.0122 -0.0756 0.14 0.58 #&gt; Prop. Mediated (average) 0.8751 1.7170 145.05 0.06 . #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Sample Size Used: 265 #&gt; #&gt; #&gt; Simulations: 100 If theoretically understanding suggests that there is treatment and mediator interaction med.fit &lt;- lm(emo ~ treat + age + educ + gender + income, data = framing) out.fit &lt;- glm( cong_mesg ~ emo * treat + age + educ + gender + income, data = framing, family = binomial(&quot;probit&quot;) ) med.out &lt;- mediate( med.fit, out.fit, treat = &quot;treat&quot;, mediator = &quot;emo&quot;, robustSE = TRUE, sims = 100 ) summary(med.out) #&gt; #&gt; Causal Mediation Analysis #&gt; #&gt; Quasi-Bayesian Confidence Intervals #&gt; #&gt; Estimate 95% CI Lower 95% CI Upper p-value #&gt; ACME (control) 0.07417 0.02401 0.14 &lt;2e-16 *** #&gt; ACME (treated) 0.09496 0.02702 0.16 &lt;2e-16 *** #&gt; ADE (control) -0.01353 -0.11855 0.11 0.76 #&gt; ADE (treated) 0.00726 -0.11007 0.11 0.90 #&gt; Total Effect 0.08143 -0.05646 0.19 0.26 #&gt; Prop. Mediated (control) 0.64510 -14.31243 3.13 0.26 #&gt; Prop. Mediated (treated) 0.98006 -17.83202 4.01 0.26 #&gt; ACME (average) 0.08457 0.02738 0.15 &lt;2e-16 *** #&gt; ADE (average) -0.00314 -0.11457 0.12 1.00 #&gt; Prop. Mediated (average) 0.81258 -16.07223 3.55 0.26 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Sample Size Used: 265 #&gt; #&gt; #&gt; Simulations: 100 test.TMint(med.out, conf.level = .95) # test treatment-mediator interaction effect #&gt; #&gt; Test of ACME(1) - ACME(0) = 0 #&gt; #&gt; data: estimates from med.out #&gt; ACME(1) - ACME(0) = 0.020796, p-value = 0.3 #&gt; alternative hypothesis: true ACME(1) - ACME(0) is not equal to 0 #&gt; 95 percent confidence interval: #&gt; -0.01757310 0.07110837 plot(med.out) mediation can be used in conjunction with any of your imputation packages. And it can also handle mediated moderation or non-binary treatment variables, or multi-level data Sensitivity Analysis for sequential ignorability test for unobserved pre-treatment covariates \\(\\rho\\) = correlation between the residuals of the mediator and outcome regressions. If \\(\\rho\\) is significant, we have evidence for violation of sequential ignorability (i.e., there is unobserved pre-treatment confounders). med.fit &lt;- lm(emo ~ treat + age + educ + gender + income, data = framing) out.fit &lt;- glm( cong_mesg ~ emo + treat + age + educ + gender + income, data = framing, family = binomial(&quot;probit&quot;) ) med.out &lt;- mediate( med.fit, out.fit, treat = &quot;treat&quot;, mediator = &quot;emo&quot;, robustSE = TRUE, sims = 100 ) sens.out &lt;- medsens(med.out, rho.by = 0.1, # \\rho varies from -0.9 to 0.9 by 0.1 effect.type = &quot;indirect&quot;, # sensitivity on ACME # effect.type = &quot;direct&quot;, # sensitivity on ADE # effect.type = &quot;both&quot;, # sensitivity on ACME and ADE sims = 100) summary(sens.out) #&gt; #&gt; Mediation Sensitivity Analysis: Average Mediation Effect #&gt; #&gt; Sensitivity Region: ACME for Control Group #&gt; #&gt; Rho ACME(control) 95% CI Lower 95% CI Upper R^2_M*R^2_Y* R^2_M~R^2_Y~ #&gt; [1,] 0.3 0.0062 -0.0073 0.0188 0.09 0.0493 #&gt; [2,] 0.4 -0.0084 -0.0238 0.0017 0.16 0.0877 #&gt; #&gt; Rho at which ACME for Control Group = 0: 0.3 #&gt; R^2_M*R^2_Y* at which ACME for Control Group = 0: 0.09 #&gt; R^2_M~R^2_Y~ at which ACME for Control Group = 0: 0.0493 #&gt; #&gt; #&gt; Sensitivity Region: ACME for Treatment Group #&gt; #&gt; Rho ACME(treated) 95% CI Lower 95% CI Upper R^2_M*R^2_Y* R^2_M~R^2_Y~ #&gt; [1,] 0.3 0.0071 -0.0092 0.0213 0.09 0.0493 #&gt; [2,] 0.4 -0.0101 -0.0295 0.0023 0.16 0.0877 #&gt; #&gt; Rho at which ACME for Treatment Group = 0: 0.3 #&gt; R^2_M*R^2_Y* at which ACME for Treatment Group = 0: 0.09 #&gt; R^2_M~R^2_Y~ at which ACME for Treatment Group = 0: 0.0493 plot(sens.out, sens.par = &quot;rho&quot;, main = &quot;Anxiety&quot;, ylim = c(-0.2, 0.2)) ACME confidence intervals contains 0 when \\(\\rho \\in (0.3,0.4)\\) Alternatively, using \\(R^2\\) interpretation, we need to specify the direction of confounder that affects the mediator and outcome variables in plot using sign.prod = \"positive\" (i.e., same direction) or sign.prod = \"negative\" (i.e., opposite direction). plot(sens.out, sens.par = &quot;R2&quot;, r.type = &quot;total&quot;, sign.prod = &quot;positive&quot;) "],["directed-acyclic-graph.html", "Chapter 37 Directed Acyclic Graph", " Chapter 37 Directed Acyclic Graph Native R: dagitty ggdag dagR r-causal: by Center for Causal Discovery. Also available in Python Publication-ready (with R and Latex): shinyDAG Standalone program: DAG program by Sven Knuppel "],["basic-notations.html", "37.1 Basic Notations", " 37.1 Basic Notations Basic building blocks of DAG Mediators (chains): \\(X \\to Z \\to Y\\) controlling for Z blocks (closes) the causal impact of \\(X \\to Y\\) Common causes (forks): \\(X \\leftarrow Z \\to Y\\) Z (i.e., confounder) is a common cause in which it induces a non-causal association between \\(X\\) and \\(Y\\). Controlling for \\(Z\\) should close this association. \\(Z\\) d-separates \\(X\\) from \\(Y\\) when it blocks (closes) all paths from \\(X\\) to \\(Y\\) (i.e., \\(X \\perp Y |Z\\)). This applies to both common causes and mediators. Common effects (colliders): \\(X \\to Z \\leftarrow Y\\) Not controlling for \\(Z\\) does not induce an association between \\(X\\) and \\(Y\\) Controlling for \\(Z\\) induces a non-causal association between \\(X\\) and \\(Y\\) Notes: A descendant of a variable behavior similarly to that variable (e.g., a descendant of \\(Z\\) can behave like \\(Z\\) and partially control for \\(Z\\)) Rule of thumb for multiple Controls: o have Causal inference \\(X \\to Y\\), we must Close all backdoor path between \\(X\\) and \\(Y\\) (to eliminate spurious correlation) Do not close any causal path between \\(X\\) and \\(Y\\) (any mediators). "],["report.html", "Chapter 38 Report", " Chapter 38 Report Structure Exploratory analysis plots preliminary results interesting structure/features in the data outliers Model Assumptions Why this model/ How is this model the best one? Consideration: interactions, collinearity, dependence Model Fit How well does it fit? Are the model assumptions met? Residual analysis Inference/ Prediction Are there different way to support your inference? Conclusion Recommendation Limitation of the analysis How to correct those in the future This chapter is based on the jtools package. More information can be found here. "],["one-summary-table.html", "38.1 One summary table", " 38.1 One summary table Packages for reporting: Summary Statistics Table: qwraps2 vtable gtsummary apaTables stargazer Regression Table gtsummary sjPlot,sjmisc, sjlabelled stargazer: recommended (Example) modelsummary library(jtools) data(movies) fit &lt;- lm(metascore ~ budget + us_gross + year, data = movies) summ(fit) Observations 831 (10 missing obs. deleted) Dependent variable metascore Type OLS linear regression F(3,827) 26.23 R² 0.09 Adj. R² 0.08 Est. S.E. t val. p (Intercept) 52.06 139.67 0.37 0.71 budget -0.00 0.00 -5.89 0.00 us_gross 0.00 0.00 7.61 0.00 year 0.01 0.07 0.08 0.94 Standard errors: OLS summ( fit, scale = TRUE, vifs = TRUE, part.corr = TRUE, confint = TRUE, pvals = FALSE ) # notice that scale here is TRUE Observations 831 (10 missing obs. deleted) Dependent variable metascore Type OLS linear regression F(3,827) 26.23 R² 0.09 Adj. R² 0.08 Est. 2.5% 97.5% t val. VIF partial.r part.r (Intercept) 63.01 61.91 64.11 112.23 NA NA NA budget -3.78 -5.05 -2.52 -5.89 1.31 -0.20 -0.20 us_gross 5.28 3.92 6.64 7.61 1.52 0.26 0.25 year 0.05 -1.18 1.28 0.08 1.24 0.00 0.00 Standard errors: OLS; Continuous predictors are mean-centered and scaled by 1 s.d. The outcome variable remains in its original units. #obtain clsuter-robust SE data(&quot;PetersenCL&quot;, package = &quot;sandwich&quot;) fit2 &lt;- lm(y ~ x, data = PetersenCL) summ(fit2, robust = &quot;HC3&quot;, cluster = &quot;firm&quot;) Observations 5000 Dependent variable y Type OLS linear regression F(1,4998) 1310.74 R² 0.21 Adj. R² 0.21 Est. S.E. t val. p (Intercept) 0.03 0.07 0.44 0.66 x 1.03 0.05 20.36 0.00 Standard errors: Cluster-robust, type = HC3 Model to Equation # install.packages(&quot;equatiomatic&quot;) # not available for R 4.2 fit &lt;- lm(metascore ~ budget + us_gross + year, data = movies) # show the theoretical model equatiomatic::extract_eq(fit) # display the actual coefficients equatiomatic::extract_eq(fit, use_coefs = TRUE) "],["model-comparison.html", "38.2 Model Comparison", " 38.2 Model Comparison fit &lt;- lm(metascore ~ log(budget), data = movies) fit_b &lt;- lm(metascore ~ log(budget) + log(us_gross), data = movies) fit_c &lt;- lm(metascore ~ log(budget) + log(us_gross) + runtime, data = movies) coef_names &lt;- c(&quot;Budget&quot; = &quot;log(budget)&quot;, &quot;US Gross&quot; = &quot;log(us_gross)&quot;, &quot;Runtime (Hours)&quot; = &quot;runtime&quot;, &quot;Constant&quot; = &quot;(Intercept)&quot;) export_summs(fit, fit_b, fit_c, robust = &quot;HC3&quot;, coefs = coef_names) Table 35.1: Model 1Model 2Model 3 Budget-2.43 ***-5.16 ***-6.70 *** (0.44)&nbsp;&nbsp;&nbsp;(0.62)&nbsp;&nbsp;&nbsp;(0.67)&nbsp;&nbsp;&nbsp; US Gross&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.96 ***3.85 *** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0.51)&nbsp;&nbsp;&nbsp;(0.48)&nbsp;&nbsp;&nbsp; Runtime (Hours)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;14.29 *** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(1.63)&nbsp;&nbsp;&nbsp; Constant105.29 ***81.84 ***83.35 *** (7.65)&nbsp;&nbsp;&nbsp;(8.66)&nbsp;&nbsp;&nbsp;(8.82)&nbsp;&nbsp;&nbsp; N831&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;831&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;831&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R20.03&nbsp;&nbsp;&nbsp;&nbsp;0.09&nbsp;&nbsp;&nbsp;&nbsp;0.17&nbsp;&nbsp;&nbsp;&nbsp; Standard errors are heteroskedasticity robust. *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05. Another package is modelsummary library(modelsummary) lm_mod &lt;- lm(mpg ~ wt + hp + cyl, mtcars) msummary(lm_mod, vcov = c(&quot;iid&quot;,&quot;robust&quot;,&quot;HC4&quot;))  (1)   (2)   (3) (Intercept) 38.752 38.752 38.752 (1.787) (2.286) (2.177) wt −3.167 −3.167 −3.167 (0.741) (0.833) (0.819) hp −0.018 −0.018 −0.018 (0.012) (0.010) (0.013) cyl −0.942 −0.942 −0.942 (0.551) (0.573) (0.572) Num.Obs. 32 32 32 R2 0.843 0.843 0.843 R2 Adj. 0.826 0.826 0.826 AIC 155.5 155.5 155.5 BIC 162.8 162.8 162.8 Log.Lik. −72.738 −72.738 −72.738 F 50.171 31.065 32.623 RMSE 2.35 2.35 2.35 Std.Errors IID HC3 HC4 modelplot(lm_mod, vcov = c(&quot;iid&quot;,&quot;robust&quot;,&quot;HC4&quot;)) Another package is stargazer library(&quot;stargazer&quot;) stargazer(attitude) #&gt; #&gt; % Table created by stargazer v.5.2.3 by Marek Hlavac, Social Policy Institute. E-mail: marek.hlavac at gmail.com #&gt; % Date and time: Thu, Aug 29, 2024 - 4:10:22 PM #&gt; \\begin{table}[!htbp] \\centering #&gt; \\caption{} #&gt; \\label{} #&gt; \\begin{tabular}{@{\\extracolsep{5pt}}lccccc} #&gt; \\\\[-1.8ex]\\hline #&gt; \\hline \\\\[-1.8ex] #&gt; Statistic &amp; \\multicolumn{1}{c}{N} &amp; \\multicolumn{1}{c}{Mean} &amp; \\multicolumn{1}{c}{St. Dev.} &amp; \\multicolumn{1}{c}{Min} &amp; \\multicolumn{1}{c}{Max} \\\\ #&gt; \\hline \\\\[-1.8ex] #&gt; rating &amp; 30 &amp; 64.633 &amp; 12.173 &amp; 40 &amp; 85 \\\\ #&gt; complaints &amp; 30 &amp; 66.600 &amp; 13.315 &amp; 37 &amp; 90 \\\\ #&gt; privileges &amp; 30 &amp; 53.133 &amp; 12.235 &amp; 30 &amp; 83 \\\\ #&gt; learning &amp; 30 &amp; 56.367 &amp; 11.737 &amp; 34 &amp; 75 \\\\ #&gt; raises &amp; 30 &amp; 64.633 &amp; 10.397 &amp; 43 &amp; 88 \\\\ #&gt; critical &amp; 30 &amp; 74.767 &amp; 9.895 &amp; 49 &amp; 92 \\\\ #&gt; advance &amp; 30 &amp; 42.933 &amp; 10.289 &amp; 25 &amp; 72 \\\\ #&gt; \\hline \\\\[-1.8ex] #&gt; \\end{tabular} #&gt; \\end{table} ## 2 OLS models linear.1 &lt;- lm(rating ~ complaints + privileges + learning + raises + critical, data = attitude) linear.2 &lt;- lm(rating ~ complaints + privileges + learning, data = attitude) ## create an indicator dependent variable, and run a probit model attitude$high.rating &lt;- (attitude$rating &gt; 70) probit.model &lt;- glm( high.rating ~ learning + critical + advance, data = attitude, family = binomial(link = &quot;probit&quot;) ) stargazer(linear.1, linear.2, probit.model, title = &quot;Results&quot;, align = TRUE) #&gt; #&gt; % Table created by stargazer v.5.2.3 by Marek Hlavac, Social Policy Institute. E-mail: marek.hlavac at gmail.com #&gt; % Date and time: Thu, Aug 29, 2024 - 4:10:22 PM #&gt; % Requires LaTeX packages: dcolumn #&gt; \\begin{table}[!htbp] \\centering #&gt; \\caption{Results} #&gt; \\label{} #&gt; \\begin{tabular}{@{\\extracolsep{5pt}}lD{.}{.}{-3} D{.}{.}{-3} D{.}{.}{-3} } #&gt; \\\\[-1.8ex]\\hline #&gt; \\hline \\\\[-1.8ex] #&gt; &amp; \\multicolumn{3}{c}{\\textit{Dependent variable:}} \\\\ #&gt; \\cline{2-4} #&gt; \\\\[-1.8ex] &amp; \\multicolumn{2}{c}{rating} &amp; \\multicolumn{1}{c}{high.rating} \\\\ #&gt; \\\\[-1.8ex] &amp; \\multicolumn{2}{c}{\\textit{OLS}} &amp; \\multicolumn{1}{c}{\\textit{probit}} \\\\ #&gt; \\\\[-1.8ex] &amp; \\multicolumn{1}{c}{(1)} &amp; \\multicolumn{1}{c}{(2)} &amp; \\multicolumn{1}{c}{(3)}\\\\ #&gt; \\hline \\\\[-1.8ex] #&gt; complaints &amp; 0.692^{***} &amp; 0.682^{***} &amp; \\\\ #&gt; &amp; (0.149) &amp; (0.129) &amp; \\\\ #&gt; &amp; &amp; &amp; \\\\ #&gt; privileges &amp; -0.104 &amp; -0.103 &amp; \\\\ #&gt; &amp; (0.135) &amp; (0.129) &amp; \\\\ #&gt; &amp; &amp; &amp; \\\\ #&gt; learning &amp; 0.249 &amp; 0.238^{*} &amp; 0.164^{***} \\\\ #&gt; &amp; (0.160) &amp; (0.139) &amp; (0.053) \\\\ #&gt; &amp; &amp; &amp; \\\\ #&gt; raises &amp; -0.033 &amp; &amp; \\\\ #&gt; &amp; (0.202) &amp; &amp; \\\\ #&gt; &amp; &amp; &amp; \\\\ #&gt; critical &amp; 0.015 &amp; &amp; -0.001 \\\\ #&gt; &amp; (0.147) &amp; &amp; (0.044) \\\\ #&gt; &amp; &amp; &amp; \\\\ #&gt; advance &amp; &amp; &amp; -0.062 \\\\ #&gt; &amp; &amp; &amp; (0.042) \\\\ #&gt; &amp; &amp; &amp; \\\\ #&gt; Constant &amp; 11.011 &amp; 11.258 &amp; -7.476^{**} \\\\ #&gt; &amp; (11.704) &amp; (7.318) &amp; (3.570) \\\\ #&gt; &amp; &amp; &amp; \\\\ #&gt; \\hline \\\\[-1.8ex] #&gt; Observations &amp; \\multicolumn{1}{c}{30} &amp; \\multicolumn{1}{c}{30} &amp; \\multicolumn{1}{c}{30} \\\\ #&gt; R$^{2}$ &amp; \\multicolumn{1}{c}{0.715} &amp; \\multicolumn{1}{c}{0.715} &amp; \\\\ #&gt; Adjusted R$^{2}$ &amp; \\multicolumn{1}{c}{0.656} &amp; \\multicolumn{1}{c}{0.682} &amp; \\\\ #&gt; Log Likelihood &amp; &amp; &amp; \\multicolumn{1}{c}{-9.087} \\\\ #&gt; Akaike Inf. Crit. &amp; &amp; &amp; \\multicolumn{1}{c}{26.175} \\\\ #&gt; Residual Std. Error &amp; \\multicolumn{1}{c}{7.139 (df = 24)} &amp; \\multicolumn{1}{c}{6.863 (df = 26)} &amp; \\\\ #&gt; F Statistic &amp; \\multicolumn{1}{c}{12.063$^{***}$ (df = 5; 24)} &amp; \\multicolumn{1}{c}{21.743$^{***}$ (df = 3; 26)} &amp; \\\\ #&gt; \\hline #&gt; \\hline \\\\[-1.8ex] #&gt; \\textit{Note:} &amp; \\multicolumn{3}{r}{$^{*}$p$&lt;$0.1; $^{**}$p$&lt;$0.05; $^{***}$p$&lt;$0.01} \\\\ #&gt; \\end{tabular} #&gt; \\end{table} # Latex stargazer( linear.1, linear.2, probit.model, title = &quot;Regression Results&quot;, align = TRUE, dep.var.labels = c(&quot;Overall Rating&quot;, &quot;High Rating&quot;), covariate.labels = c( &quot;Handling of Complaints&quot;, &quot;No Special Privileges&quot;, &quot;Opportunity to Learn&quot;, &quot;Performance-Based Raises&quot;, &quot;Too Critical&quot;, &quot;Advancement&quot; ), omit.stat = c(&quot;LL&quot;, &quot;ser&quot;, &quot;f&quot;), no.space = TRUE ) # ASCII text output stargazer( linear.1, linear.2, type = &quot;text&quot;, title = &quot;Regression Results&quot;, dep.var.labels = c(&quot;Overall Rating&quot;, &quot;High Rating&quot;), covariate.labels = c( &quot;Handling of Complaints&quot;, &quot;No Special Privileges&quot;, &quot;Opportunity to Learn&quot;, &quot;Performance-Based Raises&quot;, &quot;Too Critical&quot;, &quot;Advancement&quot; ), omit.stat = c(&quot;LL&quot;, &quot;ser&quot;, &quot;f&quot;), ci = TRUE, ci.level = 0.90, single.row = TRUE ) #&gt; #&gt; Regression Results #&gt; ======================================================================== #&gt; Dependent variable: #&gt; ----------------------------------------------- #&gt; Overall Rating #&gt; (1) (2) #&gt; ------------------------------------------------------------------------ #&gt; Handling of Complaints 0.692*** (0.447, 0.937) 0.682*** (0.470, 0.894) #&gt; No Special Privileges -0.104 (-0.325, 0.118) -0.103 (-0.316, 0.109) #&gt; Opportunity to Learn 0.249 (-0.013, 0.512) 0.238* (0.009, 0.467) #&gt; Performance-Based Raises -0.033 (-0.366, 0.299) #&gt; Too Critical 0.015 (-0.227, 0.258) #&gt; Advancement 11.011 (-8.240, 30.262) 11.258 (-0.779, 23.296) #&gt; ------------------------------------------------------------------------ #&gt; Observations 30 30 #&gt; R2 0.715 0.715 #&gt; Adjusted R2 0.656 0.682 #&gt; ======================================================================== #&gt; Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01 stargazer( linear.1, linear.2, probit.model, title = &quot;Regression Results&quot;, align = TRUE, dep.var.labels = c(&quot;Overall Rating&quot;, &quot;High Rating&quot;), covariate.labels = c( &quot;Handling of Complaints&quot;, &quot;No Special Privileges&quot;, &quot;Opportunity to Learn&quot;, &quot;Performance-Based Raises&quot;, &quot;Too Critical&quot;, &quot;Advancement&quot; ), omit.stat = c(&quot;LL&quot;, &quot;ser&quot;, &quot;f&quot;), no.space = TRUE ) Correlation Table correlation.matrix &lt;- cor(attitude[, c(&quot;rating&quot;, &quot;complaints&quot;, &quot;privileges&quot;)]) stargazer(correlation.matrix, title = &quot;Correlation Matrix&quot;) "],["changes-in-an-estimate.html", "38.3 Changes in an estimate", " 38.3 Changes in an estimate coef_names &lt;- coef_names[1:3] # Dropping intercept for plots plot_summs(fit, fit_b, fit_c, robust = &quot;HC3&quot;, coefs = coef_names) plot_summs( fit_c, robust = &quot;HC3&quot;, coefs = coef_names, plot.distributions = TRUE ) "],["standard-errors-3.html", "38.4 Standard Errors", " 38.4 Standard Errors sandwich vignette Type Applicable Usage Reference const Assume constant variances HC HC0 vcovCL Heterogeneity White’s estimator All other heterogeneity SE methods are derivatives of this. No small sample bias adjustment (White 1980) HC1 vcovCL Uses a degrees of freedom-based correction When the number of clusters is small, HC2 and HC3 are better (Cameron, Gelbach, and Miller 2008) (J. G. MacKinnon and White 1985) HC2 vcovCL Better with the linear model, but still applicable for Generalized Linear Models Needs a hat (weighted) matrix HC3 vcovCL Better with the linear model, but still applicable for Generalized Linear Models Needs a hat (weighted) matrix HC4 vcovHC (Cribari-Neto 2004) HC4m vcovHC (Cribari-Neto, Souza, and Vasconcellos 2007) HC5 vcovHC (Cribari-Neto and Silva 2011) data(cars) model &lt;- lm(speed ~ dist, data = cars) summary(model) #&gt; #&gt; Call: #&gt; lm(formula = speed ~ dist, data = cars) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -7.5293 -2.1550 0.3615 2.4377 6.4179 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 8.28391 0.87438 9.474 1.44e-12 *** #&gt; dist 0.16557 0.01749 9.464 1.49e-12 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 3.156 on 48 degrees of freedom #&gt; Multiple R-squared: 0.6511, Adjusted R-squared: 0.6438 #&gt; F-statistic: 89.57 on 1 and 48 DF, p-value: 1.49e-12 lmtest::coeftest(model, vcov. = sandwich::vcovHC(model, type = &quot;HC1&quot;)) #&gt; #&gt; t test of coefficients: #&gt; #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 8.283906 0.891860 9.2883 2.682e-12 *** #&gt; dist 0.165568 0.019402 8.5335 3.482e-11 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 References "],["coefficient-uncertainty-and-distribution.html", "38.5 Coefficient Uncertainty and Distribution", " 38.5 Coefficient Uncertainty and Distribution The ggdist allows us to visualize uncertainty under both frequentist and Bayesian frameworks library(ggdist) "],["descriptive-tables.html", "38.6 Descriptive Tables", " 38.6 Descriptive Tables Export APA theme data(&quot;mtcars&quot;) library(flextable) theme_apa(flextable(mtcars[1:5,1:5])) Export to Latex print(xtable::xtable(mtcars, type = &quot;latex&quot;), file = file.path(getwd(), &quot;output&quot;, &quot;mtcars_xtable.tex&quot;)) # American Economic Review style stargazer::stargazer( mtcars, title = &quot;Testing&quot;, style = &quot;aer&quot;, out = file.path(getwd(), &quot;output&quot;, &quot;mtcars_stargazer.tex&quot;) ) # other styles include # Administrative Science Quarterly # Quarterly Journal of Economics However, the above codes do not play well with notes. Hence, I create my own custom code that follows the AMA guidelines ama_tbl &lt;- function(data, caption, label, note, output_path) { library(tidyverse) library(xtable) # Function to determine column alignment get_column_alignment &lt;- function(data) { # Start with the alignment for the header row alignment &lt;- c(&quot;l&quot;, &quot;l&quot;) # Check each column for (col in seq_len(ncol(data))[-1]) { if (is.numeric(data[[col]])) { alignment &lt;- c(alignment, &quot;r&quot;) # Right alignment for numbers } else { alignment &lt;- c(alignment, &quot;c&quot;) # Center alignment for other data } } return(alignment) } data %&gt;% # bold + left align first column rename_with(~paste(&quot;\\\\multicolumn{1}{l}{\\\\textbf{&quot;, ., &quot;}}&quot;), 1) %&gt;% # bold + center align all other columns `colnames&lt;-`(ifelse(colnames(.) != colnames(.)[1], paste(&quot;\\\\multicolumn{1}{c}{\\\\textbf{&quot;, colnames(.), &quot;}}&quot;), colnames(.))) %&gt;% xtable(caption = caption, label = label, align = get_column_alignment(data), auto = TRUE) %&gt;% print( include.rownames = FALSE, caption.placement = &quot;top&quot;, hline.after=c(-1, 0), # p{0.9\\linewidth} sets the width of the column to 90% of the line width, and the @{} removes any extra padding around the cell. add.to.row = list(pos = list(nrow(data)), # Add at the bottom of the table command = c(paste0(&quot;\\\\hline \\n \\\\multicolumn{&quot;,ncol(data), &quot;}{l} {&quot;, &quot;\\n \\\\begin{tabular}{@{}p{0.9\\\\linewidth}@{}} \\n&quot;,&quot;Note: &quot;, note, &quot;\\n \\\\end{tabular} } \\n&quot;))), # Add your note here # make sure your heading is untouched (because you manually change it above) sanitize.colnames.function = identity, # place a the top of the page table.placement = &quot;h&quot;, file = output_path ) } ama_tbl( mtcars, caption = &quot;This is caption&quot;, label = &quot;tab:this_is_label&quot;, note = &quot;this is note&quot;, output_path = file.path(getwd(), &quot;output&quot;, &quot;mtcars_custom_ama.tex&quot;) ) "],["visualizations-and-plots.html", "38.7 Visualizations and Plots", " 38.7 Visualizations and Plots You can customize your plots based on your preferred journals. Here, I am creating a custom setting for the American Marketing Association. American-Marketing-Association-ready theme for plots library(ggplot2) # check available fonts # windowsFonts() # for Times New Roman # names(windowsFonts()[windowsFonts()==&quot;TT Times New Roman&quot;]) # Making a theme amatheme = theme_bw(base_size = 14, base_family = &quot;serif&quot;) + # This is Time New Roman theme( # remove major gridlines panel.grid.major = element_blank(), # remove minor gridlines panel.grid.minor = element_blank(), # remove panel border panel.border = element_blank(), line = element_line(), # change font text = element_text(), # if you want to remove legend title # legend.title = element_blank(), legend.title = element_text(size = rel(0.6), face = &quot;bold&quot;), # change font size of legend legend.text = element_text(size = rel(0.6)), legend.background = element_rect(color = &quot;black&quot;), # legend.margin = margin(t = 5, l = 5, r = 5, b = 5), # legend.key = element_rect(color = NA, fill = NA), # change font size of main title plot.title = element_text( size = rel(1.2), face = &quot;bold&quot;, hjust = 0.5, margin = margin(b = 15) ), plot.margin = unit(c(1, 1, 1, 1), &quot;cm&quot;), # add black line along axes axis.line = element_line(colour = &quot;black&quot;, linewidth = .8), axis.ticks = element_line(), # axis title axis.title.x = element_text(size = rel(1.2), face = &quot;bold&quot;), axis.title.y = element_text(size = rel(1.2), face = &quot;bold&quot;), # axis text size axis.text.y = element_text(size = rel(1)), axis.text.x = element_text(size = rel(1)) ) Example library(tidyverse) library(ggsci) data(&quot;mtcars&quot;) yourplot &lt;- mtcars %&gt;% select(mpg, cyl, gear) %&gt;% ggplot(., aes(x = mpg, y = cyl, fill = gear)) + geom_point() + labs(title=&quot;Some Plot&quot;) yourplot + amatheme + # choose different color theme scale_color_npg() yourplot + amatheme + scale_color_continuous() Other pre-specified themes library(ggthemes) # Stata theme yourplot + theme_stata() # The economist theme yourplot + theme_economist() yourplot + theme_economist_white() # Wall street journal theme yourplot + theme_wsj() # APA theme yourplot + jtools::theme_apa( legend.font.size = 24, x.font.size = 20, y.font.size = 20 ) "],["exploratory-data-analysis.html", "Chapter 39 Exploratory Data Analysis", " Chapter 39 Exploratory Data Analysis # load to get txhousing data library(ggplot2) Data Report Feature Engineering Missing Data # install.packages(&quot;DataExplorer&quot;) library(DataExplorer) # creat a html file that contain all reports create_report(txhousing) introduce() # see basic info dummify() # create binary columns from discrete variables split_columns() # split data into discrete and continuous parts plot_correlation() # heatmap for discrete var plot_intro() plot_missing() # plot missing value profile_missing() # profile missing values plot_prcomp() # plot PCA Error Identification # install.packages(&quot;dataReporter&quot;) library(dataReporter) makeDataReport() # detailed report like DataExplorer Summary statistics library(skimr) skim() # give only few quick summary stat, not as detailed as the other two packages Not so code-y process Quick and dirty way to look at your data # install.packages(&quot;rpivotTable&quot;) library(rpivotTable) # give set up just like Excel table data %&gt;% rpivotTable::rpivotTable() Code generation and wrangling Shiny-app based Tableu style # install.packages(&quot;esquisse&quot;) library(esquisse) esquisse::esquisser() Customized your daily/automatic report # install.packages(&quot;chronicle&quot;) library(chronicle) # install.packages(&quot;dlookr&quot;) # install.packages(&quot;descriptr&quot;) "],["sensitivity-analysis-robustness-check.html", "Chapter 40 Sensitivity Analysis/ Robustness Check ", " Chapter 40 Sensitivity Analysis/ Robustness Check "],["specification-curve.html", "40.1 Specification curve", " 40.1 Specification curve also known as Specification robustness graph or coefficient stability plot Resources In Stata or speccurve (Simonsohn, Simmons, and Nelson 2020) 40.1.1 starbility Recommend Installation devtools::install_github(&#39;https://github.com/AakaashRao/starbility&#39;) library(starbility) Example by the package’s author library(tidyverse) library(starbility) library(lfe) data(&quot;diamonds&quot;) set.seed(43) indices = sample(1:nrow(diamonds), replace = F, size = round(nrow(diamonds) / 20)) diamonds = diamonds[indices, ] Plot different combinations of controls # If you want to make the diamond dimensions as base control base_controls = c( &#39;Diamond dimensions&#39; = &#39;x + y + z&#39; # include all variables under 1 dimension ) perm_controls = c( &#39;Depth&#39; = &#39;depth&#39;, &#39;Table width&#39; = &#39;table&#39; ) nonperm_fe_controls = c( &#39;Clarity FE (granular)&#39; = &#39;clarity&#39;, &#39;Clarity FE (binary)&#39; = &#39;high_clarity&#39; ) # Adding fixed effects nonperm_fe_controls = c( &#39;Clarity FE (granular)&#39; = &#39;clarity&#39;, &#39;Clarity FE (binary)&#39; = &#39;high_clarity&#39; ) # Adding instrumental variables instruments = &#39;x+y+z&#39; # clustering and weights diamonds$sample_weights = runif(n = nrow(diamonds)) # robust standard errors starb_felm_custom = function(spec, data, rhs, ...) { spec = as.formula(spec) model = lfe::felm(spec, data=data) %&gt;% broom::tidy() row = which(model$term==rhs) coef = model[row, &#39;estimate&#39;] %&gt;% as.numeric() se = model[row, &#39;std.error&#39;] %&gt;% as.numeric() p = model[row, &#39;p.value&#39;] %&gt;% as.numeric() # 99% confidence interval z = qnorm(0.995) # one-tailed test return(c(coef, p/2, coef+z*se, coef-z*se)) } plots = stability_plot( data = diamonds, lhs = &#39;price&#39;, rhs = &#39;carat&#39;, error_geom = &#39;ribbon&#39;, # make the plot more aesthetics # error_geom = &#39;none&#39;, # if you don&#39;t want ribbon (i.e., error bar) model = starb_felm_custom, cluster = &#39;cut&#39;, weights = &#39;sample_weights&#39;, # iv = instruments, perm = perm_controls, base = base_controls, # perm_fe = perm_fe_controls, # if you want to include fixed effects sequentially (not all combinations) # (e.g., you want to test country or state fixed effect, not both ) # nonperm_fe = nonperm_fe_controls, # fe_always = F, # if you want to have a model without any Fixed Effects # sort &quot;asc&quot;, &quot;desc&quot;, or by fixed effects: &quot;asc-by-fe&quot; or &quot;desc-by-fe&quot; sort = &quot;asc-by-fe&quot;, # if you have less variables and want more aesthetics # control_geom = &#39;circle&#39;, # point_size = 2, # control_spacing = 0.3, # error_alpha = 0.2, # change alpha of the error geom # point_size = 1.5, # change the size of the coefficient points # control_text_size = 10, # change the size of the control labels # coef_ylim = c(-5000, 35000), # change the endpoints of the y-axis # trip_top = 3, # change the spacing between the two panels rel_height = 0.6 ) plots # add comments # replacement_coef_panel = plots[[1]] + # scale_y_reverse() + # theme(panel.grid.minor = element_blank()) + # geom_vline(xintercept = 41, # linetype = &#39;dashed&#39;, # alpha = 0.4) + # annotate( # geom = &#39;label&#39;, # x = 52, # y = 30000, # label = &#39;What a great\\nspecification!&#39;, # alpha = 0.75 # ) # # combine_plots(replacement_coef_panel, # plots[[2]], # rel_height = 0.6) Note: \\(p &lt; 0.01\\): red \\(p &lt; 0.05\\): green \\(p &lt; 0.1\\): blue \\(p &gt; 0.1\\): black More Advanced Stuff # Step 1: Control Grid diamonds$high_clarity = diamonds$clarity %in% c(&#39;VS1&#39;,&#39;VVS2&#39;,&#39;VVS1&#39;,&#39;IF&#39;) base_controls = c( &#39;Diamond dimensions&#39; = &#39;x + y + z&#39; ) perm_controls = c( &#39;Depth&#39; = &#39;depth&#39;, &#39;Table width&#39; = &#39;table&#39; ) perm_fe_controls = c( &#39;Cut FE&#39; = &#39;cut&#39;, &#39;Color FE&#39; = &#39;color&#39; ) nonperm_fe_controls = c( &#39;Clarity FE (granular)&#39; = &#39;clarity&#39;, &#39;Clarity FE (binary)&#39; = &#39;high_clarity&#39; ) grid1 = stability_plot(data = diamonds, lhs = &#39;price&#39;, rhs = &#39;carat&#39;, perm = perm_controls, base = base_controls, perm_fe = perm_fe_controls, nonperm_fe = nonperm_fe_controls, run_to=2) knitr::kable(grid1 %&gt;% head(10)) Diamond dimensions Depth Table width Cut FE Color FE np_fe 1 0 0 0 0 1 1 0 0 0 1 0 1 0 0 1 1 1 0 0 1 0 0 1 0 1 1 0 1 0 1 0 1 1 0 1 1 1 1 0 1 0 0 0 1 1 1 0 0 1 # Step 2: Get model expression grid2 = stability_plot(grid = grid1, data=diamonds, lhs=&#39;price&#39;, rhs=&#39;carat&#39;, perm=perm_controls, base=base_controls, run_from=2, run_to=3) knitr::kable(grid2 %&gt;% head(10)) Diamond dimensions Depth Table width np_fe expr 1 0 0 0 price~carat+x+y+z|0|0|0 1 1 0 0 price~carat+x+y+z+depth|0|0|0 1 0 1 0 price~carat+x+y+z+table|0|0|0 1 1 1 0 price~carat+x+y+z+depth+table|0|0|0 1 0 0 0 price~carat+x+y+z|0|0|0 1 1 0 0 price~carat+x+y+z+depth|0|0|0 1 0 1 0 price~carat+x+y+z+table|0|0|0 1 1 1 0 price~carat+x+y+z+depth+table|0|0|0 1 0 0 0 price~carat+x+y+z|0|0|0 1 1 0 0 price~carat+x+y+z+depth|0|0|0 # Step 3: Estimate models grid3 = stability_plot(grid = grid2, data=diamonds, lhs=&#39;price&#39;, rhs=&#39;carat&#39;, perm=perm_controls, base=base_controls, run_from=3, run_to=4) knitr::kable(grid3 %&gt;% head(10)) Diamond dimensions Depth Table width np_fe expr coef p error_high error_low 1 0 0 0 price~carat+x+y+z|0|0|0 10461.86 p&lt;0.01 11031.84 9891.876 1 1 0 0 price~carat+x+y+z+depth|0|0|0 10808.25 p&lt;0.01 11388.81 10227.683 1 0 1 0 price~carat+x+y+z+table|0|0|0 10423.42 p&lt;0.01 10992.00 9854.849 1 1 1 0 price~carat+x+y+z+depth+table|0|0|0 10851.31 p&lt;0.01 11428.58 10274.037 1 0 0 0 price~carat+x+y+z|0|0|0 10461.86 p&lt;0.01 11031.84 9891.876 1 1 0 0 price~carat+x+y+z+depth|0|0|0 10808.25 p&lt;0.01 11388.81 10227.683 1 0 1 0 price~carat+x+y+z+table|0|0|0 10423.42 p&lt;0.01 10992.00 9854.849 1 1 1 0 price~carat+x+y+z+depth+table|0|0|0 10851.31 p&lt;0.01 11428.58 10274.037 1 0 0 0 price~carat+x+y+z|0|0|0 10461.86 p&lt;0.01 11031.84 9891.876 1 1 0 0 price~carat+x+y+z+depth|0|0|0 10808.25 p&lt;0.01 11388.81 10227.683 # Step 4: Get dataframe to draw dfs = stability_plot(grid = grid3, data=diamonds, lhs=&#39;price&#39;, rhs=&#39;carat&#39;, perm=perm_controls, base=base_controls, run_from=4, run_to=5) coef_grid = dfs[[1]] control_grid = dfs[[2]] knitr::kable(coef_grid %&gt;% head(10)) Diamond dimensions Depth Table width np_fe expr coef p error_high error_low model 1 0 0 0 price~carat+x+y+z|0|0|0 10461.86 p&lt;0.01 11031.84 9891.876 1 1 1 0 0 price~carat+x+y+z+depth|0|0|0 10808.25 p&lt;0.01 11388.81 10227.683 2 1 0 1 0 price~carat+x+y+z+table|0|0|0 10423.42 p&lt;0.01 10992.00 9854.849 3 1 1 1 0 price~carat+x+y+z+depth+table|0|0|0 10851.31 p&lt;0.01 11428.58 10274.037 4 1 0 0 0 price~carat+x+y+z|0|0|0 10461.86 p&lt;0.01 11031.84 9891.876 5 1 1 0 0 price~carat+x+y+z+depth|0|0|0 10808.25 p&lt;0.01 11388.81 10227.683 6 1 0 1 0 price~carat+x+y+z+table|0|0|0 10423.42 p&lt;0.01 10992.00 9854.849 7 1 1 1 0 price~carat+x+y+z+depth+table|0|0|0 10851.31 p&lt;0.01 11428.58 10274.037 8 1 0 0 0 price~carat+x+y+z|0|0|0 10461.86 p&lt;0.01 11031.84 9891.876 9 1 1 0 0 price~carat+x+y+z+depth|0|0|0 10808.25 p&lt;0.01 11388.81 10227.683 10 # Step 5: plot the sensitivity graph panels = stability_plot(data = diamonds, lhs=&#39;price&#39;, rhs=&#39;carat&#39;, coef_grid = coef_grid, control_grid = control_grid, run_from=5, run_to=6) stability_plot(data = diamonds, lhs=&#39;price&#39;, rhs=&#39;carat&#39;, coef_panel = panels[[1]], control_panel = panels[[2]], run_from = 6, run_to = 7) In step 2, we can modify to use other function (e.g., glm) diamonds$above_med_price = as.numeric(diamonds$price &gt; median(diamonds$price)) base_controls = c(&#39;Diamond dimensions&#39; = &#39;x + y + z&#39;) perm_controls = c(&#39;Depth&#39; = &#39;depth&#39;, &#39;Table width&#39; = &#39;table&#39;, &#39;Clarity&#39; = &#39;clarity&#39;) lhs_var = &#39;above_med_price&#39; rhs_var = &#39;carat&#39; grid1 = stability_plot( data = diamonds, lhs = lhs_var, rhs = rhs_var, perm = perm_controls, base = base_controls, fe_always = F, run_to = 2 ) # Create control part of formula base_perm = c(base_controls, perm_controls) grid1$expr = apply(grid1[, 1:length(base_perm)], 1, function(x) paste(base_perm[names(base_perm)[which(x == 1)]], collapse = &#39;+&#39;)) # Complete formula with LHS and RHS variables grid1$expr = paste(lhs_var, &#39;~&#39;, rhs_var, &#39;+&#39;, grid1$expr, sep = &#39;&#39;) knitr::kable(grid1 %&gt;% head(10)) Diamond dimensions Depth Table width Clarity np_fe expr 1 0 0 0 above_med_price~carat+x + y + z 1 1 0 0 above_med_price~carat+x + y + z+depth 1 0 1 0 above_med_price~carat+x + y + z+table 1 1 1 0 above_med_price~carat+x + y + z+depth+table 1 0 0 1 above_med_price~carat+x + y + z+clarity 1 1 0 1 above_med_price~carat+x + y + z+depth+clarity 1 0 1 1 above_med_price~carat+x + y + z+table+clarity 1 1 1 1 above_med_price~carat+x + y + z+depth+table+clarity # customer function for the logit model starb_logit = function(spec, data, rhs, ...) { spec = as.formula(spec) model = glm(spec, data=data, family=&#39;binomial&#39;, weights=data$weight) %&gt;% broom::tidy() row = which(model$term==rhs) coef = model[row, &#39;estimate&#39;] %&gt;% as.numeric() se = model[row, &#39;std.error&#39;] %&gt;% as.numeric() p = model[row, &#39;p.value&#39;] %&gt;% as.numeric() return(c(coef, p, coef+1.96*se, coef-1.96*se)) } stability_plot(grid = grid1, data = diamonds, lhs = lhs_var, rhs = rhs_var, model = starb_logit, perm = perm_controls, base = base_controls, fe_always = F, run_from=3) For getting other specification (e.g., different CI) library(margins) starb_logit_enhanced = function(spec, data, rhs, ...) { # Unpack ... l = list(...) get_mfx = ifelse(is.null(l$get_mfx), F, T) # Set a default to F spec = as.formula(spec) if (get_mfx) { model = glm(spec, data=data, family=&#39;binomial&#39;, weights=data$weight) %&gt;% margins() %&gt;% summary row = which(model$factor==rhs) coef = model[row, &#39;AME&#39;] %&gt;% as.numeric() se = model[row, &#39;SE&#39;] %&gt;% as.numeric() p = model[row, &#39;p&#39;] %&gt;% as.numeric() } else { model = glm(spec, data=data, family=&#39;binomial&#39;, weights=data$weight) %&gt;% broom::tidy() row = which(model$term==rhs) coef = model[row, &#39;estimate&#39;] %&gt;% as.numeric() se = model[row, &#39;std.error&#39;] %&gt;% as.numeric() p = model[row, &#39;p.value&#39;] %&gt;% as.numeric() } z = qnorm(0.995) return(c(coef, p, coef+z*se, coef-z*se)) } stability_plot(grid = grid1, data = diamonds, lhs = lhs_var, rhs = rhs_var, model = starb_logit_enhanced, get_mfx = T, perm = perm_controls, base = base_controls, fe_always = F, run_from = 3) To get your customized plot dfs = stability_plot(grid = grid1, data = diamonds, lhs = lhs_var, rhs = rhs_var, model = starb_logit_enhanced, get_mfx = T, perm = perm_controls, base = base_controls, fe_always = F, run_from = 3, run_to = 5) coef_grid_logit = dfs[[1]] control_grid_logit = dfs[[2]] min_space = 0.5 coef_plot = ggplot2::ggplot(coef_grid_logit, aes( x = model, y = coef, shape = p, group = p )) + geom_linerange(aes(ymin = error_low, ymax = error_high), alpha = 0.75) + geom_point(size = 5, aes(col = p, fill = p), alpha = 1) + viridis::scale_color_viridis(discrete = TRUE, option = &quot;D&quot;) + scale_shape_manual(values = c(15, 17, 18, 19)) + theme_classic() + geom_hline(yintercept = 0, linetype = &#39;dotted&#39;) + ggtitle(&#39;A custom coefficient stability plot!&#39;) + labs(subtitle = &quot;Error bars represent 99% confidence intervals&quot;) + theme( axis.text.x = element_blank(), axis.title = element_blank(), axis.ticks.x = element_blank() ) + coord_cartesian(xlim = c(1 - min_space, max(coef_grid_logit$model) + min_space), ylim = c(-0.1, 1.6)) + guides(fill = F, shape = F, col = F) control_plot = ggplot(control_grid_logit) + geom_point(aes(x = model, y = y, fill=value), shape=23, size=4) + scale_fill_manual(values=c(&#39;#FFFFFF&#39;, &#39;#000000&#39;)) + guides(fill=F) + scale_y_continuous(breaks = unique(control_grid_logit$y), labels = unique(control_grid_logit$key), limits=c(min(control_grid_logit$y)-1, max(control_grid_logit$y)+1)) + scale_x_continuous(breaks=c(1:max(control_grid_logit$model))) + coord_cartesian(xlim=c(1-min_space, max(control_grid_logit$model)+min_space)) + theme_classic() + theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(), axis.title = element_blank(), axis.text.y = element_text(size=10), axis.ticks = element_blank(), axis.line = element_blank()) cowplot::plot_grid(coef_plot, control_plot, rel_heights=c(1,0.5), align=&#39;v&#39;, ncol=1, axis=&#39;b&#39;) To get different model specification (e.g., probit vs. logit) starb_probit = function(spec, data, rhs, ...) { # Unpack ... l = list(...) get_mfx = ifelse(is.null(l$get_mfx), F, T) # Set a default to F spec = as.formula(spec) if (get_mfx) { model = glm( spec, data = data, family = binomial(link = &#39;probit&#39;), weights = data$weight ) %&gt;% margins() %&gt;% summary row = which(model$factor == rhs) coef = model[row, &#39;AME&#39;] %&gt;% as.numeric() se = model[row, &#39;SE&#39;] %&gt;% as.numeric() p = model[row, &#39;p&#39;] %&gt;% as.numeric() } else { model = glm( spec, data = data, family = binomial(link = &#39;probit&#39;), weights = data$weight ) %&gt;% broom::tidy() row = which(model$term == rhs) coef = model[row, &#39;estimate&#39;] %&gt;% as.numeric() se = model[row, &#39;std.error&#39;] %&gt;% as.numeric() p = model[row, &#39;p.value&#39;] %&gt;% as.numeric() } z = qnorm(0.995) return(c(coef, p, coef + z * se, coef - z * se)) } probit_dfs = stability_plot( grid = grid1, data = diamonds, lhs = lhs_var, rhs = rhs_var, model = starb_probit, get_mfx = T, perm = perm_controls, base = base_controls, fe_always = F, run_from = 3, run_to = 5 ) # We&#39;ll put the probit DFs on the left, #so we need to adjust the model numbers accordingly # so the probit and logit DFs don&#39;t plot on top of one another! coef_grid_probit = probit_dfs[[1]] %&gt;% mutate(model = model + max(coef_grid_logit$model)) control_grid_probit = probit_dfs[[2]] %&gt;% mutate(model = model + max(control_grid_logit$model)) coef_grid = bind_rows(coef_grid_logit, coef_grid_probit) control_grid = bind_rows(control_grid_logit, control_grid_probit) panels = stability_plot( coef_grid = coef_grid, control_grid = control_grid, data = diamonds, lhs = lhs_var, rhs = rhs_var, perm = perm_controls, base = base_controls, fe_always = F, run_from = 5, run_to = 6 ) coef_plot = panels[[1]] + geom_vline(xintercept = 8.5, linetype = &#39;dashed&#39;, alpha = 0.8) + annotate( geom = &#39;label&#39;, x = 4.25, y = 1.8, label = &#39;Logit models&#39;, size = 6, fill = &#39;#D3D3D3&#39;, alpha = 0.7 ) + annotate( geom = &#39;label&#39;, x = 12.75, y = 1.8, label = &#39;Probit models&#39;, size = 6, fill = &#39;#D3D3D3&#39;, alpha = 0.7 ) + coord_cartesian(ylim = c(-0.5, 1.9)) control_plot = panels[[2]] + geom_vline(xintercept = 8.5, linetype = &#39;dashed&#39;, alpha = 0.8) cowplot::plot_grid( coef_plot, control_plot, rel_heights = c(1, 0.5), align = &#39;v&#39;, ncol = 1, axis = &#39;b&#39; ) 40.1.2 rdfanalysis Not recommend Installation devtools::install_github(&quot;joachim-gassen/rdfanalysis&quot;) Example by the package’s author library(rdfanalysis) load(url(&quot;https://joachim-gassen.github.io/data/rdf_ests.RData&quot;)) plot_rdf_spec_curve(ests, &quot;est&quot;, &quot;lb&quot;, &quot;ub&quot;) Shiny app for readers to explore design &lt;- define_design(steps = c(&quot;read_data&quot;, &quot;select_idvs&quot;, &quot;treat_extreme_obs&quot;, &quot;specify_model&quot;, &quot;est_model&quot;), rel_dir = &quot;vignettes/case_study_code&quot;) shiny_rdf_spec_curve(ests, list(&quot;est&quot;, &quot;lb&quot;, &quot;ub&quot;), design, &quot;vignettes/case_study_code&quot;, &quot;https://joachim-gassen.github.io/data/wb_new.csv&quot;) References "],["coefficient-stability.html", "40.2 Coefficient stability", " 40.2 Coefficient stability (Oster 2019) Coefficient stability can be evident against omitted variable bias. But coefficient stability alone can be misleading, but combing with \\(R^2\\) movement, it can become informative. Packages mplot: graphical Model stability and Variable Selection robomit: Robustness checks for omitted variable bias (implementation of library(robomit) # estimate beta o_beta( y = &quot;mpg&quot;, # dependent variable x = &quot;wt&quot;, # independent treatment variable con = &quot;hp + qsec&quot;, # related control variables delta = 1, # delta R2max = 0.9, # maximum R-square type = &quot;lm&quot;, # model type data = mtcars # dataset ) #&gt; # A tibble: 10 × 2 #&gt; Name Value #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 beta* -2.00 #&gt; 2 (beta*-beta controlled)^2 5.56 #&gt; 3 Alternative Solution 1 -7.01 #&gt; 4 (beta[AS1]-beta controlled)^2 7.05 #&gt; 5 Uncontrolled Coefficient -5.34 #&gt; 6 Controlled Coefficient -4.36 #&gt; 7 Uncontrolled R-square 0.753 #&gt; 8 Controlled R-square 0.835 #&gt; 9 Max R-square 0.9 #&gt; 10 delta 1 References "],["omitted-variable-bias-quantification.html", "40.3 Omitted Variable Bias Quantification", " 40.3 Omitted Variable Bias Quantification To quantify the bias needed to change the substantive conclusion from a causal inference study. library(konfound) pkonfound( est_eff = 5, std_err = 2, n_obs = 1000, n_covariates = 5 ) #&gt; Robustness of Inference to Replacement (RIR): #&gt; To invalidate an inference, 21.506 % of the estimate would have to be due to bias. #&gt; This is based on a threshold of 3.925 for statistical significance (alpha = 0.05). #&gt; #&gt; To invalidate an inference, 215 observations would have to be replaced with cases #&gt; for which the effect is 0 (RIR = 215). #&gt; #&gt; See Frank et al. (2013) for a description of the method. #&gt; #&gt; Citation: Frank, K.A., Maroulis, S., Duong, M., and Kelcey, B. (2013). #&gt; What would it take to change an inference? #&gt; Using Rubin&#39;s causal model to interpret the #&gt; robustness of causal inferences. #&gt; Education, Evaluation and #&gt; Policy Analysis, 35 437-460. pkonfound( est_eff = 5, std_err = 2, n_obs = 1000, n_covariates = 5, to_return = &quot;thresh_plot&quot; ) pkonfound( est_eff = 5, std_err = 2, n_obs = 1000, n_covariates = 5, to_return = &quot;corr_plot&quot; ) "],["replication-and-synthetic-data.html", "Chapter 41 Replication and Synthetic Data", " Chapter 41 Replication and Synthetic Data Access to comprehensive data is pivotal for replication, especially in the realm of social sciences. Yet, often the data are inaccessible, making replication a challenge (G. King 1995). This chapter dives into the nuances of replication, the exceptions to its norms, and the significance of synthetic data. References "],["the-replication-standard.html", "41.1 The Replication Standard", " 41.1 The Replication Standard Replicability in research ensures: Credibility and comprehension of empirical studies. Continuity and progression in the discipline. Enhanced readership and academic citations. For a research to be replicable, the “replication standard” is vital: it entails providing all requisite information for replication by third parties. While quantitative research can, to some extent, offer clear data, qualitative studies pose complexities due to data depth. 41.1.1 Solutions for Empirical Replication Role of Individual Authors: Authors need to vouch for the replication standard for enhancing their work’s credibility. Archives like the Inter-University Consortium for Political and Social Research (ICPSR) serve as depositories for replication datasets. Creation of a Replication Data Set: A public data set, consisting of both original and relevant complementary data, can serve replication purposes. Professional Data Archives: Organizations like ICPSR provide solutions to data storage and accessibility problems. Educational Implications: Replication can be an excellent educational tool, and many programs now emphasize its importance. 41.1.2 Free Data Repositories Zenodo: Hosted by CERN, it provides a place for researchers to deposit datasets. It’s not subject-specific, so it caters to various disciplines. figshare: Allows researchers to upload, share, and cite their datasets. Dryad: Primarily for datasets associated with published articles in the biological and medical sciences. OpenICPSR: A public-facing version of the Inter-University Consortium for Political and Social Research (ICPSR) where researchers can deposit data without any cost. Harvard Dataverse: Hosted by Harvard University, this is an open-source repository software application dedicated to archiving, sharing, and citing research data. Mendeley Data: A multidisciplinary, free-to-use open access data repository where researchers can upload and share their datasets. Open Science Framework (OSF): Offers both a platform for conducting research and a place to deposit datasets. PubMed Central: Specific to life sciences, but it’s an open repository for journal articles, preprints, and datasets. Registry of Research Data Repositories (re3data): While not a repository itself, it provides a global registry of research data repositories from various academic disciplines. SocArXiv: An open archive for the social sciences. EarthArXiv: A preprints archive for earth science. Protein Data Bank (PDB): For 3D structures of large biological molecules. Gene Expression Omnibus (GEO): A public functional genomics data repository. The Language Archive (TLA): Dedicated to data on languages worldwide, especially endangered languages. B2SHARE: A platform for storing and sharing research data sets in various disciplines, especially from European research projects. 41.1.3 Exceptions to Replication Some exceptions to the replication standard are: Confidentiality: Sometimes data, even fragmented, is too sensitive to share. Proprietary Data: Data sets owned by entities might restrict dissemination, but usually, parts of such data can still be shared. Rights of First Publication: Embargos might be set, but the essential data used in a study should be accessible. "],["synthetic-data-an-overview.html", "41.2 Synthetic Data: An Overview", " 41.2 Synthetic Data: An Overview Synthetic data, modeling real data while ensuring anonymity, is becoming pivotal in research. While promising, it has its own complexities and should be approached with caution. 41.2.1 Benefits Privacy preservation. Data fairness and augmentation. Acceleration in research. 41.2.2 Concerns Misconceptions about inherent privacy. Challenges with data outliers. Models relying solely on synthetic data can pose risks. 41.2.3 Further Insights on Synthetic Data Synthetic data bridges the model-centric and data-centric perspectives, making it an essential tool in modern research. Analogously, it’s like viewing the Mona Lisa’s replica, with the real painting stored securely. Future projects, such as utilizing the R’s diamonds dataset for synthetic data generation, hold promise in demonstrating the vast potentials of this technology. For a deeper dive into synthetic data and its applications, refer to (Jordon et al. 2022). References "],["application-14.html", "41.3 Application", " 41.3 Application The easiest way to create synthetic data is to use the synthpop package. Alternatively, you can do it manually library(synthpop) library(tidyverse) library(performance) # library(effectsize) # library(see) # library(patchwork) # library(knitr) # library(kableExtra) head(iris) #&gt; Sepal.Length Sepal.Width Petal.Length Petal.Width Species #&gt; 1 5.1 3.5 1.4 0.2 setosa #&gt; 2 4.9 3.0 1.4 0.2 setosa #&gt; 3 4.7 3.2 1.3 0.2 setosa #&gt; 4 4.6 3.1 1.5 0.2 setosa #&gt; 5 5.0 3.6 1.4 0.2 setosa #&gt; 6 5.4 3.9 1.7 0.4 setosa synthpop::codebook.syn(iris) #&gt; $tab #&gt; variable class nmiss perctmiss ndistinct #&gt; 1 Sepal.Length numeric 0 0 35 #&gt; 2 Sepal.Width numeric 0 0 23 #&gt; 3 Petal.Length numeric 0 0 43 #&gt; 4 Petal.Width numeric 0 0 22 #&gt; 5 Species factor 0 0 3 #&gt; details #&gt; 1 Range: 4.3 - 7.9 #&gt; 2 Range: 2 - 4.4 #&gt; 3 Range: 1 - 6.9 #&gt; 4 Range: 0.1 - 2.5 #&gt; 5 &#39;setosa&#39; &#39;versicolor&#39; &#39;virginica&#39; #&gt; #&gt; $labs #&gt; NULL syn_df &lt;- syn(iris, seed = 3) #&gt; #&gt; Synthesis #&gt; ----------- #&gt; Sepal.Length Sepal.Width Petal.Length Petal.Width Species # check for replciated uniques replicated.uniques(syn_df, iris) #&gt; $replications #&gt; [1] TRUE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE TRUE FALSE FALSE #&gt; [13] TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE #&gt; [25] FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #&gt; [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #&gt; [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #&gt; [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE TRUE #&gt; [73] FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE #&gt; [85] FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE TRUE #&gt; [97] FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE TRUE FALSE FALSE #&gt; [109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #&gt; [121] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE #&gt; [133] FALSE TRUE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #&gt; [145] FALSE FALSE FALSE FALSE FALSE FALSE #&gt; #&gt; $no.uniques #&gt; [1] 148 #&gt; #&gt; $no.replications #&gt; [1] 17 #&gt; #&gt; $per.replications #&gt; [1] 11.33333 # remove replicated uniques and adds a FAKE_DATA label # (in case a person can see his or own data in # the replicated data by chance) syn_df_sdc &lt;- sdc(syn_df, iris, label = &quot;FAKE_DATA&quot;, rm.replicated.uniques = T) #&gt; no. of replicated uniques: 17 iris |&gt; GGally::ggpairs() syn_df$syn |&gt; GGally::ggpairs() lm_ori &lt;- lm(Sepal.Length ~ Sepal.Width + Petal.Length , data = iris) # performance::check_model(lm_ori) summary(lm_ori) #&gt; #&gt; Call: #&gt; lm(formula = Sepal.Length ~ Sepal.Width + Petal.Length, data = iris) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -0.96159 -0.23489 0.00077 0.21453 0.78557 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 2.24914 0.24797 9.07 7.04e-16 *** #&gt; Sepal.Width 0.59552 0.06933 8.59 1.16e-14 *** #&gt; Petal.Length 0.47192 0.01712 27.57 &lt; 2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 0.3333 on 147 degrees of freedom #&gt; Multiple R-squared: 0.8402, Adjusted R-squared: 0.838 #&gt; F-statistic: 386.4 on 2 and 147 DF, p-value: &lt; 2.2e-16 lm_syn &lt;- lm(Sepal.Length ~ Sepal.Width + Petal.Length , data = syn_df$syn) # performance::check_model(lm_syn) summary(lm_syn) #&gt; #&gt; Call: #&gt; lm(formula = Sepal.Length ~ Sepal.Width + Petal.Length, data = syn_df$syn) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -0.79165 -0.22790 -0.01448 0.15893 1.13360 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 2.96449 0.24538 12.081 &lt; 2e-16 *** #&gt; Sepal.Width 0.39214 0.06816 5.754 4.9e-08 *** #&gt; Petal.Length 0.45267 0.01743 25.974 &lt; 2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 0.3658 on 147 degrees of freedom #&gt; Multiple R-squared: 0.8246, Adjusted R-squared: 0.8222 #&gt; F-statistic: 345.6 on 2 and 147 DF, p-value: &lt; 2.2e-16 Open data can be assessed for its utility in two distinct ways: General Utility: This refers to the broad resemblances within the dataset, allowing for preliminary data exploration. Specific Utility: This focuses on the comparability of models derived from synthetic and original datasets, emphasizing analytical reproducibility. For General utility compare(syn_df, iris) Specific utility # just like regular lm, but for synthetic data lm_syn &lt;- lm.synds(Sepal.Length ~ Sepal.Width + Petal.Length , data = syn_df) compare(lm_syn, iris) #&gt; #&gt; Call used to fit models to the data: #&gt; lm.synds(formula = Sepal.Length ~ Sepal.Width + Petal.Length, #&gt; data = syn_df) #&gt; #&gt; Differences between results based on synthetic and observed data: #&gt; Synthetic Observed Diff Std. coef diff CI overlap #&gt; (Intercept) 2.9644900 2.2491402 0.71534988 2.884829 0.2640608 #&gt; Sepal.Width 0.3921429 0.5955247 -0.20338187 -2.933611 0.2516161 #&gt; Petal.Length 0.4526695 0.4719200 -0.01925058 -1.124602 0.7131064 #&gt; #&gt; Measures for one synthesis and 3 coefficients #&gt; Mean confidence interval overlap: 0.4095944 #&gt; Mean absolute std. coef diff: 2.314347 #&gt; #&gt; Mahalanobis distance ratio for lack-of-fit (target 1.0): 3.08 #&gt; Lack-of-fit test: 9.23442; p-value 0.0263 for test that synthesis model is #&gt; compatible with a chi-squared test with 3 degrees of freedom. #&gt; #&gt; Confidence interval plot: # summary(lm_syn) You basically want your lack-of-fit test to be non-significant. "],["appendix.html", "A Appendix ", " A Appendix "],["git.html", "A.1 Git", " A.1 Git Cheat Sheet Cheat Sheet in different languages Learn Git Interactive Cheat Sheet Ultimate Guide of Git and GitHub for R user Setting up Git: git config with --global option to configure user name, email, editor, etc. Creating a repository: git init to initialize a repo. Git stores all of its repo data in the .git directory. Tracking changes: git status shows the status of the repo File are stored in the project’s working directory (which users see) The staging area (where the next commit is being built) local repo is where commits are permanently recorded git add put files in the staging area git commit saves the staged content as a new commit in the local repo. git commit -m \"your own message\" to give a messages for the purpose of your commit. History git diff shows differences between commits git checkout recovers old version of fields git checkout HEAD to go to the last commit git checkout &lt;unique ID of your commit&gt; to go to such commit Ignoring .gitignore file tells Git what files to ignore cat . gitignore *.dat results/ ignore files ending with “dat” and folder “results”. Remotes in GitHub A local git repo can be connected to one or more remote repos. Use the HTTPS protocol to connect to remote repos git push copies changes from a local repo to a remote repo git pull copies changes from a remote repo to a local repo Collaborating git clone copies remote repo to create a local repo with a remote called origin automatically set up Branching git check - b &lt;new-branch-name git checkout master to switch to master branch. Conflicts occur when 2 or more people change the same lines of the same file the version control system does not allow to overwrite each other’s changes blindly, but highlights conflicts so that they can be resolved. Licensing People who incorporate General Public License (GPL’d) software into their won software must make their software also open under the GPL license; most other open licenses do not require this. The Creative Commons family of licenses allow people to mix and match requirements and restrictions on attribution, creation of derivative works, further sharing and commercialization. Citation: Add a CITATION file to a repo to explain how you want others to cite your work. Hosting Rules regarding intellectual property and storage of sensitive info apply no matter where code and data are hosted. "],["short-cut.html", "A.2 Short-cut", " A.2 Short-cut These are shortcuts that you probably you remember when working with R. Even though it might take a bit of time to learn and use them as your second nature, but they will save you a lot of time. Just like learning another language, the more you speak and practice it, the more comfortable you are speaking it. function short-cut navigate folders in console \" \" + tab pull up short-cut cheat sheet ctrl + shift + k go to file/function (everything in your project) ctrl + . search everything cmd + shift + f navigate between tabs Crtl + shift + . type function faster snip + shift + tab type faster use tab for fuzzy match cmd + up ctrl + . Sometimes you can’t stage a folder because it’s too large. In such case, use Terminal pane in Rstudio then type git add -A to stage all changes then commit and push like usual. "],["function-short-cut.html", "A.3 Function short-cut", " A.3 Function short-cut apply one function to your data to create a new variable: mutate(mod=map(data,function)) instead of using i in 1:length(object): for (i in seq_along(object)) apply multiple function: map_dbl apply multiple function to multiple variables:map2 autoplot(data) plot times series data mod_tidy = linear(reg) %&gt;% set_engine('lm') %&gt;% fit(price ~ ., data=data) fit lm model. It could also fit other models (stan, spark, glmnet, keras) Sometimes, data-masking will not be able to recognize whether you’re calling from environment or data variables. To bypass this, we use .data$variable or .env$variable. For example data %&gt;% mutate(x=.env$variable/.data$variable Problems with data-masking: Unexpected masking by data-var: Use .data and .env to disambiguate Data-var cant get through: Tunnel data-var with {{}} + Subset .data with [[]] Passing Data-variables through arguments library(&quot;dplyr&quot;) mean_by &lt;- function(data,by,var){ data %&gt;% group_by({{{by}}}) %&gt;% summarise(&quot;{{var}}&quot;:=mean({{var}})) # new name for each var will be created by tunnel data-var inside strings } mean_by &lt;- function(data,by,var){ data %&gt;% group_by({{{by}}}) %&gt;% summarise(&quot;{var}&quot;:=mean({{var}})) # use single {} to glue the string, but hard to reuse code in functions } Trouble with selection: library(&quot;purrr&quot;) name &lt;- c(&quot;mass&quot;,&quot;height&quot;) starwars %&gt;% select(name) # Data-var. Here you are referring to variable named &quot;name&quot; starwars %&gt;% select(all_of((name))) # use all_of() to disambiguate when averages &lt;- function(data,vars){ # take character vectors with all_of() data %&gt;% select(all_of(vars)) %&gt;% map_dbl(mean,na.rm=TRUE) } x = c(&quot;Sepal.Length&quot;,&quot;Petal.Length&quot;) iris %&gt;% averages(x) # Another way averages &lt;- function(data,vars){ # Tunnel selectiosn with {{}} data %&gt;% select({{vars}}) %&gt;% map_dbl(mean,na.rm=TRUE) } x = c(&quot;Sepal.Length&quot;,&quot;Petal.Length&quot;) iris %&gt;% averages(x) "],["citation.html", "A.4 Citation", " A.4 Citation include a citation by [@Farjam_2015] cite packages used in this session package=ls(sessionInfo()$loadedOnly) for (i in package){print(toBibtex(citation(i)))} package=ls(sessionInfo()$loadedOnly) for (i in package){ print(toBibtex(citation(i))) } "],["install-all-necessary-packageslibaries-on-your-local-machine.html", "A.5 Install all necessary packages/libaries on your local machine", " A.5 Install all necessary packages/libaries on your local machine Get a list of packages you need to install from this book (or your local device) installed &lt;- as.data.frame(installed.packages()) head(installed) #&gt; Package LibPath Version Priority #&gt; abind abind C:/Program Files/R/R-4.2.3/library 1.4-5 &lt;NA&gt; #&gt; ade4 ade4 C:/Program Files/R/R-4.2.3/library 1.7-22 &lt;NA&gt; #&gt; admisc admisc C:/Program Files/R/R-4.2.3/library 0.33 &lt;NA&gt; #&gt; AER AER C:/Program Files/R/R-4.2.3/library 1.2-10 &lt;NA&gt; #&gt; afex afex C:/Program Files/R/R-4.2.3/library 1.3-0 &lt;NA&gt; #&gt; agridat agridat C:/Program Files/R/R-4.2.3/library 1.21 &lt;NA&gt; #&gt; Depends #&gt; abind R (&gt;= 1.5.0) #&gt; ade4 R (&gt;= 2.10) #&gt; admisc R (&gt;= 3.5.0) #&gt; AER R (&gt;= 3.0.0), car (&gt;= 2.0-19), lmtest, sandwich (&gt;= 2.4-0),\\nsurvival (&gt;= 2.37-5), zoo #&gt; afex R (&gt;= 3.5.0), lme4 (&gt;= 1.1-8) #&gt; agridat &lt;NA&gt; #&gt; Imports #&gt; abind methods, utils #&gt; ade4 graphics, grDevices, methods, stats, utils, MASS, pixmap, sp,\\nRcpp #&gt; admisc methods #&gt; AER stats, Formula (&gt;= 0.2-0) #&gt; afex pbkrtest (&gt;= 0.4-1), lmerTest (&gt;= 3.0-0), car, reshape2,\\nstats, methods, utils #&gt; agridat &lt;NA&gt; #&gt; LinkingTo #&gt; abind &lt;NA&gt; #&gt; ade4 Rcpp, RcppArmadillo #&gt; admisc &lt;NA&gt; #&gt; AER &lt;NA&gt; #&gt; afex &lt;NA&gt; #&gt; agridat &lt;NA&gt; #&gt; Suggests #&gt; abind &lt;NA&gt; #&gt; ade4 ade4TkGUI, adegraphics, adephylo, ape, CircStats, deldir,\\nlattice, spdep, splancs, waveslim, progress, foreach, parallel,\\ndoParallel, iterators #&gt; admisc QCA (&gt;= 3.7) #&gt; AER boot, dynlm, effects, fGarch, forecast, foreign, ineq,\\nKernSmooth, lattice, longmemo, MASS, mlogit, nlme, nnet, np,\\nplm, pscl, quantreg, rgl, ROCR, rugarch, sampleSelection,\\nscatterplot3d, strucchange, systemfit (&gt;= 1.1-20), truncreg,\\ntseries, urca, vars #&gt; afex emmeans (&gt;= 1.4), coin, xtable, parallel, plyr, optimx,\\nnloptr, knitr, rmarkdown, R.rsp, lattice, latticeExtra,\\nmultcomp, testthat, mlmRev, dplyr, tidyr, dfoptim, Matrix,\\npsychTools, ggplot2, MEMSS, effects, carData, ggbeeswarm, nlme,\\ncowplot, jtools, ggpubr, ggpol, MASS, glmmTMB, brms, rstanarm,\\nstatmod, performance (&gt;= 0.7.2), see (&gt;= 0.6.4), ez,\\nggResidpanel, grid, vdiffr #&gt; agridat AER, agricolae, betareg, broom, car, coin, corrgram, desplot,\\ndplyr, effects, equivalence, emmeans, FrF2, gam, gge, ggplot2,\\ngnm, gstat, HH, knitr, lattice, latticeExtra, lme4, lucid,\\nmapproj, maps, MASS, MCMCglmm, metafor, mgcv, NADA, nlme,\\nnullabor, ordinal, pbkrtest, pls, pscl, reshape2, rgdal,\\nrmarkdown, qicharts, qtl, sp, SpATS, survival, vcd, testthat #&gt; Enhances License License_is_FOSS License_restricts_use OS_type #&gt; abind &lt;NA&gt; LGPL (&gt;= 2) &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; #&gt; ade4 &lt;NA&gt; GPL (&gt;= 2) &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; #&gt; admisc &lt;NA&gt; GPL (&gt;= 3) &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; #&gt; AER &lt;NA&gt; GPL-2 | GPL-3 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; #&gt; afex &lt;NA&gt; GPL (&gt;= 2) &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; #&gt; agridat &lt;NA&gt; CC BY-SA 4.0 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; #&gt; MD5sum NeedsCompilation Built #&gt; abind &lt;NA&gt; no 4.2.0 #&gt; ade4 &lt;NA&gt; yes 4.2.3 #&gt; admisc &lt;NA&gt; yes 4.2.3 #&gt; AER &lt;NA&gt; no 4.2.3 #&gt; afex &lt;NA&gt; no 4.2.3 #&gt; agridat &lt;NA&gt; no 4.2.3 write.csv(installed, file.path(getwd(),&#39;installed.csv&#39;)) After having the installed.csv file on your new or local machine, you can just install the list of packages # import the list of packages installed &lt;- read.csv(&#39;installed.csv&#39;) # get the list of packages that you have on your device baseR &lt;- as.data.frame(installed.packages()) # install only those that you don&#39;t have install.packages(setdiff(installed, baseR)) "],["bookdown-cheat-sheet.html", "B Bookdown cheat sheet", " B Bookdown cheat sheet # to see non-scientific notation a result format(12e-17, scientific = FALSE) #&gt; [1] &quot;0.00000000000000012&quot; "],["operation.html", "B.1 Operation", " B.1 Operation R commands to do derivatives of a defined function Taking derivatives in R involves using the expression, D, and eval functions. You wrap the function you want to take the derivative of in expression(), then use D, then eval as follows. simple example #define a function f=expression(sqrt(x)) #take the first derivative df.dx=D(f,&#39;x&#39;) df.dx #&gt; 0.5 * x^-0.5 #take the second derivative d2f.dx2=D(D(f,&#39;x&#39;),&#39;x&#39;) d2f.dx2 #&gt; 0.5 * (-0.5 * x^-1.5) Evaluate The first argument passed to eval is the expression you want to evaluate the second is a list containing the values of all quantities that are not defined elsewhere. #evaluate the function at a given x eval(f,list(x=3)) #&gt; [1] 1.732051 #evaluate the first derivative at a given x eval(df.dx,list(x=3)) #&gt; [1] 0.2886751 #evaluate the second derivative at a given x eval(d2f.dx2,list(x=3)) #&gt; [1] -0.04811252 "],["math-expression-syntax.html", "B.2 Math Expression/ Syntax", " B.2 Math Expression/ Syntax Full list Aligning equations \\begin{aligned} a &amp; = b \\\\ X &amp;\\sim {Norm}(10, 3) \\\\ 5 &amp; \\le 10 \\end{aligned} \\[ \\begin{aligned} a &amp; = b \\\\ X &amp;\\sim {Norm}(10, 3) \\\\ 5 &amp; \\le 10 \\end{aligned} \\] Cross-reference equation \\begin{equation} a = b (\\#eq:test) \\end{equation} \\[\\begin{equation} a = b \\tag{B.1} \\end{equation}\\] to refer in a sentence (B.1) (\\@ref(eq:test)) Math Syntax Notation $\\pm$ \\(\\pm\\) $\\ge$ \\(\\ge\\) $\\le$ \\(\\le\\) $\\neq$ \\(\\neq\\) $\\equiv$ \\(\\equiv\\) $^\\circ$ \\(^\\circ\\) $\\times$ \\(\\times\\) $\\cdot$ \\(\\cdot\\) $\\leq$ \\(\\leq\\) $\\geq$ \\(\\geq\\) \\propto \\(\\propto\\) $\\subset$ \\(\\subset\\) $\\subseteq$ \\(\\subseteq\\) $\\leftarrow$ \\(\\leftarrow\\) $\\rightarrow$ \\(\\rightarrow\\) $\\Leftarrow$ \\(\\Leftarrow\\) $\\Rightarrow$ \\(\\Rightarrow\\) $\\approx$ \\(\\approx\\) $\\mathbb{R}$ \\(\\mathbb{R}\\) $\\sum_{n=1}^{10} n^2$ \\(\\sum_{n=1}^{10} n^2\\) $$\\sum_{n=1}^{10} n^2$$ \\[\\sum_{n=1}^{10} n^2\\] $x^{n}$ \\(x^{n}\\) $x_{n}$ \\(x_{n}\\) $\\overline{x}$ \\(\\overline{x}\\) $\\hat{x}$ \\(\\hat{x}\\) $\\tilde{x}$ \\(\\tilde{x}\\) \\check{} \\(\\check{}\\) \\underset{\\gamma}{\\operatorname{argmin}} \\(\\underset{\\gamma}{\\operatorname{argmin}}\\) $\\frac{a}{b}$ \\(\\frac{a}{b}\\) $\\frac{a}{b}$ \\(\\frac{a}{b}\\) $\\displaystyle \\frac{a}{b}$ \\(\\displaystyle \\frac{a}{b}\\) $\\binom{n}{k}$ \\(\\binom{n}{k}\\) $x_{1} + x_{2} + \\cdots + x_{n}$ \\(x_{1} + x_{2} + \\cdots + x_{n}\\) $x_{1}, x_{2}, \\dots, x_{n}$ \\(x_{1}, x_{2}, \\dots, x_{n}\\) \\mathbf{x} = \\langle x_{1}, x_{2}, \\dots, x_{n}\\rangle$ \\(\\mathbf{x} = \\langle x_{1}, x_{2}, \\dots, x_{n}\\rangle\\) $x \\in A$ \\(x \\in A\\) $|A|$ \\(|A|\\) $x \\in A$ \\(x \\in A\\) $x \\subset B$ \\(x \\subset B\\) $x \\subseteq B$ \\(x \\subseteq B\\) $A \\cup B$ \\(A \\cup B\\) $A \\cap B$ \\(A \\cap B\\) $X \\sim Binom(n, \\pi)$ \\(X \\sim Binom(n, \\pi)\\) $\\mathrm{P}(X \\le x) = \\text{pbinom}(x, n, \\pi)$ \\(\\mathrm{P}(X \\le x) = \\text{pbinom}(x, n, \\pi)\\) $P(A \\mid B)$ \\(P(A \\mid B)\\) $\\mathrm{P}(A \\mid B)$ \\(\\mathrm{P}(A \\mid B)\\) $\\{1, 2, 3\\}$ \\(\\{1, 2, 3\\}\\) $\\sin(x)$ \\(\\sin(x)\\) $\\log(x)$ \\(\\log(x)\\) $\\int_{a}^{b}$ \\(\\int_{a}^{b}\\) $\\left(\\int_{a}^{b} f(x) \\; dx\\right)$ \\(\\left(\\int_{a}^{b} f(x) \\; dx\\right)\\) $\\left[\\int_{\\-infty}^{\\infty} f(x) \\; dx\\right]$ \\(\\left[\\int_{-\\infty}^{\\infty} f(x) \\; dx\\right]\\) $\\left. F(x) \\right|_{a}^{b}$ \\(\\left. F(x) \\right|_{a}^{b}\\) $\\sum_{x = a}^{b} f(x)$ \\(\\sum_{x = a}^{b} f(x)\\) $\\prod_{x = a}^{b} f(x)$ \\(\\prod_{x = a}^{b} f(x)\\) $\\lim_{x \\to \\infty} f(x)$ \\(\\lim_{x \\to \\infty} f(x)\\) $\\displaystyle \\lim_{x \\to \\infty} f(x)$ \\(\\displaystyle \\lim_{x \\to \\infty} f(x)\\) Greek Letters $\\alpha A$ \\(\\alpha A\\) $\\beta B$ \\(\\beta B\\) $\\gamma \\Gamma$ \\(\\gamma \\Gamma\\) $\\delta \\Delta$ \\(\\delta \\Delta\\) $\\epsilon \\varepsilon E$ \\(\\epsilon \\varepsilon E\\) $\\zeta Z \\sigma $ \\(\\zeta Z \\sigma\\) $\\eta H$ \\(\\eta H\\) $\\theta \\vartheta \\Theta$ \\(\\theta \\vartheta \\Theta\\) $\\iota I$ \\(\\iota I\\) $\\kappa K$ \\(\\kappa K\\) $\\lambda \\Lambda$ \\(\\lambda \\Lambda\\) $\\mu M$ \\(\\mu M\\) $\\nu N$ \\(\\nu N\\) $\\xi\\Xi$ \\(\\xi\\Xi\\) $o O$ \\(o O\\) $\\pi \\Pi$ \\(\\pi \\Pi\\) $\\rho\\varrho P$ \\(\\rho\\varrho P\\) $\\sigma \\Sigma$ \\(\\sigma \\Sigma\\) $\\tau T$ \\(\\tau T\\) $\\upsilon \\Upsilon$ \\(\\upsilon \\Upsilon\\) $\\phi \\varphi \\Phi$ \\(\\phi \\varphi \\Phi\\) $\\chi X$ \\(\\chi X\\) $\\psi \\Psi$ \\(\\psi \\Psi\\) $\\omega \\Omega$ \\(\\omega \\Omega\\) $\\cdot$ \\(\\cdot\\) $\\cdots$ \\(\\cdots\\) $\\ddots$ \\(\\ddots\\) $\\ldots$ \\(\\ldots\\) Limit P(\\lim_{n\\to \\infty}\\bar{X}_n =\\mu) =1 \\[ P(\\lim_{n\\to \\infty}\\bar{X}_n =\\mu) =1 \\] Matrices $$\\begin{array} {rrr} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{array} $$ \\[ \\begin{array} {rrr} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{array} \\] $$\\mathbf{X} = \\left[\\begin{array} {rrr} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{array}\\right] $$ \\[ \\mathbf{X} = \\left[\\begin{array} {rrr} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{array}\\right] \\] Aligning Equations Aligning Equations with Comments \\begin{aligned} 3+x &amp;=4 &amp;&amp; \\text{(Solve for} x \\text{.)}\\\\ x &amp;=4-3 &amp;&amp; \\text{(Subtract 3 from both sides.)}\\\\ x &amp;=1 &amp;&amp; \\text{(Yielding the solution.)} \\end{aligned} \\[ \\begin{aligned} 3+x &amp;=4 &amp; &amp;\\text{(Solve for} x \\text{.)} \\\\ x &amp;=4-3 &amp;&amp; \\text{(Subtract 3 from both sides.)} \\\\ x &amp;=1 &amp;&amp; \\text{(Yielding the solution.)} \\end{aligned} \\] B.2.1 Statistics Notation $$ f(y|N,p) = \\frac{N!}{y!(N-y)!}\\cdot p^y \\cdot (1-p)^{N-y} = {{N}\\choose{y}} \\cdot p^y \\cdot (1-p)^{N-y} $$ \\[ f(y|N,p) = \\frac{N!}{y!(N-y)!}\\cdot p^y \\cdot (1-p)^{N-y} = {{N}\\choose{y}} \\cdot p^y \\cdot (1-p)^{N-y} \\] \\begin{cases} \\frac{1}{b-a}&amp;\\text{for $x\\in[a,b]$}\\\\ 0&amp;\\text{otherwise}\\\\ \\end{cases} \\[ \\begin{cases} \\frac{1}{b-a} &amp; \\text{for } x\\in[a,b]\\\\ 0 &amp; \\text{otherwise}\\\\ \\end{cases} \\] "],["table.html", "B.3 Table", " B.3 Table +---------------+---------------+--------------------+ | Fruit | Price | Advantages | +===============+===============+====================+ | *Bananas* | $1.34 | - built-in wrapper | | | | - bright color | +---------------+---------------+--------------------+ | Oranges | $2.10 | - cures scurvy | | | | - **tasty** | +---------------+---------------+--------------------+ Fruit Price Advantages Bananas $1.34 built-in wrapper bright color Oranges $2.10 cures scurvy tasty (\\mathbf{x}^T\\mathbf{x})^{-1}\\mathbf{x}^T\\mathbf{y} \\((\\mathbf{x}^T\\mathbf{x})^{-1}\\mathbf{x}^T\\mathbf{y}\\) "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
